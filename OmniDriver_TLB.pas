unit OmniDriver_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 17244 $
// File generated on 2011/12/7 19:19:34 from Type Library described below.

// ************************************************************************  //
// Type Lib: E:\OmniDriver\OOI_HOME\OmniDriver32.dll (1)
// LIBID: {B6B8DBD9-0FD6-4F2E-B29B-003800B5F0D1}
// LCID: 0
// Helpfile: 
// HelpString: OmniDriver 2.0 Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\system32\stdole2.tlb)
// Errors:
//   Hint: Member 'set' of 'ICoBitSet' changed to 'set_'
//   Error creating palette bitmap of (TCCoSpectrometerInfo) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoCoefficients) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrum) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrometerChannelInfo) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrometerChannel) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrometerChannelCollection) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoBench) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoDetector) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoConfiguration) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrometer) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoADC1000Channel) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSBEndpointDescriptor) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoGUIProviderCollection) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoErrorCode) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoOmniDriverDispatchListener) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoAcquisitionPropertiesListener) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrometerStatus) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMultiChannelListener) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoExternalTriggerMode) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoExternalTriggerModeCollection) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoCoefficientsCollection) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoAcquisitionListener) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoADC1000USB) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoADC1000USBTest) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoAdvancedIntegrationClock) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSBInterface) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoAdvancedIntegrationClockImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoAdvancedVersion) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoAdvancedVersionImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoAdvancedVersionImpl_NIR) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoAnalogIn) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoAnalogInGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoAnalogInImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoAnalogOut) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoAnalogOutGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoAnalogOutImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoAnalogOutImpl_ADC1000) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoAnalogOutImpl_PSOC) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoAutonullingConfiguration) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoAutonulling) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoAutonullingGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoAutonullingImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoBadPixelRemoval) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoBadPixelRemovalGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoBadPixelRemovalImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoBaseSpecFunctionality) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoBitSet) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoBoardTemperature) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoBoardTemperatureGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoBoardTemperatureImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoBoardTemperatureImpl_QE65000) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoCCDShutter) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoCCDShutterGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoLaser) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMMSRamanSpectrometer) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoCCDShutterImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoCCDTemperature) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoCCDTemperatureGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoCCDTemperatureImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMMSRamanCalibration) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoCalibration) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoCalibrationGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoCalibrationImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoIterator) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoCollection) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoConfigureFromFile) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoContinuousStrobe) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoContinuousStrobeGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoContinuousStrobeImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoContinuousStrobeImpl_ADC1000) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoContinuousStrobeImpl_FPGA) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoCurrentOut) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoCurrentOutGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoCurrentOutImpl_LS450) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoDeepWellErrorProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoDeepWellErrorProviderImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoEndpointToPipeMapping) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoEnumeration) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoErrorProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSBSpectrometerCollection) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSBSpectrometer) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoExposureImage) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoExposureImageGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoExposureImageImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrometerExposure) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoExposureListener) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoIntegrationTimeChangeListener) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoExposureImageable) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoExternalTemperature) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoExternalTemperatureGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoLS450Coefficients) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoLS450_Functions) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoExternalTemperatureImpl_LS450) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoExternalTemperatureImpl_LS450_2000) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoExternalTemperatureImpl_LS450_4000) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoExternalTriggerDelay) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoExternalTriggerDelayGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoExternalTriggerDelayImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoFPGA) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoFPGAImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoFPGARegisters) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoFeatureEvent) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoFeatureListener) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoFeature) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoFeatureProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrometerReconstruction) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoLaserCollection) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMMSRaman) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoFirmware) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoFirmwareGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoFirmwareImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoGateDelayListener) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoFlGated) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoFlGatedGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrometerPlugIn) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrometerPlugInCollection) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSB2000) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoFlGatedImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoGPIO) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoGPIOGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoGPIOImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoGatingErrorProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoGatingErrorProviderImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoHR2000) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoHR2000Plus) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoHR2000PlusStatus) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSBFeature) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSHACoefficients) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSHAChannel) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoHR4000) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoHR4000Status) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoHardwareTrigger) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoHardwareTriggerGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoHighGainMode) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoHighGainModeGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoHighGainModeImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoHighResTimeStamp) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoHighResTiming) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoI2CBus) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoI2CBusGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoI2CBusImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoI2CBusImplFPGA) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoI2CBusImplNonFPGA) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoI2CBusImpl_SHA) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoIrradianceCalibrationFactor) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoIrradianceCalibrationFactorGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoIrradianceCalibrationFactorImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoIrradianceCalibrationFactorImplFPGA) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoIrradianceCalibrationFactorImplNonFPGA) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoJSocket) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoJazNetwork) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoJazStatus) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoJazUSB) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoLS450_FunctionsGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoLS450_FunctionsImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoLS450_FunctionsImpl_2000) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoLS450_FunctionsImpl_4000) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoLaserGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoLaserProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoLaserProviderImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoListIterator) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoList) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMMSRamanChannel) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMMSRamanConstants) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMasterClockDivisor) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMasterClockDivisorImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMasterClockDivisorListener) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMasterClockRate) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMasterClockRateImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMasterClockRateImpl_2000) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMasterClockRateImpl_ADC) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMasterClockRateImpl_MMSRaman) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMaya2000) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMayaPro2000) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMethodDescriptorCollection) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMultiChannelGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMultiChannelImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMultiChannelImpl_JazNetwork) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMultiChannelImpl_JazUSB) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoMultiChannelProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoNIR) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoNIR256) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoNIR512) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoNIRStatus) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoNetworkSource) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoNetworkSourceGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoNetworkSpectrometer) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoNetworkSourceImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoNodeGraphCertificate) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoNonlinearityCorrectionGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoNonlinearityCorrectionImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoNonlinearityCorrectionProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoVector) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrumCertificate) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoOmniSpectrum) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoOpCodes) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoPlugInProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoPlugInProviderImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoPlugInProviderImplFPGA) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoPlugInProviderImplNonFPGA) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoPollingTest) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoQE65000) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoRamanExposure) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoRamanReconstruction) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoRawData) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSAS) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSASChannel) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSHA) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSHAConstants) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSHAGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSHAImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSPIBus) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSPIBusGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSPIBusImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSPIBusImplFPGA) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSPIBusImplNonFPGA) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoShutterClock) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoShutterClockImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSimulation) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSimulationChannel) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSimulationGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSimulationImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSimulationProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSingleStrobe) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSingleStrobeGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSingleStrobeImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrumListener) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrumProducer) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrumHandler) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectralProcessor) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrometerAssembly) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrometerCollection) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrometerFactory) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrometerPlugInInfo) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrumConsumer) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSpectrumProducerBase) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoStatus) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoStatusGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoStatusImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoStatusProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoStopSpectrum) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoStopSpectrumGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoStopSpectrumImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoStrayLightCorrection) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoStrayLightCorrectionGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoStrayLightCorrectionImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoStringCollection) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoSupportStatus) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoThermoElectric) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoThermoElectricGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoThermoElectricImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoThermoElectricImpl_NIR) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoThermoElectricImpl_QE65000) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoThermoElectricShowFanControl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSB2000Plus) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSB2000PlusStatus) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSB325) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSB4000) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSB4000Status) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSB650) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSBCommonDescriptor) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSBConfigurationDescriptor) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSBConstants) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSBDeviceDescriptor) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSBEndpointDevice) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSBImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSBInterfaceDescriptor) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSBLogicalPortStatus) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSBProductInfo) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSBStringDescriptor) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSB_ISS) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSB_ISS_UV) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUSB_LS450) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUV_VIS_LightSource) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUV_VIS_LightSourceGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUV_VIS_LightSourceImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUV_VIS_LightSourceImpl_2000) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUV_VIS_LightSourceImpl_4000) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUV_VIS_LightSourceJAZCompatible) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUV_VIS_LightSourceImpl_JAZ) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUniUSB) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoUniUSBPipeManager) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoVersion) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoVersionGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoVersionImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoWavelengthCalibrationGUIProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoWavelengthCalibrationImpl) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoWavelengthCalibrationImpl_MMSRaman) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoWavelengthCalibrationProvider) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoWavelengthCalibrationTableModel) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
//   Error creating palette bitmap of (TCCoWrapper) : Server E:\OmniDriver\OOI_HOME\OmniDriver32.dll contains no icons
// ************************************************************************ //
// *************************************************************************//
// NOTE:                                                                      
// Items guarded by $IFDEF_LIVE_SERVER_AT_DESIGN_TIME are used by properties  
// which return objects that may need to be explicitly created via a function 
// call prior to any access via the property. These items have been disabled  
// in order to prevent accidental use from within the object inspector. You   
// may enable them by defining LIVE_SERVER_AT_DESIGN_TIME or by selectively   
// removing them from the $IFDEF blocks. However, such items must still be    
// programmatically created via a method of the appropriate CoClass before    
// they can be used.                                                          
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
{$ALIGN 4}
interface

uses Windows, ActiveX, Classes, Graphics, OleServer, StdVCL, Variants;
  

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  OmniDriverMajorVersion = 2;
  OmniDriverMinorVersion = 0;

  LIBID_OmniDriver: TGUID = '{B6B8DBD9-0FD6-4F2E-B29B-003800B5F0D1}';

  IID_ICoSpectrometerInfo: TGUID = '{D92AA44D-595C-5E63-90E7-4BFEF74DE381}';
  CLASS_CCoSpectrometerInfo: TGUID = '{8F037AD6-F324-5706-80FB-5FD9163CE7B3}';
  IID_ICoCoefficients: TGUID = '{48B07BC8-2430-506B-811C-629FD4764280}';
  CLASS_CCoCoefficients: TGUID = '{E2F04302-02FE-59C1-8174-826F23BF39D1}';
  IID_ICoSpectrum: TGUID = '{BCD265BE-A8F5-56BD-91BD-FCA5C1C5C249}';
  CLASS_CCoSpectrum: TGUID = '{8A02E1D5-B0DC-546C-91C9-B5945D8A99C6}';
  IID_ICoSpectrometerChannelInfo: TGUID = '{A09D2102-D4D6-5B61-9182-1D21A1D6C1C6}';
  CLASS_CCoSpectrometerChannelInfo: TGUID = '{4155A47E-D192-58C4-90F6-BC9C9477003C}';
  IID_ICoSpectrometerChannel: TGUID = '{503D6F06-0A2F-5F7B-81E6-3264F46EF276}';
  CLASS_CCoSpectrometerChannel: TGUID = '{4B5F22B3-B0DE-57F8-800D-79799CE502CE}';
  IID_ICoSpectrometerChannelCollection: TGUID = '{6544CB7F-07FA-5089-81D9-10BC2D108991}';
  CLASS_CCoSpectrometerChannelCollection: TGUID = '{E3D962D4-BACA-58F1-81BA-EBF406FB33D2}';
  IID_ICoBench: TGUID = '{83CB4594-770C-57E2-90AD-4B762A88F987}';
  CLASS_CCoBench: TGUID = '{EA87E2F1-7E31-599E-811C-1ED9F7B09B79}';
  IID_ICoDetector: TGUID = '{F7582140-874D-55CE-907D-C950A9A3F2E3}';
  CLASS_CCoDetector: TGUID = '{DEB04AB5-B0EA-5FA6-917C-2B2705D6C6CA}';
  IID_ICoConfiguration: TGUID = '{3066048B-A1BE-5D68-9089-2DE7AC5E6E35}';
  CLASS_CCoConfiguration: TGUID = '{E3EE39A4-481F-5683-90D6-AC9E438D7343}';
  IID_ICoSpectrometer: TGUID = '{EB26BF16-4631-568E-9181-FBEA90C6CC75}';
  CLASS_CCoSpectrometer: TGUID = '{F4D84025-E097-5CEA-91B3-CD598DBFB457}';
  IID_ICoADC1000Channel: TGUID = '{EEC82062-DD25-5401-8015-C9CCEB653D23}';
  CLASS_CCoADC1000Channel: TGUID = '{A23310C7-A616-5875-90BC-0CA7CD4665E3}';
  IID_ICoUSBEndpointDescriptor: TGUID = '{36C4B9EC-2C72-5C22-814E-9861195C160A}';
  CLASS_CCoUSBEndpointDescriptor: TGUID = '{16FEAA6C-DD56-500D-8188-107FF131F8FB}';
  IID_ICoGUIProvider: TGUID = '{7258FBE5-C3C6-5E6E-80C8-E80060E6BEAB}';
  CLASS_CCoGUIProvider: TGUID = '{A6670159-A855-5131-919D-04C2FA80F71C}';
  IID_ICoGUIProviderCollection: TGUID = '{E1041F85-EF75-5D08-9002-4012E7853ADC}';
  CLASS_CCoGUIProviderCollection: TGUID = '{4F468387-BC0F-5A2C-800E-588A1FE30A4E}';
  IID_ICoErrorCode: TGUID = '{D7F6044C-D539-5EAF-91BC-A8BD9B3AF1B4}';
  CLASS_CCoErrorCode: TGUID = '{C8FC180B-FAC7-5B81-80D3-A9997F7721AC}';
  IID_ICoOmniDriverDispatchListener: TGUID = '{6C9CBA55-7631-519F-817F-F03FB3E01B31}';
  CLASS_CCoOmniDriverDispatchListener: TGUID = '{3D8B532A-8BCD-5EBE-9181-F54A34DCC2AD}';
  IID_ICoAcquisitionPropertiesListener: TGUID = '{F87D11C6-BD2A-56CD-81DB-764C19AAC6DD}';
  CLASS_CCoAcquisitionPropertiesListener: TGUID = '{8A549572-3AB3-546C-81F7-47C90BEC8285}';
  IID_ICoSpectrometerStatus: TGUID = '{245C8F47-A690-50C4-9139-D2B9DEBC84A4}';
  CLASS_CCoSpectrometerStatus: TGUID = '{A3E13E77-BEAD-5642-90C8-1ED18E823656}';
  IID_ICoMultiChannelListener: TGUID = '{1C9F29E4-B0E5-5197-818C-C5838396F5CC}';
  CLASS_CCoMultiChannelListener: TGUID = '{CBA8EA39-C5CD-5C5A-9037-64E3FF222286}';
  IID_ICoExternalTriggerMode: TGUID = '{06392415-C401-58DF-810A-BBBBE4160DDE}';
  CLASS_CCoExternalTriggerMode: TGUID = '{EBB06B07-E07F-5A2C-9004-2FE193D45310}';
  IID_ICoExternalTriggerModeCollection: TGUID = '{AB6BB888-50F6-5C75-903F-F5FC959879E9}';
  CLASS_CCoExternalTriggerModeCollection: TGUID = '{C732C6DB-EFDA-5B3B-807C-F29ACEA1AF32}';
  IID_ICoCoefficientsCollection: TGUID = '{7E2A2E8E-8C58-510E-80CB-DEC831710ED3}';
  CLASS_CCoCoefficientsCollection: TGUID = '{2A21A2DF-AB7A-593D-803D-96C23926A815}';
  IID_ICoAcquisitionListener: TGUID = '{23B48C1B-EB33-5B33-91DD-FA58FCEBFF41}';
  CLASS_CCoAcquisitionListener: TGUID = '{1D6630E6-8008-5EDD-8089-433E8438F981}';
  IID_ICoADC1000USB: TGUID = '{FC329161-8CED-5F04-816B-E0BC69667A72}';
  CLASS_CCoADC1000USB: TGUID = '{12F011AB-F23A-561F-915E-D7C550095CA6}';
  IID_ICoADC1000USBTest: TGUID = '{0D294460-81E0-5C0B-90B3-D627995E6D22}';
  CLASS_CCoADC1000USBTest: TGUID = '{709520BC-8083-510E-80FB-ECFB164129FC}';
  IID_ICoAdvancedIntegrationClock: TGUID = '{B669149A-E83F-501B-8195-3E2E78C81B33}';
  CLASS_CCoAdvancedIntegrationClock: TGUID = '{D82214E5-3B45-50B5-91BC-FDA78D45AE3F}';
  IID_ICoUSBInterface: TGUID = '{95C7060C-5993-5A15-80B3-938835A23C5E}';
  CLASS_CCoUSBInterface: TGUID = '{8F0B98DE-AF17-5D5B-9039-ECF60D35DD39}';
  IID_ICoAdvancedIntegrationClockImpl: TGUID = '{7A1343B2-12E3-503F-918A-79B206B4552D}';
  CLASS_CCoAdvancedIntegrationClockImpl: TGUID = '{FF0085C3-489B-5A96-911F-AA2EF609AC89}';
  IID_ICoAdvancedVersion: TGUID = '{5B3E2572-4876-58DB-8102-C5DDB1C7934F}';
  CLASS_CCoAdvancedVersion: TGUID = '{F99165F6-6CC7-5A9A-80A2-521BDAE52060}';
  IID_ICoAdvancedVersionImpl: TGUID = '{22298733-F91E-5F26-90D0-BCB63E1C8DFA}';
  CLASS_CCoAdvancedVersionImpl: TGUID = '{B09E0B8F-AE6A-5B76-9173-99A12EA486E1}';
  IID_ICoAdvancedVersionImpl_NIR: TGUID = '{8AA8B93C-B43D-59EF-908D-461309454FD8}';
  CLASS_CCoAdvancedVersionImpl_NIR: TGUID = '{DEE1EE69-8810-5B55-91E7-89B6C03A8826}';
  IID_ICoAnalogIn: TGUID = '{85C8B6D0-B14B-554B-91F8-B83570B69253}';
  CLASS_CCoAnalogIn: TGUID = '{9FE7B07B-AF86-588C-8077-EC1D6359BDB1}';
  IID_ICoAnalogInGUIProvider: TGUID = '{F07EA215-2A85-5C1B-91BE-01AA69BFCAC6}';
  CLASS_CCoAnalogInGUIProvider: TGUID = '{9164BE2D-2A87-5BE5-8130-0E330726A21B}';
  IID_ICoAnalogInImpl: TGUID = '{12158587-8FEB-57DB-80BD-3DE6161F5395}';
  CLASS_CCoAnalogInImpl: TGUID = '{E04495E2-9348-5A8D-81DB-0164443EC5AE}';
  IID_ICoAnalogOut: TGUID = '{F3E57C26-D75B-5CAD-9121-510548A608F7}';
  CLASS_CCoAnalogOut: TGUID = '{2329802E-CB0D-5D30-804D-C9E26D071315}';
  IID_ICoAnalogOutGUIProvider: TGUID = '{8CF824F2-4A70-56A0-914E-465F62FDD994}';
  CLASS_CCoAnalogOutGUIProvider: TGUID = '{91F790A1-D55E-5FD1-917D-5E7C40CE2BC4}';
  IID_ICoAnalogOutImpl: TGUID = '{8F49592E-4842-5D8F-91DD-DF2EAB32C373}';
  CLASS_CCoAnalogOutImpl: TGUID = '{F8BD6A68-C786-54A5-91E1-6CE4E4BF2E3A}';
  IID_ICoAnalogOutImpl_ADC1000: TGUID = '{0FF3EBF0-CDDF-599C-804C-2364E64BB5E8}';
  CLASS_CCoAnalogOutImpl_ADC1000: TGUID = '{A3B470A5-9125-5121-81F2-F16481A68E5E}';
  IID_ICoAnalogOutImpl_PSOC: TGUID = '{B7180FC1-17C7-5F0F-8087-0BDDE6A58DE3}';
  CLASS_CCoAnalogOutImpl_PSOC: TGUID = '{DE1EBD14-C262-50B5-9046-4190D35990A0}';
  IID_ICoAutonullingConfiguration: TGUID = '{11F77CAC-A99A-573C-8007-1AAB31F47B34}';
  CLASS_CCoAutonullingConfiguration: TGUID = '{109E922C-E9C9-5F76-900D-B9FF563164BD}';
  IID_ICoAutonulling: TGUID = '{38824B7D-2F73-51B7-91D9-05C0701A1D1B}';
  CLASS_CCoAutonulling: TGUID = '{776E32A7-8083-54D9-8068-F7B49B107659}';
  IID_ICoAutonullingGUIProvider: TGUID = '{ECCF457F-8801-53B4-800F-0DD400E56AF7}';
  CLASS_CCoAutonullingGUIProvider: TGUID = '{247A0738-2AC9-58A4-8044-E5CC46F60229}';
  IID_ICoAutonullingImpl: TGUID = '{A90E1DF9-D407-507A-903B-79409CBD698A}';
  CLASS_CCoAutonullingImpl: TGUID = '{BE2606EF-BC9F-517E-91AF-CF87ACE11DBA}';
  IID_ICoBadPixelRemoval: TGUID = '{464A75A7-9D57-5FF6-8196-C90537D7F91F}';
  CLASS_CCoBadPixelRemoval: TGUID = '{0F56A71C-17FC-5152-9122-D7B399247C74}';
  IID_ICoBadPixelRemovalGUIProvider: TGUID = '{AA0C43A5-ACFA-516E-800C-8953E9A32291}';
  CLASS_CCoBadPixelRemovalGUIProvider: TGUID = '{A9A9FC9C-190C-59B6-8068-A65E16D9426D}';
  IID_ICoBadPixelRemovalImpl: TGUID = '{4779BFE1-3E10-5049-819F-5AF69039B09C}';
  CLASS_CCoBadPixelRemovalImpl: TGUID = '{CB3041FD-14E6-5CE3-9194-CFE27595A988}';
  IID_ICoBaseSpecFunctionality: TGUID = '{9D7E1D09-A80E-5F9E-80A2-B0F3716FD253}';
  CLASS_CCoBaseSpecFunctionality: TGUID = '{287230AF-89F9-5CED-9128-4F8FC52E36B8}';
  IID_ICoBitSet: TGUID = '{73D9D1D4-D4A9-5B88-91B5-7AFCAF882D87}';
  CLASS_CCoBitSet: TGUID = '{4BA7AC9C-3A15-51F6-8079-59C8C60C70D2}';
  IID_ICoBoardTemperature: TGUID = '{DD959286-7309-5977-91D7-AC2586B3381C}';
  CLASS_CCoBoardTemperature: TGUID = '{E5D0929E-9979-5521-813D-C857EF032778}';
  IID_ICoBoardTemperatureGUIProvider: TGUID = '{A418378A-3AE3-54B1-815A-642B1B01BB82}';
  CLASS_CCoBoardTemperatureGUIProvider: TGUID = '{948DA2D3-5B39-5B04-9163-F7931604E75A}';
  IID_ICoBoardTemperatureImpl: TGUID = '{641E5427-C36B-550C-9109-2DDEB0B6A582}';
  CLASS_CCoBoardTemperatureImpl: TGUID = '{9B48C33C-B9E1-56C8-908A-36A4347E9D10}';
  IID_ICoBoardTemperatureImpl_QE65000: TGUID = '{B08493EE-C2BC-5E65-9148-5D1F06CB11FA}';
  CLASS_CCoBoardTemperatureImpl_QE65000: TGUID = '{B4628866-33BE-5C9A-91FF-C7EFC62654CC}';
  IID_ICoCCDShutter: TGUID = '{07A56668-2445-5E20-90DA-901E06509327}';
  CLASS_CCoCCDShutter: TGUID = '{45625EB8-0CA7-5CAC-80E7-F9F85D8F172D}';
  IID_ICoCCDShutterGUIProvider: TGUID = '{C92B69BE-DFB9-56FE-902F-B628494EE3A5}';
  CLASS_CCoCCDShutterGUIProvider: TGUID = '{78BAC90A-7496-5FF5-81D9-037A5B5B1D06}';
  IID_ICoLaser: TGUID = '{202F4240-B129-510D-8067-3A1C7F324ADE}';
  CLASS_CCoLaser: TGUID = '{F1CB4CD9-9BCE-5C00-916D-4A20E21479D1}';
  IID_ICoMMSRamanSpectrometer: TGUID = '{1F1D8139-64F2-5642-91D8-D4461AE0BE1A}';
  CLASS_CCoMMSRamanSpectrometer: TGUID = '{D355137B-D0A6-51D8-817D-F568B02D7C53}';
  IID_ICoCCDShutterImpl: TGUID = '{DC4432F7-EDE7-5E4D-9017-7B5C43B0C210}';
  CLASS_CCoCCDShutterImpl: TGUID = '{504010CA-528D-5F02-8196-002401550C5A}';
  IID_ICoCCDTemperature: TGUID = '{7B8CBEE1-51BB-5E93-914B-92286A4B6556}';
  CLASS_CCoCCDTemperature: TGUID = '{51C622A4-7153-5A10-8064-B9D3C67E6FD3}';
  IID_ICoCCDTemperatureGUIProvider: TGUID = '{F392E565-6183-51C1-8007-BF59B170DD31}';
  CLASS_CCoCCDTemperatureGUIProvider: TGUID = '{E822C1EF-C8E6-572F-8102-8927DE7F9C0E}';
  IID_ICoCCDTemperatureImpl: TGUID = '{494B83E2-E788-5D82-905B-2ABE692E714B}';
  CLASS_CCoCCDTemperatureImpl: TGUID = '{AC419DE4-6E0C-5ED7-813A-9AEFA3EEBEC0}';
  IID_ICoMMSRamanCalibration: TGUID = '{2DD42B62-8467-5C4C-8051-A8D756FD8D7D}';
  CLASS_CCoMMSRamanCalibration: TGUID = '{13BB1E51-6F31-5354-909A-3297637DEC52}';
  IID_ICoCalibration: TGUID = '{489FB3F4-7146-5768-90E4-B53E8B80C94C}';
  CLASS_CCoCalibration: TGUID = '{9F4B2AB4-086C-5C11-90F2-61AC59F5FBD7}';
  IID_ICoCalibrationGUIProvider: TGUID = '{08E8D0BF-F3F4-5E16-80F5-53DF7788CDB3}';
  CLASS_CCoCalibrationGUIProvider: TGUID = '{113FBFA9-D11A-5F20-81F4-20277B8E5107}';
  IID_ICoCalibrationImpl: TGUID = '{6F6733B1-2626-532D-80EC-FBD8941A76F8}';
  CLASS_CCoCalibrationImpl: TGUID = '{A5E05852-98D4-50D4-8098-9F91A4160753}';
  IID_ICoIterator: TGUID = '{DA76826F-A81B-5020-90B5-4FAEE27D1E7F}';
  CLASS_CCoIterator: TGUID = '{D42457DF-2B85-578B-80EB-E00954DDE89F}';
  IID_ICoCollection: TGUID = '{70804830-D735-5ACB-8021-AB2A6F407E38}';
  CLASS_CCoCollection: TGUID = '{D2E75287-BFB2-5044-81CF-2E1EAE8310A0}';
  IID_ICoConfigureFromFile: TGUID = '{9A0129B5-EC35-5C7D-81F9-37DFCF04CA58}';
  CLASS_CCoConfigureFromFile: TGUID = '{AAADCBD8-7146-59DA-81DD-9A39234013FB}';
  IID_ICoContinuousStrobe: TGUID = '{B3A27980-7F13-58B3-802F-2A794FF0F9EF}';
  CLASS_CCoContinuousStrobe: TGUID = '{D13B2756-198A-5A92-8015-ADB1CD767C25}';
  IID_ICoContinuousStrobeGUIProvider: TGUID = '{3E254DFD-22B0-5DFE-909D-C9A64D231644}';
  CLASS_CCoContinuousStrobeGUIProvider: TGUID = '{383A3801-163C-5F96-812E-9B078EADCAF6}';
  IID_ICoContinuousStrobeImpl: TGUID = '{93B9A7FE-761D-5249-8132-2AAD007206B7}';
  CLASS_CCoContinuousStrobeImpl: TGUID = '{924C5FEC-C159-536F-80F5-3EAA4FDE5FB9}';
  IID_ICoContinuousStrobeImpl_ADC1000: TGUID = '{306AFACC-95BD-5DE6-90DB-95E44F668B1D}';
  CLASS_CCoContinuousStrobeImpl_ADC1000: TGUID = '{971A3DB8-AE2E-5054-9088-926D216B7A79}';
  IID_ICoContinuousStrobeImpl_FPGA: TGUID = '{83DD1BE2-9840-59B4-901E-30FBD9CAB7E9}';
  CLASS_CCoContinuousStrobeImpl_FPGA: TGUID = '{60E9E1B9-0BFA-5BC4-906A-2048617C2A47}';
  IID_ICoCurrentOut: TGUID = '{FED40AF7-3B0B-5B4D-80AA-42AC5A45AF28}';
  CLASS_CCoCurrentOut: TGUID = '{66565671-CB5B-51AC-8144-0BF514A8DD59}';
  IID_ICoCurrentOutGUIProvider: TGUID = '{82AEFB1B-2F62-56ED-90FE-E06BA6C832BD}';
  CLASS_CCoCurrentOutGUIProvider: TGUID = '{AF9A6CC5-1101-5BD0-800E-7DC26354781B}';
  IID_ICoCurrentOutImpl_LS450: TGUID = '{893E24F7-6FA0-5F2D-8004-CA101BE2A2AE}';
  CLASS_CCoCurrentOutImpl_LS450: TGUID = '{790A9A3F-FDF5-5C1C-909B-CF24442BA143}';
  IID_ICoDeepWellErrorProvider: TGUID = '{7A9BD927-DDD3-5294-80C2-F0E22862B8EC}';
  CLASS_CCoDeepWellErrorProvider: TGUID = '{DC50D129-FAEA-5E2E-903D-489E2D49AF8E}';
  IID_ICoDeepWellErrorProviderImpl: TGUID = '{DDBB2A3F-519F-5268-8028-238FB16B87C2}';
  CLASS_CCoDeepWellErrorProviderImpl: TGUID = '{3140E5A6-D23E-5AA9-9150-BAF35B95FB97}';
  IID_ICoEndpointToPipeMapping: TGUID = '{8E964B7C-364C-5BD6-9133-41B41748DC8A}';
  CLASS_CCoEndpointToPipeMapping: TGUID = '{15806D13-4FC5-5FF3-914F-4A04F06235EA}';
  IID_ICoEnumeration: TGUID = '{063D9ECC-E58F-5FE5-901F-03A656AB9EB1}';
  CLASS_CCoEnumeration: TGUID = '{4F062A1C-FE64-5D85-919A-65E93F4AABEA}';
  IID_ICoErrorProvider: TGUID = '{F0384D2F-24F7-5C2F-812B-F1F6122D398E}';
  CLASS_CCoErrorProvider: TGUID = '{8732FEEB-6393-5F39-91B3-CD75CA522F30}';
  IID_ICoUSBSpectrometerCollection: TGUID = '{C300E9FA-62BB-5E4F-81D7-D54EB6CEB0B5}';
  CLASS_CCoUSBSpectrometerCollection: TGUID = '{B281FFD9-C630-5A04-81A9-EECFA464191F}';
  IID_ICoUSBSpectrometer: TGUID = '{4791F0DC-F24A-5A16-8199-639C60EA6C5E}';
  CLASS_CCoUSBSpectrometer: TGUID = '{87FF9B36-3B55-599A-91B3-4111F4B15F25}';
  IID_ICoExposureImage: TGUID = '{89DB4427-F97A-580E-91A0-DAD71370A370}';
  CLASS_CCoExposureImage: TGUID = '{FB8B247A-2ABF-504A-8044-49648F6E2D66}';
  IID_ICoExposureImageGUIProvider: TGUID = '{CD215D10-8BFE-5ED0-9127-C5FC328FE397}';
  CLASS_CCoExposureImageGUIProvider: TGUID = '{CA22ACEE-8CB0-5F44-90CC-20C44F9FCB1C}';
  IID_ICoExposureImageImpl: TGUID = '{101688DE-9693-534F-8118-EB495C415B11}';
  CLASS_CCoExposureImageImpl: TGUID = '{C696BD89-C298-5F76-819C-974366849F58}';
  IID_ICoSpectrometerExposure: TGUID = '{6F43694A-9A13-5CEE-80B4-EB5DACAE61A5}';
  CLASS_CCoSpectrometerExposure: TGUID = '{5426E713-9F4C-5084-81F4-1D1597638BD4}';
  IID_ICoExposureListener: TGUID = '{C15C71DA-2FAE-5EC6-911C-59D68BDEBBAF}';
  CLASS_CCoExposureListener: TGUID = '{E93E7170-62CB-5A14-9128-67AFA7723DAA}';
  IID_ICoIntegrationTimeChangeListener: TGUID = '{41DAE341-B833-5E61-8166-F33B8A98C4A9}';
  CLASS_CCoIntegrationTimeChangeListener: TGUID = '{5807AA44-3E74-51DF-819D-8BD6E9E82EE6}';
  IID_ICoExposureImageable: TGUID = '{EBE9D3AF-933F-5587-9085-92D94EB01E36}';
  CLASS_CCoExposureImageable: TGUID = '{7ABADC11-5EA3-54E3-911A-F778EF76E493}';
  IID_ICoExternalTemperature: TGUID = '{16EF74C6-FF0C-5234-81A5-FA57D2E7FA99}';
  CLASS_CCoExternalTemperature: TGUID = '{867FB3A6-3DCD-5D29-90CE-14D3B3CEFDF1}';
  IID_ICoExternalTemperatureGUIProvider: TGUID = '{B94D950B-0513-55F6-80C8-D5E2E6C40BC9}';
  CLASS_CCoExternalTemperatureGUIProvider: TGUID = '{3D21AC30-698C-587E-91BD-621B5378A105}';
  IID_ICoLS450Coefficients: TGUID = '{07FE66E8-166F-578C-80A4-CB658061CC68}';
  CLASS_CCoLS450Coefficients: TGUID = '{84914134-77DE-5A6D-81B0-7566DEC5E609}';
  IID_ICoLS450_Functions: TGUID = '{294C03BC-E003-59D3-8059-6484617573C9}';
  CLASS_CCoLS450_Functions: TGUID = '{4C33A220-A8BA-5A6D-81C6-85B38BBFF37B}';
  IID_ICoExternalTemperatureImpl_LS450: TGUID = '{92962C3B-8C4F-576C-8073-0F0D820A2E7B}';
  CLASS_CCoExternalTemperatureImpl_LS450: TGUID = '{14F51D01-EE5F-5FA3-9071-B02517B88AF8}';
  IID_ICoExternalTemperatureImpl_LS450_2000: TGUID = '{E5749314-180C-5603-800D-BA2A14B54199}';
  CLASS_CCoExternalTemperatureImpl_LS450_2000: TGUID = '{C9AE4932-EA7C-54CC-8076-1FD493F95739}';
  IID_ICoExternalTemperatureImpl_LS450_4000: TGUID = '{DB802C43-B70E-5B1B-8102-05976CE441DF}';
  CLASS_CCoExternalTemperatureImpl_LS450_4000: TGUID = '{A8198125-1064-531B-80DC-660523F5CCAD}';
  IID_ICoExternalTriggerDelay: TGUID = '{651E22E2-2735-5F16-9123-A089784AD4BF}';
  CLASS_CCoExternalTriggerDelay: TGUID = '{94617DE6-0E83-5807-90A2-1ED5716CDFEC}';
  IID_ICoExternalTriggerDelayGUIProvider: TGUID = '{6EB799F1-14D2-528E-90B9-D428FE43C0DD}';
  CLASS_CCoExternalTriggerDelayGUIProvider: TGUID = '{DBBF30BB-5F4A-5D01-914C-01DAA461A931}';
  IID_ICoExternalTriggerDelayImpl: TGUID = '{5535E844-4BD1-50A4-91D6-306617849D0E}';
  CLASS_CCoExternalTriggerDelayImpl: TGUID = '{BDA91C41-69CB-5ADE-915D-857319A7638B}';
  IID_ICoFPGA: TGUID = '{977C8CB5-4BE7-5151-8092-F02A1BFFB0FE}';
  CLASS_CCoFPGA: TGUID = '{16041FA7-D9CC-50BD-90D6-74ED84973D1F}';
  IID_ICoFPGAImpl: TGUID = '{7781FEAD-AEA1-563F-9156-2F21C6BB335A}';
  CLASS_CCoFPGAImpl: TGUID = '{A70BF946-A19B-5A75-8025-229D0B1F42C6}';
  IID_ICoFPGARegisters: TGUID = '{DA0F69A7-2081-538F-9050-F6A598A31F52}';
  CLASS_CCoFPGARegisters: TGUID = '{621F4C41-30AA-57F6-805B-89FCF0E3790C}';
  IID_ICoFeatureEvent: TGUID = '{1DBC2903-B700-5745-80D8-660236AB96D3}';
  CLASS_CCoFeatureEvent: TGUID = '{848A1259-8FDA-5CD7-912F-AD8D22015C34}';
  IID_ICoFeatureListener: TGUID = '{163C7820-CC3B-59ED-80E9-493E90828A2A}';
  CLASS_CCoFeatureListener: TGUID = '{80727909-7148-54BC-90F2-2C94BC8E3054}';
  IID_ICoFeature: TGUID = '{E08AFD26-F644-5770-81EA-28481939B227}';
  CLASS_CCoFeature: TGUID = '{8254CE75-0867-51A2-80A0-876B241FD2BC}';
  IID_ICoFeatureProvider: TGUID = '{3D07838D-F25C-53C2-8198-CA717EC6C2F8}';
  CLASS_CCoFeatureProvider: TGUID = '{78F0ADA8-D4FC-58FC-808E-6885A25ECF2A}';
  IID_ICoSpectrometerReconstruction: TGUID = '{B52BBA4F-B57D-5B96-81AF-336D7F035F31}';
  CLASS_CCoSpectrometerReconstruction: TGUID = '{4E7E6001-A58E-541F-9084-6D41288A8A4C}';
  IID_ICoLaserCollection: TGUID = '{D5C57769-2068-5444-90E6-1729C08BA0A5}';
  CLASS_CCoLaserCollection: TGUID = '{18BC4BD5-067F-55FA-91C4-8895057944D9}';
  IID_ICoMMSRaman: TGUID = '{7613E754-670A-5FC4-91F7-2EBA3FE14F57}';
  CLASS_CCoMMSRaman: TGUID = '{07942D02-AB02-57F7-917A-5BCC30E07944}';
  IID_ICoFirmware: TGUID = '{FDC0ACBD-1104-5143-818D-1772E6FEBCD9}';
  CLASS_CCoFirmware: TGUID = '{1CC95AC8-4092-5C89-819A-8A6E9B4C52A5}';
  IID_ICoFirmwareGUIProvider: TGUID = '{47B816EB-195A-5AFB-80E1-FAD38CEAA204}';
  CLASS_CCoFirmwareGUIProvider: TGUID = '{F66E1982-60BD-54F5-81A8-5FEC228EE0DE}';
  IID_ICoFirmwareImpl: TGUID = '{5B5A1BB3-E36E-5C0A-81D4-EB75E400F330}';
  CLASS_CCoFirmwareImpl: TGUID = '{FA1E3DE4-1E08-54A0-8158-F0D2F7A6A0D0}';
  IID_ICoGateDelayListener: TGUID = '{8847C63C-1DCF-569F-80BB-F5B90BD93762}';
  CLASS_CCoGateDelayListener: TGUID = '{3FD39E84-E4C3-5554-80F2-62EA6A11F4CA}';
  IID_ICoFlGated: TGUID = '{E0F12890-325C-56F2-8015-B1971613A693}';
  CLASS_CCoFlGated: TGUID = '{F6A161EE-322E-5653-81EE-1AA3D8944F54}';
  IID_ICoFlGatedGUIProvider: TGUID = '{37348848-0827-56C8-81DC-0CCC335AEE0F}';
  CLASS_CCoFlGatedGUIProvider: TGUID = '{4C243652-4E99-5A80-904D-1E61393C904B}';
  IID_ICoSpectrometerPlugIn: TGUID = '{9ECA58FC-F445-52B6-90FB-950D2205F4F3}';
  CLASS_CCoSpectrometerPlugIn: TGUID = '{75E5F91F-DF61-5312-81D2-B1668117E1AE}';
  IID_ICoSpectrometerPlugInCollection: TGUID = '{2E0D8121-FD64-5F98-91EF-F91E783AD312}';
  CLASS_CCoSpectrometerPlugInCollection: TGUID = '{7105FC09-CE66-558F-8065-665325C09B71}';
  IID_ICoUSB2000: TGUID = '{EC2C8E6D-72F2-52C3-818C-8785512F1B9F}';
  CLASS_CCoUSB2000: TGUID = '{7EAA09BE-5FCD-5565-81F4-F928E8286B5C}';
  IID_ICoFlGatedImpl: TGUID = '{F5E105DE-4587-5378-80C1-2FA29B9B1A75}';
  CLASS_CCoFlGatedImpl: TGUID = '{EFBC0E91-7BD5-5A21-917F-6FC65D7C844F}';
  IID_ICoGPIO: TGUID = '{7F251211-6B4E-5734-9074-3DB312CBE018}';
  CLASS_CCoGPIO: TGUID = '{A69C1504-37F6-51F1-9067-2F75A92CAEB3}';
  IID_ICoGPIOGUIProvider: TGUID = '{3AA51657-9811-53BC-813B-023E956BD45B}';
  CLASS_CCoGPIOGUIProvider: TGUID = '{4AFE304C-2804-51F1-81CB-336AB8362CAD}';
  IID_ICoGPIOImpl: TGUID = '{C6FB307A-460F-5EB6-912A-F0335A58F5CF}';
  CLASS_CCoGPIOImpl: TGUID = '{810936CE-251F-5DF3-8093-2AF941AD9A28}';
  IID_ICoGatingErrorProvider: TGUID = '{9F4BB6CB-2555-5916-8037-1ABC740D567A}';
  CLASS_CCoGatingErrorProvider: TGUID = '{62DCBE18-0156-5B6E-915E-AA6424B1920D}';
  IID_ICoGatingErrorProviderImpl: TGUID = '{EBB3D935-441B-5CAC-80F4-8E0A290EFC3F}';
  CLASS_CCoGatingErrorProviderImpl: TGUID = '{AC4435EF-DB0B-5E85-80E9-A827009428EB}';
  IID_ICoHR2000: TGUID = '{8058AC8B-131A-59FC-819F-44AB2CC0B5E5}';
  CLASS_CCoHR2000: TGUID = '{D11F559D-503B-5AD3-8062-EF0144C71F8D}';
  IID_ICoHR2000Plus: TGUID = '{29CCCA88-B0DD-5126-81F3-AF2652AD956B}';
  CLASS_CCoHR2000Plus: TGUID = '{DAC05764-24B8-5271-81D7-50AE2033714D}';
  IID_ICoHR2000PlusStatus: TGUID = '{6E1C16D0-79F8-54D3-9005-39AA3B39DE4B}';
  CLASS_CCoHR2000PlusStatus: TGUID = '{2696074A-96EE-5AD1-9182-CDE438F4AF2E}';
  IID_ICoUSBFeature: TGUID = '{310EE4EC-7AE1-5C80-91C2-FEE9E91BEAFB}';
  CLASS_CCoUSBFeature: TGUID = '{0099FC20-033D-5A85-8081-5D5F7A328902}';
  IID_ICoSHACoefficients: TGUID = '{D5124C14-8861-556E-910D-115A732BC729}';
  CLASS_CCoSHACoefficients: TGUID = '{68DF6113-8E4B-551B-901A-53F453117AC2}';
  IID_ICoSHAChannel: TGUID = '{2BBF8ED6-703A-5C7E-9115-45E36DB40415}';
  CLASS_CCoSHAChannel: TGUID = '{7828D6F0-4E67-50C2-91BB-DDAA7ADB985D}';
  IID_ICoHR4000: TGUID = '{030F5B15-9E20-527F-9195-7FE3AF687B60}';
  CLASS_CCoHR4000: TGUID = '{3D3236DB-C21B-5C2D-8121-A2A064D0888B}';
  IID_ICoHR4000Status: TGUID = '{32871864-F98B-53DB-906A-17E8AEB9DA43}';
  CLASS_CCoHR4000Status: TGUID = '{BE1DCA83-3431-5F58-90ED-373555AC6A5C}';
  IID_ICoHardwareTrigger: TGUID = '{9B45C6E1-50C7-5286-912C-3FE04C39EB6A}';
  CLASS_CCoHardwareTrigger: TGUID = '{60AC003E-F9CA-5E57-90A3-2371E65CB8EE}';
  IID_ICoHardwareTriggerGUIProvider: TGUID = '{F5E0987D-22CE-579C-81AB-9461333CA822}';
  CLASS_CCoHardwareTriggerGUIProvider: TGUID = '{7355095C-5681-5926-8025-8AF19B52B6FC}';
  IID_ICoHighGainMode: TGUID = '{70EC313E-51DB-57FC-81C7-8203B350DC69}';
  CLASS_CCoHighGainMode: TGUID = '{CA4C4153-810C-5615-8077-D103529F8B9B}';
  IID_ICoHighGainModeGUIProvider: TGUID = '{A2F1CB4D-C28C-5541-91F1-ABF2C99CE367}';
  CLASS_CCoHighGainModeGUIProvider: TGUID = '{A6211AC1-00C6-5542-908E-B73AB51200DE}';
  IID_ICoHighGainModeImpl: TGUID = '{D4EFF4E1-E029-5794-91C7-BA05F8DF670D}';
  CLASS_CCoHighGainModeImpl: TGUID = '{26787253-81B5-5D75-8025-8ACDD01988BB}';
  IID_ICoHighResTimeStamp: TGUID = '{15FB61D6-9C52-5239-8100-3F53BFC5E1D3}';
  CLASS_CCoHighResTimeStamp: TGUID = '{42A4603D-8B71-5850-90C3-E8B6C5D4B3B8}';
  IID_ICoHighResTiming: TGUID = '{F0D3C5F5-6226-59D7-8117-4717CF5C1566}';
  CLASS_CCoHighResTiming: TGUID = '{B1A7EDC1-2E2B-57E3-90E1-FA4B2DF11BBD}';
  IID_ICoI2CBus: TGUID = '{A3865F62-AE48-551E-903C-07C826DD101B}';
  CLASS_CCoI2CBus: TGUID = '{ABF5A2BF-3B45-57CF-902C-667E8E4B72EF}';
  IID_ICoI2CBusGUIProvider: TGUID = '{01B66D7D-D8B3-5ABE-8020-41BBA5DBD924}';
  CLASS_CCoI2CBusGUIProvider: TGUID = '{CB909B6E-33F3-528C-81F2-845506480C17}';
  IID_ICoI2CBusImpl: TGUID = '{6885B761-9549-51AC-801C-FEBD52D5A1CF}';
  CLASS_CCoI2CBusImpl: TGUID = '{854576E7-443E-5051-8081-4D48521B0E96}';
  IID_ICoI2CBusImplFPGA: TGUID = '{FA3C7640-AF60-5EF9-9151-193795CEBB80}';
  CLASS_CCoI2CBusImplFPGA: TGUID = '{DAD495FA-8AAD-53BD-906A-B0E6B64977DE}';
  IID_ICoI2CBusImplNonFPGA: TGUID = '{77A155C4-6853-575F-81AB-F343F98F5033}';
  CLASS_CCoI2CBusImplNonFPGA: TGUID = '{CD57988C-7C9D-55CF-90E1-6E76333C2084}';
  IID_ICoI2CBusImpl_SHA: TGUID = '{07CA3508-47F9-527A-91D2-2CDAD20F8F25}';
  CLASS_CCoI2CBusImpl_SHA: TGUID = '{D34BE5E1-8856-515B-80C0-0C2987483183}';
  IID_ICoIrradianceCalibrationFactor: TGUID = '{68D5328E-8FDA-57FC-91A8-4E7570EAF55B}';
  CLASS_CCoIrradianceCalibrationFactor: TGUID = '{1B4E1075-8E72-5BA4-810C-09BEEF1FD099}';
  IID_ICoIrradianceCalibrationFactorGUIProvider: TGUID = '{85932FA1-8AF7-5550-8089-0FF55939894C}';
  CLASS_CCoIrradianceCalibrationFactorGUIProvider: TGUID = '{693032CC-66A1-5FA4-80C5-12571B73C405}';
  IID_ICoIrradianceCalibrationFactorImpl: TGUID = '{5B24BFBB-BA53-5E43-91FC-3AD5FACDE732}';
  CLASS_CCoIrradianceCalibrationFactorImpl: TGUID = '{BCDD9E57-0C16-579B-9085-0F1C236B7300}';
  IID_ICoIrradianceCalibrationFactorImplFPGA: TGUID = '{E6AB4E14-891A-5A4D-9005-60A40AB1A3D5}';
  CLASS_CCoIrradianceCalibrationFactorImplFPGA: TGUID = '{C4C7360A-C2D0-5036-814C-9A4E8AF09AEC}';
  IID_ICoIrradianceCalibrationFactorImplNonFPGA: TGUID = '{541FC480-FB28-5421-8067-AA52F5D86B63}';
  CLASS_CCoIrradianceCalibrationFactorImplNonFPGA: TGUID = '{15F33F36-D96F-546B-800D-D9DBE1E91A36}';
  IID_ICoJSocket: TGUID = '{86883084-8FD2-5898-8119-6DB0E0B88561}';
  CLASS_CCoJSocket: TGUID = '{4FDC40BD-33A6-5240-9188-5DCFAB61B990}';
  IID_ICoJazNetwork: TGUID = '{E9F0AF58-7F09-5168-9197-EAD70099B85C}';
  CLASS_CCoJazNetwork: TGUID = '{47B1EF1C-1942-585F-9029-822B2A0CACD3}';
  IID_ICoJazStatus: TGUID = '{29D7CE97-BBFC-5652-81FD-F29FB469D5E7}';
  CLASS_CCoJazStatus: TGUID = '{308C03C9-1D4E-514D-916E-F65BB452641D}';
  IID_ICoJazUSB: TGUID = '{C21C65F4-62D8-536D-807B-485EBC64A826}';
  CLASS_CCoJazUSB: TGUID = '{9BE82EF9-B6CC-50F4-803C-4B3828467A18}';
  IID_ICoLS450_FunctionsGUIProvider: TGUID = '{F8217074-5B31-59D0-90EB-D6441D9A8023}';
  CLASS_CCoLS450_FunctionsGUIProvider: TGUID = '{107130FD-E4E7-55D1-9049-019A69965195}';
  IID_ICoLS450_FunctionsImpl: TGUID = '{A91B2E0C-90C3-599F-905F-986C71C6C26B}';
  CLASS_CCoLS450_FunctionsImpl: TGUID = '{5012545E-1098-58E1-9145-A8E8D1902C09}';
  IID_ICoLS450_FunctionsImpl_2000: TGUID = '{EEC7A92F-A873-53F8-8110-8E2FB31853AB}';
  CLASS_CCoLS450_FunctionsImpl_2000: TGUID = '{835E620E-E4C7-508A-91F9-F384816036BB}';
  IID_ICoLS450_FunctionsImpl_4000: TGUID = '{2106D410-967E-5DC3-9073-5F11B832F885}';
  CLASS_CCoLS450_FunctionsImpl_4000: TGUID = '{D89E454F-B25E-5480-913B-42EF6984FF3E}';
  IID_ICoLaserGUIProvider: TGUID = '{0A930BEA-7847-5677-9103-D6D68B11B10F}';
  CLASS_CCoLaserGUIProvider: TGUID = '{26FF48AA-6FE4-5310-9039-803270DDEC9D}';
  IID_ICoLaserProvider: TGUID = '{A7E147B9-A8E5-56AD-903F-079A80AE219F}';
  CLASS_CCoLaserProvider: TGUID = '{9F805835-7B6A-58DA-8174-6B7B90F12A3A}';
  IID_ICoLaserProviderImpl: TGUID = '{D4269F9B-638C-5E0C-8050-A93DD0A4C3FC}';
  CLASS_CCoLaserProviderImpl: TGUID = '{C317A625-287E-554E-9024-545958B4277E}';
  IID_ICoListIterator: TGUID = '{EE8130ED-924F-51BA-8157-68BA084110E6}';
  CLASS_CCoListIterator: TGUID = '{E34CACA6-C72B-584B-80DD-238823835C93}';
  IID_ICoList: TGUID = '{503C0A3C-7F79-5910-800C-65B5CDF903D6}';
  CLASS_CCoList: TGUID = '{90FFFE14-C044-57D6-9176-F6A00D586979}';
  IID_ICoMMSRamanChannel: TGUID = '{B8EE5E9D-8D20-56B2-8170-637813EB93C1}';
  CLASS_CCoMMSRamanChannel: TGUID = '{241BFA58-072B-5933-8131-6CA784864C5B}';
  IID_ICoMMSRamanConstants: TGUID = '{2ED2724E-A40E-5D54-9129-5C964648B6F3}';
  CLASS_CCoMMSRamanConstants: TGUID = '{794BEA61-70AA-5BBC-90B1-6F3AB5735881}';
  IID_ICoMasterClockDivisor: TGUID = '{606DB847-95E6-5EA8-81AE-774CB83900BD}';
  CLASS_CCoMasterClockDivisor: TGUID = '{3F6121D7-DD57-5CF8-80F2-C38992C6A1CA}';
  IID_ICoMasterClockDivisorImpl: TGUID = '{2C874B89-034C-50F0-8194-8855A0527FD6}';
  CLASS_CCoMasterClockDivisorImpl: TGUID = '{634AD2DE-7086-583E-9154-3689C7B5DADC}';
  IID_ICoMasterClockDivisorListener: TGUID = '{39708381-AD50-5164-90F1-49750684A42E}';
  CLASS_CCoMasterClockDivisorListener: TGUID = '{8ED81694-17C9-5E03-91CC-5B853E5058F0}';
  IID_ICoMasterClockRate: TGUID = '{67058E79-062D-5F6A-808C-49CB51FE4D34}';
  CLASS_CCoMasterClockRate: TGUID = '{DCC5A38B-4081-59C1-9070-970DFEF26307}';
  IID_ICoMasterClockRateImpl: TGUID = '{6D7C615C-3E77-5D2C-9060-972425312EBD}';
  CLASS_CCoMasterClockRateImpl: TGUID = '{69638BE3-4DD2-544E-9115-211AFC2FECF9}';
  IID_ICoMasterClockRateImpl_2000: TGUID = '{4B3B48EC-ABE7-50F3-90D2-6FA3EFED896F}';
  CLASS_CCoMasterClockRateImpl_2000: TGUID = '{1D2A2473-2FE1-5EC5-81C3-3413CD1C6435}';
  IID_ICoMasterClockRateImpl_ADC: TGUID = '{90171331-9C25-5B31-8140-82352EF9C75F}';
  CLASS_CCoMasterClockRateImpl_ADC: TGUID = '{4F969393-72EB-58F1-812E-B4C1EF624C72}';
  IID_ICoMasterClockRateImpl_MMSRaman: TGUID = '{59199C6E-A878-5F8A-9199-437D7E92F994}';
  CLASS_CCoMasterClockRateImpl_MMSRaman: TGUID = '{7E0F351A-A90F-5A9A-80A4-0993C5D5CAD3}';
  IID_ICoMaya2000: TGUID = '{C9CBA76E-87B6-5F66-8082-D7BC06946B91}';
  CLASS_CCoMaya2000: TGUID = '{17C09544-4B41-57E5-8050-6D1CD4AC7800}';
  IID_ICoMayaPro2000: TGUID = '{13E74ED1-B93F-56C5-9049-ED54011CEE9C}';
  CLASS_CCoMayaPro2000: TGUID = '{D90FBD94-2DD3-5AD2-8124-50F03471D77B}';
  IID_ICoMethodDescriptorCollection: TGUID = '{0208E80C-9077-5034-90F3-EC97D0394316}';
  CLASS_CCoMethodDescriptorCollection: TGUID = '{B793242B-5E10-5C84-9183-003DCC5A492D}';
  IID_ICoMultiChannelGUIProvider: TGUID = '{9182B44D-97AE-5D5C-8012-2668E3FF1FE7}';
  CLASS_CCoMultiChannelGUIProvider: TGUID = '{6BECE0FB-5B78-598B-90D5-9B2711C3FDA2}';
  IID_ICoMultiChannelImpl: TGUID = '{9B1EAE05-9BA3-527C-8156-2034F81800AC}';
  CLASS_CCoMultiChannelImpl: TGUID = '{5C99BC33-2DD7-567D-91F7-A790E0748215}';
  IID_ICoMultiChannelImpl_JazNetwork: TGUID = '{29F6DAE1-B3ED-5124-8068-62FBA4C95B39}';
  CLASS_CCoMultiChannelImpl_JazNetwork: TGUID = '{CBF5F6B0-99D2-5ADB-8044-7CE9AF2DDB29}';
  IID_ICoMultiChannelImpl_JazUSB: TGUID = '{5571E8B5-ECAB-5B5C-80DA-DB4132CE7767}';
  CLASS_CCoMultiChannelImpl_JazUSB: TGUID = '{8C929FB5-4A75-5486-818A-DCCD89397A02}';
  IID_ICoMultiChannelProvider: TGUID = '{C3AAAA6A-1D1A-5145-91B2-A08748468AAB}';
  CLASS_CCoMultiChannelProvider: TGUID = '{B5F3B11E-7478-5B69-90FA-C917CC8A0BDC}';
  IID_ICoNIR: TGUID = '{41C53C71-15DE-51C9-9108-5AD662916C6A}';
  CLASS_CCoNIR: TGUID = '{DB5796F2-16AF-5056-9062-3F7CA5A0B74E}';
  IID_ICoNIR256: TGUID = '{AFA47AE3-ADE7-5E78-80CC-733933EC2947}';
  CLASS_CCoNIR256: TGUID = '{361862DE-970C-5F54-91AA-905FED44DD45}';
  IID_ICoNIR512: TGUID = '{4BA509C6-5C1F-5C82-81EF-0E4173BF415C}';
  CLASS_CCoNIR512: TGUID = '{35493FBB-E91F-5680-9152-2D43B14D748A}';
  IID_ICoNIRStatus: TGUID = '{85640759-9082-5696-91AA-6B9A8F1AA86D}';
  CLASS_CCoNIRStatus: TGUID = '{0EDBADDC-71EE-5B74-91D3-ED68D60D4290}';
  IID_ICoNetworkSource: TGUID = '{B9D41F53-7C60-5A79-9029-2B7ECC62CA95}';
  CLASS_CCoNetworkSource: TGUID = '{D0D8933F-ED0E-55C2-81F6-3ACB7EDB07A3}';
  IID_ICoNetworkSourceGUIProvider: TGUID = '{A3691349-112F-5BA6-8066-87149E72D6A0}';
  CLASS_CCoNetworkSourceGUIProvider: TGUID = '{FF728358-6A2E-54FC-8088-4880981DB228}';
  IID_ICoNetworkSpectrometer: TGUID = '{1192C9B1-F263-51AF-81AC-57219033B9DC}';
  CLASS_CCoNetworkSpectrometer: TGUID = '{95ACFFCD-3EEA-5E93-91F8-710381623E88}';
  IID_ICoNetworkSourceImpl: TGUID = '{EA4CB78D-4D2F-55E7-8105-DD2A8B90FDD9}';
  CLASS_CCoNetworkSourceImpl: TGUID = '{04D4763E-9B3A-5372-81DF-54721FBDEEA3}';
  IID_ICoNodeGraphCertificate: TGUID = '{862DF15F-B678-57FB-9098-42E6D4E58235}';
  CLASS_CCoNodeGraphCertificate: TGUID = '{CB441D09-AA4E-56C4-91BB-037B282C092E}';
  IID_ICoNonlinearityCorrectionGUIProvider: TGUID = '{5D35F6C2-485A-5B95-8101-4D3891ECA855}';
  CLASS_CCoNonlinearityCorrectionGUIProvider: TGUID = '{A3E95E5D-92F5-5F00-90EC-DCF35DA275B0}';
  IID_ICoNonlinearityCorrectionImpl: TGUID = '{6C533F7E-EA4A-5992-9006-1EADA53180E4}';
  CLASS_CCoNonlinearityCorrectionImpl: TGUID = '{74F8360F-9D9E-5C69-802E-A0F5D62D4170}';
  IID_ICoNonlinearityCorrectionProvider: TGUID = '{EF32F8F3-1554-50C8-9166-03248E3B5C68}';
  CLASS_CCoNonlinearityCorrectionProvider: TGUID = '{574D6FAF-6D71-5242-904C-7335F03A3691}';
  IID_ICoVector: TGUID = '{9536B4C2-4A00-5D9B-9024-4D9D6274BF5C}';
  CLASS_CCoVector: TGUID = '{FB3BC38C-C850-546E-8073-CB63291D566F}';
  IID_ICoSpectrumCertificate: TGUID = '{4B64E62D-FDDE-5759-8138-AC34EE15C9EE}';
  CLASS_CCoSpectrumCertificate: TGUID = '{2D0301AB-E7DD-54BD-811C-1AB3EA641152}';
  IID_ICoOmniSpectrum: TGUID = '{1F7B97F9-4446-59F5-80B4-7B99C0F74302}';
  CLASS_CCoOmniSpectrum: TGUID = '{345A8C37-DB62-5851-819C-6132DF2C206F}';
  IID_ICoOpCodes: TGUID = '{CE335C38-FE52-5CCF-81CC-E5F9468CC8D1}';
  CLASS_CCoOpCodes: TGUID = '{195C0334-1982-5E58-8162-DF8A6CFA402F}';
  IID_ICoPlugInProvider: TGUID = '{BA05620E-002E-5031-9186-00659D3D0D44}';
  CLASS_CCoPlugInProvider: TGUID = '{E1C769FA-ED83-565B-81F9-FBA7E6134C82}';
  IID_ICoPlugInProviderImpl: TGUID = '{10CDF3FA-265B-5540-9009-D06919A56D60}';
  CLASS_CCoPlugInProviderImpl: TGUID = '{95C4B982-5AA0-551C-80C7-52E15782DC76}';
  IID_ICoPlugInProviderImplFPGA: TGUID = '{94F32959-DA59-5995-8003-61F995A945F5}';
  CLASS_CCoPlugInProviderImplFPGA: TGUID = '{540F4125-47C0-5FE8-9121-CC05DA09B70F}';
  IID_ICoPlugInProviderImplNonFPGA: TGUID = '{1210590D-22B7-5F2E-81D1-17F9A6FBD036}';
  CLASS_CCoPlugInProviderImplNonFPGA: TGUID = '{25B2F7B8-9537-5A37-90FB-F4D7EBE95F6E}';
  IID_ICoPollingTest: TGUID = '{47E5B508-0437-5381-913E-2EFDA7CD6C44}';
  CLASS_CCoPollingTest: TGUID = '{C1A37B70-2259-5DC6-8091-3B6385B04C54}';
  IID_ICoQE65000: TGUID = '{D014CDA0-509A-5093-9110-1DE328D403DA}';
  CLASS_CCoQE65000: TGUID = '{D96555EF-B05E-53E2-8033-E646812D456C}';
  IID_ICoRamanExposure: TGUID = '{69CDC3E8-3D8B-5036-812A-7BBCBAA07E3B}';
  CLASS_CCoRamanExposure: TGUID = '{8A54C083-1A53-5648-9064-DE57370745F4}';
  IID_ICoRamanReconstruction: TGUID = '{F79FA1CF-503A-53D3-81A7-A7E540A2D095}';
  CLASS_CCoRamanReconstruction: TGUID = '{3085E13E-017F-5A3C-91C7-CC9026F5294A}';
  IID_ICoRawData: TGUID = '{DD079D1B-2F76-5870-91FE-BEB990D8B826}';
  CLASS_CCoRawData: TGUID = '{28577DB2-521B-596F-90BB-0A38EBB53F72}';
  IID_ICoSAS: TGUID = '{F4688BAB-EBBE-56FE-906B-0883E463072F}';
  CLASS_CCoSAS: TGUID = '{47682248-0E10-5210-91B1-B51565D05854}';
  IID_ICoSASChannel: TGUID = '{D3C1BA2E-2EC6-5F48-8000-2D5DA1388A2A}';
  CLASS_CCoSASChannel: TGUID = '{0E7BDB14-60CE-5327-90E8-DAB340D392FC}';
  IID_ICoSHA: TGUID = '{9EC03059-14A0-55F6-9156-EE43EEA2E59E}';
  CLASS_CCoSHA: TGUID = '{C1266C19-00B8-5E02-90FC-CEDD992C60C6}';
  IID_ICoSHAConstants: TGUID = '{E2CB4AC8-03D2-51A4-904B-395C0C7D32AD}';
  CLASS_CCoSHAConstants: TGUID = '{C372BA9F-1E08-5299-90F3-9B62E08124E3}';
  IID_ICoSHAGUIProvider: TGUID = '{155CA90B-643F-5CD8-906A-02BEF31B1C1D}';
  CLASS_CCoSHAGUIProvider: TGUID = '{E979F3DA-33E5-58E8-80A3-A063EEE1F831}';
  IID_ICoSHAImpl: TGUID = '{7527BE21-E906-5F50-91BD-DBA03303CE69}';
  CLASS_CCoSHAImpl: TGUID = '{E4F0E76F-FEA0-5E9C-8038-8F4BFBEA0979}';
  IID_ICoSPIBus: TGUID = '{71A80A36-04A8-5747-91C9-42651B1B46AE}';
  CLASS_CCoSPIBus: TGUID = '{33E762E9-60CA-5867-91EE-65D54D8E6BE1}';
  IID_ICoSPIBusGUIProvider: TGUID = '{1CFFD3AA-C819-5548-9151-60A1E3C59B54}';
  CLASS_CCoSPIBusGUIProvider: TGUID = '{E843AFA8-3D21-5A56-9049-CB1E8BC19887}';
  IID_ICoSPIBusImpl: TGUID = '{E0E698A5-2594-53E6-9013-B2B9A5250DE2}';
  CLASS_CCoSPIBusImpl: TGUID = '{A11F3E47-7F18-502C-81D2-C78C49DFBF95}';
  IID_ICoSPIBusImplFPGA: TGUID = '{AD6703AA-5F53-550E-91E3-8946270E6657}';
  CLASS_CCoSPIBusImplFPGA: TGUID = '{1BF82871-7F1F-52C5-9019-C43446452C23}';
  IID_ICoSPIBusImplNonFPGA: TGUID = '{29964F0D-DA69-5F19-8176-A7382D1FCA6F}';
  CLASS_CCoSPIBusImplNonFPGA: TGUID = '{02858A57-0258-550D-800A-F60E2B6C7BDB}';
  IID_ICoShutterClock: TGUID = '{4E8D34A9-55A5-5AF6-8182-014DB346B329}';
  CLASS_CCoShutterClock: TGUID = '{D92F3A4A-0CCA-581B-811D-CCDC62DC8891}';
  IID_ICoShutterClockImpl: TGUID = '{0337B03A-5AE8-5A11-90A5-8B480D65FCAD}';
  CLASS_CCoShutterClockImpl: TGUID = '{59736222-AF46-5F99-80CF-C8FE79E484B8}';
  IID_ICoSimulation: TGUID = '{CBD7A4D7-F502-5A5A-80E7-8EB77987257B}';
  CLASS_CCoSimulation: TGUID = '{62F7E16A-14EA-5878-8011-8769DD9D81C9}';
  IID_ICoSimulationChannel: TGUID = '{52D2C5EB-FCC8-5E52-81F9-9021AF1C8BEB}';
  CLASS_CCoSimulationChannel: TGUID = '{3771844F-DECC-5211-8039-CD3EFB643B4C}';
  IID_ICoSimulationGUIProvider: TGUID = '{00152669-793A-5EB1-9079-7386D2E1A966}';
  CLASS_CCoSimulationGUIProvider: TGUID = '{CB86EF72-9C7D-5073-8127-D3DDC515CAEA}';
  IID_ICoSimulationImpl: TGUID = '{D9BED1D4-F814-509D-90A7-6ED7E35BD7DF}';
  CLASS_CCoSimulationImpl: TGUID = '{6910288F-9191-5034-8086-DEDD8F114F52}';
  IID_ICoSimulationProvider: TGUID = '{7BEB43FA-9C11-588D-8091-46E672BB6BC9}';
  CLASS_CCoSimulationProvider: TGUID = '{3192205D-BAC4-5626-91B4-53288879D297}';
  IID_ICoSingleStrobe: TGUID = '{10ACB7B6-A940-5C4D-9067-E7FE66F4CBFC}';
  CLASS_CCoSingleStrobe: TGUID = '{5047A797-1114-5F50-80D1-6A3A152739E4}';
  IID_ICoSingleStrobeGUIProvider: TGUID = '{4995AAF7-CCD7-5FC6-9005-8C65548592E7}';
  CLASS_CCoSingleStrobeGUIProvider: TGUID = '{ECA21665-9A1B-56B2-8121-465DF76F84F1}';
  IID_ICoSingleStrobeImpl: TGUID = '{1E307F05-9DFA-595B-81B6-59923DB58E72}';
  CLASS_CCoSingleStrobeImpl: TGUID = '{EB8F5A05-42C5-581D-9121-10DC38A3BFAD}';
  IID_ICoSpectrumListener: TGUID = '{B97C3247-573E-562A-91B7-208374E8B74D}';
  CLASS_CCoSpectrumListener: TGUID = '{4610467B-4F17-53CA-91F0-C709996C5F4B}';
  IID_ICoSpectrumProducer: TGUID = '{24ECF802-2C5A-5853-918B-940E3A6C80A5}';
  CLASS_CCoSpectrumProducer: TGUID = '{3FB73E97-716C-512A-8170-64C548BB4FBF}';
  IID_ICoSpectrumHandler: TGUID = '{04DDEF76-081F-5F81-81B4-9AE8CB2AC482}';
  CLASS_CCoSpectrumHandler: TGUID = '{96D1FFC7-D689-53AE-8112-ABF91E81894E}';
  IID_ICoSpectralProcessor: TGUID = '{0323DA99-3493-586A-80F3-60A320B96758}';
  CLASS_CCoSpectralProcessor: TGUID = '{CF3B2D28-F662-5680-9062-1DA876CE9ADC}';
  IID_ICoSpectrometerAssembly: TGUID = '{CF0B23E7-EDAC-51F2-80FB-815DF8344C51}';
  CLASS_CCoSpectrometerAssembly: TGUID = '{D5D1CCE6-4810-5345-8032-AB55BC3F8C78}';
  IID_ICoSpectrometerCollection: TGUID = '{AD7728B2-6007-5641-903C-498F3795A197}';
  CLASS_CCoSpectrometerCollection: TGUID = '{E7ADAFA3-476D-59B6-8163-5672FDE1BD6C}';
  IID_ICoSpectrometerFactory: TGUID = '{DA28657B-1ED3-5C17-8102-9796729D8D0E}';
  CLASS_CCoSpectrometerFactory: TGUID = '{10495366-11B4-53D5-812B-902220E57E69}';
  IID_ICoSpectrometerPlugInInfo: TGUID = '{8B65395B-1EF2-5B94-8132-519F353C25C4}';
  CLASS_CCoSpectrometerPlugInInfo: TGUID = '{C00F7D85-F1F1-5AAE-9073-A322C56B72A0}';
  IID_ICoSpectrumConsumer: TGUID = '{39414217-CE28-5B82-8154-F2A285F55F12}';
  CLASS_CCoSpectrumConsumer: TGUID = '{E558D82D-4986-5CAF-91DF-1C268E92C7FA}';
  IID_ICoSpectrumProducerBase: TGUID = '{61BB1A46-1DD7-5B8E-8039-ECE041C528BF}';
  CLASS_CCoSpectrumProducerBase: TGUID = '{FC02C308-FD9F-56DE-815D-A8E57C0C23DC}';
  IID_ICoStatus: TGUID = '{1D370D9D-55D2-590B-81BF-B6FB49ECBF97}';
  CLASS_CCoStatus: TGUID = '{A8E9AE2A-68C0-531E-8101-7033B6AC6F74}';
  IID_ICoStatusGUIProvider: TGUID = '{8923A441-5E81-5A8F-90CC-F03191FAB1DE}';
  CLASS_CCoStatusGUIProvider: TGUID = '{5B418E22-D47E-50B8-8062-3F609AA0BCFF}';
  IID_ICoStatusImpl: TGUID = '{E3A61053-AACB-524F-8116-8B7C28700A97}';
  CLASS_CCoStatusImpl: TGUID = '{D6B2BB30-3D7F-5845-912F-67788B545F69}';
  IID_ICoStatusProvider: TGUID = '{AA9C37C9-4D0E-57F8-9181-9A03E4FA33F7}';
  CLASS_CCoStatusProvider: TGUID = '{03C3762A-DD09-537C-900A-5DC8C80F5349}';
  IID_ICoStopSpectrum: TGUID = '{B2B8507C-C278-5447-9106-F79F72E07F8F}';
  CLASS_CCoStopSpectrum: TGUID = '{3A05567A-EE54-57CF-9131-86A1A5652BD8}';
  IID_ICoStopSpectrumGUIProvider: TGUID = '{CC474DCD-95BA-51CF-91EF-0D59E1491AF8}';
  CLASS_CCoStopSpectrumGUIProvider: TGUID = '{367EC0B9-33A5-5DBA-80AD-CE38A9728C26}';
  IID_ICoStopSpectrumImpl: TGUID = '{EF27F2D0-BEA3-5AC0-8058-2106F83D81E4}';
  CLASS_CCoStopSpectrumImpl: TGUID = '{918A4971-BAAF-51A2-9189-3B2F234A862A}';
  IID_ICoStrayLightCorrection: TGUID = '{7A615C60-E197-5912-90F7-630B3D3DB721}';
  CLASS_CCoStrayLightCorrection: TGUID = '{3AA88C3C-2258-5B06-817C-21537FF9AC5C}';
  IID_ICoStrayLightCorrectionGUIProvider: TGUID = '{2895D36A-5645-5E83-9175-EBF93A2ABCB2}';
  CLASS_CCoStrayLightCorrectionGUIProvider: TGUID = '{23E0A1BF-F82E-589C-80C4-2BE5B7FBF8D0}';
  IID_ICoStrayLightCorrectionImpl: TGUID = '{9C9E8CEF-E467-53A2-9096-10A59344C8BE}';
  CLASS_CCoStrayLightCorrectionImpl: TGUID = '{9E8760B6-A863-52A4-917F-8F34F7395725}';
  IID_ICoStringCollection: TGUID = '{25485A5E-462A-58C1-912D-4B0B7DFE31CE}';
  CLASS_CCoStringCollection: TGUID = '{F6A3A2DD-B2AD-5D54-90CB-729BAADEB1BA}';
  IID_ICoSupportStatus: TGUID = '{786DCE1D-4279-5409-81A1-7FB92DE8CDA0}';
  CLASS_CCoSupportStatus: TGUID = '{5122094C-5DD8-56D7-908E-2EC75A6B811A}';
  IID_ICoThermoElectric: TGUID = '{77D0D72C-06B2-5119-81EE-6753F6DD706D}';
  CLASS_CCoThermoElectric: TGUID = '{59BCB3CA-FBF9-5A5C-802F-E9DCEEE9E8A8}';
  IID_ICoThermoElectricGUIProvider: TGUID = '{D48499F0-2027-59C0-90C6-1BAC72FD252F}';
  CLASS_CCoThermoElectricGUIProvider: TGUID = '{EFCD8EC2-752E-548B-81FF-3B704F024ED8}';
  IID_ICoThermoElectricImpl: TGUID = '{C2DB7893-1F39-5574-91EF-73BD965E46ED}';
  CLASS_CCoThermoElectricImpl: TGUID = '{EF95A203-A2E1-584E-8130-D0885F9AA28A}';
  IID_ICoThermoElectricImpl_NIR: TGUID = '{7868676B-70D4-5E14-8195-C1AE51CC028E}';
  CLASS_CCoThermoElectricImpl_NIR: TGUID = '{9C4E243F-0835-53B9-8064-96C9311FB314}';
  IID_ICoThermoElectricImpl_QE65000: TGUID = '{93A38CC1-D1A1-55F3-8008-880795793245}';
  CLASS_CCoThermoElectricImpl_QE65000: TGUID = '{2108F4F2-BAED-5033-80EA-C5BECCD2FBB7}';
  IID_ICoThermoElectricShowFanControl: TGUID = '{928F0FB8-3908-5D50-8123-CDBF23ABBC71}';
  CLASS_CCoThermoElectricShowFanControl: TGUID = '{0062B2D1-F7CD-5230-806E-93931442B059}';
  IID_ICoUSB2000Plus: TGUID = '{1971D913-20C2-51F7-8080-BD2CE86AEDF8}';
  CLASS_CCoUSB2000Plus: TGUID = '{7ACADB89-BD37-5C80-8169-33F19D993754}';
  IID_ICoUSB2000PlusStatus: TGUID = '{CB2E15E7-CBFC-5C4D-807D-00D5318AD5F0}';
  CLASS_CCoUSB2000PlusStatus: TGUID = '{BE568CBE-AFF2-528F-9026-A7502CA9084B}';
  IID_ICoUSB325: TGUID = '{FD14D082-43F1-5634-800B-4A7141158A56}';
  CLASS_CCoUSB325: TGUID = '{AFCA569C-FA6E-598C-80CE-8E59EF9EBAC7}';
  IID_ICoUSB4000: TGUID = '{6BFC2AE4-C9B4-59F2-8046-45F44B66425B}';
  CLASS_CCoUSB4000: TGUID = '{EC100B9C-9EAF-58F3-91B7-8CE8823AC980}';
  IID_ICoUSB4000Status: TGUID = '{E5E69CAA-1D6A-5C43-80CB-715EE316E467}';
  CLASS_CCoUSB4000Status: TGUID = '{0A2EF2AA-1327-5753-91FB-BD972F10C17F}';
  IID_ICoUSB650: TGUID = '{FDF32347-263A-5A43-81C2-B65B7B32A6B8}';
  CLASS_CCoUSB650: TGUID = '{1A73B544-2D00-586C-8012-F96D7CA28167}';
  IID_ICoUSBCommonDescriptor: TGUID = '{4086EF88-3BEA-5656-9137-AD42F97B28B5}';
  CLASS_CCoUSBCommonDescriptor: TGUID = '{005FAB77-FF13-551A-8184-2BA295FB28B9}';
  IID_ICoUSBConfigurationDescriptor: TGUID = '{46BD006A-80A1-527C-9085-3987B589EB2C}';
  CLASS_CCoUSBConfigurationDescriptor: TGUID = '{7A384276-EF43-5A8C-9124-A788C706C945}';
  IID_ICoUSBConstants: TGUID = '{25133B83-3272-5E1F-81DE-9832F1CF5936}';
  CLASS_CCoUSBConstants: TGUID = '{243C028E-2637-52E7-909A-CA218D92A1F1}';
  IID_ICoUSBDeviceDescriptor: TGUID = '{C05F6210-7572-52E8-916A-8909C420D427}';
  CLASS_CCoUSBDeviceDescriptor: TGUID = '{990D1619-719C-5498-9053-F653348DAFA1}';
  IID_ICoUSBEndpointDevice: TGUID = '{3BAA6767-9F60-530D-90E1-03AEF0C7F389}';
  CLASS_CCoUSBEndpointDevice: TGUID = '{CA85A82F-D049-555B-913C-412479C8424F}';
  IID_ICoUSBImpl: TGUID = '{C2C7116B-6346-5BD9-8081-BDC1CCB4758D}';
  CLASS_CCoUSBImpl: TGUID = '{5D4BF02F-B9C1-5968-90B7-44082D917EFC}';
  IID_ICoUSBInterfaceDescriptor: TGUID = '{A6E5B74A-1967-511F-814B-25ADC84B59BA}';
  CLASS_CCoUSBInterfaceDescriptor: TGUID = '{B9FD2041-F99F-590B-9176-97103C779756}';
  IID_ICoUSBLogicalPortStatus: TGUID = '{38A725E5-9D9F-5094-8077-CB3AAE8F40ED}';
  CLASS_CCoUSBLogicalPortStatus: TGUID = '{27492E9B-8ECA-5A8B-80BF-98EEEC677F1B}';
  IID_ICoUSBProductInfo: TGUID = '{BA7F3CEB-83A9-5289-90E0-452F4CC5A5F1}';
  CLASS_CCoUSBProductInfo: TGUID = '{4A97F9A2-A6A5-5096-906C-EE64ECA964DE}';
  IID_ICoUSBStringDescriptor: TGUID = '{AACF7B8F-7F48-5D88-90BC-3475FA40EF8C}';
  CLASS_CCoUSBStringDescriptor: TGUID = '{8DC64E9B-6EF4-5825-812B-C99B15792649}';
  IID_ICoUSB_ISS: TGUID = '{1E5F9031-811E-5FEC-813C-FA108AD43BAF}';
  CLASS_CCoUSB_ISS: TGUID = '{073ADBA8-418E-5A4C-81C9-9A9A34337F96}';
  IID_ICoUSB_ISS_UV: TGUID = '{2B8934A6-666D-59D2-8007-74684B3D07B5}';
  CLASS_CCoUSB_ISS_UV: TGUID = '{79C06AD6-5D98-5B72-91BE-8889C0671BB0}';
  IID_ICoUSB_LS450: TGUID = '{7F864876-AB8F-5690-911F-EBE8C6D71452}';
  CLASS_CCoUSB_LS450: TGUID = '{71447CF2-BC4A-5E00-90E7-7A30D16B8FD0}';
  IID_ICoUV_VIS_LightSource: TGUID = '{63D8AFBE-B6E7-54CE-8128-630E86FA0D6B}';
  CLASS_CCoUV_VIS_LightSource: TGUID = '{96E60BF4-E533-5972-9015-A738B374C81F}';
  IID_ICoUV_VIS_LightSourceGUIProvider: TGUID = '{453014F3-E447-54EB-80DF-C1D9DDC4AF0E}';
  CLASS_CCoUV_VIS_LightSourceGUIProvider: TGUID = '{79FA4EE9-75D4-561B-8011-002D1BF2EF59}';
  IID_ICoUV_VIS_LightSourceImpl: TGUID = '{0C127E0E-64D8-5BD7-8042-F688D1A948B2}';
  CLASS_CCoUV_VIS_LightSourceImpl: TGUID = '{01C3FFAF-7E34-5A6A-91BC-6DA6F760DB84}';
  IID_ICoUV_VIS_LightSourceImpl_2000: TGUID = '{87939515-C221-5F6E-90B2-0DAEA7712E12}';
  CLASS_CCoUV_VIS_LightSourceImpl_2000: TGUID = '{DE0E3849-ECAD-519E-9030-46DAD66C476F}';
  IID_ICoUV_VIS_LightSourceImpl_4000: TGUID = '{565CF604-978C-5BA1-807E-3A921A79EA1A}';
  CLASS_CCoUV_VIS_LightSourceImpl_4000: TGUID = '{0EC0E578-84A1-520D-801D-E556C9840915}';
  IID_ICoUV_VIS_LightSourceJAZCompatible: TGUID = '{DDE1DEFF-86E6-514E-904E-54F0E7CA3E03}';
  CLASS_CCoUV_VIS_LightSourceJAZCompatible: TGUID = '{A2FD4978-81A1-56A4-9184-9ACE81BA74EA}';
  IID_ICoUV_VIS_LightSourceImpl_JAZ: TGUID = '{BDC4D21D-B555-59B0-910A-3644D411139B}';
  CLASS_CCoUV_VIS_LightSourceImpl_JAZ: TGUID = '{B595F51E-6EB5-52D1-9035-C0D61F293C28}';
  IID_ICoUniUSB: TGUID = '{9CA86CAE-68C8-52FD-916D-D8FB54E0668D}';
  CLASS_CCoUniUSB: TGUID = '{A1E91C7E-6335-57B2-919F-6795B73B1E35}';
  IID_ICoUniUSBPipeManager: TGUID = '{905EF4DF-24DF-5E81-8075-ED5D816DCF74}';
  CLASS_CCoUniUSBPipeManager: TGUID = '{066EA430-49A2-5318-809A-77C262DC6B64}';
  IID_ICoVersion: TGUID = '{6D8D59DA-EB63-573D-9007-ED97488A9EBA}';
  CLASS_CCoVersion: TGUID = '{64A9FB93-8F27-5EAE-9100-0B8040E57D6A}';
  IID_ICoVersionGUIProvider: TGUID = '{25D13161-1B32-5078-81DF-705C879C3DD6}';
  CLASS_CCoVersionGUIProvider: TGUID = '{1EF113D7-C19C-5D0D-906E-4187CF3EBCCA}';
  IID_ICoVersionImpl: TGUID = '{01FEE2E1-4F1F-5A31-8131-8D2F12FB7292}';
  CLASS_CCoVersionImpl: TGUID = '{C227E6F3-A5BA-5D1F-80DE-E1553FAB1535}';
  IID_ICoWavelengthCalibrationGUIProvider: TGUID = '{A5E0FD64-31A6-585C-804B-46848479AC8D}';
  CLASS_CCoWavelengthCalibrationGUIProvider: TGUID = '{0D1700DD-C794-57E7-90C1-0B2C0E0136F4}';
  IID_ICoWavelengthCalibrationImpl: TGUID = '{13292F69-F32B-513B-915E-CB9F187BC432}';
  CLASS_CCoWavelengthCalibrationImpl: TGUID = '{3ED27A05-03A5-522A-80C8-09B36BCCE2B7}';
  IID_ICoWavelengthCalibrationImpl_MMSRaman: TGUID = '{B0CC345B-92F6-5045-804C-4A0BF5319A94}';
  CLASS_CCoWavelengthCalibrationImpl_MMSRaman: TGUID = '{C3558BA9-64B5-51BA-906B-201646B1679D}';
  IID_ICoWavelengthCalibrationProvider: TGUID = '{7A4495F8-85AB-5A02-91D9-2282AFC3E0F9}';
  CLASS_CCoWavelengthCalibrationProvider: TGUID = '{94C22A06-5713-5A2C-8187-A577DED05DAE}';
  IID_ICoWavelengthCalibrationTableModel: TGUID = '{73B5369F-4044-585C-80F9-8E29E9FB7A98}';
  CLASS_CCoWavelengthCalibrationTableModel: TGUID = '{38668496-C1AD-50CA-91E6-FE8020F11DCC}';
  IID_ICoWrapper: TGUID = '{EC41C2F1-AE7B-5388-81A9-6E1C82AFE801}';
  CLASS_CCoWrapper: TGUID = '{2674047E-2B5D-5202-80ED-B9FB545155EF}';
type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  ICoSpectrometerInfo = interface;
  ICoSpectrometerInfoDisp = dispinterface;
  ICoCoefficients = interface;
  ICoCoefficientsDisp = dispinterface;
  ICoSpectrum = interface;
  ICoSpectrumDisp = dispinterface;
  ICoSpectrometerChannelInfo = interface;
  ICoSpectrometerChannelInfoDisp = dispinterface;
  ICoSpectrometerChannel = interface;
  ICoSpectrometerChannelDisp = dispinterface;
  ICoSpectrometerChannelCollection = interface;
  ICoSpectrometerChannelCollectionDisp = dispinterface;
  ICoBench = interface;
  ICoBenchDisp = dispinterface;
  ICoDetector = interface;
  ICoDetectorDisp = dispinterface;
  ICoConfiguration = interface;
  ICoConfigurationDisp = dispinterface;
  ICoSpectrometer = interface;
  ICoSpectrometerDisp = dispinterface;
  ICoADC1000Channel = interface;
  ICoADC1000ChannelDisp = dispinterface;
  ICoUSBEndpointDescriptor = interface;
  ICoUSBEndpointDescriptorDisp = dispinterface;
  ICoGUIProvider = interface;
  ICoGUIProviderDisp = dispinterface;
  ICoGUIProviderCollection = interface;
  ICoGUIProviderCollectionDisp = dispinterface;
  ICoErrorCode = interface;
  ICoErrorCodeDisp = dispinterface;
  ICoOmniDriverDispatchListener = interface;
  ICoOmniDriverDispatchListenerDisp = dispinterface;
  ICoAcquisitionPropertiesListener = interface;
  ICoAcquisitionPropertiesListenerDisp = dispinterface;
  ICoSpectrometerStatus = interface;
  ICoSpectrometerStatusDisp = dispinterface;
  ICoMultiChannelListener = interface;
  ICoMultiChannelListenerDisp = dispinterface;
  ICoExternalTriggerMode = interface;
  ICoExternalTriggerModeDisp = dispinterface;
  ICoExternalTriggerModeCollection = interface;
  ICoExternalTriggerModeCollectionDisp = dispinterface;
  ICoCoefficientsCollection = interface;
  ICoCoefficientsCollectionDisp = dispinterface;
  ICoAcquisitionListener = interface;
  ICoAcquisitionListenerDisp = dispinterface;
  ICoADC1000USB = interface;
  ICoADC1000USBDisp = dispinterface;
  ICoADC1000USBTest = interface;
  ICoADC1000USBTestDisp = dispinterface;
  ICoAdvancedIntegrationClock = interface;
  ICoAdvancedIntegrationClockDisp = dispinterface;
  ICoUSBInterface = interface;
  ICoUSBInterfaceDisp = dispinterface;
  ICoAdvancedIntegrationClockImpl = interface;
  ICoAdvancedIntegrationClockImplDisp = dispinterface;
  ICoAdvancedVersion = interface;
  ICoAdvancedVersionDisp = dispinterface;
  ICoAdvancedVersionImpl = interface;
  ICoAdvancedVersionImplDisp = dispinterface;
  ICoAdvancedVersionImpl_NIR = interface;
  ICoAdvancedVersionImpl_NIRDisp = dispinterface;
  ICoAnalogIn = interface;
  ICoAnalogInDisp = dispinterface;
  ICoAnalogInGUIProvider = interface;
  ICoAnalogInGUIProviderDisp = dispinterface;
  ICoAnalogInImpl = interface;
  ICoAnalogInImplDisp = dispinterface;
  ICoAnalogOut = interface;
  ICoAnalogOutDisp = dispinterface;
  ICoAnalogOutGUIProvider = interface;
  ICoAnalogOutGUIProviderDisp = dispinterface;
  ICoAnalogOutImpl = interface;
  ICoAnalogOutImplDisp = dispinterface;
  ICoAnalogOutImpl_ADC1000 = interface;
  ICoAnalogOutImpl_ADC1000Disp = dispinterface;
  ICoAnalogOutImpl_PSOC = interface;
  ICoAnalogOutImpl_PSOCDisp = dispinterface;
  ICoAutonullingConfiguration = interface;
  ICoAutonullingConfigurationDisp = dispinterface;
  ICoAutonulling = interface;
  ICoAutonullingDisp = dispinterface;
  ICoAutonullingGUIProvider = interface;
  ICoAutonullingGUIProviderDisp = dispinterface;
  ICoAutonullingImpl = interface;
  ICoAutonullingImplDisp = dispinterface;
  ICoBadPixelRemoval = interface;
  ICoBadPixelRemovalDisp = dispinterface;
  ICoBadPixelRemovalGUIProvider = interface;
  ICoBadPixelRemovalGUIProviderDisp = dispinterface;
  ICoBadPixelRemovalImpl = interface;
  ICoBadPixelRemovalImplDisp = dispinterface;
  ICoBaseSpecFunctionality = interface;
  ICoBaseSpecFunctionalityDisp = dispinterface;
  ICoBitSet = interface;
  ICoBitSetDisp = dispinterface;
  ICoBoardTemperature = interface;
  ICoBoardTemperatureDisp = dispinterface;
  ICoBoardTemperatureGUIProvider = interface;
  ICoBoardTemperatureGUIProviderDisp = dispinterface;
  ICoBoardTemperatureImpl = interface;
  ICoBoardTemperatureImplDisp = dispinterface;
  ICoBoardTemperatureImpl_QE65000 = interface;
  ICoBoardTemperatureImpl_QE65000Disp = dispinterface;
  ICoCCDShutter = interface;
  ICoCCDShutterDisp = dispinterface;
  ICoCCDShutterGUIProvider = interface;
  ICoCCDShutterGUIProviderDisp = dispinterface;
  ICoLaser = interface;
  ICoLaserDisp = dispinterface;
  ICoMMSRamanSpectrometer = interface;
  ICoMMSRamanSpectrometerDisp = dispinterface;
  ICoCCDShutterImpl = interface;
  ICoCCDShutterImplDisp = dispinterface;
  ICoCCDTemperature = interface;
  ICoCCDTemperatureDisp = dispinterface;
  ICoCCDTemperatureGUIProvider = interface;
  ICoCCDTemperatureGUIProviderDisp = dispinterface;
  ICoCCDTemperatureImpl = interface;
  ICoCCDTemperatureImplDisp = dispinterface;
  ICoMMSRamanCalibration = interface;
  ICoMMSRamanCalibrationDisp = dispinterface;
  ICoCalibration = interface;
  ICoCalibrationDisp = dispinterface;
  ICoCalibrationGUIProvider = interface;
  ICoCalibrationGUIProviderDisp = dispinterface;
  ICoCalibrationImpl = interface;
  ICoCalibrationImplDisp = dispinterface;
  ICoIterator = interface;
  ICoIteratorDisp = dispinterface;
  ICoCollection = interface;
  ICoCollectionDisp = dispinterface;
  ICoConfigureFromFile = interface;
  ICoConfigureFromFileDisp = dispinterface;
  ICoContinuousStrobe = interface;
  ICoContinuousStrobeDisp = dispinterface;
  ICoContinuousStrobeGUIProvider = interface;
  ICoContinuousStrobeGUIProviderDisp = dispinterface;
  ICoContinuousStrobeImpl = interface;
  ICoContinuousStrobeImplDisp = dispinterface;
  ICoContinuousStrobeImpl_ADC1000 = interface;
  ICoContinuousStrobeImpl_ADC1000Disp = dispinterface;
  ICoContinuousStrobeImpl_FPGA = interface;
  ICoContinuousStrobeImpl_FPGADisp = dispinterface;
  ICoCurrentOut = interface;
  ICoCurrentOutDisp = dispinterface;
  ICoCurrentOutGUIProvider = interface;
  ICoCurrentOutGUIProviderDisp = dispinterface;
  ICoCurrentOutImpl_LS450 = interface;
  ICoCurrentOutImpl_LS450Disp = dispinterface;
  ICoDeepWellErrorProvider = interface;
  ICoDeepWellErrorProviderDisp = dispinterface;
  ICoDeepWellErrorProviderImpl = interface;
  ICoDeepWellErrorProviderImplDisp = dispinterface;
  ICoEndpointToPipeMapping = interface;
  ICoEndpointToPipeMappingDisp = dispinterface;
  ICoEnumeration = interface;
  ICoEnumerationDisp = dispinterface;
  ICoErrorProvider = interface;
  ICoErrorProviderDisp = dispinterface;
  ICoUSBSpectrometerCollection = interface;
  ICoUSBSpectrometerCollectionDisp = dispinterface;
  ICoUSBSpectrometer = interface;
  ICoUSBSpectrometerDisp = dispinterface;
  ICoExposureImage = interface;
  ICoExposureImageDisp = dispinterface;
  ICoExposureImageGUIProvider = interface;
  ICoExposureImageGUIProviderDisp = dispinterface;
  ICoExposureImageImpl = interface;
  ICoExposureImageImplDisp = dispinterface;
  ICoSpectrometerExposure = interface;
  ICoSpectrometerExposureDisp = dispinterface;
  ICoExposureListener = interface;
  ICoExposureListenerDisp = dispinterface;
  ICoIntegrationTimeChangeListener = interface;
  ICoIntegrationTimeChangeListenerDisp = dispinterface;
  ICoExposureImageable = interface;
  ICoExposureImageableDisp = dispinterface;
  ICoExternalTemperature = interface;
  ICoExternalTemperatureDisp = dispinterface;
  ICoExternalTemperatureGUIProvider = interface;
  ICoExternalTemperatureGUIProviderDisp = dispinterface;
  ICoLS450Coefficients = interface;
  ICoLS450CoefficientsDisp = dispinterface;
  ICoLS450_Functions = interface;
  ICoLS450_FunctionsDisp = dispinterface;
  ICoExternalTemperatureImpl_LS450 = interface;
  ICoExternalTemperatureImpl_LS450Disp = dispinterface;
  ICoExternalTemperatureImpl_LS450_2000 = interface;
  ICoExternalTemperatureImpl_LS450_2000Disp = dispinterface;
  ICoExternalTemperatureImpl_LS450_4000 = interface;
  ICoExternalTemperatureImpl_LS450_4000Disp = dispinterface;
  ICoExternalTriggerDelay = interface;
  ICoExternalTriggerDelayDisp = dispinterface;
  ICoExternalTriggerDelayGUIProvider = interface;
  ICoExternalTriggerDelayGUIProviderDisp = dispinterface;
  ICoExternalTriggerDelayImpl = interface;
  ICoExternalTriggerDelayImplDisp = dispinterface;
  ICoFPGA = interface;
  ICoFPGADisp = dispinterface;
  ICoFPGAImpl = interface;
  ICoFPGAImplDisp = dispinterface;
  ICoFPGARegisters = interface;
  ICoFPGARegistersDisp = dispinterface;
  ICoFeatureEvent = interface;
  ICoFeatureEventDisp = dispinterface;
  ICoFeatureListener = interface;
  ICoFeatureListenerDisp = dispinterface;
  ICoFeature = interface;
  ICoFeatureDisp = dispinterface;
  ICoFeatureProvider = interface;
  ICoFeatureProviderDisp = dispinterface;
  ICoSpectrometerReconstruction = interface;
  ICoSpectrometerReconstructionDisp = dispinterface;
  ICoLaserCollection = interface;
  ICoLaserCollectionDisp = dispinterface;
  ICoMMSRaman = interface;
  ICoMMSRamanDisp = dispinterface;
  ICoFirmware = interface;
  ICoFirmwareDisp = dispinterface;
  ICoFirmwareGUIProvider = interface;
  ICoFirmwareGUIProviderDisp = dispinterface;
  ICoFirmwareImpl = interface;
  ICoFirmwareImplDisp = dispinterface;
  ICoGateDelayListener = interface;
  ICoGateDelayListenerDisp = dispinterface;
  ICoFlGated = interface;
  ICoFlGatedDisp = dispinterface;
  ICoFlGatedGUIProvider = interface;
  ICoFlGatedGUIProviderDisp = dispinterface;
  ICoSpectrometerPlugIn = interface;
  ICoSpectrometerPlugInDisp = dispinterface;
  ICoSpectrometerPlugInCollection = interface;
  ICoSpectrometerPlugInCollectionDisp = dispinterface;
  ICoUSB2000 = interface;
  ICoUSB2000Disp = dispinterface;
  ICoFlGatedImpl = interface;
  ICoFlGatedImplDisp = dispinterface;
  ICoGPIO = interface;
  ICoGPIODisp = dispinterface;
  ICoGPIOGUIProvider = interface;
  ICoGPIOGUIProviderDisp = dispinterface;
  ICoGPIOImpl = interface;
  ICoGPIOImplDisp = dispinterface;
  ICoGatingErrorProvider = interface;
  ICoGatingErrorProviderDisp = dispinterface;
  ICoGatingErrorProviderImpl = interface;
  ICoGatingErrorProviderImplDisp = dispinterface;
  ICoHR2000 = interface;
  ICoHR2000Disp = dispinterface;
  ICoHR2000Plus = interface;
  ICoHR2000PlusDisp = dispinterface;
  ICoHR2000PlusStatus = interface;
  ICoHR2000PlusStatusDisp = dispinterface;
  ICoUSBFeature = interface;
  ICoUSBFeatureDisp = dispinterface;
  ICoSHACoefficients = interface;
  ICoSHACoefficientsDisp = dispinterface;
  ICoSHAChannel = interface;
  ICoSHAChannelDisp = dispinterface;
  ICoHR4000 = interface;
  ICoHR4000Disp = dispinterface;
  ICoHR4000Status = interface;
  ICoHR4000StatusDisp = dispinterface;
  ICoHardwareTrigger = interface;
  ICoHardwareTriggerDisp = dispinterface;
  ICoHardwareTriggerGUIProvider = interface;
  ICoHardwareTriggerGUIProviderDisp = dispinterface;
  ICoHighGainMode = interface;
  ICoHighGainModeDisp = dispinterface;
  ICoHighGainModeGUIProvider = interface;
  ICoHighGainModeGUIProviderDisp = dispinterface;
  ICoHighGainModeImpl = interface;
  ICoHighGainModeImplDisp = dispinterface;
  ICoHighResTimeStamp = interface;
  ICoHighResTimeStampDisp = dispinterface;
  ICoHighResTiming = interface;
  ICoHighResTimingDisp = dispinterface;
  ICoI2CBus = interface;
  ICoI2CBusDisp = dispinterface;
  ICoI2CBusGUIProvider = interface;
  ICoI2CBusGUIProviderDisp = dispinterface;
  ICoI2CBusImpl = interface;
  ICoI2CBusImplDisp = dispinterface;
  ICoI2CBusImplFPGA = interface;
  ICoI2CBusImplFPGADisp = dispinterface;
  ICoI2CBusImplNonFPGA = interface;
  ICoI2CBusImplNonFPGADisp = dispinterface;
  ICoI2CBusImpl_SHA = interface;
  ICoI2CBusImpl_SHADisp = dispinterface;
  ICoIrradianceCalibrationFactor = interface;
  ICoIrradianceCalibrationFactorDisp = dispinterface;
  ICoIrradianceCalibrationFactorGUIProvider = interface;
  ICoIrradianceCalibrationFactorGUIProviderDisp = dispinterface;
  ICoIrradianceCalibrationFactorImpl = interface;
  ICoIrradianceCalibrationFactorImplDisp = dispinterface;
  ICoIrradianceCalibrationFactorImplFPGA = interface;
  ICoIrradianceCalibrationFactorImplFPGADisp = dispinterface;
  ICoIrradianceCalibrationFactorImplNonFPGA = interface;
  ICoIrradianceCalibrationFactorImplNonFPGADisp = dispinterface;
  ICoJSocket = interface;
  ICoJSocketDisp = dispinterface;
  ICoJazNetwork = interface;
  ICoJazNetworkDisp = dispinterface;
  ICoJazStatus = interface;
  ICoJazStatusDisp = dispinterface;
  ICoJazUSB = interface;
  ICoJazUSBDisp = dispinterface;
  ICoLS450_FunctionsGUIProvider = interface;
  ICoLS450_FunctionsGUIProviderDisp = dispinterface;
  ICoLS450_FunctionsImpl = interface;
  ICoLS450_FunctionsImplDisp = dispinterface;
  ICoLS450_FunctionsImpl_2000 = interface;
  ICoLS450_FunctionsImpl_2000Disp = dispinterface;
  ICoLS450_FunctionsImpl_4000 = interface;
  ICoLS450_FunctionsImpl_4000Disp = dispinterface;
  ICoLaserGUIProvider = interface;
  ICoLaserGUIProviderDisp = dispinterface;
  ICoLaserProvider = interface;
  ICoLaserProviderDisp = dispinterface;
  ICoLaserProviderImpl = interface;
  ICoLaserProviderImplDisp = dispinterface;
  ICoListIterator = interface;
  ICoListIteratorDisp = dispinterface;
  ICoList = interface;
  ICoListDisp = dispinterface;
  ICoMMSRamanChannel = interface;
  ICoMMSRamanChannelDisp = dispinterface;
  ICoMMSRamanConstants = interface;
  ICoMMSRamanConstantsDisp = dispinterface;
  ICoMasterClockDivisor = interface;
  ICoMasterClockDivisorDisp = dispinterface;
  ICoMasterClockDivisorImpl = interface;
  ICoMasterClockDivisorImplDisp = dispinterface;
  ICoMasterClockDivisorListener = interface;
  ICoMasterClockDivisorListenerDisp = dispinterface;
  ICoMasterClockRate = interface;
  ICoMasterClockRateDisp = dispinterface;
  ICoMasterClockRateImpl = interface;
  ICoMasterClockRateImplDisp = dispinterface;
  ICoMasterClockRateImpl_2000 = interface;
  ICoMasterClockRateImpl_2000Disp = dispinterface;
  ICoMasterClockRateImpl_ADC = interface;
  ICoMasterClockRateImpl_ADCDisp = dispinterface;
  ICoMasterClockRateImpl_MMSRaman = interface;
  ICoMasterClockRateImpl_MMSRamanDisp = dispinterface;
  ICoMaya2000 = interface;
  ICoMaya2000Disp = dispinterface;
  ICoMayaPro2000 = interface;
  ICoMayaPro2000Disp = dispinterface;
  ICoMethodDescriptorCollection = interface;
  ICoMethodDescriptorCollectionDisp = dispinterface;
  ICoMultiChannelGUIProvider = interface;
  ICoMultiChannelGUIProviderDisp = dispinterface;
  ICoMultiChannelImpl = interface;
  ICoMultiChannelImplDisp = dispinterface;
  ICoMultiChannelImpl_JazNetwork = interface;
  ICoMultiChannelImpl_JazNetworkDisp = dispinterface;
  ICoMultiChannelImpl_JazUSB = interface;
  ICoMultiChannelImpl_JazUSBDisp = dispinterface;
  ICoMultiChannelProvider = interface;
  ICoMultiChannelProviderDisp = dispinterface;
  ICoNIR = interface;
  ICoNIRDisp = dispinterface;
  ICoNIR256 = interface;
  ICoNIR256Disp = dispinterface;
  ICoNIR512 = interface;
  ICoNIR512Disp = dispinterface;
  ICoNIRStatus = interface;
  ICoNIRStatusDisp = dispinterface;
  ICoNetworkSource = interface;
  ICoNetworkSourceDisp = dispinterface;
  ICoNetworkSourceGUIProvider = interface;
  ICoNetworkSourceGUIProviderDisp = dispinterface;
  ICoNetworkSpectrometer = interface;
  ICoNetworkSpectrometerDisp = dispinterface;
  ICoNetworkSourceImpl = interface;
  ICoNetworkSourceImplDisp = dispinterface;
  ICoNodeGraphCertificate = interface;
  ICoNodeGraphCertificateDisp = dispinterface;
  ICoNonlinearityCorrectionGUIProvider = interface;
  ICoNonlinearityCorrectionGUIProviderDisp = dispinterface;
  ICoNonlinearityCorrectionImpl = interface;
  ICoNonlinearityCorrectionImplDisp = dispinterface;
  ICoNonlinearityCorrectionProvider = interface;
  ICoNonlinearityCorrectionProviderDisp = dispinterface;
  ICoVector = interface;
  ICoVectorDisp = dispinterface;
  ICoSpectrumCertificate = interface;
  ICoSpectrumCertificateDisp = dispinterface;
  ICoOmniSpectrum = interface;
  ICoOmniSpectrumDisp = dispinterface;
  ICoOpCodes = interface;
  ICoOpCodesDisp = dispinterface;
  ICoPlugInProvider = interface;
  ICoPlugInProviderDisp = dispinterface;
  ICoPlugInProviderImpl = interface;
  ICoPlugInProviderImplDisp = dispinterface;
  ICoPlugInProviderImplFPGA = interface;
  ICoPlugInProviderImplFPGADisp = dispinterface;
  ICoPlugInProviderImplNonFPGA = interface;
  ICoPlugInProviderImplNonFPGADisp = dispinterface;
  ICoPollingTest = interface;
  ICoPollingTestDisp = dispinterface;
  ICoQE65000 = interface;
  ICoQE65000Disp = dispinterface;
  ICoRamanExposure = interface;
  ICoRamanExposureDisp = dispinterface;
  ICoRamanReconstruction = interface;
  ICoRamanReconstructionDisp = dispinterface;
  ICoRawData = interface;
  ICoRawDataDisp = dispinterface;
  ICoSAS = interface;
  ICoSASDisp = dispinterface;
  ICoSASChannel = interface;
  ICoSASChannelDisp = dispinterface;
  ICoSHA = interface;
  ICoSHADisp = dispinterface;
  ICoSHAConstants = interface;
  ICoSHAConstantsDisp = dispinterface;
  ICoSHAGUIProvider = interface;
  ICoSHAGUIProviderDisp = dispinterface;
  ICoSHAImpl = interface;
  ICoSHAImplDisp = dispinterface;
  ICoSPIBus = interface;
  ICoSPIBusDisp = dispinterface;
  ICoSPIBusGUIProvider = interface;
  ICoSPIBusGUIProviderDisp = dispinterface;
  ICoSPIBusImpl = interface;
  ICoSPIBusImplDisp = dispinterface;
  ICoSPIBusImplFPGA = interface;
  ICoSPIBusImplFPGADisp = dispinterface;
  ICoSPIBusImplNonFPGA = interface;
  ICoSPIBusImplNonFPGADisp = dispinterface;
  ICoShutterClock = interface;
  ICoShutterClockDisp = dispinterface;
  ICoShutterClockImpl = interface;
  ICoShutterClockImplDisp = dispinterface;
  ICoSimulation = interface;
  ICoSimulationDisp = dispinterface;
  ICoSimulationChannel = interface;
  ICoSimulationChannelDisp = dispinterface;
  ICoSimulationGUIProvider = interface;
  ICoSimulationGUIProviderDisp = dispinterface;
  ICoSimulationImpl = interface;
  ICoSimulationImplDisp = dispinterface;
  ICoSimulationProvider = interface;
  ICoSimulationProviderDisp = dispinterface;
  ICoSingleStrobe = interface;
  ICoSingleStrobeDisp = dispinterface;
  ICoSingleStrobeGUIProvider = interface;
  ICoSingleStrobeGUIProviderDisp = dispinterface;
  ICoSingleStrobeImpl = interface;
  ICoSingleStrobeImplDisp = dispinterface;
  ICoSpectrumListener = interface;
  ICoSpectrumListenerDisp = dispinterface;
  ICoSpectrumProducer = interface;
  ICoSpectrumProducerDisp = dispinterface;
  ICoSpectrumHandler = interface;
  ICoSpectrumHandlerDisp = dispinterface;
  ICoSpectralProcessor = interface;
  ICoSpectralProcessorDisp = dispinterface;
  ICoSpectrometerAssembly = interface;
  ICoSpectrometerAssemblyDisp = dispinterface;
  ICoSpectrometerCollection = interface;
  ICoSpectrometerCollectionDisp = dispinterface;
  ICoSpectrometerFactory = interface;
  ICoSpectrometerFactoryDisp = dispinterface;
  ICoSpectrometerPlugInInfo = interface;
  ICoSpectrometerPlugInInfoDisp = dispinterface;
  ICoSpectrumConsumer = interface;
  ICoSpectrumConsumerDisp = dispinterface;
  ICoSpectrumProducerBase = interface;
  ICoSpectrumProducerBaseDisp = dispinterface;
  ICoStatus = interface;
  ICoStatusDisp = dispinterface;
  ICoStatusGUIProvider = interface;
  ICoStatusGUIProviderDisp = dispinterface;
  ICoStatusImpl = interface;
  ICoStatusImplDisp = dispinterface;
  ICoStatusProvider = interface;
  ICoStatusProviderDisp = dispinterface;
  ICoStopSpectrum = interface;
  ICoStopSpectrumDisp = dispinterface;
  ICoStopSpectrumGUIProvider = interface;
  ICoStopSpectrumGUIProviderDisp = dispinterface;
  ICoStopSpectrumImpl = interface;
  ICoStopSpectrumImplDisp = dispinterface;
  ICoStrayLightCorrection = interface;
  ICoStrayLightCorrectionDisp = dispinterface;
  ICoStrayLightCorrectionGUIProvider = interface;
  ICoStrayLightCorrectionGUIProviderDisp = dispinterface;
  ICoStrayLightCorrectionImpl = interface;
  ICoStrayLightCorrectionImplDisp = dispinterface;
  ICoStringCollection = interface;
  ICoStringCollectionDisp = dispinterface;
  ICoSupportStatus = interface;
  ICoSupportStatusDisp = dispinterface;
  ICoThermoElectric = interface;
  ICoThermoElectricDisp = dispinterface;
  ICoThermoElectricGUIProvider = interface;
  ICoThermoElectricGUIProviderDisp = dispinterface;
  ICoThermoElectricImpl = interface;
  ICoThermoElectricImplDisp = dispinterface;
  ICoThermoElectricImpl_NIR = interface;
  ICoThermoElectricImpl_NIRDisp = dispinterface;
  ICoThermoElectricImpl_QE65000 = interface;
  ICoThermoElectricImpl_QE65000Disp = dispinterface;
  ICoThermoElectricShowFanControl = interface;
  ICoThermoElectricShowFanControlDisp = dispinterface;
  ICoUSB2000Plus = interface;
  ICoUSB2000PlusDisp = dispinterface;
  ICoUSB2000PlusStatus = interface;
  ICoUSB2000PlusStatusDisp = dispinterface;
  ICoUSB325 = interface;
  ICoUSB325Disp = dispinterface;
  ICoUSB4000 = interface;
  ICoUSB4000Disp = dispinterface;
  ICoUSB4000Status = interface;
  ICoUSB4000StatusDisp = dispinterface;
  ICoUSB650 = interface;
  ICoUSB650Disp = dispinterface;
  ICoUSBCommonDescriptor = interface;
  ICoUSBCommonDescriptorDisp = dispinterface;
  ICoUSBConfigurationDescriptor = interface;
  ICoUSBConfigurationDescriptorDisp = dispinterface;
  ICoUSBConstants = interface;
  ICoUSBConstantsDisp = dispinterface;
  ICoUSBDeviceDescriptor = interface;
  ICoUSBDeviceDescriptorDisp = dispinterface;
  ICoUSBEndpointDevice = interface;
  ICoUSBEndpointDeviceDisp = dispinterface;
  ICoUSBImpl = interface;
  ICoUSBImplDisp = dispinterface;
  ICoUSBInterfaceDescriptor = interface;
  ICoUSBInterfaceDescriptorDisp = dispinterface;
  ICoUSBLogicalPortStatus = interface;
  ICoUSBLogicalPortStatusDisp = dispinterface;
  ICoUSBProductInfo = interface;
  ICoUSBProductInfoDisp = dispinterface;
  ICoUSBStringDescriptor = interface;
  ICoUSBStringDescriptorDisp = dispinterface;
  ICoUSB_ISS = interface;
  ICoUSB_ISSDisp = dispinterface;
  ICoUSB_ISS_UV = interface;
  ICoUSB_ISS_UVDisp = dispinterface;
  ICoUSB_LS450 = interface;
  ICoUSB_LS450Disp = dispinterface;
  ICoUV_VIS_LightSource = interface;
  ICoUV_VIS_LightSourceDisp = dispinterface;
  ICoUV_VIS_LightSourceGUIProvider = interface;
  ICoUV_VIS_LightSourceGUIProviderDisp = dispinterface;
  ICoUV_VIS_LightSourceImpl = interface;
  ICoUV_VIS_LightSourceImplDisp = dispinterface;
  ICoUV_VIS_LightSourceImpl_2000 = interface;
  ICoUV_VIS_LightSourceImpl_2000Disp = dispinterface;
  ICoUV_VIS_LightSourceImpl_4000 = interface;
  ICoUV_VIS_LightSourceImpl_4000Disp = dispinterface;
  ICoUV_VIS_LightSourceJAZCompatible = interface;
  ICoUV_VIS_LightSourceJAZCompatibleDisp = dispinterface;
  ICoUV_VIS_LightSourceImpl_JAZ = interface;
  ICoUV_VIS_LightSourceImpl_JAZDisp = dispinterface;
  ICoUniUSB = interface;
  ICoUniUSBDisp = dispinterface;
  ICoUniUSBPipeManager = interface;
  ICoUniUSBPipeManagerDisp = dispinterface;
  ICoVersion = interface;
  ICoVersionDisp = dispinterface;
  ICoVersionGUIProvider = interface;
  ICoVersionGUIProviderDisp = dispinterface;
  ICoVersionImpl = interface;
  ICoVersionImplDisp = dispinterface;
  ICoWavelengthCalibrationGUIProvider = interface;
  ICoWavelengthCalibrationGUIProviderDisp = dispinterface;
  ICoWavelengthCalibrationImpl = interface;
  ICoWavelengthCalibrationImplDisp = dispinterface;
  ICoWavelengthCalibrationImpl_MMSRaman = interface;
  ICoWavelengthCalibrationImpl_MMSRamanDisp = dispinterface;
  ICoWavelengthCalibrationProvider = interface;
  ICoWavelengthCalibrationProviderDisp = dispinterface;
  ICoWavelengthCalibrationTableModel = interface;
  ICoWavelengthCalibrationTableModelDisp = dispinterface;
  ICoWrapper = interface;
  ICoWrapperDisp = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  CCoSpectrometerInfo = ICoSpectrometerInfo;
  CCoCoefficients = ICoCoefficients;
  CCoSpectrum = ICoSpectrum;
  CCoSpectrometerChannelInfo = ICoSpectrometerChannelInfo;
  CCoSpectrometerChannel = ICoSpectrometerChannel;
  CCoSpectrometerChannelCollection = ICoSpectrometerChannelCollection;
  CCoBench = ICoBench;
  CCoDetector = ICoDetector;
  CCoConfiguration = ICoConfiguration;
  CCoSpectrometer = ICoSpectrometer;
  CCoADC1000Channel = ICoADC1000Channel;
  CCoUSBEndpointDescriptor = ICoUSBEndpointDescriptor;
  CCoGUIProvider = ICoGUIProvider;
  CCoGUIProviderCollection = ICoGUIProviderCollection;
  CCoErrorCode = ICoErrorCode;
  CCoOmniDriverDispatchListener = ICoOmniDriverDispatchListener;
  CCoAcquisitionPropertiesListener = ICoAcquisitionPropertiesListener;
  CCoSpectrometerStatus = ICoSpectrometerStatus;
  CCoMultiChannelListener = ICoMultiChannelListener;
  CCoExternalTriggerMode = ICoExternalTriggerMode;
  CCoExternalTriggerModeCollection = ICoExternalTriggerModeCollection;
  CCoCoefficientsCollection = ICoCoefficientsCollection;
  CCoAcquisitionListener = ICoAcquisitionListener;
  CCoADC1000USB = ICoADC1000USB;
  CCoADC1000USBTest = ICoADC1000USBTest;
  CCoAdvancedIntegrationClock = ICoAdvancedIntegrationClock;
  CCoUSBInterface = ICoUSBInterface;
  CCoAdvancedIntegrationClockImpl = ICoAdvancedIntegrationClockImpl;
  CCoAdvancedVersion = ICoAdvancedVersion;
  CCoAdvancedVersionImpl = ICoAdvancedVersionImpl;
  CCoAdvancedVersionImpl_NIR = ICoAdvancedVersionImpl_NIR;
  CCoAnalogIn = ICoAnalogIn;
  CCoAnalogInGUIProvider = ICoAnalogInGUIProvider;
  CCoAnalogInImpl = ICoAnalogInImpl;
  CCoAnalogOut = ICoAnalogOut;
  CCoAnalogOutGUIProvider = ICoAnalogOutGUIProvider;
  CCoAnalogOutImpl = ICoAnalogOutImpl;
  CCoAnalogOutImpl_ADC1000 = ICoAnalogOutImpl_ADC1000;
  CCoAnalogOutImpl_PSOC = ICoAnalogOutImpl_PSOC;
  CCoAutonullingConfiguration = ICoAutonullingConfiguration;
  CCoAutonulling = ICoAutonulling;
  CCoAutonullingGUIProvider = ICoAutonullingGUIProvider;
  CCoAutonullingImpl = ICoAutonullingImpl;
  CCoBadPixelRemoval = ICoBadPixelRemoval;
  CCoBadPixelRemovalGUIProvider = ICoBadPixelRemovalGUIProvider;
  CCoBadPixelRemovalImpl = ICoBadPixelRemovalImpl;
  CCoBaseSpecFunctionality = ICoBaseSpecFunctionality;
  CCoBitSet = ICoBitSet;
  CCoBoardTemperature = ICoBoardTemperature;
  CCoBoardTemperatureGUIProvider = ICoBoardTemperatureGUIProvider;
  CCoBoardTemperatureImpl = ICoBoardTemperatureImpl;
  CCoBoardTemperatureImpl_QE65000 = ICoBoardTemperatureImpl_QE65000;
  CCoCCDShutter = ICoCCDShutter;
  CCoCCDShutterGUIProvider = ICoCCDShutterGUIProvider;
  CCoLaser = ICoLaser;
  CCoMMSRamanSpectrometer = ICoMMSRamanSpectrometer;
  CCoCCDShutterImpl = ICoCCDShutterImpl;
  CCoCCDTemperature = ICoCCDTemperature;
  CCoCCDTemperatureGUIProvider = ICoCCDTemperatureGUIProvider;
  CCoCCDTemperatureImpl = ICoCCDTemperatureImpl;
  CCoMMSRamanCalibration = ICoMMSRamanCalibration;
  CCoCalibration = ICoCalibration;
  CCoCalibrationGUIProvider = ICoCalibrationGUIProvider;
  CCoCalibrationImpl = ICoCalibrationImpl;
  CCoIterator = ICoIterator;
  CCoCollection = ICoCollection;
  CCoConfigureFromFile = ICoConfigureFromFile;
  CCoContinuousStrobe = ICoContinuousStrobe;
  CCoContinuousStrobeGUIProvider = ICoContinuousStrobeGUIProvider;
  CCoContinuousStrobeImpl = ICoContinuousStrobeImpl;
  CCoContinuousStrobeImpl_ADC1000 = ICoContinuousStrobeImpl_ADC1000;
  CCoContinuousStrobeImpl_FPGA = ICoContinuousStrobeImpl_FPGA;
  CCoCurrentOut = ICoCurrentOut;
  CCoCurrentOutGUIProvider = ICoCurrentOutGUIProvider;
  CCoCurrentOutImpl_LS450 = ICoCurrentOutImpl_LS450;
  CCoDeepWellErrorProvider = ICoDeepWellErrorProvider;
  CCoDeepWellErrorProviderImpl = ICoDeepWellErrorProviderImpl;
  CCoEndpointToPipeMapping = ICoEndpointToPipeMapping;
  CCoEnumeration = ICoEnumeration;
  CCoErrorProvider = ICoErrorProvider;
  CCoUSBSpectrometerCollection = ICoUSBSpectrometerCollection;
  CCoUSBSpectrometer = ICoUSBSpectrometer;
  CCoExposureImage = ICoExposureImage;
  CCoExposureImageGUIProvider = ICoExposureImageGUIProvider;
  CCoExposureImageImpl = ICoExposureImageImpl;
  CCoSpectrometerExposure = ICoSpectrometerExposure;
  CCoExposureListener = ICoExposureListener;
  CCoIntegrationTimeChangeListener = ICoIntegrationTimeChangeListener;
  CCoExposureImageable = ICoExposureImageable;
  CCoExternalTemperature = ICoExternalTemperature;
  CCoExternalTemperatureGUIProvider = ICoExternalTemperatureGUIProvider;
  CCoLS450Coefficients = ICoLS450Coefficients;
  CCoLS450_Functions = ICoLS450_Functions;
  CCoExternalTemperatureImpl_LS450 = ICoExternalTemperatureImpl_LS450;
  CCoExternalTemperatureImpl_LS450_2000 = ICoExternalTemperatureImpl_LS450_2000;
  CCoExternalTemperatureImpl_LS450_4000 = ICoExternalTemperatureImpl_LS450_4000;
  CCoExternalTriggerDelay = ICoExternalTriggerDelay;
  CCoExternalTriggerDelayGUIProvider = ICoExternalTriggerDelayGUIProvider;
  CCoExternalTriggerDelayImpl = ICoExternalTriggerDelayImpl;
  CCoFPGA = ICoFPGA;
  CCoFPGAImpl = ICoFPGAImpl;
  CCoFPGARegisters = ICoFPGARegisters;
  CCoFeatureEvent = ICoFeatureEvent;
  CCoFeatureListener = ICoFeatureListener;
  CCoFeature = ICoFeature;
  CCoFeatureProvider = ICoFeatureProvider;
  CCoSpectrometerReconstruction = ICoSpectrometerReconstruction;
  CCoLaserCollection = ICoLaserCollection;
  CCoMMSRaman = ICoMMSRaman;
  CCoFirmware = ICoFirmware;
  CCoFirmwareGUIProvider = ICoFirmwareGUIProvider;
  CCoFirmwareImpl = ICoFirmwareImpl;
  CCoGateDelayListener = ICoGateDelayListener;
  CCoFlGated = ICoFlGated;
  CCoFlGatedGUIProvider = ICoFlGatedGUIProvider;
  CCoSpectrometerPlugIn = ICoSpectrometerPlugIn;
  CCoSpectrometerPlugInCollection = ICoSpectrometerPlugInCollection;
  CCoUSB2000 = ICoUSB2000;
  CCoFlGatedImpl = ICoFlGatedImpl;
  CCoGPIO = ICoGPIO;
  CCoGPIOGUIProvider = ICoGPIOGUIProvider;
  CCoGPIOImpl = ICoGPIOImpl;
  CCoGatingErrorProvider = ICoGatingErrorProvider;
  CCoGatingErrorProviderImpl = ICoGatingErrorProviderImpl;
  CCoHR2000 = ICoHR2000;
  CCoHR2000Plus = ICoHR2000Plus;
  CCoHR2000PlusStatus = ICoHR2000PlusStatus;
  CCoUSBFeature = ICoUSBFeature;
  CCoSHACoefficients = ICoSHACoefficients;
  CCoSHAChannel = ICoSHAChannel;
  CCoHR4000 = ICoHR4000;
  CCoHR4000Status = ICoHR4000Status;
  CCoHardwareTrigger = ICoHardwareTrigger;
  CCoHardwareTriggerGUIProvider = ICoHardwareTriggerGUIProvider;
  CCoHighGainMode = ICoHighGainMode;
  CCoHighGainModeGUIProvider = ICoHighGainModeGUIProvider;
  CCoHighGainModeImpl = ICoHighGainModeImpl;
  CCoHighResTimeStamp = ICoHighResTimeStamp;
  CCoHighResTiming = ICoHighResTiming;
  CCoI2CBus = ICoI2CBus;
  CCoI2CBusGUIProvider = ICoI2CBusGUIProvider;
  CCoI2CBusImpl = ICoI2CBusImpl;
  CCoI2CBusImplFPGA = ICoI2CBusImplFPGA;
  CCoI2CBusImplNonFPGA = ICoI2CBusImplNonFPGA;
  CCoI2CBusImpl_SHA = ICoI2CBusImpl_SHA;
  CCoIrradianceCalibrationFactor = ICoIrradianceCalibrationFactor;
  CCoIrradianceCalibrationFactorGUIProvider = ICoIrradianceCalibrationFactorGUIProvider;
  CCoIrradianceCalibrationFactorImpl = ICoIrradianceCalibrationFactorImpl;
  CCoIrradianceCalibrationFactorImplFPGA = ICoIrradianceCalibrationFactorImplFPGA;
  CCoIrradianceCalibrationFactorImplNonFPGA = ICoIrradianceCalibrationFactorImplNonFPGA;
  CCoJSocket = ICoJSocket;
  CCoJazNetwork = ICoJazNetwork;
  CCoJazStatus = ICoJazStatus;
  CCoJazUSB = ICoJazUSB;
  CCoLS450_FunctionsGUIProvider = ICoLS450_FunctionsGUIProvider;
  CCoLS450_FunctionsImpl = ICoLS450_FunctionsImpl;
  CCoLS450_FunctionsImpl_2000 = ICoLS450_FunctionsImpl_2000;
  CCoLS450_FunctionsImpl_4000 = ICoLS450_FunctionsImpl_4000;
  CCoLaserGUIProvider = ICoLaserGUIProvider;
  CCoLaserProvider = ICoLaserProvider;
  CCoLaserProviderImpl = ICoLaserProviderImpl;
  CCoListIterator = ICoListIterator;
  CCoList = ICoList;
  CCoMMSRamanChannel = ICoMMSRamanChannel;
  CCoMMSRamanConstants = ICoMMSRamanConstants;
  CCoMasterClockDivisor = ICoMasterClockDivisor;
  CCoMasterClockDivisorImpl = ICoMasterClockDivisorImpl;
  CCoMasterClockDivisorListener = ICoMasterClockDivisorListener;
  CCoMasterClockRate = ICoMasterClockRate;
  CCoMasterClockRateImpl = ICoMasterClockRateImpl;
  CCoMasterClockRateImpl_2000 = ICoMasterClockRateImpl_2000;
  CCoMasterClockRateImpl_ADC = ICoMasterClockRateImpl_ADC;
  CCoMasterClockRateImpl_MMSRaman = ICoMasterClockRateImpl_MMSRaman;
  CCoMaya2000 = ICoMaya2000;
  CCoMayaPro2000 = ICoMayaPro2000;
  CCoMethodDescriptorCollection = ICoMethodDescriptorCollection;
  CCoMultiChannelGUIProvider = ICoMultiChannelGUIProvider;
  CCoMultiChannelImpl = ICoMultiChannelImpl;
  CCoMultiChannelImpl_JazNetwork = ICoMultiChannelImpl_JazNetwork;
  CCoMultiChannelImpl_JazUSB = ICoMultiChannelImpl_JazUSB;
  CCoMultiChannelProvider = ICoMultiChannelProvider;
  CCoNIR = ICoNIR;
  CCoNIR256 = ICoNIR256;
  CCoNIR512 = ICoNIR512;
  CCoNIRStatus = ICoNIRStatus;
  CCoNetworkSource = ICoNetworkSource;
  CCoNetworkSourceGUIProvider = ICoNetworkSourceGUIProvider;
  CCoNetworkSpectrometer = ICoNetworkSpectrometer;
  CCoNetworkSourceImpl = ICoNetworkSourceImpl;
  CCoNodeGraphCertificate = ICoNodeGraphCertificate;
  CCoNonlinearityCorrectionGUIProvider = ICoNonlinearityCorrectionGUIProvider;
  CCoNonlinearityCorrectionImpl = ICoNonlinearityCorrectionImpl;
  CCoNonlinearityCorrectionProvider = ICoNonlinearityCorrectionProvider;
  CCoVector = ICoVector;
  CCoSpectrumCertificate = ICoSpectrumCertificate;
  CCoOmniSpectrum = ICoOmniSpectrum;
  CCoOpCodes = ICoOpCodes;
  CCoPlugInProvider = ICoPlugInProvider;
  CCoPlugInProviderImpl = ICoPlugInProviderImpl;
  CCoPlugInProviderImplFPGA = ICoPlugInProviderImplFPGA;
  CCoPlugInProviderImplNonFPGA = ICoPlugInProviderImplNonFPGA;
  CCoPollingTest = ICoPollingTest;
  CCoQE65000 = ICoQE65000;
  CCoRamanExposure = ICoRamanExposure;
  CCoRamanReconstruction = ICoRamanReconstruction;
  CCoRawData = ICoRawData;
  CCoSAS = ICoSAS;
  CCoSASChannel = ICoSASChannel;
  CCoSHA = ICoSHA;
  CCoSHAConstants = ICoSHAConstants;
  CCoSHAGUIProvider = ICoSHAGUIProvider;
  CCoSHAImpl = ICoSHAImpl;
  CCoSPIBus = ICoSPIBus;
  CCoSPIBusGUIProvider = ICoSPIBusGUIProvider;
  CCoSPIBusImpl = ICoSPIBusImpl;
  CCoSPIBusImplFPGA = ICoSPIBusImplFPGA;
  CCoSPIBusImplNonFPGA = ICoSPIBusImplNonFPGA;
  CCoShutterClock = ICoShutterClock;
  CCoShutterClockImpl = ICoShutterClockImpl;
  CCoSimulation = ICoSimulation;
  CCoSimulationChannel = ICoSimulationChannel;
  CCoSimulationGUIProvider = ICoSimulationGUIProvider;
  CCoSimulationImpl = ICoSimulationImpl;
  CCoSimulationProvider = ICoSimulationProvider;
  CCoSingleStrobe = ICoSingleStrobe;
  CCoSingleStrobeGUIProvider = ICoSingleStrobeGUIProvider;
  CCoSingleStrobeImpl = ICoSingleStrobeImpl;
  CCoSpectrumListener = ICoSpectrumListener;
  CCoSpectrumProducer = ICoSpectrumProducer;
  CCoSpectrumHandler = ICoSpectrumHandler;
  CCoSpectralProcessor = ICoSpectralProcessor;
  CCoSpectrometerAssembly = ICoSpectrometerAssembly;
  CCoSpectrometerCollection = ICoSpectrometerCollection;
  CCoSpectrometerFactory = ICoSpectrometerFactory;
  CCoSpectrometerPlugInInfo = ICoSpectrometerPlugInInfo;
  CCoSpectrumConsumer = ICoSpectrumConsumer;
  CCoSpectrumProducerBase = ICoSpectrumProducerBase;
  CCoStatus = ICoStatus;
  CCoStatusGUIProvider = ICoStatusGUIProvider;
  CCoStatusImpl = ICoStatusImpl;
  CCoStatusProvider = ICoStatusProvider;
  CCoStopSpectrum = ICoStopSpectrum;
  CCoStopSpectrumGUIProvider = ICoStopSpectrumGUIProvider;
  CCoStopSpectrumImpl = ICoStopSpectrumImpl;
  CCoStrayLightCorrection = ICoStrayLightCorrection;
  CCoStrayLightCorrectionGUIProvider = ICoStrayLightCorrectionGUIProvider;
  CCoStrayLightCorrectionImpl = ICoStrayLightCorrectionImpl;
  CCoStringCollection = ICoStringCollection;
  CCoSupportStatus = ICoSupportStatus;
  CCoThermoElectric = ICoThermoElectric;
  CCoThermoElectricGUIProvider = ICoThermoElectricGUIProvider;
  CCoThermoElectricImpl = ICoThermoElectricImpl;
  CCoThermoElectricImpl_NIR = ICoThermoElectricImpl_NIR;
  CCoThermoElectricImpl_QE65000 = ICoThermoElectricImpl_QE65000;
  CCoThermoElectricShowFanControl = ICoThermoElectricShowFanControl;
  CCoUSB2000Plus = ICoUSB2000Plus;
  CCoUSB2000PlusStatus = ICoUSB2000PlusStatus;
  CCoUSB325 = ICoUSB325;
  CCoUSB4000 = ICoUSB4000;
  CCoUSB4000Status = ICoUSB4000Status;
  CCoUSB650 = ICoUSB650;
  CCoUSBCommonDescriptor = ICoUSBCommonDescriptor;
  CCoUSBConfigurationDescriptor = ICoUSBConfigurationDescriptor;
  CCoUSBConstants = ICoUSBConstants;
  CCoUSBDeviceDescriptor = ICoUSBDeviceDescriptor;
  CCoUSBEndpointDevice = ICoUSBEndpointDevice;
  CCoUSBImpl = ICoUSBImpl;
  CCoUSBInterfaceDescriptor = ICoUSBInterfaceDescriptor;
  CCoUSBLogicalPortStatus = ICoUSBLogicalPortStatus;
  CCoUSBProductInfo = ICoUSBProductInfo;
  CCoUSBStringDescriptor = ICoUSBStringDescriptor;
  CCoUSB_ISS = ICoUSB_ISS;
  CCoUSB_ISS_UV = ICoUSB_ISS_UV;
  CCoUSB_LS450 = ICoUSB_LS450;
  CCoUV_VIS_LightSource = ICoUV_VIS_LightSource;
  CCoUV_VIS_LightSourceGUIProvider = ICoUV_VIS_LightSourceGUIProvider;
  CCoUV_VIS_LightSourceImpl = ICoUV_VIS_LightSourceImpl;
  CCoUV_VIS_LightSourceImpl_2000 = ICoUV_VIS_LightSourceImpl_2000;
  CCoUV_VIS_LightSourceImpl_4000 = ICoUV_VIS_LightSourceImpl_4000;
  CCoUV_VIS_LightSourceJAZCompatible = ICoUV_VIS_LightSourceJAZCompatible;
  CCoUV_VIS_LightSourceImpl_JAZ = ICoUV_VIS_LightSourceImpl_JAZ;
  CCoUniUSB = ICoUniUSB;
  CCoUniUSBPipeManager = ICoUniUSBPipeManager;
  CCoVersion = ICoVersion;
  CCoVersionGUIProvider = ICoVersionGUIProvider;
  CCoVersionImpl = ICoVersionImpl;
  CCoWavelengthCalibrationGUIProvider = ICoWavelengthCalibrationGUIProvider;
  CCoWavelengthCalibrationImpl = ICoWavelengthCalibrationImpl;
  CCoWavelengthCalibrationImpl_MMSRaman = ICoWavelengthCalibrationImpl_MMSRaman;
  CCoWavelengthCalibrationProvider = ICoWavelengthCalibrationProvider;
  CCoWavelengthCalibrationTableModel = ICoWavelengthCalibrationTableModel;
  CCoWrapper = ICoWrapper;


// *********************************************************************//
// Interface: ICoSpectrometerInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D92AA44D-595C-5E63-90E7-4BFEF74DE381}
// *********************************************************************//
  ICoSpectrometerInfo = interface(IDispatch)
    ['{D92AA44D-595C-5E63-90E7-4BFEF74DE381}']
    procedure CreateSpectrometerInfoB(const COM_spectrometerInfo: ICoSpectrometerInfo); safecall;
    function getSpectrometerFirmwareVersion: WideString; safecall;
    function getSpectrometerNumberOfChannels: Integer; safecall;
    function getSpectrometerSerialNumber: WideString; safecall;
    function getSpectrometerMaximumIntensity: Double; safecall;
    function getSpectrometerMinimumIntegrationTime: Integer; safecall;
    function getSpectrometerMaximumIntegrationTime: Integer; safecall;
    function getSpectrometerIntegrationTimeStep: Integer; safecall;
    function getSpectrometerIntegrationTimeBase: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrometerInfoDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D92AA44D-595C-5E63-90E7-4BFEF74DE381}
// *********************************************************************//
  ICoSpectrometerInfoDisp = dispinterface
    ['{D92AA44D-595C-5E63-90E7-4BFEF74DE381}']
    procedure CreateSpectrometerInfoB(const COM_spectrometerInfo: ICoSpectrometerInfo); dispid 1;
    function getSpectrometerFirmwareVersion: WideString; dispid 2;
    function getSpectrometerNumberOfChannels: Integer; dispid 3;
    function getSpectrometerSerialNumber: WideString; dispid 4;
    function getSpectrometerMaximumIntensity: Double; dispid 5;
    function getSpectrometerMinimumIntegrationTime: Integer; dispid 6;
    function getSpectrometerMaximumIntegrationTime: Integer; dispid 7;
    function getSpectrometerIntegrationTimeStep: Integer; dispid 8;
    function getSpectrometerIntegrationTimeBase: Integer; dispid 9;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 10;
  end;

// *********************************************************************//
// Interface: ICoCoefficients
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {48B07BC8-2430-506B-811C-629FD4764280}
// *********************************************************************//
  ICoCoefficients = interface(IDispatch)
    ['{48B07BC8-2430-506B-811C-629FD4764280}']
    procedure CreateCoefficients; safecall;
    procedure CreateCoefficientsB(const COM_c: ICoCoefficients); safecall;
    function getWlIntercept: Double; safecall;
    procedure setWlIntercept(COM_value: Double); safecall;
    function getWlFirst: Double; safecall;
    procedure setWlFirst(COM_value: Double); safecall;
    function getWlSecond: Double; safecall;
    procedure setWlSecond(COM_value: Double); safecall;
    function getWlThird: Double; safecall;
    procedure setWlThird(COM_value: Double); safecall;
    function getWlCoefficients: OleVariant; safecall;
    procedure setWlCoefficients(COM_wl: OleVariant); safecall;
    function getNlCoef0: Double; safecall;
    procedure setNlCoef0(COM_value: Double); safecall;
    function getNlCoef1: Double; safecall;
    procedure setNlCoef1(COM_value: Double); safecall;
    function getNlCoef2: Double; safecall;
    procedure setNlCoef2(COM_value: Double); safecall;
    function getNlCoef3: Double; safecall;
    procedure setNlCoef3(COM_value: Double); safecall;
    function getNlCoef4: Double; safecall;
    procedure setNlCoef4(COM_value: Double); safecall;
    function getNlCoef5: Double; safecall;
    procedure setNlCoef5(COM_value: Double); safecall;
    function getNlCoef6: Double; safecall;
    procedure setNlCoef6(COM_value: Double); safecall;
    function getNlCoef7: Double; safecall;
    procedure setNlCoef7(COM_value: Double); safecall;
    function getNlOrder: Integer; safecall;
    procedure setNlOrder(COM_value: Integer); safecall;
    function getNlCoefficients: OleVariant; safecall;
    procedure setNlCoefficients(COM_nl: OleVariant); safecall;
    function getStrayLight: Double; safecall;
    function getStrayLightSlope: Double; safecall;
    procedure setStrayLight(COM_value: Double); safecall;
    procedure setStrayLightB(COM_intercept: Double; COM_slope: Double); safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoCoefficientsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {48B07BC8-2430-506B-811C-629FD4764280}
// *********************************************************************//
  ICoCoefficientsDisp = dispinterface
    ['{48B07BC8-2430-506B-811C-629FD4764280}']
    procedure CreateCoefficients; dispid 1;
    procedure CreateCoefficientsB(const COM_c: ICoCoefficients); dispid 2;
    function getWlIntercept: Double; dispid 4;
    procedure setWlIntercept(COM_value: Double); dispid 5;
    function getWlFirst: Double; dispid 6;
    procedure setWlFirst(COM_value: Double); dispid 7;
    function getWlSecond: Double; dispid 8;
    procedure setWlSecond(COM_value: Double); dispid 9;
    function getWlThird: Double; dispid 10;
    procedure setWlThird(COM_value: Double); dispid 11;
    function getWlCoefficients: OleVariant; dispid 12;
    procedure setWlCoefficients(COM_wl: OleVariant); dispid 13;
    function getNlCoef0: Double; dispid 14;
    procedure setNlCoef0(COM_value: Double); dispid 15;
    function getNlCoef1: Double; dispid 16;
    procedure setNlCoef1(COM_value: Double); dispid 17;
    function getNlCoef2: Double; dispid 18;
    procedure setNlCoef2(COM_value: Double); dispid 19;
    function getNlCoef3: Double; dispid 20;
    procedure setNlCoef3(COM_value: Double); dispid 21;
    function getNlCoef4: Double; dispid 22;
    procedure setNlCoef4(COM_value: Double); dispid 23;
    function getNlCoef5: Double; dispid 24;
    procedure setNlCoef5(COM_value: Double); dispid 25;
    function getNlCoef6: Double; dispid 26;
    procedure setNlCoef6(COM_value: Double); dispid 27;
    function getNlCoef7: Double; dispid 28;
    procedure setNlCoef7(COM_value: Double); dispid 29;
    function getNlOrder: Integer; dispid 30;
    procedure setNlOrder(COM_value: Integer); dispid 31;
    function getNlCoefficients: OleVariant; dispid 32;
    procedure setNlCoefficients(COM_nl: OleVariant); dispid 33;
    function getStrayLight: Double; dispid 34;
    function getStrayLightSlope: Double; dispid 35;
    procedure setStrayLight(COM_value: Double); dispid 36;
    procedure setStrayLightB(COM_intercept: Double; COM_slope: Double); dispid 37;
    function toString: WideString; dispid 38;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 39;
  end;

// *********************************************************************//
// Interface: ICoSpectrum
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BCD265BE-A8F5-56BD-91BD-FCA5C1C5C249}
// *********************************************************************//
  ICoSpectrum = interface(IDispatch)
    ['{BCD265BE-A8F5-56BD-91BD-FCA5C1C5C249}']
    procedure CreateSpectrumB(COM_totalpixels: Integer; COM_darkPixels: Integer); safecall;
    procedure CreateSpectrumC(COM_spectrum: OleVariant; COM_darkPixels: OleVariant); safecall;
    function getSpectrum: OleVariant; safecall;
    procedure setSpectrum(COM_spectrum: OleVariant); safecall;
    function isOfSize(COM_numberOfPixels: Integer; COM_numberOfDarkPixels: Integer): WordBool; safecall;
    function getNumberOfDarkPixels: Integer; safecall;
    function getDarkPixels: OleVariant; safecall;
    function isSameSizeAs(const COM_other: ICoSpectrum): WordBool; safecall;
    function isSaturated: WordBool; safecall;
    procedure setSaturated(COM_saturated: WordBool); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrumDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BCD265BE-A8F5-56BD-91BD-FCA5C1C5C249}
// *********************************************************************//
  ICoSpectrumDisp = dispinterface
    ['{BCD265BE-A8F5-56BD-91BD-FCA5C1C5C249}']
    procedure CreateSpectrumB(COM_totalpixels: Integer; COM_darkPixels: Integer); dispid 1;
    procedure CreateSpectrumC(COM_spectrum: OleVariant; COM_darkPixels: OleVariant); dispid 2;
    function getSpectrum: OleVariant; dispid 3;
    procedure setSpectrum(COM_spectrum: OleVariant); dispid 4;
    function isOfSize(COM_numberOfPixels: Integer; COM_numberOfDarkPixels: Integer): WordBool; dispid 5;
    function getNumberOfDarkPixels: Integer; dispid 6;
    function getDarkPixels: OleVariant; dispid 7;
    function isSameSizeAs(const COM_other: ICoSpectrum): WordBool; dispid 8;
    function isSaturated: WordBool; dispid 9;
    procedure setSaturated(COM_saturated: WordBool); dispid 10;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 11;
  end;

// *********************************************************************//
// Interface: ICoSpectrometerChannelInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A09D2102-D4D6-5B61-9182-1D21A1D6C1C6}
// *********************************************************************//
  ICoSpectrometerChannelInfo = interface(IDispatch)
    ['{A09D2102-D4D6-5B61-9182-1D21A1D6C1C6}']
    procedure CreateSpectrometerChannelInfoB(const COM_spectrometerChannelInfo: ICoSpectrometerChannelInfo); safecall;
    procedure CreateSpectrometerChannelInfoC(const COM_spectrometerInfo: ICoSpectrometerInfo); safecall;
    procedure CreateSpectrometerChannelInfoD(const COM_spectrometerInfo: ICoSpectrometerInfo; 
                                             COM_wavelengths: OleVariant; COM_channel: Integer; 
                                             COM_triggerEnabled: WordBool; 
                                             const COM_coefficients: ICoCoefficients; 
                                             COM_laserWavelength: Double; COM_interlock: WordBool; 
                                             COM_numberOfPixels: Integer; 
                                             COM_numberOfDarkPixels: Integer); safecall;
    function getChannelWavelengths: OleVariant; safecall;
    procedure setChannelWavelengths(COM_wavelengths: OleVariant); safecall;
    function getChannelNumber: Integer; safecall;
    procedure setChannelNumber(COM_channel: Integer); safecall;
    function isChannelStabilityScanEnabled: WordBool; safecall;
    procedure setChannelStabilityScanEnabled(COM_stabilityScanEnabled: WordBool); safecall;
    function isChannelExternalTriggerEnabled: WordBool; safecall;
    procedure setChannelExternalTriggerEnabled(COM_externalTriggerEnabled: WordBool); safecall;
    function getChannelCoefficients: ICoCoefficients; safecall;
    procedure setChannelCoefficients(const COM_coefficients: ICoCoefficients); safecall;
    function getLaserWavelength: Double; safecall;
    procedure setLaserWavelength(COM_laserWavelength: Double); safecall;
    function isInterlock: WordBool; safecall;
    procedure setInterlock(COM_interlock: WordBool); safecall;
    function getNumberOfPixels: Integer; safecall;
    function getNumberOfDarkPixels: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrometerChannelInfoDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A09D2102-D4D6-5B61-9182-1D21A1D6C1C6}
// *********************************************************************//
  ICoSpectrometerChannelInfoDisp = dispinterface
    ['{A09D2102-D4D6-5B61-9182-1D21A1D6C1C6}']
    procedure CreateSpectrometerChannelInfoB(const COM_spectrometerChannelInfo: ICoSpectrometerChannelInfo); dispid 1;
    procedure CreateSpectrometerChannelInfoC(const COM_spectrometerInfo: ICoSpectrometerInfo); dispid 2;
    procedure CreateSpectrometerChannelInfoD(const COM_spectrometerInfo: ICoSpectrometerInfo; 
                                             COM_wavelengths: OleVariant; COM_channel: Integer; 
                                             COM_triggerEnabled: WordBool; 
                                             const COM_coefficients: ICoCoefficients; 
                                             COM_laserWavelength: Double; COM_interlock: WordBool; 
                                             COM_numberOfPixels: Integer; 
                                             COM_numberOfDarkPixels: Integer); dispid 3;
    function getChannelWavelengths: OleVariant; dispid 4;
    procedure setChannelWavelengths(COM_wavelengths: OleVariant); dispid 5;
    function getChannelNumber: Integer; dispid 6;
    procedure setChannelNumber(COM_channel: Integer); dispid 7;
    function isChannelStabilityScanEnabled: WordBool; dispid 8;
    procedure setChannelStabilityScanEnabled(COM_stabilityScanEnabled: WordBool); dispid 9;
    function isChannelExternalTriggerEnabled: WordBool; dispid 10;
    procedure setChannelExternalTriggerEnabled(COM_externalTriggerEnabled: WordBool); dispid 11;
    function getChannelCoefficients: ICoCoefficients; dispid 12;
    procedure setChannelCoefficients(const COM_coefficients: ICoCoefficients); dispid 13;
    function getLaserWavelength: Double; dispid 14;
    procedure setLaserWavelength(COM_laserWavelength: Double); dispid 15;
    function isInterlock: WordBool; dispid 16;
    procedure setInterlock(COM_interlock: WordBool); dispid 17;
    function getNumberOfPixels: Integer; dispid 18;
    function getNumberOfDarkPixels: Integer; dispid 19;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 20;
  end;

// *********************************************************************//
// Interface: ICoSpectrometerChannel
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {503D6F06-0A2F-5F7B-81E6-3264F46EF276}
// *********************************************************************//
  ICoSpectrometerChannel = interface(IDispatch)
    ['{503D6F06-0A2F-5F7B-81E6-3264F46EF276}']
    procedure generateMetadata(const COM_sb: ICoSpectrometerInfo; COM_index: Integer); safecall;
    function getCoefficients: ICoCoefficients; safecall;
    procedure setCoefficients(const COM_c: ICoCoefficients); safecall;
    function getChannelIndex: Integer; safecall;
    procedure getCoefficientsFromSpectrometer; safecall;
    procedure setCoefficientsB; safecall;
    procedure setWavelengthCalibration; safecall;
    procedure setStrayLightCorrection; safecall;
    function getWavelength(COM_pixel: Integer): Double; safecall;
    function getAllWavelengths: OleVariant; safecall;
    function getAllStoredWavelengths: OleVariant; safecall;
    function getPixel(COM_wl: Double): Integer; safecall;
    function getStartingWavelength: Double; safecall;
    function getEndingWavelength: Double; safecall;
    function getSpectrum: ICoSpectrum; safecall;
    function getSpectrumB(const COM_spectrum: ICoSpectrum): ICoSpectrum; safecall;
    function getMaxIntensity: Integer; safecall;
    function getLaserWavelength: Double; safecall;
    procedure setLaserWavelength(COM_laserWavelength: Double); safecall;
    function isInterlock: WordBool; safecall;
    procedure setInterlock(COM_interlock: WordBool); safecall;
    procedure newSpectrum(const COM_spectrum: ICoSpectrum); safecall;
    function getSpectrometerChannelInfo: ICoSpectrometerChannelInfo; safecall;
    procedure setSpectrometerChannelInfoCoefficients(const COM_coefficients: ICoCoefficients); safecall;
    function getPollingInterval: Integer; safecall;
    procedure setPollingInterval(COM_pollingInterval: Integer); safecall;
    function isPolling: WordBool; safecall;
    procedure setPolling(COM_polling: WordBool); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrometerChannelDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {503D6F06-0A2F-5F7B-81E6-3264F46EF276}
// *********************************************************************//
  ICoSpectrometerChannelDisp = dispinterface
    ['{503D6F06-0A2F-5F7B-81E6-3264F46EF276}']
    procedure generateMetadata(const COM_sb: ICoSpectrometerInfo; COM_index: Integer); dispid 2;
    function getCoefficients: ICoCoefficients; dispid 3;
    procedure setCoefficients(const COM_c: ICoCoefficients); dispid 4;
    function getChannelIndex: Integer; dispid 5;
    procedure getCoefficientsFromSpectrometer; dispid 6;
    procedure setCoefficientsB; dispid 7;
    procedure setWavelengthCalibration; dispid 8;
    procedure setStrayLightCorrection; dispid 9;
    function getWavelength(COM_pixel: Integer): Double; dispid 11;
    function getAllWavelengths: OleVariant; dispid 12;
    function getAllStoredWavelengths: OleVariant; dispid 13;
    function getPixel(COM_wl: Double): Integer; dispid 14;
    function getStartingWavelength: Double; dispid 15;
    function getEndingWavelength: Double; dispid 16;
    function getSpectrum: ICoSpectrum; dispid 18;
    function getSpectrumB(const COM_spectrum: ICoSpectrum): ICoSpectrum; dispid 19;
    function getMaxIntensity: Integer; dispid 20;
    function getLaserWavelength: Double; dispid 21;
    procedure setLaserWavelength(COM_laserWavelength: Double); dispid 22;
    function isInterlock: WordBool; dispid 23;
    procedure setInterlock(COM_interlock: WordBool); dispid 24;
    procedure newSpectrum(const COM_spectrum: ICoSpectrum); dispid 25;
    function getSpectrometerChannelInfo: ICoSpectrometerChannelInfo; dispid 26;
    procedure setSpectrometerChannelInfoCoefficients(const COM_coefficients: ICoCoefficients); dispid 27;
    function getPollingInterval: Integer; dispid 28;
    procedure setPollingInterval(COM_pollingInterval: Integer); dispid 29;
    function isPolling: WordBool; dispid 30;
    procedure setPolling(COM_polling: WordBool); dispid 31;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 32;
  end;

// *********************************************************************//
// Interface: ICoSpectrometerChannelCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6544CB7F-07FA-5089-81D9-10BC2D108991}
// *********************************************************************//
  ICoSpectrometerChannelCollection = interface(IDispatch)
    ['{6544CB7F-07FA-5089-81D9-10BC2D108991}']
    function Item(index: OleVariant): OleVariant; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const pnewSpectrometerChannelCollection: IDispatch); safecall;
    procedure Remove(index: Integer); safecall;
    function Get__NewEnum: IUnknown; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrometerChannelCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6544CB7F-07FA-5089-81D9-10BC2D108991}
// *********************************************************************//
  ICoSpectrometerChannelCollectionDisp = dispinterface
    ['{6544CB7F-07FA-5089-81D9-10BC2D108991}']
    function Item(index: OleVariant): OleVariant; dispid 0;
    property Count: Integer readonly dispid 1;
    procedure Add(const pnewSpectrometerChannelCollection: IDispatch); dispid 2;
    procedure Remove(index: Integer); dispid 3;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// Interface: ICoBench
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {83CB4594-770C-57E2-90AD-4B762A88F987}
// *********************************************************************//
  ICoBench = interface(IDispatch)
    ['{83CB4594-770C-57E2-90AD-4B762A88F987}']
    procedure CreateBench; safecall;
    function getFilterWavelength: WideString; safecall;
    procedure setFilterWavelength(const COM_value: WideString); safecall;
    function getSlitSize: WideString; safecall;
    procedure setSlitSize(const COM_value: WideString); safecall;
    function getGrating: WideString; safecall;
    procedure setGrating(const COM_value: WideString); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoBenchDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {83CB4594-770C-57E2-90AD-4B762A88F987}
// *********************************************************************//
  ICoBenchDisp = dispinterface
    ['{83CB4594-770C-57E2-90AD-4B762A88F987}']
    procedure CreateBench; dispid 1;
    function getFilterWavelength: WideString; dispid 2;
    procedure setFilterWavelength(const COM_value: WideString); dispid 3;
    function getSlitSize: WideString; dispid 4;
    procedure setSlitSize(const COM_value: WideString); dispid 5;
    function getGrating: WideString; dispid 6;
    procedure setGrating(const COM_value: WideString); dispid 7;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 8;
  end;

// *********************************************************************//
// Interface: ICoDetector
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F7582140-874D-55CE-907D-C950A9A3F2E3}
// *********************************************************************//
  ICoDetector = interface(IDispatch)
    ['{F7582140-874D-55CE-907D-C950A9A3F2E3}']
    procedure CreateDetector; safecall;
    function getSerialNumber: WideString; safecall;
    procedure setSerialNumber(const COM_value: WideString); safecall;
    function getArrayCoatingMfg: WideString; safecall;
    procedure setArrayCoatingMfg(const COM_value: WideString); safecall;
    function isLensInstalled: WordBool; safecall;
    procedure setLensInstalled(COM_value: WordBool); safecall;
    function getArrayWavelength: WideString; safecall;
    procedure setArrayWavelength(const COM_value: WideString); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoDetectorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F7582140-874D-55CE-907D-C950A9A3F2E3}
// *********************************************************************//
  ICoDetectorDisp = dispinterface
    ['{F7582140-874D-55CE-907D-C950A9A3F2E3}']
    procedure CreateDetector; dispid 1;
    function getSerialNumber: WideString; dispid 2;
    procedure setSerialNumber(const COM_value: WideString); dispid 3;
    function getArrayCoatingMfg: WideString; dispid 4;
    procedure setArrayCoatingMfg(const COM_value: WideString); dispid 5;
    function isLensInstalled: WordBool; dispid 6;
    procedure setLensInstalled(COM_value: WordBool); dispid 7;
    function getArrayWavelength: WideString; dispid 8;
    procedure setArrayWavelength(const COM_value: WideString); dispid 9;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 10;
  end;

// *********************************************************************//
// Interface: ICoConfiguration
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3066048B-A1BE-5D68-9089-2DE7AC5E6E35}
// *********************************************************************//
  ICoConfiguration = interface(IDispatch)
    ['{3066048B-A1BE-5D68-9089-2DE7AC5E6E35}']
    procedure getConfigurationFromSpectrometer; safecall;
    procedure setConfigurationToSpectrometer; safecall;
    function getBench: ICoBench; safecall;
    procedure setBench(const COM_value: ICoBench); safecall;
    function getDetector: ICoDetector; safecall;
    procedure setDetector(const COM_value: ICoDetector); safecall;
    function getCpldVersion: WideString; safecall;
    procedure setCpldVersion(const COM_value: WideString); safecall;
    function isBenchDefined: WordBool; safecall;
    function isSpectrometerConfigurationDefined: WordBool; safecall;
    function isDetectorSerialNumberDefined: WordBool; safecall;
    function isCPLDVersionDefined: WordBool; safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoConfigurationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3066048B-A1BE-5D68-9089-2DE7AC5E6E35}
// *********************************************************************//
  ICoConfigurationDisp = dispinterface
    ['{3066048B-A1BE-5D68-9089-2DE7AC5E6E35}']
    procedure getConfigurationFromSpectrometer; dispid 3;
    procedure setConfigurationToSpectrometer; dispid 4;
    function getBench: ICoBench; dispid 5;
    procedure setBench(const COM_value: ICoBench); dispid 6;
    function getDetector: ICoDetector; dispid 7;
    procedure setDetector(const COM_value: ICoDetector); dispid 8;
    function getCpldVersion: WideString; dispid 9;
    procedure setCpldVersion(const COM_value: WideString); dispid 10;
    function isBenchDefined: WordBool; dispid 11;
    function isSpectrometerConfigurationDefined: WordBool; dispid 12;
    function isDetectorSerialNumberDefined: WordBool; dispid 13;
    function isCPLDVersionDefined: WordBool; dispid 14;
    function toString: WideString; dispid 15;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 16;
  end;

// *********************************************************************//
// Interface: ICoSpectrometer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB26BF16-4631-568E-9181-FBEA90C6CC75}
// *********************************************************************//
  ICoSpectrometer = interface(IDispatch)
    ['{EB26BF16-4631-568E-9181-FBEA90C6CC75}']
    procedure openSpectrometer(COM_param0: Integer); safecall;
    procedure CreateSpectrometer; safecall;
    function getSpectrumBase: ICoSpectrometerInfo; safecall;
    procedure setStabilityScan(COM_on: WordBool); safecall;
    function isStabilityScan: WordBool; safecall;
    function getIntegrationTimeMinimum: Integer; safecall;
    function getIntegrationTimeMaximum: Integer; safecall;
    function getIntegrationTimeIncrement: Integer; safecall;
    function getIntegrationTimeBase: Integer; safecall;
    function getActualIntegrationTime: Integer; safecall;
    function getChannels: ICoSpectrometerChannelCollection; safecall;
    function getNumberOfChannels: Integer; safecall;
    function getNumberOfEnabledChannels: Integer; safecall;
    function getChannelIndices: OleVariant; safecall;
    function isRotatorEnabled: WordBool; safecall;
    procedure setRotatorEnabled(COM_rotator: WordBool); safecall;
    function getBenchSlot: Integer; safecall;
    function getSpectrometerConfigSlot: Integer; safecall;
    function getDetectorSerialNumberSlot: Integer; safecall;
    function getCPLDVersionSlot: Integer; safecall;
    procedure getConfigurationFromSpectrometer; safecall;
    procedure setConfiguration; safecall;
    function getNewCoefficients(COM_index: Integer): ICoCoefficients; safecall;
    procedure getCoefficientsFromSpectrometer; safecall;
    procedure setCoefficients; safecall;
    function getFirmwareVersionNumber: Integer; safecall;
    function getCodeVersion(const COM_fileName: WideString): WideString; safecall;
    function getMaxIntensity: Integer; safecall;
    function isStrobeDelayEnabled: WordBool; safecall;
    procedure close; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrometerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EB26BF16-4631-568E-9181-FBEA90C6CC75}
// *********************************************************************//
  ICoSpectrometerDisp = dispinterface
    ['{EB26BF16-4631-568E-9181-FBEA90C6CC75}']
    procedure openSpectrometer(COM_param0: Integer); dispid 1;
    procedure CreateSpectrometer; dispid 2;
    function getSpectrumBase: ICoSpectrometerInfo; dispid 3;
    procedure setStabilityScan(COM_on: WordBool); dispid 4;
    function isStabilityScan: WordBool; dispid 5;
    function getIntegrationTimeMinimum: Integer; dispid 6;
    function getIntegrationTimeMaximum: Integer; dispid 7;
    function getIntegrationTimeIncrement: Integer; dispid 8;
    function getIntegrationTimeBase: Integer; dispid 9;
    function getActualIntegrationTime: Integer; dispid 10;
    function getChannels: ICoSpectrometerChannelCollection; dispid 11;
    function getNumberOfChannels: Integer; dispid 12;
    function getNumberOfEnabledChannels: Integer; dispid 13;
    function getChannelIndices: OleVariant; dispid 14;
    function isRotatorEnabled: WordBool; dispid 15;
    procedure setRotatorEnabled(COM_rotator: WordBool); dispid 16;
    function getBenchSlot: Integer; dispid 17;
    function getSpectrometerConfigSlot: Integer; dispid 18;
    function getDetectorSerialNumberSlot: Integer; dispid 19;
    function getCPLDVersionSlot: Integer; dispid 20;
    procedure getConfigurationFromSpectrometer; dispid 22;
    procedure setConfiguration; dispid 23;
    function getNewCoefficients(COM_index: Integer): ICoCoefficients; dispid 24;
    procedure getCoefficientsFromSpectrometer; dispid 25;
    procedure setCoefficients; dispid 26;
    function getFirmwareVersionNumber: Integer; dispid 27;
    function getCodeVersion(const COM_fileName: WideString): WideString; dispid 28;
    function getMaxIntensity: Integer; dispid 29;
    function isStrobeDelayEnabled: WordBool; dispid 30;
    procedure close; dispid 31;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 32;
  end;

// *********************************************************************//
// Interface: ICoADC1000Channel
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EEC82062-DD25-5401-8015-C9CCEB653D23}
// *********************************************************************//
  ICoADC1000Channel = interface(IDispatch)
    ['{EEC82062-DD25-5401-8015-C9CCEB653D23}']
    procedure CreateADC1000ChannelB(const COM_spectrometer: ICoSpectrometer; 
                                    const COM_coefficients: ICoCoefficients; COM_channel: Integer); safecall;
    procedure getCoefficientsFromSpectrometer; safecall;
    procedure setCoefficients; safecall;
    procedure setWavelengthCalibration; safecall;
    function getAllWavelengths: OleVariant; safecall;
    function getWavelength(COM_pixel: Integer): Double; safecall;
    function getDeepWellWavelength(COM_pixel: Integer): Double; safecall;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; safecall;
    function getSpectrumB: ICoSpectrum; safecall;
    procedure fixNumberOfPixels; safecall;
    function isMaster: WordBool; safecall;
    function isEnabled: WordBool; safecall;
    procedure setEnabled(COM_enabled: WordBool); safecall;
    function isInterpolated: WordBool; safecall;
    procedure setInterpolated(COM_interpolated: WordBool); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoADC1000ChannelDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EEC82062-DD25-5401-8015-C9CCEB653D23}
// *********************************************************************//
  ICoADC1000ChannelDisp = dispinterface
    ['{EEC82062-DD25-5401-8015-C9CCEB653D23}']
    procedure CreateADC1000ChannelB(const COM_spectrometer: ICoSpectrometer; 
                                    const COM_coefficients: ICoCoefficients; COM_channel: Integer); dispid 1;
    procedure getCoefficientsFromSpectrometer; dispid 2;
    procedure setCoefficients; dispid 3;
    procedure setWavelengthCalibration; dispid 4;
    function getAllWavelengths: OleVariant; dispid 6;
    function getWavelength(COM_pixel: Integer): Double; dispid 7;
    function getDeepWellWavelength(COM_pixel: Integer): Double; dispid 8;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; dispid 9;
    function getSpectrumB: ICoSpectrum; dispid 10;
    procedure fixNumberOfPixels; dispid 11;
    function isMaster: WordBool; dispid 12;
    function isEnabled: WordBool; dispid 13;
    procedure setEnabled(COM_enabled: WordBool); dispid 14;
    function isInterpolated: WordBool; dispid 15;
    procedure setInterpolated(COM_interpolated: WordBool); dispid 16;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 17;
  end;

// *********************************************************************//
// Interface: ICoUSBEndpointDescriptor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {36C4B9EC-2C72-5C22-814E-9861195C160A}
// *********************************************************************//
  ICoUSBEndpointDescriptor = interface(IDispatch)
    ['{36C4B9EC-2C72-5C22-814E-9861195C160A}']
    procedure CreateUSBEndpointDescriptor; safecall;
    procedure CreateUSBEndpointDescriptorB(COM_bLength: Shortint; COM_bDescriptorType: Shortint; 
                                           COM_bEndpointAddress: Smallint; 
                                           COM_bmAttributes: Shortint; 
                                           COM_wMaxPacketSize: Smallint; COM_bInterval: Shortint); safecall;
    function toString: WideString; safecall;
    function getLength: Shortint; safecall;
    function getDescriptorType: Shortint; safecall;
    function getEndpointAddress: Smallint; safecall;
    function getAttributes: Shortint; safecall;
    function getMaxPacketSize: Smallint; safecall;
    function getInterval: Shortint; safecall;
    procedure setLength(COM_bLength: Shortint); safecall;
    procedure setDescriptorType(COM_bDescriptorType: Shortint); safecall;
    procedure setEndpointAddress(COM_bEndpointAddress: Smallint); safecall;
    procedure setAttributes(COM_bmAttributes: Shortint); safecall;
    procedure setMaxPacketSize(COM_wMaxPacketSize: Smallint); safecall;
    procedure setInterval(COM_bInterval: Shortint); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSBEndpointDescriptorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {36C4B9EC-2C72-5C22-814E-9861195C160A}
// *********************************************************************//
  ICoUSBEndpointDescriptorDisp = dispinterface
    ['{36C4B9EC-2C72-5C22-814E-9861195C160A}']
    procedure CreateUSBEndpointDescriptor; dispid 1;
    procedure CreateUSBEndpointDescriptorB(COM_bLength: {??Shortint}OleVariant; 
                                           COM_bDescriptorType: {??Shortint}OleVariant; 
                                           COM_bEndpointAddress: Smallint; 
                                           COM_bmAttributes: {??Shortint}OleVariant; 
                                           COM_wMaxPacketSize: Smallint; 
                                           COM_bInterval: {??Shortint}OleVariant); dispid 2;
    function toString: WideString; dispid 3;
    function getLength: {??Shortint}OleVariant; dispid 4;
    function getDescriptorType: {??Shortint}OleVariant; dispid 5;
    function getEndpointAddress: Smallint; dispid 6;
    function getAttributes: {??Shortint}OleVariant; dispid 7;
    function getMaxPacketSize: Smallint; dispid 8;
    function getInterval: {??Shortint}OleVariant; dispid 9;
    procedure setLength(COM_bLength: {??Shortint}OleVariant); dispid 10;
    procedure setDescriptorType(COM_bDescriptorType: {??Shortint}OleVariant); dispid 11;
    procedure setEndpointAddress(COM_bEndpointAddress: Smallint); dispid 12;
    procedure setAttributes(COM_bmAttributes: {??Shortint}OleVariant); dispid 13;
    procedure setMaxPacketSize(COM_wMaxPacketSize: Smallint); dispid 14;
    procedure setInterval(COM_bInterval: {??Shortint}OleVariant); dispid 15;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 16;
  end;

// *********************************************************************//
// Interface: ICoGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7258FBE5-C3C6-5E6E-80C8-E80060E6BEAB}
// *********************************************************************//
  ICoGUIProvider = interface(IDispatch)
    ['{7258FBE5-C3C6-5E6E-80C8-E80060E6BEAB}']
    procedure CreateGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7258FBE5-C3C6-5E6E-80C8-E80060E6BEAB}
// *********************************************************************//
  ICoGUIProviderDisp = dispinterface
    ['{7258FBE5-C3C6-5E6E-80C8-E80060E6BEAB}']
    procedure CreateGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoGUIProviderCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E1041F85-EF75-5D08-9002-4012E7853ADC}
// *********************************************************************//
  ICoGUIProviderCollection = interface(IDispatch)
    ['{E1041F85-EF75-5D08-9002-4012E7853ADC}']
    function Item(index: OleVariant): OleVariant; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const pnewGUIProviderCollection: IDispatch); safecall;
    procedure Remove(index: Integer); safecall;
    function Get__NewEnum: IUnknown; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  ICoGUIProviderCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E1041F85-EF75-5D08-9002-4012E7853ADC}
// *********************************************************************//
  ICoGUIProviderCollectionDisp = dispinterface
    ['{E1041F85-EF75-5D08-9002-4012E7853ADC}']
    function Item(index: OleVariant): OleVariant; dispid 0;
    property Count: Integer readonly dispid 1;
    procedure Add(const pnewGUIProviderCollection: IDispatch); dispid 2;
    procedure Remove(index: Integer); dispid 3;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// Interface: ICoErrorCode
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D7F6044C-D539-5EAF-91BC-A8BD9B3AF1B4}
// *********************************************************************//
  ICoErrorCode = interface(IDispatch)
    ['{D7F6044C-D539-5EAF-91BC-A8BD9B3AF1B4}']
    procedure CreateErrorCodeB(COM_newCode: Integer); safecall;
    procedure setErrorCode(COM_code: Integer; COM_on: WordBool); safecall;
    function getErrorCodes: Integer; safecall;
    function isCodeIgnored(COM_code: Integer): WordBool; safecall;
    procedure setCodeIgnored(COM_code: Integer; COM_ignore: WordBool); safecall;
    function isErrorCodeSet(COM_code: Integer): WordBool; safecall;
    function getErrorResponse(COM_code: Integer): WideString; safecall;
    function getIngoreResponse: WideString; safecall;
    function getErrorCount: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoErrorCodeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D7F6044C-D539-5EAF-91BC-A8BD9B3AF1B4}
// *********************************************************************//
  ICoErrorCodeDisp = dispinterface
    ['{D7F6044C-D539-5EAF-91BC-A8BD9B3AF1B4}']
    procedure CreateErrorCodeB(COM_newCode: Integer); dispid 1;
    procedure setErrorCode(COM_code: Integer; COM_on: WordBool); dispid 2;
    function getErrorCodes: Integer; dispid 3;
    function isCodeIgnored(COM_code: Integer): WordBool; dispid 4;
    procedure setCodeIgnored(COM_code: Integer; COM_ignore: WordBool); dispid 5;
    function isErrorCodeSet(COM_code: Integer): WordBool; dispid 6;
    function getErrorResponse(COM_code: Integer): WideString; dispid 8;
    function getIngoreResponse: WideString; dispid 9;
    function getErrorCount: Integer; dispid 10;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 11;
  end;

// *********************************************************************//
// Interface: ICoOmniDriverDispatchListener
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6C9CBA55-7631-519F-817F-F03FB3E01B31}
// *********************************************************************//
  ICoOmniDriverDispatchListener = interface(IDispatch)
    ['{6C9CBA55-7631-519F-817F-F03FB3E01B31}']
    procedure CreateOmniDriverDispatchListener; safecall;
    procedure dispatchError(const COM_param0: ICoErrorCode; COM_param1: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoOmniDriverDispatchListenerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6C9CBA55-7631-519F-817F-F03FB3E01B31}
// *********************************************************************//
  ICoOmniDriverDispatchListenerDisp = dispinterface
    ['{6C9CBA55-7631-519F-817F-F03FB3E01B31}']
    procedure CreateOmniDriverDispatchListener; dispid 1;
    procedure dispatchError(const COM_param0: ICoErrorCode; COM_param1: Integer); dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoAcquisitionPropertiesListener
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F87D11C6-BD2A-56CD-81DB-764C19AAC6DD}
// *********************************************************************//
  ICoAcquisitionPropertiesListener = interface(IDispatch)
    ['{F87D11C6-BD2A-56CD-81DB-764C19AAC6DD}']
    procedure CreateAcquisitionPropertiesListener; safecall;
    procedure acquisitionPropertiesChange; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoAcquisitionPropertiesListenerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F87D11C6-BD2A-56CD-81DB-764C19AAC6DD}
// *********************************************************************//
  ICoAcquisitionPropertiesListenerDisp = dispinterface
    ['{F87D11C6-BD2A-56CD-81DB-764C19AAC6DD}']
    procedure CreateAcquisitionPropertiesListener; dispid 1;
    procedure acquisitionPropertiesChange; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoSpectrometerStatus
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {245C8F47-A690-50C4-9139-D2B9DEBC84A4}
// *********************************************************************//
  ICoSpectrometerStatus = interface(IDispatch)
    ['{245C8F47-A690-50C4-9139-D2B9DEBC84A4}']
    procedure CreateSpectrometerStatus; safecall;
    function isLampEnabled: WordBool; safecall;
    function isTakingScan: WordBool; safecall;
    function isDataReady: WordBool; safecall;
    function isFailed: WordBool; safecall;
    function getNumPixels: Integer; safecall;
    function getIntegrationTime: Integer; safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrometerStatusDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {245C8F47-A690-50C4-9139-D2B9DEBC84A4}
// *********************************************************************//
  ICoSpectrometerStatusDisp = dispinterface
    ['{245C8F47-A690-50C4-9139-D2B9DEBC84A4}']
    procedure CreateSpectrometerStatus; dispid 1;
    function isLampEnabled: WordBool; dispid 2;
    function isTakingScan: WordBool; dispid 3;
    function isDataReady: WordBool; dispid 4;
    function isFailed: WordBool; dispid 5;
    function getNumPixels: Integer; dispid 6;
    function getIntegrationTime: Integer; dispid 7;
    function toString: WideString; dispid 8;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 9;
  end;

// *********************************************************************//
// Interface: ICoMultiChannelListener
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1C9F29E4-B0E5-5197-818C-C5838396F5CC}
// *********************************************************************//
  ICoMultiChannelListener = interface(IDispatch)
    ['{1C9F29E4-B0E5-5197-818C-C5838396F5CC}']
    procedure CreateMultiChannelListener; safecall;
    procedure addChannel(COM_param0: Integer); safecall;
    procedure removeChannel(COM_param0: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMultiChannelListenerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1C9F29E4-B0E5-5197-818C-C5838396F5CC}
// *********************************************************************//
  ICoMultiChannelListenerDisp = dispinterface
    ['{1C9F29E4-B0E5-5197-818C-C5838396F5CC}']
    procedure CreateMultiChannelListener; dispid 1;
    procedure addChannel(COM_param0: Integer); dispid 2;
    procedure removeChannel(COM_param0: Integer); dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoExternalTriggerMode
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {06392415-C401-58DF-810A-BBBBE4160DDE}
// *********************************************************************//
  ICoExternalTriggerMode = interface(IDispatch)
    ['{06392415-C401-58DF-810A-BBBBE4160DDE}']
    procedure CreateExternalTriggerModeB(COM_mode: Integer); safecall;
    function getExternalTriggerMode: Integer; safecall;
    function getExternalTriggerNormal: Integer; safecall;
    function getExternalTriggerSoftware: Integer; safecall;
    function getExternalTriggerSynchronization: Integer; safecall;
    function getExternalTriggerHardware: Integer; safecall;
    function getTriggerInternalSingleShot: Integer; safecall;
    function getSelfTriggerNormal: Integer; safecall;
    function getSelfTriggerSoftware: Integer; safecall;
    function getSelfTriggerSynchronization: Integer; safecall;
    function getSelfTriggerHardware: Integer; safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoExternalTriggerModeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {06392415-C401-58DF-810A-BBBBE4160DDE}
// *********************************************************************//
  ICoExternalTriggerModeDisp = dispinterface
    ['{06392415-C401-58DF-810A-BBBBE4160DDE}']
    procedure CreateExternalTriggerModeB(COM_mode: Integer); dispid 1;
    function getExternalTriggerMode: Integer; dispid 2;
    function getExternalTriggerNormal: Integer; dispid 3;
    function getExternalTriggerSoftware: Integer; dispid 4;
    function getExternalTriggerSynchronization: Integer; dispid 5;
    function getExternalTriggerHardware: Integer; dispid 6;
    function getTriggerInternalSingleShot: Integer; dispid 7;
    function getSelfTriggerNormal: Integer; dispid 8;
    function getSelfTriggerSoftware: Integer; dispid 9;
    function getSelfTriggerSynchronization: Integer; dispid 10;
    function getSelfTriggerHardware: Integer; dispid 11;
    function toString: WideString; dispid 12;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 13;
  end;

// *********************************************************************//
// Interface: ICoExternalTriggerModeCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AB6BB888-50F6-5C75-903F-F5FC959879E9}
// *********************************************************************//
  ICoExternalTriggerModeCollection = interface(IDispatch)
    ['{AB6BB888-50F6-5C75-903F-F5FC959879E9}']
    function Item(index: OleVariant): OleVariant; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const pnewExternalTriggerModeCollection: IDispatch); safecall;
    procedure Remove(index: Integer); safecall;
    function Get__NewEnum: IUnknown; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  ICoExternalTriggerModeCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AB6BB888-50F6-5C75-903F-F5FC959879E9}
// *********************************************************************//
  ICoExternalTriggerModeCollectionDisp = dispinterface
    ['{AB6BB888-50F6-5C75-903F-F5FC959879E9}']
    function Item(index: OleVariant): OleVariant; dispid 0;
    property Count: Integer readonly dispid 1;
    procedure Add(const pnewExternalTriggerModeCollection: IDispatch); dispid 2;
    procedure Remove(index: Integer); dispid 3;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// Interface: ICoCoefficientsCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7E2A2E8E-8C58-510E-80CB-DEC831710ED3}
// *********************************************************************//
  ICoCoefficientsCollection = interface(IDispatch)
    ['{7E2A2E8E-8C58-510E-80CB-DEC831710ED3}']
    function Item(index: OleVariant): OleVariant; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const pnewCoefficientsCollection: IDispatch); safecall;
    procedure Remove(index: Integer); safecall;
    function Get__NewEnum: IUnknown; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  ICoCoefficientsCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7E2A2E8E-8C58-510E-80CB-DEC831710ED3}
// *********************************************************************//
  ICoCoefficientsCollectionDisp = dispinterface
    ['{7E2A2E8E-8C58-510E-80CB-DEC831710ED3}']
    function Item(index: OleVariant): OleVariant; dispid 0;
    property Count: Integer readonly dispid 1;
    procedure Add(const pnewCoefficientsCollection: IDispatch); dispid 2;
    procedure Remove(index: Integer); dispid 3;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// Interface: ICoAcquisitionListener
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {23B48C1B-EB33-5B33-91DD-FA58FCEBFF41}
// *********************************************************************//
  ICoAcquisitionListener = interface(IDispatch)
    ['{23B48C1B-EB33-5B33-91DD-FA58FCEBFF41}']
    procedure CreateAcquisitionListener; safecall;
    procedure pauseSpectrometerAcquisitions(const COM_param0: ICoSpectrometer); safecall;
    procedure resumeSpectrometerAcquisitions(const COM_param0: ICoSpectrometer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoAcquisitionListenerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {23B48C1B-EB33-5B33-91DD-FA58FCEBFF41}
// *********************************************************************//
  ICoAcquisitionListenerDisp = dispinterface
    ['{23B48C1B-EB33-5B33-91DD-FA58FCEBFF41}']
    procedure CreateAcquisitionListener; dispid 1;
    procedure pauseSpectrometerAcquisitions(const COM_param0: ICoSpectrometer); dispid 2;
    procedure resumeSpectrometerAcquisitions(const COM_param0: ICoSpectrometer); dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoADC1000USB
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FC329161-8CED-5F04-816B-E0BC69667A72}
// *********************************************************************//
  ICoADC1000USB = interface(IDispatch)
    ['{FC329161-8CED-5F04-816B-E0BC69667A72}']
    procedure CreateADC1000USB(COM_i: Integer); safecall;
    procedure CreateADC1000USBB; safecall;
    procedure setEndpoints; safecall;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; safecall;
    procedure openSpectrometer(COM_index: Integer); safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; safecall;
    function getSpectrumB: ICoSpectrum; safecall;
    procedure setCoefficients; safecall;
    function getDeepWellMinimumIntegrationTime: Integer; safecall;
    procedure addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); safecall;
    procedure removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); safecall;
    procedure addAcquisitionPropertiesListener(const COM_listener: ICoAcquisitionPropertiesListener); safecall;
    procedure removeAcquisitionPropertiesListener(const COM_listener: ICoAcquisitionPropertiesListener); safecall;
    function getActualIntegrationTime: Integer; safecall;
    function readStatus: ICoSpectrometerStatus; safecall;
    function getNewCoefficients(COM_index: Integer): ICoCoefficients; safecall;
    function isDeepWell: WordBool; safecall;
    procedure setDeepWell(COM_dw: WordBool); safecall;
    procedure setIntegrationTime(COM_intTime: Integer); safecall;
    procedure setStrobeDelay(COM_delay: Integer); safecall;
    function getNumberOfChannels: Integer; safecall;
    function getChannelsPresent: OleVariant; safecall;
    function getNumberOfEnabledChannels: Integer; safecall;
    procedure setChannelMux(COM_index: Integer); safecall;
    procedure setChannelPresent(COM_index: Integer; COM_present: WordBool); safecall;
    function isChannelPresent(COM_index: Integer): WordBool; safecall;
    procedure setChannelStatus(COM_index: Integer; COM_status: WordBool); safecall;
    procedure setDeepWellStatus(COM_status: WordBool); safecall;
    function getChannelIndices: OleVariant; safecall;
    function isRotatorEnabled: WordBool; safecall;
    procedure setRotatorEnabled(COM_enabled: WordBool); safecall;
    function isInterpolationEnabled: WordBool; safecall;
    procedure setInterpolationEnabled(COM_enabled: WordBool); safecall;
    procedure addChannelListener(const COM_listener: ICoMultiChannelListener); safecall;
    procedure removeChannelListener(const COM_listener: ICoMultiChannelListener); safecall;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); safecall;
    function getContinuousStrobeDelayMinimum: Integer; safecall;
    function getContinuousStrobeDelayMaximum: Integer; safecall;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; safecall;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; safecall;
    procedure setMasterClock(COM_rate: Integer); safecall;
    procedure setExternalTriggerMode(COM_mode: Integer); safecall;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; safecall;
    procedure setDACCounts(COM_counts: Integer; COM_index: Integer); safecall;
    function analogOutCountsToVolts(COM_counts: Integer): Double; safecall;
    function getDACMinimum: Integer; safecall;
    function getDACMaximum: Integer; safecall;
    function getDACIncrement: Integer; safecall;
    function isDACPresent: WordBool; safecall;
    function getDACPins: Integer; safecall;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; safecall;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_index: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); safecall;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; safecall;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); safecall;
    function getStrayLight(COM_index: Integer): Double; safecall;
    function isAdvancedVersion: WordBool; safecall;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoADC1000USBDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FC329161-8CED-5F04-816B-E0BC69667A72}
// *********************************************************************//
  ICoADC1000USBDisp = dispinterface
    ['{FC329161-8CED-5F04-816B-E0BC69667A72}']
    procedure CreateADC1000USB(COM_i: Integer); dispid 1;
    procedure CreateADC1000USBB; dispid 2;
    procedure setEndpoints; dispid 3;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; dispid 4;
    procedure openSpectrometer(COM_index: Integer); dispid 5;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 6;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; dispid 7;
    function getSpectrumB: ICoSpectrum; dispid 8;
    procedure setCoefficients; dispid 9;
    function getDeepWellMinimumIntegrationTime: Integer; dispid 10;
    procedure addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); dispid 11;
    procedure removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); dispid 12;
    procedure addAcquisitionPropertiesListener(const COM_listener: ICoAcquisitionPropertiesListener); dispid 13;
    procedure removeAcquisitionPropertiesListener(const COM_listener: ICoAcquisitionPropertiesListener); dispid 14;
    function getActualIntegrationTime: Integer; dispid 15;
    function readStatus: ICoSpectrometerStatus; dispid 16;
    function getNewCoefficients(COM_index: Integer): ICoCoefficients; dispid 17;
    function isDeepWell: WordBool; dispid 18;
    procedure setDeepWell(COM_dw: WordBool); dispid 19;
    procedure setIntegrationTime(COM_intTime: Integer); dispid 20;
    procedure setStrobeDelay(COM_delay: Integer); dispid 21;
    function getNumberOfChannels: Integer; dispid 22;
    function getChannelsPresent: OleVariant; dispid 23;
    function getNumberOfEnabledChannels: Integer; dispid 24;
    procedure setChannelMux(COM_index: Integer); dispid 25;
    procedure setChannelPresent(COM_index: Integer; COM_present: WordBool); dispid 26;
    function isChannelPresent(COM_index: Integer): WordBool; dispid 27;
    procedure setChannelStatus(COM_index: Integer; COM_status: WordBool); dispid 29;
    procedure setDeepWellStatus(COM_status: WordBool); dispid 30;
    function getChannelIndices: OleVariant; dispid 31;
    function isRotatorEnabled: WordBool; dispid 32;
    procedure setRotatorEnabled(COM_enabled: WordBool); dispid 33;
    function isInterpolationEnabled: WordBool; dispid 34;
    procedure setInterpolationEnabled(COM_enabled: WordBool); dispid 35;
    procedure addChannelListener(const COM_listener: ICoMultiChannelListener); dispid 36;
    procedure removeChannelListener(const COM_listener: ICoMultiChannelListener); dispid 37;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); dispid 38;
    function getContinuousStrobeDelayMinimum: Integer; dispid 39;
    function getContinuousStrobeDelayMaximum: Integer; dispid 40;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; dispid 41;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; dispid 42;
    procedure setMasterClock(COM_rate: Integer); dispid 43;
    procedure setExternalTriggerMode(COM_mode: Integer); dispid 44;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; dispid 45;
    procedure setDACCounts(COM_counts: Integer; COM_index: Integer); dispid 46;
    function analogOutCountsToVolts(COM_counts: Integer): Double; dispid 47;
    function getDACMinimum: Integer; dispid 48;
    function getDACMaximum: Integer; dispid 49;
    function getDACIncrement: Integer; dispid 50;
    function isDACPresent: WordBool; dispid 51;
    function getDACPins: Integer; dispid 52;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 53;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; dispid 55;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; dispid 57;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); dispid 58;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 59;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 61;
    function getWavelengths(COM_index: Integer): OleVariant; dispid 63;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); dispid 64;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; dispid 65;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; dispid 68;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); dispid 69;
    function getStrayLight(COM_index: Integer): Double; dispid 70;
    function isAdvancedVersion: WordBool; dispid 71;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 72;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 73;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 74;
  end;

// *********************************************************************//
// Interface: ICoADC1000USBTest
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0D294460-81E0-5C0B-90B3-D627995E6D22}
// *********************************************************************//
  ICoADC1000USBTest = interface(IDispatch)
    ['{0D294460-81E0-5C0B-90B3-D627995E6D22}']
    procedure CreateADC1000USBTest; safecall;
    procedure setEndpoints; safecall;
    procedure runDriverDependent; safecall;
    procedure runIndependent; safecall;
    procedure initialize; safecall;
    function getNumChannels: Integer; safecall;
    function readInfo(COM_slot: Integer): WideString; safecall;
    procedure setRotatorTrue; safecall;
    procedure setChannelMux(COM_channel: Integer); safecall;
    function getSpectrum: OleVariant; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoADC1000USBTestDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0D294460-81E0-5C0B-90B3-D627995E6D22}
// *********************************************************************//
  ICoADC1000USBTestDisp = dispinterface
    ['{0D294460-81E0-5C0B-90B3-D627995E6D22}']
    procedure CreateADC1000USBTest; dispid 1;
    procedure setEndpoints; dispid 2;
    procedure runDriverDependent; dispid 3;
    procedure runIndependent; dispid 4;
    procedure initialize; dispid 5;
    function getNumChannels: Integer; dispid 6;
    function readInfo(COM_slot: Integer): WideString; dispid 7;
    procedure setRotatorTrue; dispid 8;
    procedure setChannelMux(COM_channel: Integer); dispid 9;
    function getSpectrum: OleVariant; dispid 10;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 12;
  end;

// *********************************************************************//
// Interface: ICoAdvancedIntegrationClock
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B669149A-E83F-501B-8195-3E2E78C81B33}
// *********************************************************************//
  ICoAdvancedIntegrationClock = interface(IDispatch)
    ['{B669149A-E83F-501B-8195-3E2E78C81B33}']
    procedure CreateAdvancedIntegrationClock; safecall;
    function getIntegrationClockTimer: Integer; safecall;
    function getIntegrationTimeBaseClock: Integer; safecall;
    procedure setAdvancedIntegrationTime(COM_param0: Integer); safecall;
    function getAdvancedIntegrationTimeMinimum: Integer; safecall;
    function getAdvancedIntegrationTimeMaximum: Integer; safecall;
    function getAdvancedIntegrationTimeIncrement: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoAdvancedIntegrationClockDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B669149A-E83F-501B-8195-3E2E78C81B33}
// *********************************************************************//
  ICoAdvancedIntegrationClockDisp = dispinterface
    ['{B669149A-E83F-501B-8195-3E2E78C81B33}']
    procedure CreateAdvancedIntegrationClock; dispid 1;
    function getIntegrationClockTimer: Integer; dispid 2;
    function getIntegrationTimeBaseClock: Integer; dispid 3;
    procedure setAdvancedIntegrationTime(COM_param0: Integer); dispid 4;
    function getAdvancedIntegrationTimeMinimum: Integer; dispid 5;
    function getAdvancedIntegrationTimeMaximum: Integer; dispid 6;
    function getAdvancedIntegrationTimeIncrement: Integer; dispid 7;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 8;
  end;

// *********************************************************************//
// Interface: ICoUSBInterface
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {95C7060C-5993-5A15-80B3-938835A23C5E}
// *********************************************************************//
  ICoUSBInterface = interface(IDispatch)
    ['{95C7060C-5993-5A15-80B3-938835A23C5E}']
    procedure CreateUSBInterface; safecall;
    function getInputBuffer: OleVariant; safecall;
    function getOutputBuffer: OleVariant; safecall;
    procedure increaseInputBufferSize(COM_param0: Integer); safecall;
    procedure increaseOutputBufferSize(COM_param0: Integer); safecall;
    procedure bulkIn(const COM_param0: ICoUSBEndpointDescriptor; COM_param1: OleVariant; 
                     COM_param2: Integer); safecall;
    procedure bulkOut(const COM_param0: ICoUSBEndpointDescriptor; COM_param1: OleVariant; 
                      COM_param2: Integer); safecall;
    procedure openDevice(COM_param0: Integer; COM_param1: Integer; COM_param2: Integer); safecall;
    procedure closeDevice; safecall;
    function getUSBStringDescriptor(COM_param0: Integer): WideString; safecall;
    function isUSB2Mode: WordBool; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSBInterfaceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {95C7060C-5993-5A15-80B3-938835A23C5E}
// *********************************************************************//
  ICoUSBInterfaceDisp = dispinterface
    ['{95C7060C-5993-5A15-80B3-938835A23C5E}']
    procedure CreateUSBInterface; dispid 1;
    function getInputBuffer: OleVariant; dispid 2;
    function getOutputBuffer: OleVariant; dispid 3;
    procedure increaseInputBufferSize(COM_param0: Integer); dispid 4;
    procedure increaseOutputBufferSize(COM_param0: Integer); dispid 5;
    procedure bulkIn(const COM_param0: ICoUSBEndpointDescriptor; COM_param1: OleVariant; 
                     COM_param2: Integer); dispid 6;
    procedure bulkOut(const COM_param0: ICoUSBEndpointDescriptor; COM_param1: OleVariant; 
                      COM_param2: Integer); dispid 7;
    procedure openDevice(COM_param0: Integer; COM_param1: Integer; COM_param2: Integer); dispid 8;
    procedure closeDevice; dispid 9;
    function getUSBStringDescriptor(COM_param0: Integer): WideString; dispid 10;
    function isUSB2Mode: WordBool; dispid 11;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 12;
  end;

// *********************************************************************//
// Interface: ICoAdvancedIntegrationClockImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7A1343B2-12E3-503F-918A-79B206B4552D}
// *********************************************************************//
  ICoAdvancedIntegrationClockImpl = interface(IDispatch)
    ['{7A1343B2-12E3-503F-918A-79B206B4552D}']
    procedure CreateAdvancedIntegrationClockImplB(const COM_usbInt: ICoUSBInterface); safecall;
    function getIntegrationClockTimer: Integer; safecall;
    function getIntegrationTimeBaseClock: Integer; safecall;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer); safecall;
    function getAdvancedIntegrationTimeMinimum: Integer; safecall;
    function getAdvancedIntegrationTimeMaximum: Integer; safecall;
    function getAdvancedIntegrationTimeIncrement: Integer; safecall;
    procedure masterClockChanged(COM_newValue: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoAdvancedIntegrationClockImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7A1343B2-12E3-503F-918A-79B206B4552D}
// *********************************************************************//
  ICoAdvancedIntegrationClockImplDisp = dispinterface
    ['{7A1343B2-12E3-503F-918A-79B206B4552D}']
    procedure CreateAdvancedIntegrationClockImplB(const COM_usbInt: ICoUSBInterface); dispid 1;
    function getIntegrationClockTimer: Integer; dispid 2;
    function getIntegrationTimeBaseClock: Integer; dispid 3;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer); dispid 4;
    function getAdvancedIntegrationTimeMinimum: Integer; dispid 5;
    function getAdvancedIntegrationTimeMaximum: Integer; dispid 6;
    function getAdvancedIntegrationTimeIncrement: Integer; dispid 7;
    procedure masterClockChanged(COM_newValue: Integer); dispid 8;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 9;
  end;

// *********************************************************************//
// Interface: ICoAdvancedVersion
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5B3E2572-4876-58DB-8102-C5DDB1C7934F}
// *********************************************************************//
  ICoAdvancedVersion = interface(IDispatch)
    ['{5B3E2572-4876-58DB-8102-C5DDB1C7934F}']
    procedure CreateAdvancedVersion; safecall;
    function getFPGAFirmwareVersion: WideString; safecall;
    function getPSOCVersion: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoAdvancedVersionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5B3E2572-4876-58DB-8102-C5DDB1C7934F}
// *********************************************************************//
  ICoAdvancedVersionDisp = dispinterface
    ['{5B3E2572-4876-58DB-8102-C5DDB1C7934F}']
    procedure CreateAdvancedVersion; dispid 1;
    function getFPGAFirmwareVersion: WideString; dispid 2;
    function getPSOCVersion: WideString; dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoAdvancedVersionImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {22298733-F91E-5F26-90D0-BCB63E1C8DFA}
// *********************************************************************//
  ICoAdvancedVersionImpl = interface(IDispatch)
    ['{22298733-F91E-5F26-90D0-BCB63E1C8DFA}']
    procedure CreateAdvancedVersionImplB(const COM_usbInt: ICoUSBInterface); safecall;
    function getFPGAFirmwareVersion: WideString; safecall;
    function getPSOCVersion: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoAdvancedVersionImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {22298733-F91E-5F26-90D0-BCB63E1C8DFA}
// *********************************************************************//
  ICoAdvancedVersionImplDisp = dispinterface
    ['{22298733-F91E-5F26-90D0-BCB63E1C8DFA}']
    procedure CreateAdvancedVersionImplB(const COM_usbInt: ICoUSBInterface); dispid 1;
    function getFPGAFirmwareVersion: WideString; dispid 2;
    function getPSOCVersion: WideString; dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoAdvancedVersionImpl_NIR
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8AA8B93C-B43D-59EF-908D-461309454FD8}
// *********************************************************************//
  ICoAdvancedVersionImpl_NIR = interface(IDispatch)
    ['{8AA8B93C-B43D-59EF-908D-461309454FD8}']
    procedure CreateAdvancedVersionImpl_NIRB(const COM_usbInt: ICoUSBInterface); safecall;
    function getPSOCVersion: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoAdvancedVersionImpl_NIRDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8AA8B93C-B43D-59EF-908D-461309454FD8}
// *********************************************************************//
  ICoAdvancedVersionImpl_NIRDisp = dispinterface
    ['{8AA8B93C-B43D-59EF-908D-461309454FD8}']
    procedure CreateAdvancedVersionImpl_NIRB(const COM_usbInt: ICoUSBInterface); dispid 1;
    function getPSOCVersion: WideString; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoAnalogIn
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {85C8B6D0-B14B-554B-91F8-B83570B69253}
// *********************************************************************//
  ICoAnalogIn = interface(IDispatch)
    ['{85C8B6D0-B14B-554B-91F8-B83570B69253}']
    procedure CreateAnalogIn; safecall;
    function getVoltageIn: Double; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoAnalogInDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {85C8B6D0-B14B-554B-91F8-B83570B69253}
// *********************************************************************//
  ICoAnalogInDisp = dispinterface
    ['{85C8B6D0-B14B-554B-91F8-B83570B69253}']
    procedure CreateAnalogIn; dispid 1;
    function getVoltageIn: Double; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoAnalogInGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F07EA215-2A85-5C1B-91BE-01AA69BFCAC6}
// *********************************************************************//
  ICoAnalogInGUIProvider = interface(IDispatch)
    ['{F07EA215-2A85-5C1B-91BE-01AA69BFCAC6}']
    procedure CreateAnalogInGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoAnalogInGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F07EA215-2A85-5C1B-91BE-01AA69BFCAC6}
// *********************************************************************//
  ICoAnalogInGUIProviderDisp = dispinterface
    ['{F07EA215-2A85-5C1B-91BE-01AA69BFCAC6}']
    procedure CreateAnalogInGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoAnalogInImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {12158587-8FEB-57DB-80BD-3DE6161F5395}
// *********************************************************************//
  ICoAnalogInImpl = interface(IDispatch)
    ['{12158587-8FEB-57DB-80BD-3DE6161F5395}']
    procedure CreateAnalogInImplB(const COM_usbInt: ICoUSBInterface); safecall;
    function getVoltageIn: Double; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoAnalogInImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {12158587-8FEB-57DB-80BD-3DE6161F5395}
// *********************************************************************//
  ICoAnalogInImplDisp = dispinterface
    ['{12158587-8FEB-57DB-80BD-3DE6161F5395}']
    procedure CreateAnalogInImplB(const COM_usbInt: ICoUSBInterface); dispid 1;
    function getVoltageIn: Double; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoAnalogOut
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F3E57C26-D75B-5CAD-9121-510548A608F7}
// *********************************************************************//
  ICoAnalogOut = interface(IDispatch)
    ['{F3E57C26-D75B-5CAD-9121-510548A608F7}']
    procedure CreateAnalogOut; safecall;
    procedure setDACCounts(COM_param0: Integer; COM_param1: Integer); safecall;
    function getDACMinimum: Integer; safecall;
    function getDACMaximum: Integer; safecall;
    function getDACIncrement: Integer; safecall;
    function analogOutCountsToVolts(COM_param0: Integer): Double; safecall;
    function isDACPresent: WordBool; safecall;
    function getDACPins: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoAnalogOutDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F3E57C26-D75B-5CAD-9121-510548A608F7}
// *********************************************************************//
  ICoAnalogOutDisp = dispinterface
    ['{F3E57C26-D75B-5CAD-9121-510548A608F7}']
    procedure CreateAnalogOut; dispid 1;
    procedure setDACCounts(COM_param0: Integer; COM_param1: Integer); dispid 2;
    function getDACMinimum: Integer; dispid 3;
    function getDACMaximum: Integer; dispid 4;
    function getDACIncrement: Integer; dispid 5;
    function analogOutCountsToVolts(COM_param0: Integer): Double; dispid 6;
    function isDACPresent: WordBool; dispid 7;
    function getDACPins: Integer; dispid 8;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 9;
  end;

// *********************************************************************//
// Interface: ICoAnalogOutGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8CF824F2-4A70-56A0-914E-465F62FDD994}
// *********************************************************************//
  ICoAnalogOutGUIProvider = interface(IDispatch)
    ['{8CF824F2-4A70-56A0-914E-465F62FDD994}']
    procedure CreateAnalogOutGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoAnalogOutGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8CF824F2-4A70-56A0-914E-465F62FDD994}
// *********************************************************************//
  ICoAnalogOutGUIProviderDisp = dispinterface
    ['{8CF824F2-4A70-56A0-914E-465F62FDD994}']
    procedure CreateAnalogOutGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoAnalogOutImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8F49592E-4842-5D8F-91DD-DF2EAB32C373}
// *********************************************************************//
  ICoAnalogOutImpl = interface(IDispatch)
    ['{8F49592E-4842-5D8F-91DD-DF2EAB32C373}']
    procedure CreateAnalogOutImplB(const COM_usbInt: ICoUSBInterface); safecall;
    procedure setDACCounts(COM_param0: Integer; COM_param1: Integer); safecall;
    function getDACMinimum: Integer; safecall;
    function getDACMaximum: Integer; safecall;
    function getDACIncrement: Integer; safecall;
    function analogOutCountsToVolts(COM_param0: Integer): Double; safecall;
    function isDACPresent: WordBool; safecall;
    function getDACPins: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoAnalogOutImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8F49592E-4842-5D8F-91DD-DF2EAB32C373}
// *********************************************************************//
  ICoAnalogOutImplDisp = dispinterface
    ['{8F49592E-4842-5D8F-91DD-DF2EAB32C373}']
    procedure CreateAnalogOutImplB(const COM_usbInt: ICoUSBInterface); dispid 1;
    procedure setDACCounts(COM_param0: Integer; COM_param1: Integer); dispid 2;
    function getDACMinimum: Integer; dispid 3;
    function getDACMaximum: Integer; dispid 4;
    function getDACIncrement: Integer; dispid 5;
    function analogOutCountsToVolts(COM_param0: Integer): Double; dispid 6;
    function isDACPresent: WordBool; dispid 7;
    function getDACPins: Integer; dispid 8;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 9;
  end;

// *********************************************************************//
// Interface: ICoAnalogOutImpl_ADC1000
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0FF3EBF0-CDDF-599C-804C-2364E64BB5E8}
// *********************************************************************//
  ICoAnalogOutImpl_ADC1000 = interface(IDispatch)
    ['{0FF3EBF0-CDDF-599C-804C-2364E64BB5E8}']
    procedure CreateAnalogOutImpl_ADC1000B(const COM_usbInt: ICoUSBInterface; COM_fw: Integer; 
                                           COM_pins: Integer); safecall;
    function isFirmwareValid: WordBool; safecall;
    function isDACPresent: WordBool; safecall;
    procedure setDACCounts(COM_counts: Integer; COM_channel: Integer); safecall;
    function readDACCounts(COM_channel: Integer): Integer; safecall;
    function analogOutCountsToVolts(COM_counts: Integer): Double; safecall;
    function getDACMinimum: Integer; safecall;
    function getDACMaximum: Integer; safecall;
    function getDACIncrement: Integer; safecall;
    function getDACPins: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoAnalogOutImpl_ADC1000Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0FF3EBF0-CDDF-599C-804C-2364E64BB5E8}
// *********************************************************************//
  ICoAnalogOutImpl_ADC1000Disp = dispinterface
    ['{0FF3EBF0-CDDF-599C-804C-2364E64BB5E8}']
    procedure CreateAnalogOutImpl_ADC1000B(const COM_usbInt: ICoUSBInterface; COM_fw: Integer; 
                                           COM_pins: Integer); dispid 1;
    function isFirmwareValid: WordBool; dispid 2;
    function isDACPresent: WordBool; dispid 3;
    procedure setDACCounts(COM_counts: Integer; COM_channel: Integer); dispid 4;
    function readDACCounts(COM_channel: Integer): Integer; dispid 5;
    function analogOutCountsToVolts(COM_counts: Integer): Double; dispid 6;
    function getDACMinimum: Integer; dispid 7;
    function getDACMaximum: Integer; dispid 8;
    function getDACIncrement: Integer; dispid 9;
    function getDACPins: Integer; dispid 10;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 12;
  end;

// *********************************************************************//
// Interface: ICoAnalogOutImpl_PSOC
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B7180FC1-17C7-5F0F-8087-0BDDE6A58DE3}
// *********************************************************************//
  ICoAnalogOutImpl_PSOC = interface(IDispatch)
    ['{B7180FC1-17C7-5F0F-8087-0BDDE6A58DE3}']
    procedure CreateAnalogOutImpl_PSOCB(const COM_usbInt: ICoUSBInterface); safecall;
    procedure setDACCounts(COM_counts: Integer; COM_channel: Integer); safecall;
    function analogOutCountsToVolts(COM_counts: Integer): Double; safecall;
    function getDACMinimum: Integer; safecall;
    function getDACMaximum: Integer; safecall;
    function getDACIncrement: Integer; safecall;
    function isDACPresent: WordBool; safecall;
    function getDACPins: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoAnalogOutImpl_PSOCDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B7180FC1-17C7-5F0F-8087-0BDDE6A58DE3}
// *********************************************************************//
  ICoAnalogOutImpl_PSOCDisp = dispinterface
    ['{B7180FC1-17C7-5F0F-8087-0BDDE6A58DE3}']
    procedure CreateAnalogOutImpl_PSOCB(const COM_usbInt: ICoUSBInterface); dispid 1;
    procedure setDACCounts(COM_counts: Integer; COM_channel: Integer); dispid 2;
    function analogOutCountsToVolts(COM_counts: Integer): Double; dispid 3;
    function getDACMinimum: Integer; dispid 4;
    function getDACMaximum: Integer; dispid 5;
    function getDACIncrement: Integer; dispid 6;
    function isDACPresent: WordBool; dispid 7;
    function getDACPins: Integer; dispid 8;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 10;
  end;

// *********************************************************************//
// Interface: ICoAutonullingConfiguration
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {11F77CAC-A99A-573C-8007-1AAB31F47B34}
// *********************************************************************//
  ICoAutonullingConfiguration = interface(IDispatch)
    ['{11F77CAC-A99A-573C-8007-1AAB31F47B34}']
    procedure CreateAutonullingConfiguration; safecall;
    procedure CreateAutonullingConfigurationB(COM_ena: Integer; COM_temp: Integer; 
                                              COM_dark: Integer; COM_sat: Double); safecall;
    function getEnabled: Integer; safecall;
    procedure setEnabled(COM_ena: Integer); safecall;
    function getTemperatureCompensationEnabled: Integer; safecall;
    procedure setTemperatureCompensationEnabled(COM_ena: Integer); safecall;
    function getDarkValue: Integer; safecall;
    function getSaturationValue: Double; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoAutonullingConfigurationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {11F77CAC-A99A-573C-8007-1AAB31F47B34}
// *********************************************************************//
  ICoAutonullingConfigurationDisp = dispinterface
    ['{11F77CAC-A99A-573C-8007-1AAB31F47B34}']
    procedure CreateAutonullingConfiguration; dispid 1;
    procedure CreateAutonullingConfigurationB(COM_ena: Integer; COM_temp: Integer; 
                                              COM_dark: Integer; COM_sat: Double); dispid 2;
    function getEnabled: Integer; dispid 3;
    procedure setEnabled(COM_ena: Integer); dispid 4;
    function getTemperatureCompensationEnabled: Integer; dispid 5;
    procedure setTemperatureCompensationEnabled(COM_ena: Integer); dispid 6;
    function getDarkValue: Integer; dispid 7;
    function getSaturationValue: Double; dispid 8;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 9;
  end;

// *********************************************************************//
// Interface: ICoAutonulling
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {38824B7D-2F73-51B7-91D9-05C0701A1D1B}
// *********************************************************************//
  ICoAutonulling = interface(IDispatch)
    ['{38824B7D-2F73-51B7-91D9-05C0701A1D1B}']
    procedure CreateAutonulling; safecall;
    function getAutonullingScanStatus: Integer; safecall;
    procedure setAutonullingScanStatus(COM_param0: Integer); safecall;
    function getAutonullingScanValue: Integer; safecall;
    procedure setAutonullingScanValue(COM_param0: Integer); safecall;
    function getAutonullingConfiguration: ICoAutonullingConfiguration; safecall;
    function readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration; safecall;
    procedure setAutonullingConfiguration(const COM_param0: ICoAutonullingConfiguration); safecall;
    procedure writeAutonullingConfigurationToSpectrometer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoAutonullingDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {38824B7D-2F73-51B7-91D9-05C0701A1D1B}
// *********************************************************************//
  ICoAutonullingDisp = dispinterface
    ['{38824B7D-2F73-51B7-91D9-05C0701A1D1B}']
    procedure CreateAutonulling; dispid 1;
    function getAutonullingScanStatus: Integer; dispid 2;
    procedure setAutonullingScanStatus(COM_param0: Integer); dispid 3;
    function getAutonullingScanValue: Integer; dispid 4;
    procedure setAutonullingScanValue(COM_param0: Integer); dispid 5;
    function getAutonullingConfiguration: ICoAutonullingConfiguration; dispid 6;
    function readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration; dispid 7;
    procedure setAutonullingConfiguration(const COM_param0: ICoAutonullingConfiguration); dispid 8;
    procedure writeAutonullingConfigurationToSpectrometer; dispid 9;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 10;
  end;

// *********************************************************************//
// Interface: ICoAutonullingGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ECCF457F-8801-53B4-800F-0DD400E56AF7}
// *********************************************************************//
  ICoAutonullingGUIProvider = interface(IDispatch)
    ['{ECCF457F-8801-53B4-800F-0DD400E56AF7}']
    procedure CreateAutonullingGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoAutonullingGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ECCF457F-8801-53B4-800F-0DD400E56AF7}
// *********************************************************************//
  ICoAutonullingGUIProviderDisp = dispinterface
    ['{ECCF457F-8801-53B4-800F-0DD400E56AF7}']
    procedure CreateAutonullingGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoAutonullingImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A90E1DF9-D407-507A-903B-79409CBD698A}
// *********************************************************************//
  ICoAutonullingImpl = interface(IDispatch)
    ['{A90E1DF9-D407-507A-903B-79409CBD698A}']
    procedure CreateAutonullingImplB(const COM_usbInt: ICoUSBInterface); safecall;
    function readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration; safecall;
    function getAutonullingScanStatus: Integer; safecall;
    function getAutonullingScanValue: Integer; safecall;
    function getAutonullingConfiguration: ICoAutonullingConfiguration; safecall;
    procedure setAutonullingConfiguration(const COM_configuration: ICoAutonullingConfiguration); safecall;
    procedure writeAutonullingConfigurationToSpectrometer; safecall;
    procedure setAutonullingScanStatus(COM_value: Integer); safecall;
    procedure setAutonullingScanValue(COM_value: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoAutonullingImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A90E1DF9-D407-507A-903B-79409CBD698A}
// *********************************************************************//
  ICoAutonullingImplDisp = dispinterface
    ['{A90E1DF9-D407-507A-903B-79409CBD698A}']
    procedure CreateAutonullingImplB(const COM_usbInt: ICoUSBInterface); dispid 1;
    function readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration; dispid 2;
    function getAutonullingScanStatus: Integer; dispid 3;
    function getAutonullingScanValue: Integer; dispid 4;
    function getAutonullingConfiguration: ICoAutonullingConfiguration; dispid 5;
    procedure setAutonullingConfiguration(const COM_configuration: ICoAutonullingConfiguration); dispid 6;
    procedure writeAutonullingConfigurationToSpectrometer; dispid 7;
    procedure setAutonullingScanStatus(COM_value: Integer); dispid 8;
    procedure setAutonullingScanValue(COM_value: Integer); dispid 9;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 11;
  end;

// *********************************************************************//
// Interface: ICoBadPixelRemoval
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {464A75A7-9D57-5FF6-8196-C90537D7F91F}
// *********************************************************************//
  ICoBadPixelRemoval = interface(IDispatch)
    ['{464A75A7-9D57-5FF6-8196-C90537D7F91F}']
    procedure CreateBadPixelRemoval; safecall;
    function getBadPixels: OleVariant; safecall;
    procedure setBadPixels(COM_param0: OleVariant); safecall;
    function removeBadPixels(const COM_param0: ICoSpectrum): ICoSpectrum; safecall;
    function getNumberOfBadPixels: Integer; safecall;
    function getAllPixels: OleVariant; safecall;
    procedure setBadPixelsToSpectrometer; safecall;
    function getBadPixelsFromSpectrometer: OleVariant; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoBadPixelRemovalDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {464A75A7-9D57-5FF6-8196-C90537D7F91F}
// *********************************************************************//
  ICoBadPixelRemovalDisp = dispinterface
    ['{464A75A7-9D57-5FF6-8196-C90537D7F91F}']
    procedure CreateBadPixelRemoval; dispid 1;
    function getBadPixels: OleVariant; dispid 2;
    procedure setBadPixels(COM_param0: OleVariant); dispid 3;
    function removeBadPixels(const COM_param0: ICoSpectrum): ICoSpectrum; dispid 4;
    function getNumberOfBadPixels: Integer; dispid 5;
    function getAllPixels: OleVariant; dispid 6;
    procedure setBadPixelsToSpectrometer; dispid 7;
    function getBadPixelsFromSpectrometer: OleVariant; dispid 8;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 9;
  end;

// *********************************************************************//
// Interface: ICoBadPixelRemovalGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AA0C43A5-ACFA-516E-800C-8953E9A32291}
// *********************************************************************//
  ICoBadPixelRemovalGUIProvider = interface(IDispatch)
    ['{AA0C43A5-ACFA-516E-800C-8953E9A32291}']
    procedure CreateBadPixelRemovalGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoBadPixelRemovalGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AA0C43A5-ACFA-516E-800C-8953E9A32291}
// *********************************************************************//
  ICoBadPixelRemovalGUIProviderDisp = dispinterface
    ['{AA0C43A5-ACFA-516E-800C-8953E9A32291}']
    procedure CreateBadPixelRemovalGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoBadPixelRemovalImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4779BFE1-3E10-5049-819F-5AF69039B09C}
// *********************************************************************//
  ICoBadPixelRemovalImpl = interface(IDispatch)
    ['{4779BFE1-3E10-5049-819F-5AF69039B09C}']
    procedure CreateBadPixelRemovalImplB(const COM_usbInt: ICoUSBInterface; COM_numPixels: Integer); safecall;
    procedure setBadPixelsToSpectrometer; safecall;
    function getBadPixelsFromSpectrometer: OleVariant; safecall;
    function getBadPixels: OleVariant; safecall;
    procedure setBadPixels(COM_pixels: OleVariant); safecall;
    function removeBadPixels(const COM_spectrum: ICoSpectrum): ICoSpectrum; safecall;
    function getNumberOfBadPixels: Integer; safecall;
    procedure setNumberOfBadPixels(COM_num: Integer); safecall;
    function getAllPixels: OleVariant; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoBadPixelRemovalImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4779BFE1-3E10-5049-819F-5AF69039B09C}
// *********************************************************************//
  ICoBadPixelRemovalImplDisp = dispinterface
    ['{4779BFE1-3E10-5049-819F-5AF69039B09C}']
    procedure CreateBadPixelRemovalImplB(const COM_usbInt: ICoUSBInterface; COM_numPixels: Integer); dispid 1;
    procedure setBadPixelsToSpectrometer; dispid 2;
    function getBadPixelsFromSpectrometer: OleVariant; dispid 3;
    function getBadPixels: OleVariant; dispid 4;
    procedure setBadPixels(COM_pixels: OleVariant); dispid 5;
    function removeBadPixels(const COM_spectrum: ICoSpectrum): ICoSpectrum; dispid 6;
    function getNumberOfBadPixels: Integer; dispid 7;
    procedure setNumberOfBadPixels(COM_num: Integer); dispid 8;
    function getAllPixels: OleVariant; dispid 9;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 11;
  end;

// *********************************************************************//
// Interface: ICoBaseSpecFunctionality
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9D7E1D09-A80E-5F9E-80A2-B0F3716FD253}
// *********************************************************************//
  ICoBaseSpecFunctionality = interface(IDispatch)
    ['{9D7E1D09-A80E-5F9E-80A2-B0F3716FD253}']
    procedure CreateBaseSpecFunctionality; safecall;
    procedure closeSpectrometer; safecall;
    function getActualIntegrationTime: Integer; safecall;
    function getChannels: ICoSpectrometerChannelCollection; safecall;
    function getClassName: WideString; safecall;
    function getDeviceIndex: Integer; safecall;
    function isStabilityScan: WordBool; safecall;
    function getSpectrum(const COM_param0: ICoSpectrum): ICoSpectrum; safecall;
    function getFirmwareVersion: WideString; safecall;
    function getFirmwareVersionNumber: Integer; safecall;
    function getInfo(COM_param0: Integer): WideString; safecall;
    function getIntegrationTimeBase: Integer; safecall;
    function getIntegrationTimeIncrement: Integer; safecall;
    function getIntegrationTimeMaximum: Integer; safecall;
    function getIntegrationTimeMinimum: Integer; safecall;
    function getMaxIntensity: Integer; safecall;
    function getName: WideString; safecall;
    function getSerialNumber: WideString; safecall;
    procedure initialize; safecall;
    procedure openNextUnclaimed; safecall;
    procedure openSpectrometer(COM_param0: Integer); safecall;
    procedure getCoefficientsFromSpectrometer; safecall;
    procedure getConfigurationFromSpectrometer; safecall;
    procedure setStabilityScan(COM_param0: WordBool); safecall;
    procedure setInfo(COM_param0: Integer; const COM_param1: WideString); safecall;
    procedure setIntegrationTime(COM_param0: Integer); safecall;
    procedure setPowerState(COM_param0: WordBool); safecall;
    procedure setStrobeEnable(COM_param0: WordBool); safecall;
    procedure setStrobeDelay(COM_param0: Integer); safecall;
    procedure setCoefficients; safecall;
    procedure setConfiguration; safecall;
    function isStrobeDelayEnabled: WordBool; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoBaseSpecFunctionalityDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9D7E1D09-A80E-5F9E-80A2-B0F3716FD253}
// *********************************************************************//
  ICoBaseSpecFunctionalityDisp = dispinterface
    ['{9D7E1D09-A80E-5F9E-80A2-B0F3716FD253}']
    procedure CreateBaseSpecFunctionality; dispid 1;
    procedure closeSpectrometer; dispid 2;
    function getActualIntegrationTime: Integer; dispid 3;
    function getChannels: ICoSpectrometerChannelCollection; dispid 4;
    function getClassName: WideString; dispid 5;
    function getDeviceIndex: Integer; dispid 6;
    function isStabilityScan: WordBool; dispid 7;
    function getSpectrum(const COM_param0: ICoSpectrum): ICoSpectrum; dispid 8;
    function getFirmwareVersion: WideString; dispid 9;
    function getFirmwareVersionNumber: Integer; dispid 10;
    function getInfo(COM_param0: Integer): WideString; dispid 11;
    function getIntegrationTimeBase: Integer; dispid 12;
    function getIntegrationTimeIncrement: Integer; dispid 13;
    function getIntegrationTimeMaximum: Integer; dispid 14;
    function getIntegrationTimeMinimum: Integer; dispid 15;
    function getMaxIntensity: Integer; dispid 16;
    function getName: WideString; dispid 17;
    function getSerialNumber: WideString; dispid 18;
    procedure initialize; dispid 19;
    procedure openNextUnclaimed; dispid 20;
    procedure openSpectrometer(COM_param0: Integer); dispid 21;
    procedure getCoefficientsFromSpectrometer; dispid 22;
    procedure getConfigurationFromSpectrometer; dispid 23;
    procedure setStabilityScan(COM_param0: WordBool); dispid 24;
    procedure setInfo(COM_param0: Integer; const COM_param1: WideString); dispid 25;
    procedure setIntegrationTime(COM_param0: Integer); dispid 26;
    procedure setPowerState(COM_param0: WordBool); dispid 27;
    procedure setStrobeEnable(COM_param0: WordBool); dispid 28;
    procedure setStrobeDelay(COM_param0: Integer); dispid 29;
    procedure setCoefficients; dispid 30;
    procedure setConfiguration; dispid 31;
    function isStrobeDelayEnabled: WordBool; dispid 32;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 33;
  end;

// *********************************************************************//
// Interface: ICoBitSet
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {73D9D1D4-D4A9-5B88-91B5-7AFCAF882D87}
// *********************************************************************//
  ICoBitSet = interface(IDispatch)
    ['{73D9D1D4-D4A9-5B88-91B5-7AFCAF882D87}']
    function cardinality: Integer; safecall;
    function hashCode: Integer; safecall;
    function length: Integer; safecall;
    function size: Integer; safecall;
    procedure CreateBitSet; safecall;
    procedure clear; safecall;
    function isEmpty: WordBool; safecall;
    function nextClearBit(COM_param0: Integer): Integer; safecall;
    function nextSetBit(COM_param0: Integer): Integer; safecall;
    procedure CreateBitSetB(COM_param0: Integer); safecall;
    procedure clearB(COM_param0: Integer); safecall;
    procedure flip(COM_param0: Integer); safecall;
    procedure set_(COM_param0: Integer); safecall;
    function get(COM_param0: Integer): WordBool; safecall;
    procedure clearC(COM_param0: Integer; COM_param1: Integer); safecall;
    procedure flipB(COM_param0: Integer; COM_param1: Integer); safecall;
    procedure setB(COM_param0: Integer; COM_param1: Integer); safecall;
    procedure setC(COM_param0: Integer; COM_param1: Integer; COM_param2: WordBool); safecall;
    procedure setD(COM_param0: Integer; COM_param1: WordBool); safecall;
    function toString: WideString; safecall;
    function getB(COM_param0: Integer; COM_param1: Integer): ICoBitSet; safecall;
    procedure bit_and(const COM_param0: ICoBitSet); safecall;
    procedure bit_andNot(const COM_param0: ICoBitSet); safecall;
    procedure bit_or(const COM_param0: ICoBitSet); safecall;
    procedure bit_xor(const COM_param0: ICoBitSet); safecall;
    function intersects(const COM_param0: ICoBitSet): WordBool; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoBitSetDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {73D9D1D4-D4A9-5B88-91B5-7AFCAF882D87}
// *********************************************************************//
  ICoBitSetDisp = dispinterface
    ['{73D9D1D4-D4A9-5B88-91B5-7AFCAF882D87}']
    function cardinality: Integer; dispid 1;
    function hashCode: Integer; dispid 2;
    function length: Integer; dispid 3;
    function size: Integer; dispid 4;
    procedure CreateBitSet; dispid 5;
    procedure clear; dispid 6;
    function isEmpty: WordBool; dispid 7;
    function nextClearBit(COM_param0: Integer): Integer; dispid 8;
    function nextSetBit(COM_param0: Integer): Integer; dispid 9;
    procedure CreateBitSetB(COM_param0: Integer); dispid 10;
    procedure clearB(COM_param0: Integer); dispid 11;
    procedure flip(COM_param0: Integer); dispid 12;
    procedure set_(COM_param0: Integer); dispid 13;
    function get(COM_param0: Integer): WordBool; dispid 14;
    procedure clearC(COM_param0: Integer; COM_param1: Integer); dispid 15;
    procedure flipB(COM_param0: Integer; COM_param1: Integer); dispid 16;
    procedure setB(COM_param0: Integer; COM_param1: Integer); dispid 17;
    procedure setC(COM_param0: Integer; COM_param1: Integer; COM_param2: WordBool); dispid 18;
    procedure setD(COM_param0: Integer; COM_param1: WordBool); dispid 19;
    function toString: WideString; dispid 20;
    function getB(COM_param0: Integer; COM_param1: Integer): ICoBitSet; dispid 21;
    procedure bit_and(const COM_param0: ICoBitSet); dispid 22;
    procedure bit_andNot(const COM_param0: ICoBitSet); dispid 23;
    procedure bit_or(const COM_param0: ICoBitSet); dispid 24;
    procedure bit_xor(const COM_param0: ICoBitSet); dispid 25;
    function intersects(const COM_param0: ICoBitSet): WordBool; dispid 26;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 27;
  end;

// *********************************************************************//
// Interface: ICoBoardTemperature
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DD959286-7309-5977-91D7-AC2586B3381C}
// *********************************************************************//
  ICoBoardTemperature = interface(IDispatch)
    ['{DD959286-7309-5977-91D7-AC2586B3381C}']
    procedure CreateBoardTemperature; safecall;
    function getBoardTemperatureCelsius: Double; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoBoardTemperatureDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DD959286-7309-5977-91D7-AC2586B3381C}
// *********************************************************************//
  ICoBoardTemperatureDisp = dispinterface
    ['{DD959286-7309-5977-91D7-AC2586B3381C}']
    procedure CreateBoardTemperature; dispid 1;
    function getBoardTemperatureCelsius: Double; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoBoardTemperatureGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A418378A-3AE3-54B1-815A-642B1B01BB82}
// *********************************************************************//
  ICoBoardTemperatureGUIProvider = interface(IDispatch)
    ['{A418378A-3AE3-54B1-815A-642B1B01BB82}']
    procedure CreateBoardTemperatureGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoBoardTemperatureGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A418378A-3AE3-54B1-815A-642B1B01BB82}
// *********************************************************************//
  ICoBoardTemperatureGUIProviderDisp = dispinterface
    ['{A418378A-3AE3-54B1-815A-642B1B01BB82}']
    procedure CreateBoardTemperatureGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoBoardTemperatureImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {641E5427-C36B-550C-9109-2DDEB0B6A582}
// *********************************************************************//
  ICoBoardTemperatureImpl = interface(IDispatch)
    ['{641E5427-C36B-550C-9109-2DDEB0B6A582}']
    procedure CreateBoardTemperatureImplB(const COM_usbInt: ICoUSBInterface); safecall;
    function getBoardTemperatureCelsius: Double; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoBoardTemperatureImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {641E5427-C36B-550C-9109-2DDEB0B6A582}
// *********************************************************************//
  ICoBoardTemperatureImplDisp = dispinterface
    ['{641E5427-C36B-550C-9109-2DDEB0B6A582}']
    procedure CreateBoardTemperatureImplB(const COM_usbInt: ICoUSBInterface); dispid 1;
    function getBoardTemperatureCelsius: Double; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoBoardTemperatureImpl_QE65000
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B08493EE-C2BC-5E65-9148-5D1F06CB11FA}
// *********************************************************************//
  ICoBoardTemperatureImpl_QE65000 = interface(IDispatch)
    ['{B08493EE-C2BC-5E65-9148-5D1F06CB11FA}']
    procedure CreateBoardTemperatureImpl_QE65000B(const COM_usbInt: ICoUSBInterface); safecall;
    function getBoardTemperatureCelsius: Double; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoBoardTemperatureImpl_QE65000Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B08493EE-C2BC-5E65-9148-5D1F06CB11FA}
// *********************************************************************//
  ICoBoardTemperatureImpl_QE65000Disp = dispinterface
    ['{B08493EE-C2BC-5E65-9148-5D1F06CB11FA}']
    procedure CreateBoardTemperatureImpl_QE65000B(const COM_usbInt: ICoUSBInterface); dispid 1;
    function getBoardTemperatureCelsius: Double; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoCCDShutter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {07A56668-2445-5E20-90DA-901E06509327}
// *********************************************************************//
  ICoCCDShutter = interface(IDispatch)
    ['{07A56668-2445-5E20-90DA-901E06509327}']
    procedure CreateCCDShutter; safecall;
    function getShutterState: Shortint; safecall;
    function isShutterOpen: WordBool; safecall;
    procedure openShutter; safecall;
    procedure closeShutter; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoCCDShutterDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {07A56668-2445-5E20-90DA-901E06509327}
// *********************************************************************//
  ICoCCDShutterDisp = dispinterface
    ['{07A56668-2445-5E20-90DA-901E06509327}']
    procedure CreateCCDShutter; dispid 1;
    function getShutterState: {??Shortint}OleVariant; dispid 2;
    function isShutterOpen: WordBool; dispid 3;
    procedure openShutter; dispid 4;
    procedure closeShutter; dispid 5;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 6;
  end;

// *********************************************************************//
// Interface: ICoCCDShutterGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C92B69BE-DFB9-56FE-902F-B628494EE3A5}
// *********************************************************************//
  ICoCCDShutterGUIProvider = interface(IDispatch)
    ['{C92B69BE-DFB9-56FE-902F-B628494EE3A5}']
    procedure CreateCCDShutterGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoCCDShutterGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C92B69BE-DFB9-56FE-902F-B628494EE3A5}
// *********************************************************************//
  ICoCCDShutterGUIProviderDisp = dispinterface
    ['{C92B69BE-DFB9-56FE-902F-B628494EE3A5}']
    procedure CreateCCDShutterGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoLaser
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {202F4240-B129-510D-8067-3A1C7F324ADE}
// *********************************************************************//
  ICoLaser = interface(IDispatch)
    ['{202F4240-B129-510D-8067-3A1C7F324ADE}']
    procedure CreateLaserB(const COM_spectrometer: ICoSpectrometer; COM_laserIndex: Integer); safecall;
    function getLaserIndex: Integer; safecall;
    function isRemoteEnabled: WordBool; safecall;
    procedure setRemoteEnabled(COM_remoteEnabled: WordBool); safecall;
    function getLaserWavelength: Single; safecall;
    procedure setLaserWavelength(COM_laserWavelength: Single; COM_channelIndex: Integer); safecall;
    procedure setLaserWavelengthForAllChannels(COM_laserWavelength: Single); safecall;
    function isSafetyKeyOn: WordBool; safecall;
    procedure setSafetyKeyOn(COM_safetyKeyOn: WordBool); safecall;
    function isLaserPresent: WordBool; safecall;
    procedure setLaserPresent(COM_laserPresent: WordBool); safecall;
    function isLaserFault: WordBool; safecall;
    procedure setLaserFault(COM_laserFault: WordBool); safecall;
    function isLaserTemperatureLock: WordBool; safecall;
    procedure setLaserTemperatureLock(COM_laserTemperatureLock: WordBool); safecall;
    function isLaserPowered: WordBool; safecall;
    procedure setLaserPowered(COM_laserPowered: WordBool); safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoLaserDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {202F4240-B129-510D-8067-3A1C7F324ADE}
// *********************************************************************//
  ICoLaserDisp = dispinterface
    ['{202F4240-B129-510D-8067-3A1C7F324ADE}']
    procedure CreateLaserB(const COM_spectrometer: ICoSpectrometer; COM_laserIndex: Integer); dispid 1;
    function getLaserIndex: Integer; dispid 2;
    function isRemoteEnabled: WordBool; dispid 3;
    procedure setRemoteEnabled(COM_remoteEnabled: WordBool); dispid 4;
    function getLaserWavelength: Single; dispid 5;
    procedure setLaserWavelength(COM_laserWavelength: Single; COM_channelIndex: Integer); dispid 6;
    procedure setLaserWavelengthForAllChannels(COM_laserWavelength: Single); dispid 7;
    function isSafetyKeyOn: WordBool; dispid 8;
    procedure setSafetyKeyOn(COM_safetyKeyOn: WordBool); dispid 9;
    function isLaserPresent: WordBool; dispid 10;
    procedure setLaserPresent(COM_laserPresent: WordBool); dispid 11;
    function isLaserFault: WordBool; dispid 12;
    procedure setLaserFault(COM_laserFault: WordBool); dispid 13;
    function isLaserTemperatureLock: WordBool; dispid 14;
    procedure setLaserTemperatureLock(COM_laserTemperatureLock: WordBool); dispid 15;
    function isLaserPowered: WordBool; dispid 16;
    procedure setLaserPowered(COM_laserPowered: WordBool); dispid 17;
    function toString: WideString; dispid 18;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 19;
  end;

// *********************************************************************//
// Interface: ICoMMSRamanSpectrometer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1F1D8139-64F2-5642-91D8-D4461AE0BE1A}
// *********************************************************************//
  ICoMMSRamanSpectrometer = interface(IDispatch)
    ['{1F1D8139-64F2-5642-91D8-D4461AE0BE1A}']
    procedure CreateMMSRamanSpectrometer; safecall;
    procedure setEndpoints; safecall;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; safecall;
    function getLaser(COM_param0: Integer): ICoLaser; safecall;
    function process(COM_opCode: Shortint): OleVariant; safecall;
    function processB(COM_opCode: Shortint; COM_schemaOut: Shortint; COM_schemaIn: Shortint): OleVariant; safecall;
    function processC(COM_opCode: Shortint; COM_size: Integer): OleVariant; safecall;
    function processD(COM_opCode: Shortint; COM_size: Integer; COM_schemaOut: Shortint; 
                      COM_schemaIn: Shortint): OleVariant; safecall;
    function processE(COM_opCode: Shortint; COM_size: Integer; COM_data: OleVariant; 
                      COM_schemaOut: Shortint; COM_schemaIn: Shortint): OleVariant; safecall;
    function processF(COM_opCode: Shortint; COM_size: Integer; COM_schemaOut: Shortint; 
                      COM_schemaIn: Shortint; const COM_inEndPoint: ICoUSBEndpointDescriptor; 
                      const COM_outEndPoint: ICoUSBEndpointDescriptor): OleVariant; safecall;
    function trimTrailingNulls(const COM_toTrim: WideString): WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMMSRamanSpectrometerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1F1D8139-64F2-5642-91D8-D4461AE0BE1A}
// *********************************************************************//
  ICoMMSRamanSpectrometerDisp = dispinterface
    ['{1F1D8139-64F2-5642-91D8-D4461AE0BE1A}']
    procedure CreateMMSRamanSpectrometer; dispid 1;
    procedure setEndpoints; dispid 2;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; dispid 3;
    function getLaser(COM_param0: Integer): ICoLaser; dispid 4;
    function process(COM_opCode: {??Shortint}OleVariant): OleVariant; dispid 5;
    function processB(COM_opCode: {??Shortint}OleVariant; COM_schemaOut: {??Shortint}OleVariant; 
                      COM_schemaIn: {??Shortint}OleVariant): OleVariant; dispid 6;
    function processC(COM_opCode: {??Shortint}OleVariant; COM_size: Integer): OleVariant; dispid 7;
    function processD(COM_opCode: {??Shortint}OleVariant; COM_size: Integer; 
                      COM_schemaOut: {??Shortint}OleVariant; COM_schemaIn: {??Shortint}OleVariant): OleVariant; dispid 8;
    function processE(COM_opCode: {??Shortint}OleVariant; COM_size: Integer; COM_data: OleVariant; 
                      COM_schemaOut: {??Shortint}OleVariant; COM_schemaIn: {??Shortint}OleVariant): OleVariant; dispid 9;
    function processF(COM_opCode: {??Shortint}OleVariant; COM_size: Integer; 
                      COM_schemaOut: {??Shortint}OleVariant; COM_schemaIn: {??Shortint}OleVariant; 
                      const COM_inEndPoint: ICoUSBEndpointDescriptor; 
                      const COM_outEndPoint: ICoUSBEndpointDescriptor): OleVariant; dispid 10;
    function trimTrailingNulls(const COM_toTrim: WideString): WideString; dispid 11;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 13;
  end;

// *********************************************************************//
// Interface: ICoCCDShutterImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DC4432F7-EDE7-5E4D-9017-7B5C43B0C210}
// *********************************************************************//
  ICoCCDShutterImpl = interface(IDispatch)
    ['{DC4432F7-EDE7-5E4D-9017-7B5C43B0C210}']
    procedure CreateCCDShutterImplB(const COM_usbInt: ICoUSBInterface; 
                                    const COM_spec: ICoMMSRamanSpectrometer); safecall;
    function getShutterState: Shortint; safecall;
    function isShutterOpen: WordBool; safecall;
    procedure openShutter; safecall;
    procedure closeShutter; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoCCDShutterImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DC4432F7-EDE7-5E4D-9017-7B5C43B0C210}
// *********************************************************************//
  ICoCCDShutterImplDisp = dispinterface
    ['{DC4432F7-EDE7-5E4D-9017-7B5C43B0C210}']
    procedure CreateCCDShutterImplB(const COM_usbInt: ICoUSBInterface; 
                                    const COM_spec: ICoMMSRamanSpectrometer); dispid 1;
    function getShutterState: {??Shortint}OleVariant; dispid 2;
    function isShutterOpen: WordBool; dispid 3;
    procedure openShutter; dispid 4;
    procedure closeShutter; dispid 5;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 7;
  end;

// *********************************************************************//
// Interface: ICoCCDTemperature
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7B8CBEE1-51BB-5E93-914B-92286A4B6556}
// *********************************************************************//
  ICoCCDTemperature = interface(IDispatch)
    ['{7B8CBEE1-51BB-5E93-914B-92286A4B6556}']
    procedure CreateCCDTemperature; safecall;
    procedure getCCDTemperatureInfo; safecall;
    procedure setCCDTemperatureInfo(COM_param0: WordBool; COM_param1: Single); safecall;
    function isTemperatureRegulation: WordBool; safecall;
    procedure setTemperatureRegulation(COM_param0: WordBool); safecall;
    function getCCDSetpoint: Single; safecall;
    procedure setCCDSetpoint(COM_param0: Single); safecall;
    function getMinimumCCDSetpoint: Integer; safecall;
    procedure setMinimumCCDSetpoint(COM_param0: Integer); safecall;
    function getMaximumCCDSetpoint: Integer; safecall;
    procedure setMaximumCCDSetpoint(COM_param0: Integer); safecall;
    function getThermistor: Single; safecall;
    function isThermFault: WordBool; safecall;
    function isTempLock: WordBool; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoCCDTemperatureDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7B8CBEE1-51BB-5E93-914B-92286A4B6556}
// *********************************************************************//
  ICoCCDTemperatureDisp = dispinterface
    ['{7B8CBEE1-51BB-5E93-914B-92286A4B6556}']
    procedure CreateCCDTemperature; dispid 1;
    procedure getCCDTemperatureInfo; dispid 2;
    procedure setCCDTemperatureInfo(COM_param0: WordBool; COM_param1: Single); dispid 3;
    function isTemperatureRegulation: WordBool; dispid 4;
    procedure setTemperatureRegulation(COM_param0: WordBool); dispid 5;
    function getCCDSetpoint: Single; dispid 6;
    procedure setCCDSetpoint(COM_param0: Single); dispid 7;
    function getMinimumCCDSetpoint: Integer; dispid 8;
    procedure setMinimumCCDSetpoint(COM_param0: Integer); dispid 9;
    function getMaximumCCDSetpoint: Integer; dispid 10;
    procedure setMaximumCCDSetpoint(COM_param0: Integer); dispid 11;
    function getThermistor: Single; dispid 12;
    function isThermFault: WordBool; dispid 13;
    function isTempLock: WordBool; dispid 14;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 15;
  end;

// *********************************************************************//
// Interface: ICoCCDTemperatureGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F392E565-6183-51C1-8007-BF59B170DD31}
// *********************************************************************//
  ICoCCDTemperatureGUIProvider = interface(IDispatch)
    ['{F392E565-6183-51C1-8007-BF59B170DD31}']
    procedure CreateCCDTemperatureGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoCCDTemperatureGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F392E565-6183-51C1-8007-BF59B170DD31}
// *********************************************************************//
  ICoCCDTemperatureGUIProviderDisp = dispinterface
    ['{F392E565-6183-51C1-8007-BF59B170DD31}']
    procedure CreateCCDTemperatureGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoCCDTemperatureImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {494B83E2-E788-5D82-905B-2ABE692E714B}
// *********************************************************************//
  ICoCCDTemperatureImpl = interface(IDispatch)
    ['{494B83E2-E788-5D82-905B-2ABE692E714B}']
    procedure CreateCCDTemperatureImplB(const COM_usbInt: ICoUSBInterface; 
                                        const COM_spec: ICoMMSRamanSpectrometer); safecall;
    procedure getCCDTemperatureInfo; safecall;
    procedure setCCDTemperatureInfo(COM_regulation: WordBool; COM_setpoint: Single); safecall;
    procedure setTemperatureRegulation(COM_regulation: WordBool); safecall;
    function isTemperatureRegulation: WordBool; safecall;
    function getCCDSetpoint: Single; safecall;
    procedure setCCDSetpoint(COM_setpoint: Single); safecall;
    function getMinimumCCDSetpoint: Integer; safecall;
    procedure setMinimumCCDSetpoint(COM_min: Integer); safecall;
    function getMaximumCCDSetpoint: Integer; safecall;
    procedure setMaximumCCDSetpoint(COM_max: Integer); safecall;
    function getThermistor: Single; safecall;
    function isThermFault: WordBool; safecall;
    function isTempLock: WordBool; safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoCCDTemperatureImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {494B83E2-E788-5D82-905B-2ABE692E714B}
// *********************************************************************//
  ICoCCDTemperatureImplDisp = dispinterface
    ['{494B83E2-E788-5D82-905B-2ABE692E714B}']
    procedure CreateCCDTemperatureImplB(const COM_usbInt: ICoUSBInterface; 
                                        const COM_spec: ICoMMSRamanSpectrometer); dispid 1;
    procedure getCCDTemperatureInfo; dispid 2;
    procedure setCCDTemperatureInfo(COM_regulation: WordBool; COM_setpoint: Single); dispid 3;
    procedure setTemperatureRegulation(COM_regulation: WordBool); dispid 4;
    function isTemperatureRegulation: WordBool; dispid 5;
    function getCCDSetpoint: Single; dispid 6;
    procedure setCCDSetpoint(COM_setpoint: Single); dispid 7;
    function getMinimumCCDSetpoint: Integer; dispid 8;
    procedure setMinimumCCDSetpoint(COM_min: Integer); dispid 9;
    function getMaximumCCDSetpoint: Integer; dispid 10;
    procedure setMaximumCCDSetpoint(COM_max: Integer); dispid 11;
    function getThermistor: Single; dispid 12;
    function isThermFault: WordBool; dispid 13;
    function isTempLock: WordBool; dispid 14;
    function toString: WideString; dispid 15;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 17;
  end;

// *********************************************************************//
// Interface: ICoMMSRamanCalibration
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2DD42B62-8467-5C4C-8051-A8D756FD8D7D}
// *********************************************************************//
  ICoMMSRamanCalibration = interface(IDispatch)
    ['{2DD42B62-8467-5C4C-8051-A8D756FD8D7D}']
    procedure CreateMMSRamanCalibration; safecall;
    procedure CreateMMSRamanCalibrationB(const COM_calibration: ICoMMSRamanCalibration); safecall;
    function getMaskRatio: Integer; safecall;
    procedure setMaskRatio(COM_maskRatio: Integer); safecall;
    function getMaskFlipped: Integer; safecall;
    procedure setMaskFlipped(COM_maskFlipped: Integer); safecall;
    function getMaskOrientation: WideString; safecall;
    function isSpectraFlipped: WordBool; safecall;
    procedure setSpectraFlipped(COM_spectraFlipped: WordBool); safecall;
    function getMaskIndices: OleVariant; safecall;
    procedure setMaskIndices(COM_maskIndices: OleVariant); safecall;
    function getMaskXAlignmentAdjustments(COM_index: Integer): Integer; safecall;
    function getMaskXAlignmentAdjustmentsB: OleVariant; safecall;
    procedure setMaskXAlignmentAdjustments(COM_maskXAlignmentAdjustments: OleVariant); safecall;
    function getMaskYAlignmentAdjustments: OleVariant; safecall;
    procedure setMaskYAlignmentAdjustments(COM_maskYAlignmentAdjustments: OleVariant); safecall;
    function getSourcePeaks: Integer; safecall;
    procedure setSourcePeaks(COM_sourcePeaks: Integer); safecall;
    function getShifts(COM_index: Integer): Integer; safecall;
    function getShiftsB: OleVariant; safecall;
    procedure setShifts(COM_index: Integer; COM_shifts: Integer); safecall;
    procedure setShiftsB(COM_shifts: OleVariant); safecall;
    function getPolynomialOrder: Integer; safecall;
    procedure setPolynomialOrder(COM_polynomialOrder: Integer); safecall;
    function getObservedPixels: OleVariant; safecall;
    procedure setObservedPixels(COM_observedPixels: OleVariant); safecall;
    function getActualWavelengths: OleVariant; safecall;
    procedure setActualWavelengths(COM_actualWavelengths: OleVariant); safecall;
    function getNumberOfDeadPixelColumnsLeft: Integer; safecall;
    procedure setNumberOfDeadPixelColumnsLeft(COM_numberOfDeadPixelColumnsLeft: Integer); safecall;
    function getNumberOfDeadPixelColumnsRight: Integer; safecall;
    procedure setNumberOfDeadPixelColumnsRight(COM_numberOfDeadPixelColumnsRight: Integer); safecall;
    function getName: WideString; safecall;
    procedure setName(const COM_name: WideString); safecall;
    function getMask: WideString; safecall;
    procedure setMask(const COM_mask: WideString); safecall;
    function getSpectralSource: WideString; safecall;
    procedure setSpectralSource(const COM_spectralSource: WideString); safecall;
    function getSerialNumber: WideString; safecall;
    procedure setSerialNumber(const COM_serialNumber: WideString); safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMMSRamanCalibrationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2DD42B62-8467-5C4C-8051-A8D756FD8D7D}
// *********************************************************************//
  ICoMMSRamanCalibrationDisp = dispinterface
    ['{2DD42B62-8467-5C4C-8051-A8D756FD8D7D}']
    procedure CreateMMSRamanCalibration; dispid 1;
    procedure CreateMMSRamanCalibrationB(const COM_calibration: ICoMMSRamanCalibration); dispid 2;
    function getMaskRatio: Integer; dispid 3;
    procedure setMaskRatio(COM_maskRatio: Integer); dispid 4;
    function getMaskFlipped: Integer; dispid 5;
    procedure setMaskFlipped(COM_maskFlipped: Integer); dispid 6;
    function getMaskOrientation: WideString; dispid 7;
    function isSpectraFlipped: WordBool; dispid 8;
    procedure setSpectraFlipped(COM_spectraFlipped: WordBool); dispid 9;
    function getMaskIndices: OleVariant; dispid 10;
    procedure setMaskIndices(COM_maskIndices: OleVariant); dispid 11;
    function getMaskXAlignmentAdjustments(COM_index: Integer): Integer; dispid 12;
    function getMaskXAlignmentAdjustmentsB: OleVariant; dispid 13;
    procedure setMaskXAlignmentAdjustments(COM_maskXAlignmentAdjustments: OleVariant); dispid 14;
    function getMaskYAlignmentAdjustments: OleVariant; dispid 15;
    procedure setMaskYAlignmentAdjustments(COM_maskYAlignmentAdjustments: OleVariant); dispid 16;
    function getSourcePeaks: Integer; dispid 17;
    procedure setSourcePeaks(COM_sourcePeaks: Integer); dispid 18;
    function getShifts(COM_index: Integer): Integer; dispid 19;
    function getShiftsB: OleVariant; dispid 20;
    procedure setShifts(COM_index: Integer; COM_shifts: Integer); dispid 21;
    procedure setShiftsB(COM_shifts: OleVariant); dispid 22;
    function getPolynomialOrder: Integer; dispid 23;
    procedure setPolynomialOrder(COM_polynomialOrder: Integer); dispid 24;
    function getObservedPixels: OleVariant; dispid 25;
    procedure setObservedPixels(COM_observedPixels: OleVariant); dispid 26;
    function getActualWavelengths: OleVariant; dispid 27;
    procedure setActualWavelengths(COM_actualWavelengths: OleVariant); dispid 28;
    function getNumberOfDeadPixelColumnsLeft: Integer; dispid 29;
    procedure setNumberOfDeadPixelColumnsLeft(COM_numberOfDeadPixelColumnsLeft: Integer); dispid 30;
    function getNumberOfDeadPixelColumnsRight: Integer; dispid 31;
    procedure setNumberOfDeadPixelColumnsRight(COM_numberOfDeadPixelColumnsRight: Integer); dispid 32;
    function getName: WideString; dispid 33;
    procedure setName(const COM_name: WideString); dispid 34;
    function getMask: WideString; dispid 35;
    procedure setMask(const COM_mask: WideString); dispid 36;
    function getSpectralSource: WideString; dispid 37;
    procedure setSpectralSource(const COM_spectralSource: WideString); dispid 38;
    function getSerialNumber: WideString; dispid 39;
    procedure setSerialNumber(const COM_serialNumber: WideString); dispid 40;
    function toString: WideString; dispid 41;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 42;
  end;

// *********************************************************************//
// Interface: ICoCalibration
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {489FB3F4-7146-5768-90E4-B53E8B80C94C}
// *********************************************************************//
  ICoCalibration = interface(IDispatch)
    ['{489FB3F4-7146-5768-90E4-B53E8B80C94C}']
    procedure CreateCalibration; safecall;
    procedure readCalibrationFromSpectrometer; safecall;
    procedure writeCalibrationToSpectrometer(const COM_param0: ICoMMSRamanCalibration); safecall;
    function getCalibration: ICoMMSRamanCalibration; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoCalibrationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {489FB3F4-7146-5768-90E4-B53E8B80C94C}
// *********************************************************************//
  ICoCalibrationDisp = dispinterface
    ['{489FB3F4-7146-5768-90E4-B53E8B80C94C}']
    procedure CreateCalibration; dispid 1;
    procedure readCalibrationFromSpectrometer; dispid 2;
    procedure writeCalibrationToSpectrometer(const COM_param0: ICoMMSRamanCalibration); dispid 3;
    function getCalibration: ICoMMSRamanCalibration; dispid 4;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 5;
  end;

// *********************************************************************//
// Interface: ICoCalibrationGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {08E8D0BF-F3F4-5E16-80F5-53DF7788CDB3}
// *********************************************************************//
  ICoCalibrationGUIProvider = interface(IDispatch)
    ['{08E8D0BF-F3F4-5E16-80F5-53DF7788CDB3}']
    procedure CreateCalibrationGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoCalibrationGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {08E8D0BF-F3F4-5E16-80F5-53DF7788CDB3}
// *********************************************************************//
  ICoCalibrationGUIProviderDisp = dispinterface
    ['{08E8D0BF-F3F4-5E16-80F5-53DF7788CDB3}']
    procedure CreateCalibrationGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoCalibrationImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6F6733B1-2626-532D-80EC-FBD8941A76F8}
// *********************************************************************//
  ICoCalibrationImpl = interface(IDispatch)
    ['{6F6733B1-2626-532D-80EC-FBD8941A76F8}']
    procedure CreateCalibrationImplB(const COM_usbInt: ICoUSBInterface; 
                                     const COM_spec: ICoMMSRamanSpectrometer); safecall;
    procedure readCalibrationFromSpectrometer; safecall;
    procedure writeCalibrationToSpectrometer(const COM_cal: ICoMMSRamanCalibration); safecall;
    function getCalibration: ICoMMSRamanCalibration; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoCalibrationImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6F6733B1-2626-532D-80EC-FBD8941A76F8}
// *********************************************************************//
  ICoCalibrationImplDisp = dispinterface
    ['{6F6733B1-2626-532D-80EC-FBD8941A76F8}']
    procedure CreateCalibrationImplB(const COM_usbInt: ICoUSBInterface; 
                                     const COM_spec: ICoMMSRamanSpectrometer); dispid 1;
    procedure readCalibrationFromSpectrometer; dispid 2;
    procedure writeCalibrationToSpectrometer(const COM_cal: ICoMMSRamanCalibration); dispid 3;
    function getCalibration: ICoMMSRamanCalibration; dispid 4;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 6;
  end;

// *********************************************************************//
// Interface: ICoIterator
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DA76826F-A81B-5020-90B5-4FAEE27D1E7F}
// *********************************************************************//
  ICoIterator = interface(IDispatch)
    ['{DA76826F-A81B-5020-90B5-4FAEE27D1E7F}']
    procedure CreateIterator; safecall;
    procedure Remove; safecall;
    function hasNext: WordBool; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoIteratorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DA76826F-A81B-5020-90B5-4FAEE27D1E7F}
// *********************************************************************//
  ICoIteratorDisp = dispinterface
    ['{DA76826F-A81B-5020-90B5-4FAEE27D1E7F}']
    procedure CreateIterator; dispid 1;
    procedure Remove; dispid 2;
    function hasNext: WordBool; dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {70804830-D735-5ACB-8021-AB2A6F407E38}
// *********************************************************************//
  ICoCollection = interface(IDispatch)
    ['{70804830-D735-5ACB-8021-AB2A6F407E38}']
    procedure CreateCollection; safecall;
    function hashCode: Integer; safecall;
    function size: Integer; safecall;
    procedure clear; safecall;
    function isEmpty: WordBool; safecall;
    function addAll(const COM_param0: ICoCollection): WordBool; safecall;
    function containsAll(const COM_param0: ICoCollection): WordBool; safecall;
    function removeAll(const COM_param0: ICoCollection): WordBool; safecall;
    function retainAll(const COM_param0: ICoCollection): WordBool; safecall;
    function iterator: ICoIterator; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {70804830-D735-5ACB-8021-AB2A6F407E38}
// *********************************************************************//
  ICoCollectionDisp = dispinterface
    ['{70804830-D735-5ACB-8021-AB2A6F407E38}']
    procedure CreateCollection; dispid 1;
    function hashCode: Integer; dispid 2;
    function size: Integer; dispid 3;
    procedure clear; dispid 4;
    function isEmpty: WordBool; dispid 5;
    function addAll(const COM_param0: ICoCollection): WordBool; dispid 6;
    function containsAll(const COM_param0: ICoCollection): WordBool; dispid 7;
    function removeAll(const COM_param0: ICoCollection): WordBool; dispid 8;
    function retainAll(const COM_param0: ICoCollection): WordBool; dispid 9;
    function iterator: ICoIterator; dispid 10;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 11;
  end;

// *********************************************************************//
// Interface: ICoConfigureFromFile
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9A0129B5-EC35-5C7D-81F9-37DFCF04CA58}
// *********************************************************************//
  ICoConfigureFromFile = interface(IDispatch)
    ['{9A0129B5-EC35-5C7D-81F9-37DFCF04CA58}']
    procedure CreateConfigureFromFile; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoConfigureFromFileDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9A0129B5-EC35-5C7D-81F9-37DFCF04CA58}
// *********************************************************************//
  ICoConfigureFromFileDisp = dispinterface
    ['{9A0129B5-EC35-5C7D-81F9-37DFCF04CA58}']
    procedure CreateConfigureFromFile; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoContinuousStrobe
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B3A27980-7F13-58B3-802F-2A794FF0F9EF}
// *********************************************************************//
  ICoContinuousStrobe = interface(IDispatch)
    ['{B3A27980-7F13-58B3-802F-2A794FF0F9EF}']
    procedure CreateContinuousStrobe; safecall;
    procedure setContinuousStrobeDelay(COM_param0: Integer); safecall;
    function getContinuousStrobeDelayMinimum: Integer; safecall;
    function getContinuousStrobeDelayMaximum: Integer; safecall;
    function getContinuousStrobeDelayIncrement(COM_param0: Integer): Integer; safecall;
    function continuousStrobeCountsToMicros(COM_param0: Integer): Double; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoContinuousStrobeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B3A27980-7F13-58B3-802F-2A794FF0F9EF}
// *********************************************************************//
  ICoContinuousStrobeDisp = dispinterface
    ['{B3A27980-7F13-58B3-802F-2A794FF0F9EF}']
    procedure CreateContinuousStrobe; dispid 1;
    procedure setContinuousStrobeDelay(COM_param0: Integer); dispid 2;
    function getContinuousStrobeDelayMinimum: Integer; dispid 3;
    function getContinuousStrobeDelayMaximum: Integer; dispid 4;
    function getContinuousStrobeDelayIncrement(COM_param0: Integer): Integer; dispid 5;
    function continuousStrobeCountsToMicros(COM_param0: Integer): Double; dispid 6;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 7;
  end;

// *********************************************************************//
// Interface: ICoContinuousStrobeGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3E254DFD-22B0-5DFE-909D-C9A64D231644}
// *********************************************************************//
  ICoContinuousStrobeGUIProvider = interface(IDispatch)
    ['{3E254DFD-22B0-5DFE-909D-C9A64D231644}']
    procedure CreateContinuousStrobeGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoContinuousStrobeGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3E254DFD-22B0-5DFE-909D-C9A64D231644}
// *********************************************************************//
  ICoContinuousStrobeGUIProviderDisp = dispinterface
    ['{3E254DFD-22B0-5DFE-909D-C9A64D231644}']
    procedure CreateContinuousStrobeGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoContinuousStrobeImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {93B9A7FE-761D-5249-8132-2AAD007206B7}
// *********************************************************************//
  ICoContinuousStrobeImpl = interface(IDispatch)
    ['{93B9A7FE-761D-5249-8132-2AAD007206B7}']
    procedure CreateContinuousStrobeImplB(const COM_usbInt: ICoUSBInterface); safecall;
    procedure setContinuousStrobeDelay(COM_param0: Integer); safecall;
    function getContinuousStrobeDelayMinimum: Integer; safecall;
    function getContinuousStrobeDelayMaximum: Integer; safecall;
    function getContinuousStrobeDelayIncrement(COM_param0: Integer): Integer; safecall;
    function continuousStrobeCountsToMicros(COM_param0: Integer): Double; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoContinuousStrobeImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {93B9A7FE-761D-5249-8132-2AAD007206B7}
// *********************************************************************//
  ICoContinuousStrobeImplDisp = dispinterface
    ['{93B9A7FE-761D-5249-8132-2AAD007206B7}']
    procedure CreateContinuousStrobeImplB(const COM_usbInt: ICoUSBInterface); dispid 1;
    procedure setContinuousStrobeDelay(COM_param0: Integer); dispid 2;
    function getContinuousStrobeDelayMinimum: Integer; dispid 3;
    function getContinuousStrobeDelayMaximum: Integer; dispid 4;
    function getContinuousStrobeDelayIncrement(COM_param0: Integer): Integer; dispid 5;
    function continuousStrobeCountsToMicros(COM_param0: Integer): Double; dispid 6;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 7;
  end;

// *********************************************************************//
// Interface: ICoContinuousStrobeImpl_ADC1000
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {306AFACC-95BD-5DE6-90DB-95E44F668B1D}
// *********************************************************************//
  ICoContinuousStrobeImpl_ADC1000 = interface(IDispatch)
    ['{306AFACC-95BD-5DE6-90DB-95E44F668B1D}']
    procedure CreateContinuousStrobeImpl_ADC1000B(const COM_usbInt: ICoUSBInterface); safecall;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; safecall;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); safecall;
    function getContinuousStrobeDelayMinimum: Integer; safecall;
    function getContinuousStrobeDelayMaximum: Integer; safecall;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoContinuousStrobeImpl_ADC1000Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {306AFACC-95BD-5DE6-90DB-95E44F668B1D}
// *********************************************************************//
  ICoContinuousStrobeImpl_ADC1000Disp = dispinterface
    ['{306AFACC-95BD-5DE6-90DB-95E44F668B1D}']
    procedure CreateContinuousStrobeImpl_ADC1000B(const COM_usbInt: ICoUSBInterface); dispid 1;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; dispid 2;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); dispid 3;
    function getContinuousStrobeDelayMinimum: Integer; dispid 4;
    function getContinuousStrobeDelayMaximum: Integer; dispid 5;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; dispid 6;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 8;
  end;

// *********************************************************************//
// Interface: ICoContinuousStrobeImpl_FPGA
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {83DD1BE2-9840-59B4-901E-30FBD9CAB7E9}
// *********************************************************************//
  ICoContinuousStrobeImpl_FPGA = interface(IDispatch)
    ['{83DD1BE2-9840-59B4-901E-30FBD9CAB7E9}']
    procedure CreateContinuousStrobeImpl_FPGAB(const COM_usbInt: ICoUSBInterface); safecall;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; safecall;
    function getContinuousStrobeDelayMaximum: Integer; safecall;
    function getContinuousStrobeDelayMinimum: Integer; safecall;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); safecall;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; safecall;
    procedure masterClockChanged(COM_newValue: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoContinuousStrobeImpl_FPGADisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {83DD1BE2-9840-59B4-901E-30FBD9CAB7E9}
// *********************************************************************//
  ICoContinuousStrobeImpl_FPGADisp = dispinterface
    ['{83DD1BE2-9840-59B4-901E-30FBD9CAB7E9}']
    procedure CreateContinuousStrobeImpl_FPGAB(const COM_usbInt: ICoUSBInterface); dispid 1;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; dispid 2;
    function getContinuousStrobeDelayMaximum: Integer; dispid 3;
    function getContinuousStrobeDelayMinimum: Integer; dispid 4;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); dispid 5;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; dispid 6;
    procedure masterClockChanged(COM_newValue: Integer); dispid 7;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 9;
  end;

// *********************************************************************//
// Interface: ICoCurrentOut
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FED40AF7-3B0B-5B4D-80AA-42AC5A45AF28}
// *********************************************************************//
  ICoCurrentOut = interface(IDispatch)
    ['{FED40AF7-3B0B-5B4D-80AA-42AC5A45AF28}']
    procedure CreateCurrentOut; safecall;
    procedure setDACCounts(COM_param0: Integer); safecall;
    function getDACMinimum: Integer; safecall;
    function getDACMaximum: Integer; safecall;
    function getDACIncrement: Integer; safecall;
    function analogOutCountsToMilliamps(COM_param0: Integer): Double; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoCurrentOutDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FED40AF7-3B0B-5B4D-80AA-42AC5A45AF28}
// *********************************************************************//
  ICoCurrentOutDisp = dispinterface
    ['{FED40AF7-3B0B-5B4D-80AA-42AC5A45AF28}']
    procedure CreateCurrentOut; dispid 1;
    procedure setDACCounts(COM_param0: Integer); dispid 2;
    function getDACMinimum: Integer; dispid 3;
    function getDACMaximum: Integer; dispid 4;
    function getDACIncrement: Integer; dispid 5;
    function analogOutCountsToMilliamps(COM_param0: Integer): Double; dispid 6;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 7;
  end;

// *********************************************************************//
// Interface: ICoCurrentOutGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {82AEFB1B-2F62-56ED-90FE-E06BA6C832BD}
// *********************************************************************//
  ICoCurrentOutGUIProvider = interface(IDispatch)
    ['{82AEFB1B-2F62-56ED-90FE-E06BA6C832BD}']
    procedure CreateCurrentOutGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoCurrentOutGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {82AEFB1B-2F62-56ED-90FE-E06BA6C832BD}
// *********************************************************************//
  ICoCurrentOutGUIProviderDisp = dispinterface
    ['{82AEFB1B-2F62-56ED-90FE-E06BA6C832BD}']
    procedure CreateCurrentOutGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoCurrentOutImpl_LS450
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {893E24F7-6FA0-5F2D-8004-CA101BE2A2AE}
// *********************************************************************//
  ICoCurrentOutImpl_LS450 = interface(IDispatch)
    ['{893E24F7-6FA0-5F2D-8004-CA101BE2A2AE}']
    procedure CreateCurrentOutImpl_LS450B(const COM_usbInt: ICoUSBInterface; 
                                          const COM_endPoint: ICoUSBEndpointDescriptor); safecall;
    function analogOutCountsToMilliamps(COM_counts: Integer): Double; safecall;
    function getDACIncrement: Integer; safecall;
    function getDACMaximum: Integer; safecall;
    function getDACMinimum: Integer; safecall;
    procedure setDACCounts(COM_counts: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoCurrentOutImpl_LS450Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {893E24F7-6FA0-5F2D-8004-CA101BE2A2AE}
// *********************************************************************//
  ICoCurrentOutImpl_LS450Disp = dispinterface
    ['{893E24F7-6FA0-5F2D-8004-CA101BE2A2AE}']
    procedure CreateCurrentOutImpl_LS450B(const COM_usbInt: ICoUSBInterface; 
                                          const COM_endPoint: ICoUSBEndpointDescriptor); dispid 1;
    function analogOutCountsToMilliamps(COM_counts: Integer): Double; dispid 2;
    function getDACIncrement: Integer; dispid 3;
    function getDACMaximum: Integer; dispid 4;
    function getDACMinimum: Integer; dispid 5;
    procedure setDACCounts(COM_counts: Integer); dispid 6;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 8;
  end;

// *********************************************************************//
// Interface: ICoDeepWellErrorProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7A9BD927-DDD3-5294-80C2-F0E22862B8EC}
// *********************************************************************//
  ICoDeepWellErrorProvider = interface(IDispatch)
    ['{7A9BD927-DDD3-5294-80C2-F0E22862B8EC}']
    procedure CreateDeepWellErrorProvider; safecall;
    function getDeepWellMinimumIntegrationTime: Integer; safecall;
    procedure addAcquisitionPropertiesListener(const COM_param0: ICoAcquisitionPropertiesListener); safecall;
    procedure removeAcquisitionPropertiesListener(const COM_param0: ICoAcquisitionPropertiesListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoDeepWellErrorProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7A9BD927-DDD3-5294-80C2-F0E22862B8EC}
// *********************************************************************//
  ICoDeepWellErrorProviderDisp = dispinterface
    ['{7A9BD927-DDD3-5294-80C2-F0E22862B8EC}']
    procedure CreateDeepWellErrorProvider; dispid 1;
    function getDeepWellMinimumIntegrationTime: Integer; dispid 2;
    procedure addAcquisitionPropertiesListener(const COM_param0: ICoAcquisitionPropertiesListener); dispid 3;
    procedure removeAcquisitionPropertiesListener(const COM_param0: ICoAcquisitionPropertiesListener); dispid 4;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 5;
  end;

// *********************************************************************//
// Interface: ICoDeepWellErrorProviderImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DDBB2A3F-519F-5268-8028-238FB16B87C2}
// *********************************************************************//
  ICoDeepWellErrorProviderImpl = interface(IDispatch)
    ['{DDBB2A3F-519F-5268-8028-238FB16B87C2}']
    procedure CreateDeepWellErrorProviderImplB(const COM_usbInt: ICoUSBInterface; 
                                               const COM_spectrometer: ICoSpectrometer); safecall;
    procedure checkIntegrationTime(COM_intTime: Integer); safecall;
    function isInDeepWellMode: WordBool; safecall;
    procedure setIgnore(COM_ignore: WordBool); safecall;
    procedure addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); safecall;
    procedure removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); safecall;
    procedure addAcquisitionPropertiesListener(const COM_listener: ICoAcquisitionPropertiesListener); safecall;
    procedure removeAcquisitionPropertiesListener(const COM_listener: ICoAcquisitionPropertiesListener); safecall;
    procedure fireAcquisitionPropertiesListener; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoDeepWellErrorProviderImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DDBB2A3F-519F-5268-8028-238FB16B87C2}
// *********************************************************************//
  ICoDeepWellErrorProviderImplDisp = dispinterface
    ['{DDBB2A3F-519F-5268-8028-238FB16B87C2}']
    procedure CreateDeepWellErrorProviderImplB(const COM_usbInt: ICoUSBInterface; 
                                               const COM_spectrometer: ICoSpectrometer); dispid 1;
    procedure checkIntegrationTime(COM_intTime: Integer); dispid 2;
    function isInDeepWellMode: WordBool; dispid 3;
    procedure setIgnore(COM_ignore: WordBool); dispid 4;
    procedure addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); dispid 5;
    procedure removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); dispid 6;
    procedure addAcquisitionPropertiesListener(const COM_listener: ICoAcquisitionPropertiesListener); dispid 7;
    procedure removeAcquisitionPropertiesListener(const COM_listener: ICoAcquisitionPropertiesListener); dispid 8;
    procedure fireAcquisitionPropertiesListener; dispid 9;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 10;
  end;

// *********************************************************************//
// Interface: ICoEndpointToPipeMapping
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8E964B7C-364C-5BD6-9133-41B41748DC8A}
// *********************************************************************//
  ICoEndpointToPipeMapping = interface(IDispatch)
    ['{8E964B7C-364C-5BD6-9133-41B41748DC8A}']
    procedure CreateEndpointToPipeMapping; safecall;
    procedure addMapping(COM_pipe: Integer; COM_endPoint: Smallint); safecall;
    function getPipe(COM_endPoint: Smallint): Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoEndpointToPipeMappingDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8E964B7C-364C-5BD6-9133-41B41748DC8A}
// *********************************************************************//
  ICoEndpointToPipeMappingDisp = dispinterface
    ['{8E964B7C-364C-5BD6-9133-41B41748DC8A}']
    procedure CreateEndpointToPipeMapping; dispid 1;
    procedure addMapping(COM_pipe: Integer; COM_endPoint: Smallint); dispid 2;
    function getPipe(COM_endPoint: Smallint): Integer; dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoEnumeration
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {063D9ECC-E58F-5FE5-901F-03A656AB9EB1}
// *********************************************************************//
  ICoEnumeration = interface(IDispatch)
    ['{063D9ECC-E58F-5FE5-901F-03A656AB9EB1}']
    procedure CreateEnumeration; safecall;
    function hasMoreElements: WordBool; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoEnumerationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {063D9ECC-E58F-5FE5-901F-03A656AB9EB1}
// *********************************************************************//
  ICoEnumerationDisp = dispinterface
    ['{063D9ECC-E58F-5FE5-901F-03A656AB9EB1}']
    procedure CreateEnumeration; dispid 1;
    function hasMoreElements: WordBool; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoErrorProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F0384D2F-24F7-5C2F-812B-F1F6122D398E}
// *********************************************************************//
  ICoErrorProvider = interface(IDispatch)
    ['{F0384D2F-24F7-5C2F-812B-F1F6122D398E}']
    procedure CreateErrorProvider; safecall;
    procedure addOmniDriverDispatchListener(const COM_param0: ICoOmniDriverDispatchListener); safecall;
    procedure removeOmniDriverDispatchListener(const COM_param0: ICoOmniDriverDispatchListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoErrorProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F0384D2F-24F7-5C2F-812B-F1F6122D398E}
// *********************************************************************//
  ICoErrorProviderDisp = dispinterface
    ['{F0384D2F-24F7-5C2F-812B-F1F6122D398E}']
    procedure CreateErrorProvider; dispid 1;
    procedure addOmniDriverDispatchListener(const COM_param0: ICoOmniDriverDispatchListener); dispid 2;
    procedure removeOmniDriverDispatchListener(const COM_param0: ICoOmniDriverDispatchListener); dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoUSBSpectrometerCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C300E9FA-62BB-5E4F-81D7-D54EB6CEB0B5}
// *********************************************************************//
  ICoUSBSpectrometerCollection = interface(IDispatch)
    ['{C300E9FA-62BB-5E4F-81D7-D54EB6CEB0B5}']
    function Item(index: OleVariant): OleVariant; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const pnewUSBSpectrometerCollection: IDispatch); safecall;
    procedure Remove(index: Integer); safecall;
    function Get__NewEnum: IUnknown; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  ICoUSBSpectrometerCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C300E9FA-62BB-5E4F-81D7-D54EB6CEB0B5}
// *********************************************************************//
  ICoUSBSpectrometerCollectionDisp = dispinterface
    ['{C300E9FA-62BB-5E4F-81D7-D54EB6CEB0B5}']
    function Item(index: OleVariant): OleVariant; dispid 0;
    property Count: Integer readonly dispid 1;
    procedure Add(const pnewUSBSpectrometerCollection: IDispatch); dispid 2;
    procedure Remove(index: Integer); dispid 3;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// Interface: ICoUSBSpectrometer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4791F0DC-F24A-5A16-8199-639C60EA6C5E}
// *********************************************************************//
  ICoUSBSpectrometer = interface(IDispatch)
    ['{4791F0DC-F24A-5A16-8199-639C60EA6C5E}']
    procedure CreateUSBSpectrometer; safecall;
    function getInputBuffer: OleVariant; safecall;
    function getOutputBuffer: OleVariant; safecall;
    procedure openNextUnclaimed; safecall;
    procedure openNextUnclaimedUSB; safecall;
    function getOpenSpectrometersOfThisType: ICoUSBSpectrometerCollection; safecall;
    procedure initialize; safecall;
    procedure setIntegrationTime(COM_intTime: Integer); safecall;
    procedure setStrobeEnable(COM_strobe: WordBool); safecall;
    procedure setStrobeDelay(COM_delay: Integer); safecall;
    procedure setPowerState(COM_power: WordBool); safecall;
    function getInfo(COM_slot: Integer): WideString; safecall;
    procedure setInfo(COM_slot: Integer; const COM_str: WideString); safecall;
    function getInfoBytes(COM_slot: Integer): OleVariant; safecall;
    procedure setInfoBytes(COM_slot: Integer; COM_byteArray: OleVariant); safecall;
    function getSerialNumber: WideString; safecall;
    procedure setSerialNumber(const COM_serialNumber: WideString); safecall;
    function getDeviceIndex: Integer; safecall;
    procedure closeSpectrometer; safecall;
    function getFirmwareVersion: WideString; safecall;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; safecall;
    function getName: WideString; safecall;
    function getClassName: WideString; safecall;
    function getNumberOfPixels(COM_index: Integer): Integer; safecall;
    function getNumberOfDarkPixels(COM_index: Integer): Integer; safecall;
    function getNumberOfDarkCCDPixels: Integer; safecall;
    function getNumberOfCCDPixels: Integer; safecall;
    procedure close; safecall;
    function isCommunicatingSuccessfully: WordBool; safecall;
    function testSpectrometerCommunication: WideString; safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSBSpectrometerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4791F0DC-F24A-5A16-8199-639C60EA6C5E}
// *********************************************************************//
  ICoUSBSpectrometerDisp = dispinterface
    ['{4791F0DC-F24A-5A16-8199-639C60EA6C5E}']
    procedure CreateUSBSpectrometer; dispid 1;
    function getInputBuffer: OleVariant; dispid 2;
    function getOutputBuffer: OleVariant; dispid 3;
    procedure openNextUnclaimed; dispid 4;
    procedure openNextUnclaimedUSB; dispid 5;
    function getOpenSpectrometersOfThisType: ICoUSBSpectrometerCollection; dispid 6;
    procedure initialize; dispid 7;
    procedure setIntegrationTime(COM_intTime: Integer); dispid 8;
    procedure setStrobeEnable(COM_strobe: WordBool); dispid 9;
    procedure setStrobeDelay(COM_delay: Integer); dispid 10;
    procedure setPowerState(COM_power: WordBool); dispid 11;
    function getInfo(COM_slot: Integer): WideString; dispid 12;
    procedure setInfo(COM_slot: Integer; const COM_str: WideString); dispid 13;
    function getInfoBytes(COM_slot: Integer): OleVariant; dispid 14;
    procedure setInfoBytes(COM_slot: Integer; COM_byteArray: OleVariant); dispid 15;
    function getSerialNumber: WideString; dispid 16;
    procedure setSerialNumber(const COM_serialNumber: WideString); dispid 17;
    function getDeviceIndex: Integer; dispid 18;
    procedure closeSpectrometer; dispid 19;
    function getFirmwareVersion: WideString; dispid 20;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; dispid 21;
    function getName: WideString; dispid 22;
    function getClassName: WideString; dispid 23;
    function getNumberOfPixels(COM_index: Integer): Integer; dispid 24;
    function getNumberOfDarkPixels(COM_index: Integer): Integer; dispid 25;
    function getNumberOfDarkCCDPixels: Integer; dispid 26;
    function getNumberOfCCDPixels: Integer; dispid 27;
    procedure close; dispid 28;
    function isCommunicatingSuccessfully: WordBool; dispid 29;
    function testSpectrometerCommunication: WideString; dispid 30;
    function toString: WideString; dispid 31;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 32;
  end;

// *********************************************************************//
// Interface: ICoExposureImage
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {89DB4427-F97A-580E-91A0-DAD71370A370}
// *********************************************************************//
  ICoExposureImage = interface(IDispatch)
    ['{89DB4427-F97A-580E-91A0-DAD71370A370}']
    procedure CreateExposureImage; safecall;
    function getSpectrometer: ICoUSBSpectrometer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoExposureImageDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {89DB4427-F97A-580E-91A0-DAD71370A370}
// *********************************************************************//
  ICoExposureImageDisp = dispinterface
    ['{89DB4427-F97A-580E-91A0-DAD71370A370}']
    procedure CreateExposureImage; dispid 1;
    function getSpectrometer: ICoUSBSpectrometer; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoExposureImageGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CD215D10-8BFE-5ED0-9127-C5FC328FE397}
// *********************************************************************//
  ICoExposureImageGUIProvider = interface(IDispatch)
    ['{CD215D10-8BFE-5ED0-9127-C5FC328FE397}']
    procedure CreateExposureImageGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoExposureImageGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CD215D10-8BFE-5ED0-9127-C5FC328FE397}
// *********************************************************************//
  ICoExposureImageGUIProviderDisp = dispinterface
    ['{CD215D10-8BFE-5ED0-9127-C5FC328FE397}']
    procedure CreateExposureImageGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoExposureImageImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {101688DE-9693-534F-8118-EB495C415B11}
// *********************************************************************//
  ICoExposureImageImpl = interface(IDispatch)
    ['{101688DE-9693-534F-8118-EB495C415B11}']
    procedure CreateExposureImageImplB(const COM_spectrometer: ICoUSBSpectrometer); safecall;
    function getSpectrometer: ICoUSBSpectrometer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoExposureImageImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {101688DE-9693-534F-8118-EB495C415B11}
// *********************************************************************//
  ICoExposureImageImplDisp = dispinterface
    ['{101688DE-9693-534F-8118-EB495C415B11}']
    procedure CreateExposureImageImplB(const COM_spectrometer: ICoUSBSpectrometer); dispid 1;
    function getSpectrometer: ICoUSBSpectrometer; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoSpectrometerExposure
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6F43694A-9A13-5CEE-80B4-EB5DACAE61A5}
// *********************************************************************//
  ICoSpectrometerExposure = interface(IDispatch)
    ['{6F43694A-9A13-5CEE-80B4-EB5DACAE61A5}']
    function getShutterState: Shortint; safecall;
    procedure setShutterState(COM_shutterState: Shortint); safecall;
    function getExposureType: Shortint; safecall;
    procedure setExposureType(COM_exposureType: Shortint); safecall;
    function getExposuresToAverage: Smallint; safecall;
    procedure setExposuresToAverage(COM_exposuresToAverage: Smallint); safecall;
    function getStrExposureType: WideString; safecall;
    function getBitsPerPixel: Integer; safecall;
    procedure setBitsPerPixel(COM_bitsPerPixel: Integer); safecall;
    function getExposureTime: Integer; safecall;
    procedure setExposureTime(COM_exposureTime: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrometerExposureDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6F43694A-9A13-5CEE-80B4-EB5DACAE61A5}
// *********************************************************************//
  ICoSpectrometerExposureDisp = dispinterface
    ['{6F43694A-9A13-5CEE-80B4-EB5DACAE61A5}']
    function getShutterState: {??Shortint}OleVariant; dispid 2;
    procedure setShutterState(COM_shutterState: {??Shortint}OleVariant); dispid 3;
    function getExposureType: {??Shortint}OleVariant; dispid 4;
    procedure setExposureType(COM_exposureType: {??Shortint}OleVariant); dispid 5;
    function getExposuresToAverage: Smallint; dispid 6;
    procedure setExposuresToAverage(COM_exposuresToAverage: Smallint); dispid 7;
    function getStrExposureType: WideString; dispid 10;
    function getBitsPerPixel: Integer; dispid 11;
    procedure setBitsPerPixel(COM_bitsPerPixel: Integer); dispid 12;
    function getExposureTime: Integer; dispid 13;
    procedure setExposureTime(COM_exposureTime: Integer); dispid 14;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 15;
  end;

// *********************************************************************//
// Interface: ICoExposureListener
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C15C71DA-2FAE-5EC6-911C-59D68BDEBBAF}
// *********************************************************************//
  ICoExposureListener = interface(IDispatch)
    ['{C15C71DA-2FAE-5EC6-911C-59D68BDEBBAF}']
    procedure CreateExposureListener; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoExposureListenerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C15C71DA-2FAE-5EC6-911C-59D68BDEBBAF}
// *********************************************************************//
  ICoExposureListenerDisp = dispinterface
    ['{C15C71DA-2FAE-5EC6-911C-59D68BDEBBAF}']
    procedure CreateExposureListener; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoIntegrationTimeChangeListener
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {41DAE341-B833-5E61-8166-F33B8A98C4A9}
// *********************************************************************//
  ICoIntegrationTimeChangeListener = interface(IDispatch)
    ['{41DAE341-B833-5E61-8166-F33B8A98C4A9}']
    procedure CreateIntegrationTimeChangeListener; safecall;
    procedure integrationTimeChanged(COM_param0: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoIntegrationTimeChangeListenerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {41DAE341-B833-5E61-8166-F33B8A98C4A9}
// *********************************************************************//
  ICoIntegrationTimeChangeListenerDisp = dispinterface
    ['{41DAE341-B833-5E61-8166-F33B8A98C4A9}']
    procedure CreateIntegrationTimeChangeListener; dispid 1;
    procedure integrationTimeChanged(COM_param0: Integer); dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoExposureImageable
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EBE9D3AF-933F-5587-9085-92D94EB01E36}
// *********************************************************************//
  ICoExposureImageable = interface(IDispatch)
    ['{EBE9D3AF-933F-5587-9085-92D94EB01E36}']
    procedure CreateExposureImageable; safecall;
    function getCcdWidth: Integer; safecall;
    function getCcdHeight: Integer; safecall;
    procedure set1DMode(COM_param0: Integer); safecall;
    procedure set2DMode(COM_param0: Integer); safecall;
    function has1DMode: WordBool; safecall;
    function get2DintegrationTime: Integer; safecall;
    function is2DMode: WordBool; safecall;
    function is1DMode: WordBool; safecall;
    procedure addIntegrationTimeChangeListener(const COM_param0: ICoIntegrationTimeChangeListener); safecall;
    procedure removeIntegrationTimeChangeListener(const COM_param0: ICoIntegrationTimeChangeListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoExposureImageableDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EBE9D3AF-933F-5587-9085-92D94EB01E36}
// *********************************************************************//
  ICoExposureImageableDisp = dispinterface
    ['{EBE9D3AF-933F-5587-9085-92D94EB01E36}']
    procedure CreateExposureImageable; dispid 1;
    function getCcdWidth: Integer; dispid 5;
    function getCcdHeight: Integer; dispid 6;
    procedure set1DMode(COM_param0: Integer); dispid 7;
    procedure set2DMode(COM_param0: Integer); dispid 8;
    function has1DMode: WordBool; dispid 9;
    function get2DintegrationTime: Integer; dispid 10;
    function is2DMode: WordBool; dispid 11;
    function is1DMode: WordBool; dispid 12;
    procedure addIntegrationTimeChangeListener(const COM_param0: ICoIntegrationTimeChangeListener); dispid 13;
    procedure removeIntegrationTimeChangeListener(const COM_param0: ICoIntegrationTimeChangeListener); dispid 14;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 15;
  end;

// *********************************************************************//
// Interface: ICoExternalTemperature
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {16EF74C6-FF0C-5234-81A5-FA57D2E7FA99}
// *********************************************************************//
  ICoExternalTemperature = interface(IDispatch)
    ['{16EF74C6-FF0C-5234-81A5-FA57D2E7FA99}']
    procedure CreateExternalTemperature; safecall;
    function getExternalTemperatureCelsius: Double; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoExternalTemperatureDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {16EF74C6-FF0C-5234-81A5-FA57D2E7FA99}
// *********************************************************************//
  ICoExternalTemperatureDisp = dispinterface
    ['{16EF74C6-FF0C-5234-81A5-FA57D2E7FA99}']
    procedure CreateExternalTemperature; dispid 1;
    function getExternalTemperatureCelsius: Double; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoExternalTemperatureGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B94D950B-0513-55F6-80C8-D5E2E6C40BC9}
// *********************************************************************//
  ICoExternalTemperatureGUIProvider = interface(IDispatch)
    ['{B94D950B-0513-55F6-80C8-D5E2E6C40BC9}']
    procedure CreateExternalTemperatureGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoExternalTemperatureGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B94D950B-0513-55F6-80C8-D5E2E6C40BC9}
// *********************************************************************//
  ICoExternalTemperatureGUIProviderDisp = dispinterface
    ['{B94D950B-0513-55F6-80C8-D5E2E6C40BC9}']
    procedure CreateExternalTemperatureGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoLS450Coefficients
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {07FE66E8-166F-578C-80A4-CB658061CC68}
// *********************************************************************//
  ICoLS450Coefficients = interface(IDispatch)
    ['{07FE66E8-166F-578C-80A4-CB658061CC68}']
    procedure CreateLS450Coefficients; safecall;
    procedure CreateLS450CoefficientsB(const COM_ls450Coefficients: ICoLS450Coefficients); safecall;
    function getTemperatureCalibrationConstant1: Double; safecall;
    procedure setTemperatureCalibrationConstant1(COM_t: Double); safecall;
    function getTemperatureCalibrationConstant0: Double; safecall;
    procedure setTemperatureCalibrationConstant0(COM_t: Double); safecall;
    procedure setO2ProbeCalibrationCoefficients(COM_o2Coeffs: OleVariant); safecall;
    function getO2ProbeCalibrationCoefficients: OleVariant; safecall;
    function geto2_IO_No: Double; safecall;
    procedure seto2_IO_No(COM_o2: Double); safecall;
    function geto2_IO_0: Double; safecall;
    procedure seto2_IO_0(COM_o2: Double); safecall;
    function geto2_IO_1: Double; safecall;
    procedure seto2_IO_1(COM_o2: Double); safecall;
    function geto2_IO_2: Double; safecall;
    procedure seto2_IO_2(COM_o2: Double); safecall;
    function geto2_K_No: Double; safecall;
    procedure seto2_K_No(COM_o2: Double); safecall;
    function geto2_K_0: Double; safecall;
    procedure seto2_K_0(COM_o2: Double); safecall;
    function geto2_K_1: Double; safecall;
    procedure seto2_K_1(COM_o2: Double); safecall;
    function geto2_K_2: Double; safecall;
    procedure seto2_K_2(COM_o2: Double); safecall;
    function geto2_K1_No: Double; safecall;
    procedure seto2_K1_No(COM_o2: Double); safecall;
    function geto2_K1_0: Double; safecall;
    procedure seto2_K1_0(COM_o2: Double); safecall;
    function geto2_K1_1: Double; safecall;
    procedure seto2_K1_1(COM_o2: Double); safecall;
    function geto2_K1_2: Double; safecall;
    procedure seto2_K1_2(COM_o2: Double); safecall;
    function geto2_K2_No: Double; safecall;
    procedure seto2_K2_No(COM_o2: Double); safecall;
    function geto2_K2_0: Double; safecall;
    procedure seto2_K2_0(COM_o2: Double); safecall;
    function geto2_K2_1: Double; safecall;
    procedure seto2_K2_1(COM_o2: Double); safecall;
    function geto2_K2_2: Double; safecall;
    procedure seto2_K2_2(COM_o2: Double); safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoLS450CoefficientsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {07FE66E8-166F-578C-80A4-CB658061CC68}
// *********************************************************************//
  ICoLS450CoefficientsDisp = dispinterface
    ['{07FE66E8-166F-578C-80A4-CB658061CC68}']
    procedure CreateLS450Coefficients; dispid 1;
    procedure CreateLS450CoefficientsB(const COM_ls450Coefficients: ICoLS450Coefficients); dispid 2;
    function getTemperatureCalibrationConstant1: Double; dispid 3;
    procedure setTemperatureCalibrationConstant1(COM_t: Double); dispid 4;
    function getTemperatureCalibrationConstant0: Double; dispid 5;
    procedure setTemperatureCalibrationConstant0(COM_t: Double); dispid 6;
    procedure setO2ProbeCalibrationCoefficients(COM_o2Coeffs: OleVariant); dispid 7;
    function getO2ProbeCalibrationCoefficients: OleVariant; dispid 8;
    function geto2_IO_No: Double; dispid 9;
    procedure seto2_IO_No(COM_o2: Double); dispid 10;
    function geto2_IO_0: Double; dispid 11;
    procedure seto2_IO_0(COM_o2: Double); dispid 12;
    function geto2_IO_1: Double; dispid 13;
    procedure seto2_IO_1(COM_o2: Double); dispid 14;
    function geto2_IO_2: Double; dispid 15;
    procedure seto2_IO_2(COM_o2: Double); dispid 16;
    function geto2_K_No: Double; dispid 17;
    procedure seto2_K_No(COM_o2: Double); dispid 18;
    function geto2_K_0: Double; dispid 19;
    procedure seto2_K_0(COM_o2: Double); dispid 20;
    function geto2_K_1: Double; dispid 21;
    procedure seto2_K_1(COM_o2: Double); dispid 22;
    function geto2_K_2: Double; dispid 23;
    procedure seto2_K_2(COM_o2: Double); dispid 24;
    function geto2_K1_No: Double; dispid 25;
    procedure seto2_K1_No(COM_o2: Double); dispid 26;
    function geto2_K1_0: Double; dispid 27;
    procedure seto2_K1_0(COM_o2: Double); dispid 28;
    function geto2_K1_1: Double; dispid 29;
    procedure seto2_K1_1(COM_o2: Double); dispid 30;
    function geto2_K1_2: Double; dispid 31;
    procedure seto2_K1_2(COM_o2: Double); dispid 32;
    function geto2_K2_No: Double; dispid 33;
    procedure seto2_K2_No(COM_o2: Double); dispid 34;
    function geto2_K2_0: Double; dispid 35;
    procedure seto2_K2_0(COM_o2: Double); dispid 36;
    function geto2_K2_1: Double; dispid 37;
    procedure seto2_K2_1(COM_o2: Double); dispid 38;
    function geto2_K2_2: Double; dispid 39;
    procedure seto2_K2_2(COM_o2: Double); dispid 40;
    function toString: WideString; dispid 41;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 42;
  end;

// *********************************************************************//
// Interface: ICoLS450_Functions
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {294C03BC-E003-59D3-8059-6484617573C9}
// *********************************************************************//
  ICoLS450_Functions = interface(IDispatch)
    ['{294C03BC-E003-59D3-8059-6484617573C9}']
    procedure CreateLS450_Functions; safecall;
    procedure setLEDMode(COM_param0: WordBool); safecall;
    function getLS450Coefficients: ICoLS450Coefficients; safecall;
    procedure setLS450Coefficients(const COM_param0: ICoLS450Coefficients); safecall;
    function getLS450Info(COM_param0: Integer): WideString; safecall;
    procedure setLS450Info(COM_param0: Integer; const COM_param1: WideString); safecall;
    procedure setAllLS450Info(const COM_param0: ICoLS450Coefficients); safecall;
    function getAllLS450Info: ICoLS450Coefficients; safecall;
    procedure loadInfo; safecall;
    procedure saveInfo; safecall;
    procedure loadLS450CoefficientsFromEEPROM; safecall;
    function getO2ProbeCalibrationCoefficients: OleVariant; safecall;
    procedure setO2ProbeCalibrationCoefficients(COM_param0: OleVariant); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoLS450_FunctionsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {294C03BC-E003-59D3-8059-6484617573C9}
// *********************************************************************//
  ICoLS450_FunctionsDisp = dispinterface
    ['{294C03BC-E003-59D3-8059-6484617573C9}']
    procedure CreateLS450_Functions; dispid 1;
    procedure setLEDMode(COM_param0: WordBool); dispid 2;
    function getLS450Coefficients: ICoLS450Coefficients; dispid 3;
    procedure setLS450Coefficients(const COM_param0: ICoLS450Coefficients); dispid 4;
    function getLS450Info(COM_param0: Integer): WideString; dispid 5;
    procedure setLS450Info(COM_param0: Integer; const COM_param1: WideString); dispid 6;
    procedure setAllLS450Info(const COM_param0: ICoLS450Coefficients); dispid 7;
    function getAllLS450Info: ICoLS450Coefficients; dispid 8;
    procedure loadInfo; dispid 9;
    procedure saveInfo; dispid 10;
    procedure loadLS450CoefficientsFromEEPROM; dispid 11;
    function getO2ProbeCalibrationCoefficients: OleVariant; dispid 12;
    procedure setO2ProbeCalibrationCoefficients(COM_param0: OleVariant); dispid 13;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 14;
  end;

// *********************************************************************//
// Interface: ICoExternalTemperatureImpl_LS450
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {92962C3B-8C4F-576C-8073-0F0D820A2E7B}
// *********************************************************************//
  ICoExternalTemperatureImpl_LS450 = interface(IDispatch)
    ['{92962C3B-8C4F-576C-8073-0F0D820A2E7B}']
    procedure CreateExternalTemperatureImpl_LS450B(const COM_usbInt: ICoUSBInterface; 
                                                   const COM_ls: ICoLS450_Functions); safecall;
    function getExternalTemperatureCelsius: Double; safecall;
    function getDataOutEndPoint: ICoUSBEndpointDescriptor; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoExternalTemperatureImpl_LS450Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {92962C3B-8C4F-576C-8073-0F0D820A2E7B}
// *********************************************************************//
  ICoExternalTemperatureImpl_LS450Disp = dispinterface
    ['{92962C3B-8C4F-576C-8073-0F0D820A2E7B}']
    procedure CreateExternalTemperatureImpl_LS450B(const COM_usbInt: ICoUSBInterface; 
                                                   const COM_ls: ICoLS450_Functions); dispid 1;
    function getExternalTemperatureCelsius: Double; dispid 2;
    function getDataOutEndPoint: ICoUSBEndpointDescriptor; dispid 4;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 5;
  end;

// *********************************************************************//
// Interface: ICoExternalTemperatureImpl_LS450_2000
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E5749314-180C-5603-800D-BA2A14B54199}
// *********************************************************************//
  ICoExternalTemperatureImpl_LS450_2000 = interface(IDispatch)
    ['{E5749314-180C-5603-800D-BA2A14B54199}']
    procedure CreateExternalTemperatureImpl_LS450_2000B(const COM_usbInt: ICoUSBInterface; 
                                                        const COM_ls: ICoLS450_Functions); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoExternalTemperatureImpl_LS450_2000Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E5749314-180C-5603-800D-BA2A14B54199}
// *********************************************************************//
  ICoExternalTemperatureImpl_LS450_2000Disp = dispinterface
    ['{E5749314-180C-5603-800D-BA2A14B54199}']
    procedure CreateExternalTemperatureImpl_LS450_2000B(const COM_usbInt: ICoUSBInterface; 
                                                        const COM_ls: ICoLS450_Functions); dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoExternalTemperatureImpl_LS450_4000
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DB802C43-B70E-5B1B-8102-05976CE441DF}
// *********************************************************************//
  ICoExternalTemperatureImpl_LS450_4000 = interface(IDispatch)
    ['{DB802C43-B70E-5B1B-8102-05976CE441DF}']
    procedure CreateExternalTemperatureImpl_LS450_4000B(const COM_usbInt: ICoUSBInterface; 
                                                        const COM_ls: ICoLS450_Functions); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoExternalTemperatureImpl_LS450_4000Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DB802C43-B70E-5B1B-8102-05976CE441DF}
// *********************************************************************//
  ICoExternalTemperatureImpl_LS450_4000Disp = dispinterface
    ['{DB802C43-B70E-5B1B-8102-05976CE441DF}']
    procedure CreateExternalTemperatureImpl_LS450_4000B(const COM_usbInt: ICoUSBInterface; 
                                                        const COM_ls: ICoLS450_Functions); dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoExternalTriggerDelay
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {651E22E2-2735-5F16-9123-A089784AD4BF}
// *********************************************************************//
  ICoExternalTriggerDelay = interface(IDispatch)
    ['{651E22E2-2735-5F16-9123-A089784AD4BF}']
    procedure CreateExternalTriggerDelay; safecall;
    procedure setExternalTriggerDelay(COM_param0: Integer); safecall;
    function triggerDelayCountsToMicroseconds(COM_param0: Integer): Double; safecall;
    function getExternalTriggerDelayMinimum: Integer; safecall;
    function getExternalTriggerDelayMaximum: Integer; safecall;
    function getExternalTriggerDelayIncrement: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoExternalTriggerDelayDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {651E22E2-2735-5F16-9123-A089784AD4BF}
// *********************************************************************//
  ICoExternalTriggerDelayDisp = dispinterface
    ['{651E22E2-2735-5F16-9123-A089784AD4BF}']
    procedure CreateExternalTriggerDelay; dispid 1;
    procedure setExternalTriggerDelay(COM_param0: Integer); dispid 2;
    function triggerDelayCountsToMicroseconds(COM_param0: Integer): Double; dispid 3;
    function getExternalTriggerDelayMinimum: Integer; dispid 4;
    function getExternalTriggerDelayMaximum: Integer; dispid 5;
    function getExternalTriggerDelayIncrement: Integer; dispid 6;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 7;
  end;

// *********************************************************************//
// Interface: ICoExternalTriggerDelayGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6EB799F1-14D2-528E-90B9-D428FE43C0DD}
// *********************************************************************//
  ICoExternalTriggerDelayGUIProvider = interface(IDispatch)
    ['{6EB799F1-14D2-528E-90B9-D428FE43C0DD}']
    procedure CreateExternalTriggerDelayGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoExternalTriggerDelayGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6EB799F1-14D2-528E-90B9-D428FE43C0DD}
// *********************************************************************//
  ICoExternalTriggerDelayGUIProviderDisp = dispinterface
    ['{6EB799F1-14D2-528E-90B9-D428FE43C0DD}']
    procedure CreateExternalTriggerDelayGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoExternalTriggerDelayImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5535E844-4BD1-50A4-91D6-306617849D0E}
// *********************************************************************//
  ICoExternalTriggerDelayImpl = interface(IDispatch)
    ['{5535E844-4BD1-50A4-91D6-306617849D0E}']
    procedure CreateExternalTriggerDelayImplB(const COM_usbInt: ICoUSBInterface); safecall;
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double; safecall;
    function getExternalTriggerDelayIncrement: Integer; safecall;
    function getExternalTriggerDelayMaximum: Integer; safecall;
    function getExternalTriggerDelayMinimum: Integer; safecall;
    procedure setExternalTriggerDelay(COM_value: Integer); safecall;
    procedure masterClockChanged(COM_newValue: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoExternalTriggerDelayImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5535E844-4BD1-50A4-91D6-306617849D0E}
// *********************************************************************//
  ICoExternalTriggerDelayImplDisp = dispinterface
    ['{5535E844-4BD1-50A4-91D6-306617849D0E}']
    procedure CreateExternalTriggerDelayImplB(const COM_usbInt: ICoUSBInterface); dispid 1;
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double; dispid 2;
    function getExternalTriggerDelayIncrement: Integer; dispid 3;
    function getExternalTriggerDelayMaximum: Integer; dispid 4;
    function getExternalTriggerDelayMinimum: Integer; dispid 5;
    procedure setExternalTriggerDelay(COM_value: Integer); dispid 6;
    procedure masterClockChanged(COM_newValue: Integer); dispid 7;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 9;
  end;

// *********************************************************************//
// Interface: ICoFPGA
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {977C8CB5-4BE7-5151-8092-F02A1BFFB0FE}
// *********************************************************************//
  ICoFPGA = interface(IDispatch)
    ['{977C8CB5-4BE7-5151-8092-F02A1BFFB0FE}']
    procedure CreateFPGA; safecall;
    function getFPGA(COM_param0: Shortint): Integer; safecall;
    function getAllFPGA: OleVariant; safecall;
    procedure setFPGA(COM_param0: Shortint; COM_param1: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoFPGADisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {977C8CB5-4BE7-5151-8092-F02A1BFFB0FE}
// *********************************************************************//
  ICoFPGADisp = dispinterface
    ['{977C8CB5-4BE7-5151-8092-F02A1BFFB0FE}']
    procedure CreateFPGA; dispid 1;
    function getFPGA(COM_param0: {??Shortint}OleVariant): Integer; dispid 2;
    function getAllFPGA: OleVariant; dispid 3;
    procedure setFPGA(COM_param0: {??Shortint}OleVariant; COM_param1: Integer); dispid 4;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 5;
  end;

// *********************************************************************//
// Interface: ICoFPGAImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7781FEAD-AEA1-563F-9156-2F21C6BB335A}
// *********************************************************************//
  ICoFPGAImpl = interface(IDispatch)
    ['{7781FEAD-AEA1-563F-9156-2F21C6BB335A}']
    procedure CreateFPGAImplB(const COM_usbInt: ICoUSBInterface); safecall;
    procedure setFPGA(COM_reg: Shortint; COM_value: Integer); safecall;
    function getFPGA(COM_reg: Shortint): Integer; safecall;
    function getAllFPGA: OleVariant; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoFPGAImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7781FEAD-AEA1-563F-9156-2F21C6BB335A}
// *********************************************************************//
  ICoFPGAImplDisp = dispinterface
    ['{7781FEAD-AEA1-563F-9156-2F21C6BB335A}']
    procedure CreateFPGAImplB(const COM_usbInt: ICoUSBInterface); dispid 1;
    procedure setFPGA(COM_reg: {??Shortint}OleVariant; COM_value: Integer); dispid 2;
    function getFPGA(COM_reg: {??Shortint}OleVariant): Integer; dispid 3;
    function getAllFPGA: OleVariant; dispid 4;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 5;
  end;

// *********************************************************************//
// Interface: ICoFPGARegisters
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DA0F69A7-2081-538F-9050-F6A598A31F52}
// *********************************************************************//
  ICoFPGARegisters = interface(IDispatch)
    ['{DA0F69A7-2081-538F-9050-F6A598A31F52}']
    procedure CreateFPGARegisters; safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoFPGARegistersDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DA0F69A7-2081-538F-9050-F6A598A31F52}
// *********************************************************************//
  ICoFPGARegistersDisp = dispinterface
    ['{DA0F69A7-2081-538F-9050-F6A598A31F52}']
    procedure CreateFPGARegisters; dispid 1;
    function toString: WideString; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoFeatureEvent
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1DBC2903-B700-5745-80D8-660236AB96D3}
// *********************************************************************//
  ICoFeatureEvent = interface(IDispatch)
    ['{1DBC2903-B700-5745-80D8-660236AB96D3}']
    procedure CreateFeatureEvent; safecall;
    procedure setLifespan(COM_lifespan: Integer); safecall;
    function getLifespan: Integer; safecall;
    function getID: Integer; safecall;
    procedure setID(COM_id: Integer); safecall;
    procedure setFeatureCommand(const COM_command: WideString); safecall;
    function getFeatureCommand: WideString; safecall;
    function getBirthTime: Integer; safecall;
    function getSerialNumber: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoFeatureEventDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1DBC2903-B700-5745-80D8-660236AB96D3}
// *********************************************************************//
  ICoFeatureEventDisp = dispinterface
    ['{1DBC2903-B700-5745-80D8-660236AB96D3}']
    procedure CreateFeatureEvent; dispid 1;
    procedure setLifespan(COM_lifespan: Integer); dispid 2;
    function getLifespan: Integer; dispid 3;
    function getID: Integer; dispid 4;
    procedure setID(COM_id: Integer); dispid 5;
    procedure setFeatureCommand(const COM_command: WideString); dispid 6;
    function getFeatureCommand: WideString; dispid 7;
    function getBirthTime: Integer; dispid 8;
    function getSerialNumber: WideString; dispid 9;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 10;
  end;

// *********************************************************************//
// Interface: ICoFeatureListener
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {163C7820-CC3B-59ED-80E9-493E90828A2A}
// *********************************************************************//
  ICoFeatureListener = interface(IDispatch)
    ['{163C7820-CC3B-59ED-80E9-493E90828A2A}']
    procedure CreateFeatureListener; safecall;
    procedure addToStatusBar(const COM_param0: ICoFeatureEvent; COM_param1: Integer); safecall;
    procedure addToStatusBarB(const COM_param0: ICoFeatureEvent); safecall;
    procedure updateStatusText(const COM_param0: ICoFeatureEvent); safecall;
    procedure clearStatusBar; safecall;
    procedure clearStatusText(const COM_param0: WideString); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoFeatureListenerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {163C7820-CC3B-59ED-80E9-493E90828A2A}
// *********************************************************************//
  ICoFeatureListenerDisp = dispinterface
    ['{163C7820-CC3B-59ED-80E9-493E90828A2A}']
    procedure CreateFeatureListener; dispid 1;
    procedure addToStatusBar(const COM_param0: ICoFeatureEvent; COM_param1: Integer); dispid 2;
    procedure addToStatusBarB(const COM_param0: ICoFeatureEvent); dispid 3;
    procedure updateStatusText(const COM_param0: ICoFeatureEvent); dispid 4;
    procedure clearStatusBar; dispid 5;
    procedure clearStatusText(const COM_param0: WideString); dispid 6;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 7;
  end;

// *********************************************************************//
// Interface: ICoFeature
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E08AFD26-F644-5770-81EA-28481939B227}
// *********************************************************************//
  ICoFeature = interface(IDispatch)
    ['{E08AFD26-F644-5770-81EA-28481939B227}']
    procedure CreateFeature; safecall;
    function getFeatureName: WideString; safecall;
    procedure addFeatureListener(const COM_param0: ICoFeatureListener); safecall;
    procedure removeFeatureListener(const COM_param0: ICoFeatureListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoFeatureDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E08AFD26-F644-5770-81EA-28481939B227}
// *********************************************************************//
  ICoFeatureDisp = dispinterface
    ['{E08AFD26-F644-5770-81EA-28481939B227}']
    procedure CreateFeature; dispid 1;
    function getFeatureName: WideString; dispid 2;
    procedure addFeatureListener(const COM_param0: ICoFeatureListener); dispid 3;
    procedure removeFeatureListener(const COM_param0: ICoFeatureListener); dispid 4;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 5;
  end;

// *********************************************************************//
// Interface: ICoFeatureProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3D07838D-F25C-53C2-8198-CA717EC6C2F8}
// *********************************************************************//
  ICoFeatureProvider = interface(IDispatch)
    ['{3D07838D-F25C-53C2-8198-CA717EC6C2F8}']
    procedure CreateFeatureProvider; safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoFeatureProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3D07838D-F25C-53C2-8198-CA717EC6C2F8}
// *********************************************************************//
  ICoFeatureProviderDisp = dispinterface
    ['{3D07838D-F25C-53C2-8198-CA717EC6C2F8}']
    procedure CreateFeatureProvider; dispid 1;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoSpectrometerReconstruction
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B52BBA4F-B57D-5B96-81AF-336D7F035F31}
// *********************************************************************//
  ICoSpectrometerReconstruction = interface(IDispatch)
    ['{B52BBA4F-B57D-5B96-81AF-336D7F035F31}']
    procedure CreateSpectrometerReconstruction; safecall;
    function getAlgorithm: Shortint; safecall;
    procedure setAlgorithm(COM_algorithm: Shortint); safecall;
    function getReconstructionType: Shortint; safecall;
    procedure setReconstructionType(COM_reconstructionType: Shortint); safecall;
    function isSaturated: WordBool; safecall;
    procedure setSaturated(COM_saturated: WordBool); safecall;
    function getIntensities: OleVariant; safecall;
    procedure setIntensities(COM_intensities: OleVariant); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrometerReconstructionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B52BBA4F-B57D-5B96-81AF-336D7F035F31}
// *********************************************************************//
  ICoSpectrometerReconstructionDisp = dispinterface
    ['{B52BBA4F-B57D-5B96-81AF-336D7F035F31}']
    procedure CreateSpectrometerReconstruction; dispid 1;
    function getAlgorithm: {??Shortint}OleVariant; dispid 2;
    procedure setAlgorithm(COM_algorithm: {??Shortint}OleVariant); dispid 3;
    function getReconstructionType: {??Shortint}OleVariant; dispid 4;
    procedure setReconstructionType(COM_reconstructionType: {??Shortint}OleVariant); dispid 5;
    function isSaturated: WordBool; dispid 6;
    procedure setSaturated(COM_saturated: WordBool); dispid 7;
    function getIntensities: OleVariant; dispid 8;
    procedure setIntensities(COM_intensities: OleVariant); dispid 9;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 10;
  end;

// *********************************************************************//
// Interface: ICoLaserCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D5C57769-2068-5444-90E6-1729C08BA0A5}
// *********************************************************************//
  ICoLaserCollection = interface(IDispatch)
    ['{D5C57769-2068-5444-90E6-1729C08BA0A5}']
    function Item(index: OleVariant): OleVariant; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const pnewLaserCollection: IDispatch); safecall;
    procedure Remove(index: Integer); safecall;
    function Get__NewEnum: IUnknown; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  ICoLaserCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D5C57769-2068-5444-90E6-1729C08BA0A5}
// *********************************************************************//
  ICoLaserCollectionDisp = dispinterface
    ['{D5C57769-2068-5444-90E6-1729C08BA0A5}']
    function Item(index: OleVariant): OleVariant; dispid 0;
    property Count: Integer readonly dispid 1;
    procedure Add(const pnewLaserCollection: IDispatch); dispid 2;
    procedure Remove(index: Integer); dispid 3;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// Interface: ICoMMSRaman
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7613E754-670A-5FC4-91F7-2EBA3FE14F57}
// *********************************************************************//
  ICoMMSRaman = interface(IDispatch)
    ['{7613E754-670A-5FC4-91F7-2EBA3FE14F57}']
    procedure CreateMMSRaman; safecall;
    procedure CreateMMSRamanB(COM_i: Integer); safecall;
    procedure openSpectrometer(COM_index: Integer); safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    function getSerialNumber: WideString; safecall;
    function getModelNumber: WideString; safecall;
    procedure getSpectrometerInfo; safecall;
    function getIntegrationTime: Single; safecall;
    procedure setIntegrationTime(COM_intTime: Integer); safecall;
    function getSpectrometerExposure(COM_shutter: Shortint; COM_type: Shortint): ICoSpectrometerExposure; safecall;
    procedure startExposure(COM_shutter: Shortint; COM_type: Shortint); safecall;
    function queryExposure: WordBool; safecall;
    function getExposure: ICoSpectrometerExposure; safecall;
    procedure endExposure; safecall;
    procedure endExposureB(COM_shutterState: Shortint); safecall;
    function getReconstruction(COM_type: Shortint): ICoSpectrometerReconstruction; safecall;
    procedure reset; safecall;
    function getReconstructionType: Shortint; safecall;
    procedure setReconstructionType(COM_reconstructionType: Shortint); safecall;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; safecall;
    procedure getDarkExposure; safecall;
    procedure getLightExposure; safecall;
    function getCcdWidth: Integer; safecall;
    function getCcdHeight: Integer; safecall;
    function isExposureInProgress: WordBool; safecall;
    procedure setStrobeEnable(COM_laserOn: WordBool); safecall;
    procedure readCalibrationFromSpectrometer; safecall;
    procedure writeCalibrationToSpectrometer(const COM_cal: ICoMMSRamanCalibration); safecall;
    function getCalibration: ICoMMSRamanCalibration; safecall;
    function getLaser(COM_laserIndex: Integer): ICoLaser; safecall;
    function getLasers: ICoLaserCollection; safecall;
    function getNumberOfEnabledLasers: Integer; safecall;
    procedure setLaserInfo(COM_laserIndex: Integer); safecall;
    procedure getLaserInfo(COM_laserIndex: Integer); safecall;
    function getNumberOfSupportedLasers: Integer; safecall;
    procedure setNumberOfSupportedLasers(COM_numberOfSupportedLasers: Integer); safecall;
    procedure setDefaultLaser(COM_laserIndex: Integer); safecall;
    function getDefaultLaser: Integer; safecall;
    function isLaserTemperatureRegulation: WordBool; safecall;
    procedure setLaserTemperatureRegulation(COM_laserTemperatureRegulation: WordBool); safecall;
    procedure getLaserTemperatureInfo; safecall;
    procedure setLaserTemperatureInfo; safecall;
    function getMinimumLaserSetpoint: Integer; safecall;
    procedure setMinimumLaserSetpoint(COM_minimumLaserSetpoint: Integer); safecall;
    function getMaximumLaserSetpoint: Integer; safecall;
    procedure setMaximumLaserSetpoint(COM_maximumLaserSetpoint: Integer); safecall;
    procedure setLaserPowerInfo(COM_power: Integer); safecall;
    function getLaserPowerInfo: Integer; safecall;
    function isLaserPowerRegulation: WordBool; safecall;
    procedure setLaserPowerRegulation(COM_laserPowerRegulation: WordBool); safecall;
    function getMinimumLaserPowerSetpoint: Integer; safecall;
    procedure setMinimumLaserPowerSetpoint(COM_minimumLaserPowerSetpoint: Integer); safecall;
    function getMaximumLaserPowerSetpoint: Integer; safecall;
    procedure setMaximumLaserPowerSetpoint(COM_maximumLaserPowerSetpoint: Integer); safecall;
    procedure getCCDTemperatureInfo; safecall;
    procedure setCCDTemperatureInfo(COM_regulation: WordBool; COM_setpoint: Single); safecall;
    function isTemperatureRegulation: WordBool; safecall;
    procedure setTemperatureRegulation(COM_temperatureRegulation: WordBool); safecall;
    function getCCDSetpoint: Single; safecall;
    procedure setCCDSetpoint(COM_setpoint: Single); safecall;
    function getMinimumCCDSetpoint: Integer; safecall;
    procedure setMinimumCCDSetpoint(COM_min: Integer); safecall;
    function getMaximumCCDSetpoint: Integer; safecall;
    procedure setMaximumCCDSetpoint(COM_max: Integer); safecall;
    function getThermistor: Single; safecall;
    function isThermFault: WordBool; safecall;
    function isTempLock: WordBool; safecall;
    function getShutterState: Shortint; safecall;
    function isShutterOpen: WordBool; safecall;
    procedure openShutter; safecall;
    procedure closeShutter; safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_index: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); safecall;
    function getFirmwareVersion: WideString; safecall;
    procedure setDSPFirmwareVersion(const COM_dsp: WideString); safecall;
    function getDSPFirmwareVersion: WideString; safecall;
    procedure setFPGAFirmwareVersion(const COM_fpga: WideString); safecall;
    function getFPGAFirmwareVersion: WideString; safecall;
    procedure setUSBFirmwareVersion(const COM_usb: WideString); safecall;
    function getUSBFirmwareVersion: WideString; safecall;
    function getSpectrometer: ICoMMSRaman; safecall;
    procedure setMasterClock(COM_rate: Integer); safecall;
    function toString: WideString; safecall;
    function getConfiguration: ICoConfiguration; safecall;
    procedure addExposureListener(const COM_listener: ICoExposureListener); safecall;
    procedure removeExposureListener(const COM_listener: ICoExposureListener); safecall;
    function getLastExposure: ICoSpectrometerExposure; safecall;
    function has1DMode: WordBool; safecall;
    procedure set2DMode(COM_channel: Integer); safecall;
    procedure set1DMode(COM_channel: Integer); safecall;
    function is2DMode: WordBool; safecall;
    function is1DMode: WordBool; safecall;
    function get2DintegrationTime: Integer; safecall;
    procedure addIntegrationTimeChangeListener(const COM_listener: ICoIntegrationTimeChangeListener); safecall;
    procedure removeIntegrationTimeChangeListener(const COM_listener: ICoIntegrationTimeChangeListener); safecall;
    procedure fireIntegrationTimeChanged(COM_time: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMMSRamanDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7613E754-670A-5FC4-91F7-2EBA3FE14F57}
// *********************************************************************//
  ICoMMSRamanDisp = dispinterface
    ['{7613E754-670A-5FC4-91F7-2EBA3FE14F57}']
    procedure CreateMMSRaman; dispid 1;
    procedure CreateMMSRamanB(COM_i: Integer); dispid 2;
    procedure openSpectrometer(COM_index: Integer); dispid 3;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 4;
    function getSerialNumber: WideString; dispid 5;
    function getModelNumber: WideString; dispid 6;
    procedure getSpectrometerInfo; dispid 7;
    function getIntegrationTime: Single; dispid 8;
    procedure setIntegrationTime(COM_intTime: Integer); dispid 9;
    function getSpectrometerExposure(COM_shutter: {??Shortint}OleVariant; 
                                     COM_type: {??Shortint}OleVariant): ICoSpectrometerExposure; dispid 10;
    procedure startExposure(COM_shutter: {??Shortint}OleVariant; COM_type: {??Shortint}OleVariant); dispid 11;
    function queryExposure: WordBool; dispid 12;
    function getExposure: ICoSpectrometerExposure; dispid 13;
    procedure endExposure; dispid 14;
    procedure endExposureB(COM_shutterState: {??Shortint}OleVariant); dispid 15;
    function getReconstruction(COM_type: {??Shortint}OleVariant): ICoSpectrometerReconstruction; dispid 16;
    procedure reset; dispid 17;
    function getReconstructionType: {??Shortint}OleVariant; dispid 18;
    procedure setReconstructionType(COM_reconstructionType: {??Shortint}OleVariant); dispid 19;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; dispid 20;
    procedure getDarkExposure; dispid 21;
    procedure getLightExposure; dispid 22;
    function getCcdWidth: Integer; dispid 23;
    function getCcdHeight: Integer; dispid 24;
    function isExposureInProgress: WordBool; dispid 25;
    procedure setStrobeEnable(COM_laserOn: WordBool); dispid 26;
    procedure readCalibrationFromSpectrometer; dispid 27;
    procedure writeCalibrationToSpectrometer(const COM_cal: ICoMMSRamanCalibration); dispid 28;
    function getCalibration: ICoMMSRamanCalibration; dispid 29;
    function getLaser(COM_laserIndex: Integer): ICoLaser; dispid 30;
    function getLasers: ICoLaserCollection; dispid 31;
    function getNumberOfEnabledLasers: Integer; dispid 33;
    procedure setLaserInfo(COM_laserIndex: Integer); dispid 34;
    procedure getLaserInfo(COM_laserIndex: Integer); dispid 35;
    function getNumberOfSupportedLasers: Integer; dispid 36;
    procedure setNumberOfSupportedLasers(COM_numberOfSupportedLasers: Integer); dispid 37;
    procedure setDefaultLaser(COM_laserIndex: Integer); dispid 38;
    function getDefaultLaser: Integer; dispid 39;
    function isLaserTemperatureRegulation: WordBool; dispid 40;
    procedure setLaserTemperatureRegulation(COM_laserTemperatureRegulation: WordBool); dispid 41;
    procedure getLaserTemperatureInfo; dispid 42;
    procedure setLaserTemperatureInfo; dispid 43;
    function getMinimumLaserSetpoint: Integer; dispid 44;
    procedure setMinimumLaserSetpoint(COM_minimumLaserSetpoint: Integer); dispid 45;
    function getMaximumLaserSetpoint: Integer; dispid 46;
    procedure setMaximumLaserSetpoint(COM_maximumLaserSetpoint: Integer); dispid 47;
    procedure setLaserPowerInfo(COM_power: Integer); dispid 48;
    function getLaserPowerInfo: Integer; dispid 49;
    function isLaserPowerRegulation: WordBool; dispid 50;
    procedure setLaserPowerRegulation(COM_laserPowerRegulation: WordBool); dispid 51;
    function getMinimumLaserPowerSetpoint: Integer; dispid 52;
    procedure setMinimumLaserPowerSetpoint(COM_minimumLaserPowerSetpoint: Integer); dispid 53;
    function getMaximumLaserPowerSetpoint: Integer; dispid 54;
    procedure setMaximumLaserPowerSetpoint(COM_maximumLaserPowerSetpoint: Integer); dispid 55;
    procedure getCCDTemperatureInfo; dispid 56;
    procedure setCCDTemperatureInfo(COM_regulation: WordBool; COM_setpoint: Single); dispid 57;
    function isTemperatureRegulation: WordBool; dispid 58;
    procedure setTemperatureRegulation(COM_temperatureRegulation: WordBool); dispid 59;
    function getCCDSetpoint: Single; dispid 60;
    procedure setCCDSetpoint(COM_setpoint: Single); dispid 61;
    function getMinimumCCDSetpoint: Integer; dispid 62;
    procedure setMinimumCCDSetpoint(COM_min: Integer); dispid 63;
    function getMaximumCCDSetpoint: Integer; dispid 64;
    procedure setMaximumCCDSetpoint(COM_max: Integer); dispid 65;
    function getThermistor: Single; dispid 66;
    function isThermFault: WordBool; dispid 67;
    function isTempLock: WordBool; dispid 68;
    function getShutterState: {??Shortint}OleVariant; dispid 69;
    function isShutterOpen: WordBool; dispid 70;
    procedure openShutter; dispid 71;
    procedure closeShutter; dispid 72;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 73;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 75;
    function getWavelengths(COM_index: Integer): OleVariant; dispid 77;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); dispid 78;
    function getFirmwareVersion: WideString; dispid 79;
    procedure setDSPFirmwareVersion(const COM_dsp: WideString); dispid 80;
    function getDSPFirmwareVersion: WideString; dispid 81;
    procedure setFPGAFirmwareVersion(const COM_fpga: WideString); dispid 82;
    function getFPGAFirmwareVersion: WideString; dispid 83;
    procedure setUSBFirmwareVersion(const COM_usb: WideString); dispid 84;
    function getUSBFirmwareVersion: WideString; dispid 85;
    function getSpectrometer: ICoMMSRaman; dispid 86;
    procedure setMasterClock(COM_rate: Integer); dispid 87;
    function toString: WideString; dispid 89;
    function getConfiguration: ICoConfiguration; dispid 90;
    procedure addExposureListener(const COM_listener: ICoExposureListener); dispid 91;
    procedure removeExposureListener(const COM_listener: ICoExposureListener); dispid 92;
    function getLastExposure: ICoSpectrometerExposure; dispid 93;
    function has1DMode: WordBool; dispid 94;
    procedure set2DMode(COM_channel: Integer); dispid 95;
    procedure set1DMode(COM_channel: Integer); dispid 96;
    function is2DMode: WordBool; dispid 97;
    function is1DMode: WordBool; dispid 98;
    function get2DintegrationTime: Integer; dispid 99;
    procedure addIntegrationTimeChangeListener(const COM_listener: ICoIntegrationTimeChangeListener); dispid 100;
    procedure removeIntegrationTimeChangeListener(const COM_listener: ICoIntegrationTimeChangeListener); dispid 101;
    procedure fireIntegrationTimeChanged(COM_time: Integer); dispid 102;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 103;
  end;

// *********************************************************************//
// Interface: ICoFirmware
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FDC0ACBD-1104-5143-818D-1772E6FEBCD9}
// *********************************************************************//
  ICoFirmware = interface(IDispatch)
    ['{FDC0ACBD-1104-5143-818D-1772E6FEBCD9}']
    procedure CreateFirmware; safecall;
    function getFirmwareVersion: WideString; safecall;
    procedure setDSPFirmwareVersion(const COM_param0: WideString); safecall;
    function getDSPFirmwareVersion: WideString; safecall;
    procedure setFPGAFirmwareVersion(const COM_param0: WideString); safecall;
    function getFPGAFirmwareVersion: WideString; safecall;
    procedure setUSBFirmwareVersion(const COM_param0: WideString); safecall;
    function getUSBFirmwareVersion: WideString; safecall;
    function getSpectrometer: ICoMMSRaman; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoFirmwareDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FDC0ACBD-1104-5143-818D-1772E6FEBCD9}
// *********************************************************************//
  ICoFirmwareDisp = dispinterface
    ['{FDC0ACBD-1104-5143-818D-1772E6FEBCD9}']
    procedure CreateFirmware; dispid 1;
    function getFirmwareVersion: WideString; dispid 2;
    procedure setDSPFirmwareVersion(const COM_param0: WideString); dispid 3;
    function getDSPFirmwareVersion: WideString; dispid 4;
    procedure setFPGAFirmwareVersion(const COM_param0: WideString); dispid 5;
    function getFPGAFirmwareVersion: WideString; dispid 6;
    procedure setUSBFirmwareVersion(const COM_param0: WideString); dispid 7;
    function getUSBFirmwareVersion: WideString; dispid 8;
    function getSpectrometer: ICoMMSRaman; dispid 9;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 10;
  end;

// *********************************************************************//
// Interface: ICoFirmwareGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {47B816EB-195A-5AFB-80E1-FAD38CEAA204}
// *********************************************************************//
  ICoFirmwareGUIProvider = interface(IDispatch)
    ['{47B816EB-195A-5AFB-80E1-FAD38CEAA204}']
    procedure CreateFirmwareGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoFirmwareGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {47B816EB-195A-5AFB-80E1-FAD38CEAA204}
// *********************************************************************//
  ICoFirmwareGUIProviderDisp = dispinterface
    ['{47B816EB-195A-5AFB-80E1-FAD38CEAA204}']
    procedure CreateFirmwareGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoFirmwareImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5B5A1BB3-E36E-5C0A-81D4-EB75E400F330}
// *********************************************************************//
  ICoFirmwareImpl = interface(IDispatch)
    ['{5B5A1BB3-E36E-5C0A-81D4-EB75E400F330}']
    procedure CreateFirmwareImplB(const COM_usbInt: ICoUSBInterface; const COM_spec: ICoMMSRaman); safecall;
    function getFirmwareVersion: WideString; safecall;
    procedure setDSPFirmwareVersion(const COM_dsp: WideString); safecall;
    function getDSPFirmwareVersion: WideString; safecall;
    procedure setFPGAFirmwareVersion(const COM_fpga: WideString); safecall;
    function getFPGAFirmwareVersion: WideString; safecall;
    procedure setUSBFirmwareVersion(const COM_usb: WideString); safecall;
    function getUSBFirmwareVersion: WideString; safecall;
    function getSpectrometer: ICoMMSRaman; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoFirmwareImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5B5A1BB3-E36E-5C0A-81D4-EB75E400F330}
// *********************************************************************//
  ICoFirmwareImplDisp = dispinterface
    ['{5B5A1BB3-E36E-5C0A-81D4-EB75E400F330}']
    procedure CreateFirmwareImplB(const COM_usbInt: ICoUSBInterface; const COM_spec: ICoMMSRaman); dispid 1;
    function getFirmwareVersion: WideString; dispid 2;
    procedure setDSPFirmwareVersion(const COM_dsp: WideString); dispid 3;
    function getDSPFirmwareVersion: WideString; dispid 4;
    procedure setFPGAFirmwareVersion(const COM_fpga: WideString); dispid 5;
    function getFPGAFirmwareVersion: WideString; dispid 6;
    procedure setUSBFirmwareVersion(const COM_usb: WideString); dispid 7;
    function getUSBFirmwareVersion: WideString; dispid 8;
    function getSpectrometer: ICoMMSRaman; dispid 9;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 11;
  end;

// *********************************************************************//
// Interface: ICoGateDelayListener
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8847C63C-1DCF-569F-80BB-F5B90BD93762}
// *********************************************************************//
  ICoGateDelayListener = interface(IDispatch)
    ['{8847C63C-1DCF-569F-80BB-F5B90BD93762}']
    procedure CreateGateDelayListener; safecall;
    procedure gateDelayValueChanged(COM_param0: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoGateDelayListenerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8847C63C-1DCF-569F-80BB-F5B90BD93762}
// *********************************************************************//
  ICoGateDelayListenerDisp = dispinterface
    ['{8847C63C-1DCF-569F-80BB-F5B90BD93762}']
    procedure CreateGateDelayListener; dispid 1;
    procedure gateDelayValueChanged(COM_param0: Integer); dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoFlGated
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E0F12890-325C-56F2-8015-B1971613A693}
// *********************************************************************//
  ICoFlGated = interface(IDispatch)
    ['{E0F12890-325C-56F2-8015-B1971613A693}']
    procedure CreateFlGated; safecall;
    function getGateIncrement: Integer; safecall;
    function getGateMaximum: Integer; safecall;
    function getGateMinimum: Integer; safecall;
    procedure setGateFrequency(COM_param0: Integer); safecall;
    function getGateFrequency: Integer; safecall;
    procedure addGateDelayListener(const COM_param0: ICoGateDelayListener); safecall;
    procedure removeGateDelayListener(const COM_param0: ICoGateDelayListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoFlGatedDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E0F12890-325C-56F2-8015-B1971613A693}
// *********************************************************************//
  ICoFlGatedDisp = dispinterface
    ['{E0F12890-325C-56F2-8015-B1971613A693}']
    procedure CreateFlGated; dispid 1;
    function getGateIncrement: Integer; dispid 2;
    function getGateMaximum: Integer; dispid 3;
    function getGateMinimum: Integer; dispid 4;
    procedure setGateFrequency(COM_param0: Integer); dispid 5;
    function getGateFrequency: Integer; dispid 6;
    procedure addGateDelayListener(const COM_param0: ICoGateDelayListener); dispid 7;
    procedure removeGateDelayListener(const COM_param0: ICoGateDelayListener); dispid 8;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 9;
  end;

// *********************************************************************//
// Interface: ICoFlGatedGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {37348848-0827-56C8-81DC-0CCC335AEE0F}
// *********************************************************************//
  ICoFlGatedGUIProvider = interface(IDispatch)
    ['{37348848-0827-56C8-81DC-0CCC335AEE0F}']
    procedure CreateFlGatedGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoFlGatedGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {37348848-0827-56C8-81DC-0CCC335AEE0F}
// *********************************************************************//
  ICoFlGatedGUIProviderDisp = dispinterface
    ['{37348848-0827-56C8-81DC-0CCC335AEE0F}']
    procedure CreateFlGatedGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoSpectrometerPlugIn
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9ECA58FC-F445-52B6-90FB-950D2205F4F3}
// *********************************************************************//
  ICoSpectrometerPlugIn = interface(IDispatch)
    ['{9ECA58FC-F445-52B6-90FB-950D2205F4F3}']
    procedure CreateSpectrometerPlugIn; safecall;
    function getName(COM_productID: Integer): WideString; safecall;
    function getNameB: WideString; safecall;
    function getClassName(COM_productID: Integer): WideString; safecall;
    function getClassNameB: WideString; safecall;
    function getUSBSpectrometer: ICoUSBSpectrometer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrometerPlugInDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9ECA58FC-F445-52B6-90FB-950D2205F4F3}
// *********************************************************************//
  ICoSpectrometerPlugInDisp = dispinterface
    ['{9ECA58FC-F445-52B6-90FB-950D2205F4F3}']
    procedure CreateSpectrometerPlugIn; dispid 1;
    function getName(COM_productID: Integer): WideString; dispid 2;
    function getNameB: WideString; dispid 3;
    function getClassName(COM_productID: Integer): WideString; dispid 4;
    function getClassNameB: WideString; dispid 5;
    function getUSBSpectrometer: ICoUSBSpectrometer; dispid 6;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 7;
  end;

// *********************************************************************//
// Interface: ICoSpectrometerPlugInCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2E0D8121-FD64-5F98-91EF-F91E783AD312}
// *********************************************************************//
  ICoSpectrometerPlugInCollection = interface(IDispatch)
    ['{2E0D8121-FD64-5F98-91EF-F91E783AD312}']
    function Item(index: OleVariant): OleVariant; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const pnewSpectrometerPlugInCollection: IDispatch); safecall;
    procedure Remove(index: Integer); safecall;
    function Get__NewEnum: IUnknown; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrometerPlugInCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2E0D8121-FD64-5F98-91EF-F91E783AD312}
// *********************************************************************//
  ICoSpectrometerPlugInCollectionDisp = dispinterface
    ['{2E0D8121-FD64-5F98-91EF-F91E783AD312}']
    function Item(index: OleVariant): OleVariant; dispid 0;
    property Count: Integer readonly dispid 1;
    procedure Add(const pnewSpectrometerPlugInCollection: IDispatch); dispid 2;
    procedure Remove(index: Integer); dispid 3;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// Interface: ICoUSB2000
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EC2C8E6D-72F2-52C3-818C-8785512F1B9F}
// *********************************************************************//
  ICoUSB2000 = interface(IDispatch)
    ['{EC2C8E6D-72F2-52C3-818C-8785512F1B9F}']
    procedure CreateUSB2000; safecall;
    procedure CreateUSB2000B(COM_i: Integer); safecall;
    procedure setEndpoints; safecall;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; safecall;
    procedure openSpectrometer(COM_index: Integer); safecall;
    function getUniUsb: ICoUSBInterface; safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    function isFlGated: WordBool; safecall;
    function isCurie: WordBool; safecall;
    function getStatus: ICoSpectrometerStatus; safecall;
    function readIntegrationTime: Integer; safecall;
    procedure setMasterClock(COM_freq: Integer); safecall;
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant; safecall;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant); safecall;
    function getActualIntegrationTime: Integer; safecall;
    procedure setStrobeDelay(COM_delay: Integer); safecall;
    function getStrobeDelay: Integer; safecall;
    function getName: WideString; safecall;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; safecall;
    procedure setExternalTriggerMode(COM_mode: Integer); safecall;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; safecall;
    function isPlugInDetected(COM_id: Integer): WordBool; safecall;
    function getPlugIns: ICoSpectrometerPlugInCollection; safecall;
    function getNumberOfPlugIns: Integer; safecall;
    function initializePlugIns: OleVariant; safecall;
    procedure detectPlugIns; safecall;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; safecall;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_index: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); safecall;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; safecall;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); safecall;
    function getStrayLight(COM_index: Integer): Double; safecall;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer; safecall;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant; safecall;
    function isAdvancedVersion: WordBool; safecall;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    function getGateIncrement: Integer; safecall;
    function getGateMaximum: Integer; safecall;
    function getGateMinimum: Integer; safecall;
    procedure setGateFrequency(COM_freq: Integer); safecall;
    function getGateFrequency: Integer; safecall;
    procedure addGateDelayListener(const COM_listener: ICoGateDelayListener); safecall;
    procedure removeGateDelayListener(const COM_listener: ICoGateDelayListener); safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSB2000Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EC2C8E6D-72F2-52C3-818C-8785512F1B9F}
// *********************************************************************//
  ICoUSB2000Disp = dispinterface
    ['{EC2C8E6D-72F2-52C3-818C-8785512F1B9F}']
    procedure CreateUSB2000; dispid 1;
    procedure CreateUSB2000B(COM_i: Integer); dispid 2;
    procedure setEndpoints; dispid 3;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; dispid 4;
    procedure openSpectrometer(COM_index: Integer); dispid 5;
    function getUniUsb: ICoUSBInterface; dispid 6;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 7;
    function isFlGated: WordBool; dispid 8;
    function isCurie: WordBool; dispid 9;
    function getStatus: ICoSpectrometerStatus; dispid 10;
    function readIntegrationTime: Integer; dispid 11;
    procedure setMasterClock(COM_freq: Integer); dispid 12;
    function getIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant): OleVariant; dispid 13;
    procedure setIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant; 
                                              COM_data: OleVariant); dispid 14;
    function getActualIntegrationTime: Integer; dispid 15;
    procedure setStrobeDelay(COM_delay: Integer); dispid 16;
    function getStrobeDelay: Integer; dispid 17;
    function getName: WideString; dispid 18;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; dispid 19;
    procedure setExternalTriggerMode(COM_mode: Integer); dispid 20;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; dispid 21;
    function isPlugInDetected(COM_id: Integer): WordBool; dispid 22;
    function getPlugIns: ICoSpectrometerPlugInCollection; dispid 23;
    function getNumberOfPlugIns: Integer; dispid 24;
    function initializePlugIns: OleVariant; dispid 25;
    procedure detectPlugIns; dispid 26;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 27;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; dispid 29;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; dispid 31;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); dispid 32;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 33;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 35;
    function getWavelengths(COM_index: Integer): OleVariant; dispid 37;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); dispid 38;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; dispid 39;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; dispid 42;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); dispid 43;
    function getStrayLight(COM_index: Integer): Double; dispid 44;
    function setI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant; 
                         COM_i2C: OleVariant): Integer; dispid 45;
    function getI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant): OleVariant; dispid 46;
    function isAdvancedVersion: WordBool; dispid 47;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 48;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 49;
    function getGateIncrement: Integer; dispid 50;
    function getGateMaximum: Integer; dispid 51;
    function getGateMinimum: Integer; dispid 52;
    procedure setGateFrequency(COM_freq: Integer); dispid 53;
    function getGateFrequency: Integer; dispid 54;
    procedure addGateDelayListener(const COM_listener: ICoGateDelayListener); dispid 55;
    procedure removeGateDelayListener(const COM_listener: ICoGateDelayListener); dispid 56;
    function toString: WideString; dispid 57;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 58;
  end;

// *********************************************************************//
// Interface: ICoFlGatedImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F5E105DE-4587-5378-80C1-2FA29B9B1A75}
// *********************************************************************//
  ICoFlGatedImpl = interface(IDispatch)
    ['{F5E105DE-4587-5378-80C1-2FA29B9B1A75}']
    procedure CreateFlGatedImplB(const COM_usbInt: ICoUSBInterface; 
                                 const COM_spectrometer: ICoUSB2000); safecall;
    function getGateIncrement: Integer; safecall;
    function getGateMaximum: Integer; safecall;
    function getGateMinimum: Integer; safecall;
    procedure setGateFrequency(COM_freq: Integer); safecall;
    function getGateFrequency: Integer; safecall;
    procedure addGateDelayListener(const COM_listener: ICoGateDelayListener); safecall;
    procedure removeGateDelayListener(const COM_listener: ICoGateDelayListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoFlGatedImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F5E105DE-4587-5378-80C1-2FA29B9B1A75}
// *********************************************************************//
  ICoFlGatedImplDisp = dispinterface
    ['{F5E105DE-4587-5378-80C1-2FA29B9B1A75}']
    procedure CreateFlGatedImplB(const COM_usbInt: ICoUSBInterface; 
                                 const COM_spectrometer: ICoUSB2000); dispid 1;
    function getGateIncrement: Integer; dispid 2;
    function getGateMaximum: Integer; dispid 3;
    function getGateMinimum: Integer; dispid 4;
    procedure setGateFrequency(COM_freq: Integer); dispid 5;
    function getGateFrequency: Integer; dispid 6;
    procedure addGateDelayListener(const COM_listener: ICoGateDelayListener); dispid 7;
    procedure removeGateDelayListener(const COM_listener: ICoGateDelayListener); dispid 8;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 10;
  end;

// *********************************************************************//
// Interface: ICoGPIO
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7F251211-6B4E-5734-9074-3DB312CBE018}
// *********************************************************************//
  ICoGPIO = interface(IDispatch)
    ['{7F251211-6B4E-5734-9074-3DB312CBE018}']
    procedure CreateGPIO; safecall;
    function getValueBits: ICoBitSet; safecall;
    function getValueBit(COM_param0: Integer): Integer; safecall;
    procedure setValueAllBits(const COM_param0: ICoBitSet); safecall;
    procedure setValueBitmask(COM_param0: Smallint); safecall;
    procedure setValueBit(COM_param0: Integer; COM_param1: WordBool); safecall;
    function getDirectionBits: ICoBitSet; safecall;
    procedure setDirectionAllBits(const COM_param0: ICoBitSet); safecall;
    procedure setDirectionBitmask(COM_param0: Smallint); safecall;
    procedure setDirectionBit(COM_param0: Integer; COM_param1: WordBool); safecall;
    function getMuxBits: ICoBitSet; safecall;
    function getNumberOfPins: Integer; safecall;
    procedure setMuxAllBits(const COM_param0: ICoBitSet); safecall;
    procedure setMuxBitmask(COM_param0: Smallint); safecall;
    procedure setMuxBit(COM_param0: Integer; COM_param1: WordBool); safecall;
    function getTotalGPIOBits: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoGPIODisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7F251211-6B4E-5734-9074-3DB312CBE018}
// *********************************************************************//
  ICoGPIODisp = dispinterface
    ['{7F251211-6B4E-5734-9074-3DB312CBE018}']
    procedure CreateGPIO; dispid 1;
    function getValueBits: ICoBitSet; dispid 2;
    function getValueBit(COM_param0: Integer): Integer; dispid 3;
    procedure setValueAllBits(const COM_param0: ICoBitSet); dispid 4;
    procedure setValueBitmask(COM_param0: Smallint); dispid 5;
    procedure setValueBit(COM_param0: Integer; COM_param1: WordBool); dispid 6;
    function getDirectionBits: ICoBitSet; dispid 7;
    procedure setDirectionAllBits(const COM_param0: ICoBitSet); dispid 8;
    procedure setDirectionBitmask(COM_param0: Smallint); dispid 9;
    procedure setDirectionBit(COM_param0: Integer; COM_param1: WordBool); dispid 10;
    function getMuxBits: ICoBitSet; dispid 11;
    function getNumberOfPins: Integer; dispid 12;
    procedure setMuxAllBits(const COM_param0: ICoBitSet); dispid 13;
    procedure setMuxBitmask(COM_param0: Smallint); dispid 14;
    procedure setMuxBit(COM_param0: Integer; COM_param1: WordBool); dispid 15;
    function getTotalGPIOBits: Integer; dispid 16;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 17;
  end;

// *********************************************************************//
// Interface: ICoGPIOGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3AA51657-9811-53BC-813B-023E956BD45B}
// *********************************************************************//
  ICoGPIOGUIProvider = interface(IDispatch)
    ['{3AA51657-9811-53BC-813B-023E956BD45B}']
    procedure CreateGPIOGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoGPIOGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3AA51657-9811-53BC-813B-023E956BD45B}
// *********************************************************************//
  ICoGPIOGUIProviderDisp = dispinterface
    ['{3AA51657-9811-53BC-813B-023E956BD45B}']
    procedure CreateGPIOGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoGPIOImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C6FB307A-460F-5EB6-912A-F0335A58F5CF}
// *********************************************************************//
  ICoGPIOImpl = interface(IDispatch)
    ['{C6FB307A-460F-5EB6-912A-F0335A58F5CF}']
    procedure CreateGPIOImplB(const COM_usbInt: ICoUSBInterface; COM_numPins: Integer); safecall;
    function getTotalGPIOBits: Integer; safecall;
    function getDirectionBits: ICoBitSet; safecall;
    function getMuxBits: ICoBitSet; safecall;
    function getValueBits: ICoBitSet; safecall;
    function getValueBit(COM_bitNumber: Integer): Integer; safecall;
    function getNumberOfPins: Integer; safecall;
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setValueAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool); safecall;
    procedure setDirectionBitmask(COM_value: Smallint); safecall;
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool); safecall;
    procedure setMuxBitmask(COM_value: Smallint); safecall;
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool); safecall;
    procedure setValueBitmask(COM_value: Smallint); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoGPIOImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C6FB307A-460F-5EB6-912A-F0335A58F5CF}
// *********************************************************************//
  ICoGPIOImplDisp = dispinterface
    ['{C6FB307A-460F-5EB6-912A-F0335A58F5CF}']
    procedure CreateGPIOImplB(const COM_usbInt: ICoUSBInterface; COM_numPins: Integer); dispid 1;
    function getTotalGPIOBits: Integer; dispid 2;
    function getDirectionBits: ICoBitSet; dispid 3;
    function getMuxBits: ICoBitSet; dispid 4;
    function getValueBits: ICoBitSet; dispid 5;
    function getValueBit(COM_bitNumber: Integer): Integer; dispid 6;
    function getNumberOfPins: Integer; dispid 7;
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet); dispid 8;
    procedure setValueAllBits(const COM_bitSet: ICoBitSet); dispid 9;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet); dispid 10;
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool); dispid 11;
    procedure setDirectionBitmask(COM_value: Smallint); dispid 12;
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool); dispid 13;
    procedure setMuxBitmask(COM_value: Smallint); dispid 14;
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool); dispid 15;
    procedure setValueBitmask(COM_value: Smallint); dispid 16;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 18;
  end;

// *********************************************************************//
// Interface: ICoGatingErrorProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9F4BB6CB-2555-5916-8037-1ABC740D567A}
// *********************************************************************//
  ICoGatingErrorProvider = interface(IDispatch)
    ['{9F4BB6CB-2555-5916-8037-1ABC740D567A}']
    procedure CreateGatingErrorProvider; safecall;
    function getGatingModeIntegrationTime: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoGatingErrorProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9F4BB6CB-2555-5916-8037-1ABC740D567A}
// *********************************************************************//
  ICoGatingErrorProviderDisp = dispinterface
    ['{9F4BB6CB-2555-5916-8037-1ABC740D567A}']
    procedure CreateGatingErrorProvider; dispid 1;
    function getGatingModeIntegrationTime: Integer; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoGatingErrorProviderImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EBB3D935-441B-5CAC-80F4-8E0A290EFC3F}
// *********************************************************************//
  ICoGatingErrorProviderImpl = interface(IDispatch)
    ['{EBB3D935-441B-5CAC-80F4-8E0A290EFC3F}']
    procedure CreateGatingErrorProviderImplB(const COM_usbInt: ICoUSBInterface; 
                                             const COM_spectrometer: ICoSpectrometer); safecall;
    procedure checkIntegrationTime(COM_intTime: Integer); safecall;
    procedure checkTriggerNotification(COM_mode: Integer); safecall;
    function isInGatedMode: WordBool; safecall;
    procedure addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); safecall;
    procedure removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoGatingErrorProviderImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EBB3D935-441B-5CAC-80F4-8E0A290EFC3F}
// *********************************************************************//
  ICoGatingErrorProviderImplDisp = dispinterface
    ['{EBB3D935-441B-5CAC-80F4-8E0A290EFC3F}']
    procedure CreateGatingErrorProviderImplB(const COM_usbInt: ICoUSBInterface; 
                                             const COM_spectrometer: ICoSpectrometer); dispid 1;
    procedure checkIntegrationTime(COM_intTime: Integer); dispid 2;
    procedure checkTriggerNotification(COM_mode: Integer); dispid 3;
    function isInGatedMode: WordBool; dispid 4;
    procedure addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); dispid 5;
    procedure removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); dispid 6;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 7;
  end;

// *********************************************************************//
// Interface: ICoHR2000
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8058AC8B-131A-59FC-819F-44AB2CC0B5E5}
// *********************************************************************//
  ICoHR2000 = interface(IDispatch)
    ['{8058AC8B-131A-59FC-819F-44AB2CC0B5E5}']
    procedure CreateHR2000; safecall;
    procedure CreateHR2000B(COM_i: Integer); safecall;
    procedure setEndpoints; safecall;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; safecall;
    procedure openSpectrometer(COM_index: Integer); safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    function getActualIntegrationTime: Integer; safecall;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_message: OleVariant): Integer; safecall;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant; safecall;
    function isPlugInDetected(COM_id: Integer): WordBool; safecall;
    function getPlugIns: ICoSpectrometerPlugInCollection; safecall;
    function getNumberOfPlugIns: Integer; safecall;
    function initializePlugIns: OleVariant; safecall;
    procedure detectPlugIns; safecall;
    procedure setExternalTriggerMode(COM_mode: Integer); safecall;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; safecall;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; safecall;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_index: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); safecall;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; safecall;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); safecall;
    function getStrayLight(COM_index: Integer): Double; safecall;
    function isAdvancedVersion: WordBool; safecall;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoHR2000Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8058AC8B-131A-59FC-819F-44AB2CC0B5E5}
// *********************************************************************//
  ICoHR2000Disp = dispinterface
    ['{8058AC8B-131A-59FC-819F-44AB2CC0B5E5}']
    procedure CreateHR2000; dispid 1;
    procedure CreateHR2000B(COM_i: Integer); dispid 2;
    procedure setEndpoints; dispid 3;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; dispid 4;
    procedure openSpectrometer(COM_index: Integer); dispid 5;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 6;
    function getActualIntegrationTime: Integer; dispid 7;
    function setI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant; 
                         COM_message: OleVariant): Integer; dispid 8;
    function getI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant): OleVariant; dispid 9;
    function isPlugInDetected(COM_id: Integer): WordBool; dispid 10;
    function getPlugIns: ICoSpectrometerPlugInCollection; dispid 11;
    function getNumberOfPlugIns: Integer; dispid 12;
    function initializePlugIns: OleVariant; dispid 13;
    procedure detectPlugIns; dispid 14;
    procedure setExternalTriggerMode(COM_mode: Integer); dispid 15;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; dispid 16;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 17;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; dispid 19;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; dispid 21;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); dispid 22;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 23;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 25;
    function getWavelengths(COM_index: Integer): OleVariant; dispid 27;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); dispid 28;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; dispid 29;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; dispid 32;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); dispid 33;
    function getStrayLight(COM_index: Integer): Double; dispid 34;
    function isAdvancedVersion: WordBool; dispid 35;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 36;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 37;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 38;
  end;

// *********************************************************************//
// Interface: ICoHR2000Plus
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29CCCA88-B0DD-5126-81F3-AF2652AD956B}
// *********************************************************************//
  ICoHR2000Plus = interface(IDispatch)
    ['{29CCCA88-B0DD-5126-81F3-AF2652AD956B}']
    procedure CreateHR2000Plus; safecall;
    procedure CreateHR2000PlusB(COM_i: Integer); safecall;
    procedure setEndpoints; safecall;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; safecall;
    procedure openSpectrometer(COM_index: Integer); safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    function getStatus: ICoSpectrometerStatus; safecall;
    function readIntegrationTime: Integer; safecall;
    procedure setStrobeDelay(COM_delay: Integer); safecall;
    function toString: WideString; safecall;
    function getPlugIns: ICoSpectrometerPlugInCollection; safecall;
    function getNumberOfPlugIns: Integer; safecall;
    function isPlugInDetected(COM_id: Integer): WordBool; safecall;
    function initializePlugIns: OleVariant; safecall;
    procedure detectPlugIns; safecall;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer; safecall;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant; safecall;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; safecall;
    function getPSOCVersion: WideString; safecall;
    function getFPGAFirmwareVersion: WideString; safecall;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; safecall;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); safecall;
    function getContinuousStrobeDelayMinimum: Integer; safecall;
    function getContinuousStrobeDelayMaximum: Integer; safecall;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; safecall;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer); safecall;
    function getIntegrationTimeBaseClock: Integer; safecall;
    function getIntegrationClockTimer: Integer; safecall;
    function getAdvancedIntegrationTimeMinimum: Integer; safecall;
    function getAdvancedIntegrationTimeMaximum: Integer; safecall;
    function getAdvancedIntegrationTimeIncrement: Integer; safecall;
    procedure setExternalTriggerMode(COM_mode: Integer); safecall;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; safecall;
    procedure setShutterClock(COM_value: Integer); safecall;
    function getShutterClock: Integer; safecall;
    procedure setSingleStrobeLow(COM_value: Integer); safecall;
    procedure setSingleStrobeHigh(COM_value: Integer); safecall;
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double; safecall;
    function getSingleStrobeLow: Integer; safecall;
    function getSingleStrobeHigh: Integer; safecall;
    function getSingleStrobeMinimum: Integer; safecall;
    function getSingleStrobeMaximum: Integer; safecall;
    function getSingleStrobeIncrement: Integer; safecall;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setValueAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setDirectionBitmask(COM_bitmask: Smallint); safecall;
    procedure setMuxBitmask(COM_bitmask: Smallint); safecall;
    procedure setValueBitmask(COM_bitmask: Smallint); safecall;
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool); safecall;
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool); safecall;
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool); safecall;
    function getTotalGPIOBits: Integer; safecall;
    function getDirectionBits: ICoBitSet; safecall;
    function getMuxBits: ICoBitSet; safecall;
    function getValueBit(COM_bitNumber: Integer): Integer; safecall;
    function getValueBits: ICoBitSet; safecall;
    function getNumberOfPins: Integer; safecall;
    function getBoardTemperatureCelsius: Double; safecall;
    function getVoltageIn: Double; safecall;
    procedure setDACCounts(COM_counts: Integer; COM_channelIndex: Integer); safecall;
    function analogOutCountsToVolts(COM_counts: Integer): Double; safecall;
    function getDACMinimum: Integer; safecall;
    function getDACMaximum: Integer; safecall;
    function getDACIncrement: Integer; safecall;
    function isDACPresent: WordBool; safecall;
    function getDACPins: Integer; safecall;
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant; safecall;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant); safecall;
    procedure setMasterClockDivisor(COM_value: Integer); safecall;
    function getMasterClockDivisor: Integer; safecall;
    procedure setExternalTriggerDelay(COM_counts: Integer); safecall;
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double; safecall;
    function getExternalTriggerDelayMinimum: Integer; safecall;
    function getExternalTriggerDelayMaximum: Integer; safecall;
    function getExternalTriggerDelayIncrement: Integer; safecall;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; safecall;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_index: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); safecall;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; safecall;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); safecall;
    function getStrayLight(COM_index: Integer): Double; safecall;
    function isAdvancedVersion: WordBool; safecall;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoHR2000PlusDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29CCCA88-B0DD-5126-81F3-AF2652AD956B}
// *********************************************************************//
  ICoHR2000PlusDisp = dispinterface
    ['{29CCCA88-B0DD-5126-81F3-AF2652AD956B}']
    procedure CreateHR2000Plus; dispid 1;
    procedure CreateHR2000PlusB(COM_i: Integer); dispid 2;
    procedure setEndpoints; dispid 3;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; dispid 4;
    procedure openSpectrometer(COM_index: Integer); dispid 5;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 6;
    function getStatus: ICoSpectrometerStatus; dispid 7;
    function readIntegrationTime: Integer; dispid 8;
    procedure setStrobeDelay(COM_delay: Integer); dispid 9;
    function toString: WideString; dispid 10;
    function getPlugIns: ICoSpectrometerPlugInCollection; dispid 11;
    function getNumberOfPlugIns: Integer; dispid 12;
    function isPlugInDetected(COM_id: Integer): WordBool; dispid 13;
    function initializePlugIns: OleVariant; dispid 14;
    procedure detectPlugIns; dispid 15;
    function setI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant; 
                         COM_i2C: OleVariant): Integer; dispid 16;
    function getI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant): OleVariant; dispid 17;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; dispid 18;
    function getPSOCVersion: WideString; dispid 19;
    function getFPGAFirmwareVersion: WideString; dispid 20;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; dispid 21;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); dispid 22;
    function getContinuousStrobeDelayMinimum: Integer; dispid 23;
    function getContinuousStrobeDelayMaximum: Integer; dispid 24;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; dispid 25;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer); dispid 26;
    function getIntegrationTimeBaseClock: Integer; dispid 27;
    function getIntegrationClockTimer: Integer; dispid 28;
    function getAdvancedIntegrationTimeMinimum: Integer; dispid 29;
    function getAdvancedIntegrationTimeMaximum: Integer; dispid 30;
    function getAdvancedIntegrationTimeIncrement: Integer; dispid 31;
    procedure setExternalTriggerMode(COM_mode: Integer); dispid 32;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; dispid 33;
    procedure setShutterClock(COM_value: Integer); dispid 34;
    function getShutterClock: Integer; dispid 35;
    procedure setSingleStrobeLow(COM_value: Integer); dispid 36;
    procedure setSingleStrobeHigh(COM_value: Integer); dispid 37;
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double; dispid 38;
    function getSingleStrobeLow: Integer; dispid 39;
    function getSingleStrobeHigh: Integer; dispid 40;
    function getSingleStrobeMinimum: Integer; dispid 41;
    function getSingleStrobeMaximum: Integer; dispid 42;
    function getSingleStrobeIncrement: Integer; dispid 43;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet); dispid 44;
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet); dispid 45;
    procedure setValueAllBits(const COM_bitSet: ICoBitSet); dispid 46;
    procedure setDirectionBitmask(COM_bitmask: Smallint); dispid 47;
    procedure setMuxBitmask(COM_bitmask: Smallint); dispid 48;
    procedure setValueBitmask(COM_bitmask: Smallint); dispid 49;
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool); dispid 50;
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool); dispid 51;
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool); dispid 52;
    function getTotalGPIOBits: Integer; dispid 53;
    function getDirectionBits: ICoBitSet; dispid 54;
    function getMuxBits: ICoBitSet; dispid 55;
    function getValueBit(COM_bitNumber: Integer): Integer; dispid 56;
    function getValueBits: ICoBitSet; dispid 57;
    function getNumberOfPins: Integer; dispid 58;
    function getBoardTemperatureCelsius: Double; dispid 59;
    function getVoltageIn: Double; dispid 60;
    procedure setDACCounts(COM_counts: Integer; COM_channelIndex: Integer); dispid 61;
    function analogOutCountsToVolts(COM_counts: Integer): Double; dispid 62;
    function getDACMinimum: Integer; dispid 63;
    function getDACMaximum: Integer; dispid 64;
    function getDACIncrement: Integer; dispid 65;
    function isDACPresent: WordBool; dispid 66;
    function getDACPins: Integer; dispid 67;
    function getIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant): OleVariant; dispid 68;
    procedure setIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant; 
                                              COM_data: OleVariant); dispid 69;
    procedure setMasterClockDivisor(COM_value: Integer); dispid 70;
    function getMasterClockDivisor: Integer; dispid 71;
    procedure setExternalTriggerDelay(COM_counts: Integer); dispid 72;
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double; dispid 73;
    function getExternalTriggerDelayMinimum: Integer; dispid 74;
    function getExternalTriggerDelayMaximum: Integer; dispid 75;
    function getExternalTriggerDelayIncrement: Integer; dispid 76;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 77;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; dispid 79;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; dispid 81;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); dispid 82;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 83;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 85;
    function getWavelengths(COM_index: Integer): OleVariant; dispid 87;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); dispid 88;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; dispid 89;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; dispid 92;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); dispid 93;
    function getStrayLight(COM_index: Integer): Double; dispid 94;
    function isAdvancedVersion: WordBool; dispid 95;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 96;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 97;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 98;
  end;

// *********************************************************************//
// Interface: ICoHR2000PlusStatus
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6E1C16D0-79F8-54D3-9005-39AA3B39DE4B}
// *********************************************************************//
  ICoHR2000PlusStatus = interface(IDispatch)
    ['{6E1C16D0-79F8-54D3-9005-39AA3B39DE4B}']
    procedure CreateHR2000PlusStatus; safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoHR2000PlusStatusDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6E1C16D0-79F8-54D3-9005-39AA3B39DE4B}
// *********************************************************************//
  ICoHR2000PlusStatusDisp = dispinterface
    ['{6E1C16D0-79F8-54D3-9005-39AA3B39DE4B}']
    procedure CreateHR2000PlusStatus; dispid 1;
    function toString: WideString; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoUSBFeature
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {310EE4EC-7AE1-5C80-91C2-FEE9E91BEAFB}
// *********************************************************************//
  ICoUSBFeature = interface(IDispatch)
    ['{310EE4EC-7AE1-5C80-91C2-FEE9E91BEAFB}']
    procedure CreateUSBFeatureB(const COM_usbInt: ICoUSBInterface); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSBFeatureDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {310EE4EC-7AE1-5C80-91C2-FEE9E91BEAFB}
// *********************************************************************//
  ICoUSBFeatureDisp = dispinterface
    ['{310EE4EC-7AE1-5C80-91C2-FEE9E91BEAFB}']
    procedure CreateUSBFeatureB(const COM_usbInt: ICoUSBInterface); dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoSHACoefficients
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D5124C14-8861-556E-910D-115A732BC729}
// *********************************************************************//
  ICoSHACoefficients = interface(IDispatch)
    ['{D5124C14-8861-556E-910D-115A732BC729}']
    procedure CreateSHACoefficients; safecall;
    procedure setLenIntercept(COM_intercept: Double); safecall;
    function getLenIntercept: Double; safecall;
    procedure setLenFirst(COM_first: Double); safecall;
    function getLenFirst: Double; safecall;
    procedure setLenSecond(COM_second: Double); safecall;
    function getLenSecond: Double; safecall;
    procedure setIntercept(COM_intercept: Double); safecall;
    function getIntercept: Double; safecall;
    procedure setFirst(COM_first: Double); safecall;
    function getFirst: Double; safecall;
    procedure setSecond(COM_second: Double); safecall;
    function getSecond: Double; safecall;
    procedure setDefaultIntercept(COM_intercept: Double); safecall;
    function getDefaultIntercept: Double; safecall;
    procedure setDefaultFirst(COM_first: Double); safecall;
    function getDefaultFirst: Double; safecall;
    procedure setDefaultSecond(COM_second: Double); safecall;
    function getDefaultSecond: Double; safecall;
    procedure setPivotWavelength(COM_wl: Double); safecall;
    function getPivotWavelength: Double; safecall;
    procedure setPhaseIntercept(COM_intercept: Double); safecall;
    function getPhaseIntercept: Double; safecall;
    procedure setPhaseFirst(COM_first: Double); safecall;
    function getPhaseFirst: Double; safecall;
    procedure setPhaseSecond(COM_second: Double); safecall;
    function getPhaseSecond: Double; safecall;
    procedure setPhaseThird(COM_third: Double); safecall;
    function getPhaseThird: Double; safecall;
    procedure setPhaseRangeStart(COM_start: Double); safecall;
    function getPhaseRangeStart: Double; safecall;
    procedure setPhaseRangeEnd(COM_end: Double); safecall;
    function getPhaseRangeEnd: Double; safecall;
    procedure setPhaseInterceptOut(COM_intercept: Double); safecall;
    function getPhaseInterceptOut: Double; safecall;
    procedure setPhaseFirstOut(COM_first: Double); safecall;
    function getPhaseFirstOut: Double; safecall;
    procedure setPhaseSecondOut(COM_second: Double); safecall;
    function getPhaseSecondOut: Double; safecall;
    procedure setPhaseThirdOut(COM_third: Double); safecall;
    function getPhaseThirdOut: Double; safecall;
    procedure setCalibrateWLStart(COM_start: Double); safecall;
    function getCalibrateWLStart: Double; safecall;
    procedure setCalibrateWLEnd(COM_end: Double); safecall;
    function getCalibrateWLEnd: Double; safecall;
    procedure setNumberOfPhasePoints(COM_points: Integer); safecall;
    function getNumberOfPhasePoints: Integer; safecall;
    procedure setPhaseStart(COM_start: Double); safecall;
    function getPhaseStart: Double; safecall;
    procedure setPhaseEnd(COM_end: Double); safecall;
    function getPhaseEnd: Double; safecall;
    procedure setPhaseStep(COM_step: Double); safecall;
    function getPhaseStep: Double; safecall;
    procedure setPhasePoints(COM_points: OleVariant); safecall;
    function getPhasePoints: OleVariant; safecall;
    procedure setScanDirection(COM_direction: Integer); safecall;
    function getScanDirection: Integer; safecall;
    procedure setFinesse(COM_finesse: Double); safecall;
    function getFinesse: Double; safecall;
    procedure setMirrorWLLow(COM_wl: Double); safecall;
    function getMirrorWLLow: Double; safecall;
    procedure setMirrorWLHigh(COM_wl: Double); safecall;
    function getMirrorWLHigh: Double; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSHACoefficientsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D5124C14-8861-556E-910D-115A732BC729}
// *********************************************************************//
  ICoSHACoefficientsDisp = dispinterface
    ['{D5124C14-8861-556E-910D-115A732BC729}']
    procedure CreateSHACoefficients; dispid 1;
    procedure setLenIntercept(COM_intercept: Double); dispid 2;
    function getLenIntercept: Double; dispid 3;
    procedure setLenFirst(COM_first: Double); dispid 4;
    function getLenFirst: Double; dispid 5;
    procedure setLenSecond(COM_second: Double); dispid 6;
    function getLenSecond: Double; dispid 7;
    procedure setIntercept(COM_intercept: Double); dispid 8;
    function getIntercept: Double; dispid 9;
    procedure setFirst(COM_first: Double); dispid 10;
    function getFirst: Double; dispid 11;
    procedure setSecond(COM_second: Double); dispid 12;
    function getSecond: Double; dispid 13;
    procedure setDefaultIntercept(COM_intercept: Double); dispid 14;
    function getDefaultIntercept: Double; dispid 15;
    procedure setDefaultFirst(COM_first: Double); dispid 16;
    function getDefaultFirst: Double; dispid 17;
    procedure setDefaultSecond(COM_second: Double); dispid 18;
    function getDefaultSecond: Double; dispid 19;
    procedure setPivotWavelength(COM_wl: Double); dispid 20;
    function getPivotWavelength: Double; dispid 21;
    procedure setPhaseIntercept(COM_intercept: Double); dispid 22;
    function getPhaseIntercept: Double; dispid 23;
    procedure setPhaseFirst(COM_first: Double); dispid 24;
    function getPhaseFirst: Double; dispid 25;
    procedure setPhaseSecond(COM_second: Double); dispid 26;
    function getPhaseSecond: Double; dispid 27;
    procedure setPhaseThird(COM_third: Double); dispid 28;
    function getPhaseThird: Double; dispid 29;
    procedure setPhaseRangeStart(COM_start: Double); dispid 30;
    function getPhaseRangeStart: Double; dispid 31;
    procedure setPhaseRangeEnd(COM_end: Double); dispid 32;
    function getPhaseRangeEnd: Double; dispid 33;
    procedure setPhaseInterceptOut(COM_intercept: Double); dispid 34;
    function getPhaseInterceptOut: Double; dispid 35;
    procedure setPhaseFirstOut(COM_first: Double); dispid 36;
    function getPhaseFirstOut: Double; dispid 37;
    procedure setPhaseSecondOut(COM_second: Double); dispid 38;
    function getPhaseSecondOut: Double; dispid 39;
    procedure setPhaseThirdOut(COM_third: Double); dispid 40;
    function getPhaseThirdOut: Double; dispid 41;
    procedure setCalibrateWLStart(COM_start: Double); dispid 42;
    function getCalibrateWLStart: Double; dispid 43;
    procedure setCalibrateWLEnd(COM_end: Double); dispid 44;
    function getCalibrateWLEnd: Double; dispid 45;
    procedure setNumberOfPhasePoints(COM_points: Integer); dispid 46;
    function getNumberOfPhasePoints: Integer; dispid 47;
    procedure setPhaseStart(COM_start: Double); dispid 48;
    function getPhaseStart: Double; dispid 49;
    procedure setPhaseEnd(COM_end: Double); dispid 50;
    function getPhaseEnd: Double; dispid 51;
    procedure setPhaseStep(COM_step: Double); dispid 52;
    function getPhaseStep: Double; dispid 53;
    procedure setPhasePoints(COM_points: OleVariant); dispid 54;
    function getPhasePoints: OleVariant; dispid 55;
    procedure setScanDirection(COM_direction: Integer); dispid 56;
    function getScanDirection: Integer; dispid 57;
    procedure setFinesse(COM_finesse: Double); dispid 58;
    function getFinesse: Double; dispid 59;
    procedure setMirrorWLLow(COM_wl: Double); dispid 60;
    function getMirrorWLLow: Double; dispid 61;
    procedure setMirrorWLHigh(COM_wl: Double); dispid 62;
    function getMirrorWLHigh: Double; dispid 63;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 64;
  end;

// *********************************************************************//
// Interface: ICoSHAChannel
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2BBF8ED6-703A-5C7E-9115-45E36DB40415}
// *********************************************************************//
  ICoSHAChannel = interface(IDispatch)
    ['{2BBF8ED6-703A-5C7E-9115-45E36DB40415}']
    procedure CreateSHAChannelB(const COM_spectrometer: ICoSpectrometer; 
                                const COM_coefficients: ICoCoefficients; COM_index: Integer); safecall;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; safecall;
    function getSpectrumB: ICoSpectrum; safecall;
    function findPeak(COM_data: OleVariant; COM_pos: Integer): Double; safecall;
    procedure sortPeaks(COM_length: Integer); safecall;
    function getLength(COM_voltage: Double): Double; safecall;
    function getPhase(COM_wl: Double): Double; safecall;
    function getMaxNumberOfCounts: Integer; safecall;
    procedure getSHACoefficientsFromDevice; safecall;
    function getConstant(COM_slot: Integer): WideString; safecall;
    procedure saveSHACoefficients; safecall;
    function saveConstant(COM_slot: Integer; const COM_str: WideString): Integer; safecall;
    function getPixel(COM_wl: Double): Integer; safecall;
    function calcPixel(COM_wl: Double): Integer; safecall;
    function getWavelength(COM_pixel: Integer): Double; safecall;
    function getWavelengthB(COM_pixel: Double): Double; safecall;
    function getAllWavelengths: OleVariant; safecall;
    function getSHACoefficients: ICoSHACoefficients; safecall;
    function getNumberOfVoltageSteps: Integer; safecall;
    function getNumberOfSpectrometerPixels: Integer; safecall;
    function getSHASerialNumber: WideString; safecall;
    function getSHAFirmwareVersion: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSHAChannelDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2BBF8ED6-703A-5C7E-9115-45E36DB40415}
// *********************************************************************//
  ICoSHAChannelDisp = dispinterface
    ['{2BBF8ED6-703A-5C7E-9115-45E36DB40415}']
    procedure CreateSHAChannelB(const COM_spectrometer: ICoSpectrometer; 
                                const COM_coefficients: ICoCoefficients; COM_index: Integer); dispid 1;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; dispid 2;
    function getSpectrumB: ICoSpectrum; dispid 3;
    function findPeak(COM_data: OleVariant; COM_pos: Integer): Double; dispid 5;
    procedure sortPeaks(COM_length: Integer); dispid 6;
    function getLength(COM_voltage: Double): Double; dispid 7;
    function getPhase(COM_wl: Double): Double; dispid 8;
    function getMaxNumberOfCounts: Integer; dispid 9;
    procedure getSHACoefficientsFromDevice; dispid 10;
    function getConstant(COM_slot: Integer): WideString; dispid 11;
    procedure saveSHACoefficients; dispid 12;
    function saveConstant(COM_slot: Integer; const COM_str: WideString): Integer; dispid 13;
    function getPixel(COM_wl: Double): Integer; dispid 14;
    function calcPixel(COM_wl: Double): Integer; dispid 15;
    function getWavelength(COM_pixel: Integer): Double; dispid 16;
    function getWavelengthB(COM_pixel: Double): Double; dispid 17;
    function getAllWavelengths: OleVariant; dispid 18;
    function getSHACoefficients: ICoSHACoefficients; dispid 19;
    function getNumberOfVoltageSteps: Integer; dispid 20;
    function getNumberOfSpectrometerPixels: Integer; dispid 21;
    function getSHASerialNumber: WideString; dispid 22;
    function getSHAFirmwareVersion: WideString; dispid 23;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 25;
  end;

// *********************************************************************//
// Interface: ICoHR4000
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {030F5B15-9E20-527F-9195-7FE3AF687B60}
// *********************************************************************//
  ICoHR4000 = interface(IDispatch)
    ['{030F5B15-9E20-527F-9195-7FE3AF687B60}']
    procedure CreateHR4000; safecall;
    procedure CreateHR4000B(COM_i: Integer); safecall;
    procedure setEndpoints; safecall;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; safecall;
    procedure openSpectrometer(COM_index: Integer); safecall;
    function getFeatureControllerGPIO: ICoUSBFeature; safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    procedure readSpectrum(COM_data: OleVariant); safecall;
    procedure readSpectrumB; safecall;
    function readIntegrationTime: Integer; safecall;
    procedure setIntegrationTime(COM_intTime: Integer); safecall;
    function getGatingModeIntegrationTime: Integer; safecall;
    procedure addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); safecall;
    procedure removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); safecall;
    function getName: WideString; safecall;
    function isSHAEnabled: WordBool; safecall;
    procedure enableSHA(COM_enable: WordBool); safecall;
    procedure setStrobeDelay(COM_delay: Integer); safecall;
    function toString: WideString; safecall;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer); safecall;
    function getIntegrationTimeBaseClock: Integer; safecall;
    function getIntegrationClockTimer: Integer; safecall;
    function getAdvancedIntegrationTimeMinimum: Integer; safecall;
    function getAdvancedIntegrationTimeMaximum: Integer; safecall;
    function getAdvancedIntegrationTimeIncrement: Integer; safecall;
    function getPSOCVersion: WideString; safecall;
    function getFPGAFirmwareVersion: WideString; safecall;
    function getVoltageIn: Double; safecall;
    procedure setDACCounts(COM_counts: Integer; COM_index: Integer); safecall;
    function analogOutCountsToVolts(COM_counts: Integer): Double; safecall;
    function getDACMinimum: Integer; safecall;
    function getDACMaximum: Integer; safecall;
    function getDACIncrement: Integer; safecall;
    function isDACPresent: WordBool; safecall;
    function getDACPins: Integer; safecall;
    function getBoardTemperatureCelsius: Double; safecall;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); safecall;
    function getContinuousStrobeDelayMinimum: Integer; safecall;
    function getContinuousStrobeDelayMaximum: Integer; safecall;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; safecall;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; safecall;
    procedure setExternalTriggerDelay(COM_counts: Integer); safecall;
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double; safecall;
    function getExternalTriggerDelayMinimum: Integer; safecall;
    function getExternalTriggerDelayMaximum: Integer; safecall;
    function getExternalTriggerDelayIncrement: Integer; safecall;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setValueAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setDirectionBitmask(COM_bitmask: Smallint); safecall;
    procedure setMuxBitmask(COM_bitmask: Smallint); safecall;
    procedure setValueBitmask(COM_bitmask: Smallint); safecall;
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool); safecall;
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool); safecall;
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool); safecall;
    function getTotalGPIOBits: Integer; safecall;
    function getDirectionBits: ICoBitSet; safecall;
    function getMuxBits: ICoBitSet; safecall;
    function getValueBit(COM_bitNumber: Integer): Integer; safecall;
    function getValueBits: ICoBitSet; safecall;
    function getNumberOfPins: Integer; safecall;
    procedure setExternalTriggerMode(COM_mode: Integer); safecall;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; safecall;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer; safecall;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant; safecall;
    function setSHAI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer; safecall;
    function getSHAI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant; safecall;
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant; safecall;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant); safecall;
    procedure setMasterClockDivisor(COM_value: Integer); safecall;
    function getMasterClockDivisor: Integer; safecall;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; safecall;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); safecall;
    function getPlugIns: ICoSpectrometerPlugInCollection; safecall;
    function getNumberOfPlugIns: Integer; safecall;
    function isPlugInDetected(COM_id: Integer): WordBool; safecall;
    function initializePlugIns: OleVariant; safecall;
    procedure detectPlugIns; safecall;
    function isHyperAdapterPresent: WordBool; safecall;
    procedure initSHA(const COM_channel: ICoSHAChannel); safecall;
    function setHyperAdapterDAC(COM_voltage: Double): Integer; safecall;
    function readHyperAdapterEEPROM(COM_data: OleVariant; COM_start: Integer; COM_length: Integer): Integer; safecall;
    function writeHyperAdapterEEPROM(COM_data: OleVariant; COM_start: Integer; COM_length: Integer): Integer; safecall;
    procedure calibrate; safecall;
    function getCalibrationTime: Double; safecall;
    procedure restoreCalibration; safecall;
    function getSHAChannel: ICoSHAChannel; safecall;
    procedure setShutterClock(COM_value: Integer); safecall;
    function getShutterClock: Integer; safecall;
    procedure setSingleStrobeLow(COM_value: Integer); safecall;
    procedure setSingleStrobeHigh(COM_value: Integer); safecall;
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double; safecall;
    function getSingleStrobeLow: Integer; safecall;
    function getSingleStrobeHigh: Integer; safecall;
    function getSingleStrobeMinimum: Integer; safecall;
    function getSingleStrobeMaximum: Integer; safecall;
    function getSingleStrobeIncrement: Integer; safecall;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; safecall;
    function getStatus: ICoSpectrometerStatus; safecall;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; safecall;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); safecall;
    function getStrayLight(COM_index: Integer): Double; safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_index: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); safecall;
    function isAdvancedVersion: WordBool; safecall;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoHR4000Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {030F5B15-9E20-527F-9195-7FE3AF687B60}
// *********************************************************************//
  ICoHR4000Disp = dispinterface
    ['{030F5B15-9E20-527F-9195-7FE3AF687B60}']
    procedure CreateHR4000; dispid 1;
    procedure CreateHR4000B(COM_i: Integer); dispid 2;
    procedure setEndpoints; dispid 3;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; dispid 4;
    procedure openSpectrometer(COM_index: Integer); dispid 5;
    function getFeatureControllerGPIO: ICoUSBFeature; dispid 6;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 7;
    procedure readSpectrum(COM_data: OleVariant); dispid 8;
    procedure readSpectrumB; dispid 9;
    function readIntegrationTime: Integer; dispid 10;
    procedure setIntegrationTime(COM_intTime: Integer); dispid 11;
    function getGatingModeIntegrationTime: Integer; dispid 12;
    procedure addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); dispid 13;
    procedure removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); dispid 14;
    function getName: WideString; dispid 15;
    function isSHAEnabled: WordBool; dispid 16;
    procedure enableSHA(COM_enable: WordBool); dispid 17;
    procedure setStrobeDelay(COM_delay: Integer); dispid 18;
    function toString: WideString; dispid 19;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer); dispid 20;
    function getIntegrationTimeBaseClock: Integer; dispid 21;
    function getIntegrationClockTimer: Integer; dispid 22;
    function getAdvancedIntegrationTimeMinimum: Integer; dispid 23;
    function getAdvancedIntegrationTimeMaximum: Integer; dispid 24;
    function getAdvancedIntegrationTimeIncrement: Integer; dispid 25;
    function getPSOCVersion: WideString; dispid 26;
    function getFPGAFirmwareVersion: WideString; dispid 27;
    function getVoltageIn: Double; dispid 28;
    procedure setDACCounts(COM_counts: Integer; COM_index: Integer); dispid 29;
    function analogOutCountsToVolts(COM_counts: Integer): Double; dispid 30;
    function getDACMinimum: Integer; dispid 31;
    function getDACMaximum: Integer; dispid 32;
    function getDACIncrement: Integer; dispid 33;
    function isDACPresent: WordBool; dispid 34;
    function getDACPins: Integer; dispid 35;
    function getBoardTemperatureCelsius: Double; dispid 36;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); dispid 37;
    function getContinuousStrobeDelayMinimum: Integer; dispid 38;
    function getContinuousStrobeDelayMaximum: Integer; dispid 39;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; dispid 40;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; dispid 41;
    procedure setExternalTriggerDelay(COM_counts: Integer); dispid 42;
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double; dispid 43;
    function getExternalTriggerDelayMinimum: Integer; dispid 44;
    function getExternalTriggerDelayMaximum: Integer; dispid 45;
    function getExternalTriggerDelayIncrement: Integer; dispid 46;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet); dispid 47;
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet); dispid 48;
    procedure setValueAllBits(const COM_bitSet: ICoBitSet); dispid 49;
    procedure setDirectionBitmask(COM_bitmask: Smallint); dispid 50;
    procedure setMuxBitmask(COM_bitmask: Smallint); dispid 51;
    procedure setValueBitmask(COM_bitmask: Smallint); dispid 52;
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool); dispid 53;
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool); dispid 54;
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool); dispid 55;
    function getTotalGPIOBits: Integer; dispid 56;
    function getDirectionBits: ICoBitSet; dispid 57;
    function getMuxBits: ICoBitSet; dispid 58;
    function getValueBit(COM_bitNumber: Integer): Integer; dispid 59;
    function getValueBits: ICoBitSet; dispid 60;
    function getNumberOfPins: Integer; dispid 61;
    procedure setExternalTriggerMode(COM_mode: Integer); dispid 62;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; dispid 63;
    function setI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant; 
                         COM_i2C: OleVariant): Integer; dispid 64;
    function getI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant): OleVariant; dispid 65;
    function setSHAI2CBytes(COM_address: {??Shortint}OleVariant; 
                            COM_numBytes: {??Shortint}OleVariant; COM_i2C: OleVariant): Integer; dispid 66;
    function getSHAI2CBytes(COM_address: {??Shortint}OleVariant; 
                            COM_numBytes: {??Shortint}OleVariant): OleVariant; dispid 67;
    function getIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant): OleVariant; dispid 68;
    procedure setIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant; 
                                              COM_data: OleVariant); dispid 69;
    procedure setMasterClockDivisor(COM_value: Integer); dispid 70;
    function getMasterClockDivisor: Integer; dispid 71;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 72;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; dispid 74;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; dispid 76;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); dispid 77;
    function getPlugIns: ICoSpectrometerPlugInCollection; dispid 78;
    function getNumberOfPlugIns: Integer; dispid 79;
    function isPlugInDetected(COM_id: Integer): WordBool; dispid 80;
    function initializePlugIns: OleVariant; dispid 81;
    procedure detectPlugIns; dispid 82;
    function isHyperAdapterPresent: WordBool; dispid 83;
    procedure initSHA(const COM_channel: ICoSHAChannel); dispid 84;
    function setHyperAdapterDAC(COM_voltage: Double): Integer; dispid 85;
    function readHyperAdapterEEPROM(COM_data: OleVariant; COM_start: Integer; COM_length: Integer): Integer; dispid 86;
    function writeHyperAdapterEEPROM(COM_data: OleVariant; COM_start: Integer; COM_length: Integer): Integer; dispid 87;
    procedure calibrate; dispid 88;
    function getCalibrationTime: Double; dispid 89;
    procedure restoreCalibration; dispid 90;
    function getSHAChannel: ICoSHAChannel; dispid 91;
    procedure setShutterClock(COM_value: Integer); dispid 92;
    function getShutterClock: Integer; dispid 93;
    procedure setSingleStrobeLow(COM_value: Integer); dispid 94;
    procedure setSingleStrobeHigh(COM_value: Integer); dispid 95;
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double; dispid 96;
    function getSingleStrobeLow: Integer; dispid 97;
    function getSingleStrobeHigh: Integer; dispid 98;
    function getSingleStrobeMinimum: Integer; dispid 99;
    function getSingleStrobeMaximum: Integer; dispid 100;
    function getSingleStrobeIncrement: Integer; dispid 101;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; dispid 102;
    function getStatus: ICoSpectrometerStatus; dispid 103;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; dispid 104;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; dispid 107;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); dispid 108;
    function getStrayLight(COM_index: Integer): Double; dispid 109;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 110;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 112;
    function getWavelengths(COM_index: Integer): OleVariant; dispid 114;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); dispid 115;
    function isAdvancedVersion: WordBool; dispid 116;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 117;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 118;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 119;
  end;

// *********************************************************************//
// Interface: ICoHR4000Status
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {32871864-F98B-53DB-906A-17E8AEB9DA43}
// *********************************************************************//
  ICoHR4000Status = interface(IDispatch)
    ['{32871864-F98B-53DB-906A-17E8AEB9DA43}']
    procedure CreateHR4000Status; safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoHR4000StatusDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {32871864-F98B-53DB-906A-17E8AEB9DA43}
// *********************************************************************//
  ICoHR4000StatusDisp = dispinterface
    ['{32871864-F98B-53DB-906A-17E8AEB9DA43}']
    procedure CreateHR4000Status; dispid 1;
    function toString: WideString; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoHardwareTrigger
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9B45C6E1-50C7-5286-912C-3FE04C39EB6A}
// *********************************************************************//
  ICoHardwareTrigger = interface(IDispatch)
    ['{9B45C6E1-50C7-5286-912C-3FE04C39EB6A}']
    procedure CreateHardwareTrigger; safecall;
    procedure setExternalTriggerMode(COM_param0: Integer); safecall;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoHardwareTriggerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9B45C6E1-50C7-5286-912C-3FE04C39EB6A}
// *********************************************************************//
  ICoHardwareTriggerDisp = dispinterface
    ['{9B45C6E1-50C7-5286-912C-3FE04C39EB6A}']
    procedure CreateHardwareTrigger; dispid 1;
    procedure setExternalTriggerMode(COM_param0: Integer); dispid 2;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoHardwareTriggerGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F5E0987D-22CE-579C-81AB-9461333CA822}
// *********************************************************************//
  ICoHardwareTriggerGUIProvider = interface(IDispatch)
    ['{F5E0987D-22CE-579C-81AB-9461333CA822}']
    procedure CreateHardwareTriggerGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoHardwareTriggerGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F5E0987D-22CE-579C-81AB-9461333CA822}
// *********************************************************************//
  ICoHardwareTriggerGUIProviderDisp = dispinterface
    ['{F5E0987D-22CE-579C-81AB-9461333CA822}']
    procedure CreateHardwareTriggerGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoHighGainMode
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {70EC313E-51DB-57FC-81C7-8203B350DC69}
// *********************************************************************//
  ICoHighGainMode = interface(IDispatch)
    ['{70EC313E-51DB-57FC-81C7-8203B350DC69}']
    procedure CreateHighGainMode; safecall;
    procedure setHighGain(COM_param0: WordBool); safecall;
    procedure setHighGainDefault(COM_param0: WordBool); safecall;
    function getHighGainDefault: WordBool; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoHighGainModeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {70EC313E-51DB-57FC-81C7-8203B350DC69}
// *********************************************************************//
  ICoHighGainModeDisp = dispinterface
    ['{70EC313E-51DB-57FC-81C7-8203B350DC69}']
    procedure CreateHighGainMode; dispid 1;
    procedure setHighGain(COM_param0: WordBool); dispid 2;
    procedure setHighGainDefault(COM_param0: WordBool); dispid 3;
    function getHighGainDefault: WordBool; dispid 4;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 5;
  end;

// *********************************************************************//
// Interface: ICoHighGainModeGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A2F1CB4D-C28C-5541-91F1-ABF2C99CE367}
// *********************************************************************//
  ICoHighGainModeGUIProvider = interface(IDispatch)
    ['{A2F1CB4D-C28C-5541-91F1-ABF2C99CE367}']
    procedure CreateHighGainModeGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoHighGainModeGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A2F1CB4D-C28C-5541-91F1-ABF2C99CE367}
// *********************************************************************//
  ICoHighGainModeGUIProviderDisp = dispinterface
    ['{A2F1CB4D-C28C-5541-91F1-ABF2C99CE367}']
    procedure CreateHighGainModeGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoHighGainModeImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D4EFF4E1-E029-5794-91C7-BA05F8DF670D}
// *********************************************************************//
  ICoHighGainModeImpl = interface(IDispatch)
    ['{D4EFF4E1-E029-5794-91C7-BA05F8DF670D}']
    procedure CreateHighGainModeImplB(const COM_usb: ICoUSBInterface; 
                                      const COM_spec: ICoSpectrometer); safecall;
    procedure setHighGain(COM_gain: WordBool); safecall;
    procedure setHighGainDefault(COM_gain: WordBool); safecall;
    function getHighGainDefault: WordBool; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoHighGainModeImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D4EFF4E1-E029-5794-91C7-BA05F8DF670D}
// *********************************************************************//
  ICoHighGainModeImplDisp = dispinterface
    ['{D4EFF4E1-E029-5794-91C7-BA05F8DF670D}']
    procedure CreateHighGainModeImplB(const COM_usb: ICoUSBInterface; 
                                      const COM_spec: ICoSpectrometer); dispid 1;
    procedure setHighGain(COM_gain: WordBool); dispid 2;
    procedure setHighGainDefault(COM_gain: WordBool); dispid 3;
    function getHighGainDefault: WordBool; dispid 4;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 6;
  end;

// *********************************************************************//
// Interface: ICoHighResTimeStamp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {15FB61D6-9C52-5239-8100-3F53BFC5E1D3}
// *********************************************************************//
  ICoHighResTimeStamp = interface(IDispatch)
    ['{15FB61D6-9C52-5239-8100-3F53BFC5E1D3}']
    procedure CreateHighResTimeStamp; safecall;
    procedure CreateHighResTimeStampB(const COM_that: ICoHighResTimeStamp); safecall;
    procedure CreateHighResTimeStampC(COM_millis: Integer; COM_nanos: Double); safecall;
    procedure CreateHighResTimeStampD(const COM_that: ICoHighResTimeStamp; 
                                      COM_nanosIntoFuture: Double); safecall;
    function getTimeMillis: Integer; safecall;
    function getNanoTimeDeltaSince(const COM_then: ICoHighResTimeStamp): Double; safecall;
    function getMicroTimeDeltaSince(const COM_then: ICoHighResTimeStamp): Double; safecall;
    function getMilliTimeDeltaSince(const COM_then: ICoHighResTimeStamp): Double; safecall;
    function getSecondsTimeDeltaSince(const COM_then: ICoHighResTimeStamp): Double; safecall;
    function getNanoTimeDelta(const COM_before: ICoHighResTimeStamp; 
                              const COM_after: ICoHighResTimeStamp): Double; safecall;
    function getMicroTimeDelta(const COM_before: ICoHighResTimeStamp; 
                               const COM_after: ICoHighResTimeStamp): Double; safecall;
    function getMilliTimeDelta(const COM_before: ICoHighResTimeStamp; 
                               const COM_after: ICoHighResTimeStamp): Double; safecall;
    function getSecondsTimeDelta(const COM_before: ICoHighResTimeStamp; 
                                 const COM_after: ICoHighResTimeStamp): Double; safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoHighResTimeStampDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {15FB61D6-9C52-5239-8100-3F53BFC5E1D3}
// *********************************************************************//
  ICoHighResTimeStampDisp = dispinterface
    ['{15FB61D6-9C52-5239-8100-3F53BFC5E1D3}']
    procedure CreateHighResTimeStamp; dispid 1;
    procedure CreateHighResTimeStampB(const COM_that: ICoHighResTimeStamp); dispid 2;
    procedure CreateHighResTimeStampC(COM_millis: Integer; COM_nanos: Double); dispid 3;
    procedure CreateHighResTimeStampD(const COM_that: ICoHighResTimeStamp; 
                                      COM_nanosIntoFuture: Double); dispid 4;
    function getTimeMillis: Integer; dispid 5;
    function getNanoTimeDeltaSince(const COM_then: ICoHighResTimeStamp): Double; dispid 6;
    function getMicroTimeDeltaSince(const COM_then: ICoHighResTimeStamp): Double; dispid 7;
    function getMilliTimeDeltaSince(const COM_then: ICoHighResTimeStamp): Double; dispid 8;
    function getSecondsTimeDeltaSince(const COM_then: ICoHighResTimeStamp): Double; dispid 9;
    function getNanoTimeDelta(const COM_before: ICoHighResTimeStamp; 
                              const COM_after: ICoHighResTimeStamp): Double; dispid 10;
    function getMicroTimeDelta(const COM_before: ICoHighResTimeStamp; 
                               const COM_after: ICoHighResTimeStamp): Double; dispid 11;
    function getMilliTimeDelta(const COM_before: ICoHighResTimeStamp; 
                               const COM_after: ICoHighResTimeStamp): Double; dispid 12;
    function getSecondsTimeDelta(const COM_before: ICoHighResTimeStamp; 
                                 const COM_after: ICoHighResTimeStamp): Double; dispid 13;
    function toString: WideString; dispid 14;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 15;
  end;

// *********************************************************************//
// Interface: ICoHighResTiming
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F0D3C5F5-6226-59D7-8117-4717CF5C1566}
// *********************************************************************//
  ICoHighResTiming = interface(IDispatch)
    ['{F0D3C5F5-6226-59D7-8117-4717CF5C1566}']
    function getTicksPerSecond: Integer; safecall;
    function getTickPeriod: Double; safecall;
    procedure setTimeZero; safecall;
    function getTicks: Integer; safecall;
    function getTimeInSeconds: Double; safecall;
    function getTimeInMilliSeconds: Double; safecall;
    function getTimeInMicroSeconds: Double; safecall;
    function getTimeInNanoSeconds: Double; safecall;
    procedure CreateHighResTiming; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoHighResTimingDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F0D3C5F5-6226-59D7-8117-4717CF5C1566}
// *********************************************************************//
  ICoHighResTimingDisp = dispinterface
    ['{F0D3C5F5-6226-59D7-8117-4717CF5C1566}']
    function getTicksPerSecond: Integer; dispid 1;
    function getTickPeriod: Double; dispid 2;
    procedure setTimeZero; dispid 3;
    function getTicks: Integer; dispid 4;
    function getTimeInSeconds: Double; dispid 5;
    function getTimeInMilliSeconds: Double; dispid 6;
    function getTimeInMicroSeconds: Double; dispid 7;
    function getTimeInNanoSeconds: Double; dispid 8;
    procedure CreateHighResTiming; dispid 9;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 10;
  end;

// *********************************************************************//
// Interface: ICoI2CBus
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A3865F62-AE48-551E-903C-07C826DD101B}
// *********************************************************************//
  ICoI2CBus = interface(IDispatch)
    ['{A3865F62-AE48-551E-903C-07C826DD101B}']
    procedure CreateI2CBus; safecall;
    function setI2CBytes(COM_param0: Shortint; COM_param1: Shortint; COM_param2: OleVariant): Integer; safecall;
    function getI2CBytes(COM_param0: Shortint; COM_param1: Shortint): OleVariant; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoI2CBusDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A3865F62-AE48-551E-903C-07C826DD101B}
// *********************************************************************//
  ICoI2CBusDisp = dispinterface
    ['{A3865F62-AE48-551E-903C-07C826DD101B}']
    procedure CreateI2CBus; dispid 1;
    function setI2CBytes(COM_param0: {??Shortint}OleVariant; COM_param1: {??Shortint}OleVariant; 
                         COM_param2: OleVariant): Integer; dispid 2;
    function getI2CBytes(COM_param0: {??Shortint}OleVariant; COM_param1: {??Shortint}OleVariant): OleVariant; dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoI2CBusGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {01B66D7D-D8B3-5ABE-8020-41BBA5DBD924}
// *********************************************************************//
  ICoI2CBusGUIProvider = interface(IDispatch)
    ['{01B66D7D-D8B3-5ABE-8020-41BBA5DBD924}']
    procedure CreateI2CBusGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoI2CBusGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {01B66D7D-D8B3-5ABE-8020-41BBA5DBD924}
// *********************************************************************//
  ICoI2CBusGUIProviderDisp = dispinterface
    ['{01B66D7D-D8B3-5ABE-8020-41BBA5DBD924}']
    procedure CreateI2CBusGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoI2CBusImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6885B761-9549-51AC-801C-FEBD52D5A1CF}
// *********************************************************************//
  ICoI2CBusImpl = interface(IDispatch)
    ['{6885B761-9549-51AC-801C-FEBD52D5A1CF}']
    procedure CreateI2CBusImplB(const COM_usbInt: ICoUSBInterface); safecall;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant; safecall;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoI2CBusImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6885B761-9549-51AC-801C-FEBD52D5A1CF}
// *********************************************************************//
  ICoI2CBusImplDisp = dispinterface
    ['{6885B761-9549-51AC-801C-FEBD52D5A1CF}']
    procedure CreateI2CBusImplB(const COM_usbInt: ICoUSBInterface); dispid 1;
    function getI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant): OleVariant; dispid 2;
    function setI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant; 
                         COM_i2C: OleVariant): Integer; dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 5;
  end;

// *********************************************************************//
// Interface: ICoI2CBusImplFPGA
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FA3C7640-AF60-5EF9-9151-193795CEBB80}
// *********************************************************************//
  ICoI2CBusImplFPGA = interface(IDispatch)
    ['{FA3C7640-AF60-5EF9-9151-193795CEBB80}']
    procedure CreateI2CBusImplFPGAB(const COM_usb: ICoUSBInterface); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoI2CBusImplFPGADisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FA3C7640-AF60-5EF9-9151-193795CEBB80}
// *********************************************************************//
  ICoI2CBusImplFPGADisp = dispinterface
    ['{FA3C7640-AF60-5EF9-9151-193795CEBB80}']
    procedure CreateI2CBusImplFPGAB(const COM_usb: ICoUSBInterface); dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoI2CBusImplNonFPGA
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {77A155C4-6853-575F-81AB-F343F98F5033}
// *********************************************************************//
  ICoI2CBusImplNonFPGA = interface(IDispatch)
    ['{77A155C4-6853-575F-81AB-F343F98F5033}']
    procedure CreateI2CBusImplNonFPGAB(const COM_usbInt: ICoUSBInterface); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoI2CBusImplNonFPGADisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {77A155C4-6853-575F-81AB-F343F98F5033}
// *********************************************************************//
  ICoI2CBusImplNonFPGADisp = dispinterface
    ['{77A155C4-6853-575F-81AB-F343F98F5033}']
    procedure CreateI2CBusImplNonFPGAB(const COM_usbInt: ICoUSBInterface); dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoI2CBusImpl_SHA
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {07CA3508-47F9-527A-91D2-2CDAD20F8F25}
// *********************************************************************//
  ICoI2CBusImpl_SHA = interface(IDispatch)
    ['{07CA3508-47F9-527A-91D2-2CDAD20F8F25}']
    procedure CreateI2CBusImpl_SHAB(const COM_usbInt: ICoUSBInterface; 
                                    const COM_spectrometer: ICoSpectrometer); safecall;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant; safecall;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoI2CBusImpl_SHADisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {07CA3508-47F9-527A-91D2-2CDAD20F8F25}
// *********************************************************************//
  ICoI2CBusImpl_SHADisp = dispinterface
    ['{07CA3508-47F9-527A-91D2-2CDAD20F8F25}']
    procedure CreateI2CBusImpl_SHAB(const COM_usbInt: ICoUSBInterface; 
                                    const COM_spectrometer: ICoSpectrometer); dispid 1;
    function getI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant): OleVariant; dispid 2;
    function setI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant; 
                         COM_i2C: OleVariant): Integer; dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 5;
  end;

// *********************************************************************//
// Interface: ICoIrradianceCalibrationFactor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {68D5328E-8FDA-57FC-91A8-4E7570EAF55B}
// *********************************************************************//
  ICoIrradianceCalibrationFactor = interface(IDispatch)
    ['{68D5328E-8FDA-57FC-91A8-4E7570EAF55B}']
    procedure CreateIrradianceCalibrationFactor; safecall;
    function getIrradianceCalibrationFactors(COM_param0: Shortint): OleVariant; safecall;
    procedure setIrradianceCalibrationFactors(COM_param0: Shortint; COM_param1: OleVariant); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoIrradianceCalibrationFactorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {68D5328E-8FDA-57FC-91A8-4E7570EAF55B}
// *********************************************************************//
  ICoIrradianceCalibrationFactorDisp = dispinterface
    ['{68D5328E-8FDA-57FC-91A8-4E7570EAF55B}']
    procedure CreateIrradianceCalibrationFactor; dispid 1;
    function getIrradianceCalibrationFactors(COM_param0: {??Shortint}OleVariant): OleVariant; dispid 2;
    procedure setIrradianceCalibrationFactors(COM_param0: {??Shortint}OleVariant; 
                                              COM_param1: OleVariant); dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoIrradianceCalibrationFactorGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {85932FA1-8AF7-5550-8089-0FF55939894C}
// *********************************************************************//
  ICoIrradianceCalibrationFactorGUIProvider = interface(IDispatch)
    ['{85932FA1-8AF7-5550-8089-0FF55939894C}']
    procedure CreateIrradianceCalibrationFactorGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoIrradianceCalibrationFactorGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {85932FA1-8AF7-5550-8089-0FF55939894C}
// *********************************************************************//
  ICoIrradianceCalibrationFactorGUIProviderDisp = dispinterface
    ['{85932FA1-8AF7-5550-8089-0FF55939894C}']
    procedure CreateIrradianceCalibrationFactorGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoIrradianceCalibrationFactorImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5B24BFBB-BA53-5E43-91FC-3AD5FACDE732}
// *********************************************************************//
  ICoIrradianceCalibrationFactorImpl = interface(IDispatch)
    ['{5B24BFBB-BA53-5E43-91FC-3AD5FACDE732}']
    procedure CreateIrradianceCalibrationFactorImplB(const COM_usbInt: ICoUSBInterface); safecall;
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant; safecall;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoIrradianceCalibrationFactorImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5B24BFBB-BA53-5E43-91FC-3AD5FACDE732}
// *********************************************************************//
  ICoIrradianceCalibrationFactorImplDisp = dispinterface
    ['{5B24BFBB-BA53-5E43-91FC-3AD5FACDE732}']
    procedure CreateIrradianceCalibrationFactorImplB(const COM_usbInt: ICoUSBInterface); dispid 1;
    function getIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant): OleVariant; dispid 2;
    procedure setIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant; 
                                              COM_data: OleVariant); dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 5;
  end;

// *********************************************************************//
// Interface: ICoIrradianceCalibrationFactorImplFPGA
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E6AB4E14-891A-5A4D-9005-60A40AB1A3D5}
// *********************************************************************//
  ICoIrradianceCalibrationFactorImplFPGA = interface(IDispatch)
    ['{E6AB4E14-891A-5A4D-9005-60A40AB1A3D5}']
    procedure CreateIrradianceCalibrationFactorImplFPGAB(const COM_usb: ICoUSBInterface); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoIrradianceCalibrationFactorImplFPGADisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E6AB4E14-891A-5A4D-9005-60A40AB1A3D5}
// *********************************************************************//
  ICoIrradianceCalibrationFactorImplFPGADisp = dispinterface
    ['{E6AB4E14-891A-5A4D-9005-60A40AB1A3D5}']
    procedure CreateIrradianceCalibrationFactorImplFPGAB(const COM_usb: ICoUSBInterface); dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoIrradianceCalibrationFactorImplNonFPGA
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {541FC480-FB28-5421-8067-AA52F5D86B63}
// *********************************************************************//
  ICoIrradianceCalibrationFactorImplNonFPGA = interface(IDispatch)
    ['{541FC480-FB28-5421-8067-AA52F5D86B63}']
    procedure CreateIrradianceCalibrationFactorImplNonFPGAB(const COM_usb: ICoUSBInterface); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoIrradianceCalibrationFactorImplNonFPGADisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {541FC480-FB28-5421-8067-AA52F5D86B63}
// *********************************************************************//
  ICoIrradianceCalibrationFactorImplNonFPGADisp = dispinterface
    ['{541FC480-FB28-5421-8067-AA52F5D86B63}']
    procedure CreateIrradianceCalibrationFactorImplNonFPGAB(const COM_usb: ICoUSBInterface); dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoJSocket
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {86883084-8FD2-5898-8119-6DB0E0B88561}
// *********************************************************************//
  ICoJSocket = interface(IDispatch)
    ['{86883084-8FD2-5898-8119-6DB0E0B88561}']
    procedure CreateJSocketB(const COM_hostName: WideString; COM_portNumber: Integer); safecall;
    function isClosed: WordBool; safecall;
    function isConnected: WordBool; safecall;
    function isBound: WordBool; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoJSocketDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {86883084-8FD2-5898-8119-6DB0E0B88561}
// *********************************************************************//
  ICoJSocketDisp = dispinterface
    ['{86883084-8FD2-5898-8119-6DB0E0B88561}']
    procedure CreateJSocketB(const COM_hostName: WideString; COM_portNumber: Integer); dispid 1;
    function isClosed: WordBool; dispid 2;
    function isConnected: WordBool; dispid 3;
    function isBound: WordBool; dispid 4;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 5;
  end;

// *********************************************************************//
// Interface: ICoJazNetwork
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E9F0AF58-7F09-5168-9197-EAD70099B85C}
// *********************************************************************//
  ICoJazNetwork = interface(IDispatch)
    ['{E9F0AF58-7F09-5168-9197-EAD70099B85C}']
    procedure CreateJazNetworkB(COM_i: Integer); safecall;
    procedure CreateJazNetworkD(const COM_jSocket: ICoJSocket); safecall;
    procedure openSpectrometer(COM_index: Integer); safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    function getSerialNumber: WideString; safecall;
    function getFirmwareVersion: WideString; safecall;
    procedure closeSpectrometer; safecall;
    function getInfo(COM_slot: Integer): WideString; safecall;
    function getInfoBytes(COM_slot: Integer): OleVariant; safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_index: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); safecall;
    procedure connectToSource(const COM_address: WideString; COM_port: Integer); safecall;
    function isConnected: WordBool; safecall;
    function getName: WideString; safecall;
    procedure disconnect; safecall;
    procedure setStrobeEnable(COM_strobe: WordBool); safecall;
    procedure setIntegrationTime(COM_intTime: Integer); safecall;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; safecall;
    procedure reconnect; safecall;
    procedure setAutonullingConfiguration(const COM_configuration: ICoAutonullingConfiguration); safecall;
    procedure setAutonullingScanValue(COM_value: Integer); safecall;
    procedure setAutonullingScanStatus(COM_value: Integer); safecall;
    procedure writeAutonullingConfigurationToSpectrometer; safecall;
    function readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration; safecall;
    function getAutonullingScanValue: Integer; safecall;
    function getAutonullingScanStatus: Integer; safecall;
    function getAutonullingConfiguration: ICoAutonullingConfiguration; safecall;
    function getChannelsPresent: OleVariant; safecall;
    function isChannelPresent(COM_index: Integer): WordBool; safecall;
    procedure setChannelMux(COM_index: Integer); safecall;
    procedure setChannelStatus(COM_index: Integer; COM_status: WordBool); safecall;
    procedure setDeepWellStatus(COM_status: WordBool); safecall;
    procedure setChannelPresent(COM_index: Integer; COM_present: WordBool); safecall;
    function isDeepWell: WordBool; safecall;
    function isInterpolationEnabled: WordBool; safecall;
    procedure setInterpolationEnabled(COM_enabled: WordBool); safecall;
    procedure addChannelListener(const COM_listener: ICoMultiChannelListener); safecall;
    procedure removeChannelListener(const COM_listener: ICoMultiChannelListener); safecall;
    function readNumberOfChannels: Integer; safecall;
    procedure writeChannelMux(COM_channel: Integer); safecall;
    procedure setPowerUpPOTValues; safecall;
    function getPOTValues: OleVariant; safecall;
    procedure setPOTValue(COM_pot: Integer; COM_value: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoJazNetworkDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E9F0AF58-7F09-5168-9197-EAD70099B85C}
// *********************************************************************//
  ICoJazNetworkDisp = dispinterface
    ['{E9F0AF58-7F09-5168-9197-EAD70099B85C}']
    procedure CreateJazNetworkB(COM_i: Integer); dispid 1;
    procedure CreateJazNetworkD(const COM_jSocket: ICoJSocket); dispid 2;
    procedure openSpectrometer(COM_index: Integer); dispid 3;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 4;
    function getSerialNumber: WideString; dispid 5;
    function getFirmwareVersion: WideString; dispid 6;
    procedure closeSpectrometer; dispid 7;
    function getInfo(COM_slot: Integer): WideString; dispid 8;
    function getInfoBytes(COM_slot: Integer): OleVariant; dispid 9;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 10;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 12;
    function getWavelengths(COM_index: Integer): OleVariant; dispid 14;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); dispid 15;
    procedure connectToSource(const COM_address: WideString; COM_port: Integer); dispid 16;
    function isConnected: WordBool; dispid 17;
    function getName: WideString; dispid 18;
    procedure disconnect; dispid 19;
    procedure setStrobeEnable(COM_strobe: WordBool); dispid 20;
    procedure setIntegrationTime(COM_intTime: Integer); dispid 21;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; dispid 22;
    procedure reconnect; dispid 23;
    procedure setAutonullingConfiguration(const COM_configuration: ICoAutonullingConfiguration); dispid 24;
    procedure setAutonullingScanValue(COM_value: Integer); dispid 25;
    procedure setAutonullingScanStatus(COM_value: Integer); dispid 26;
    procedure writeAutonullingConfigurationToSpectrometer; dispid 27;
    function readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration; dispid 28;
    function getAutonullingScanValue: Integer; dispid 29;
    function getAutonullingScanStatus: Integer; dispid 30;
    function getAutonullingConfiguration: ICoAutonullingConfiguration; dispid 31;
    function getChannelsPresent: OleVariant; dispid 32;
    function isChannelPresent(COM_index: Integer): WordBool; dispid 33;
    procedure setChannelMux(COM_index: Integer); dispid 35;
    procedure setChannelStatus(COM_index: Integer; COM_status: WordBool); dispid 36;
    procedure setDeepWellStatus(COM_status: WordBool); dispid 37;
    procedure setChannelPresent(COM_index: Integer; COM_present: WordBool); dispid 38;
    function isDeepWell: WordBool; dispid 39;
    function isInterpolationEnabled: WordBool; dispid 40;
    procedure setInterpolationEnabled(COM_enabled: WordBool); dispid 41;
    procedure addChannelListener(const COM_listener: ICoMultiChannelListener); dispid 42;
    procedure removeChannelListener(const COM_listener: ICoMultiChannelListener); dispid 43;
    function readNumberOfChannels: Integer; dispid 44;
    procedure writeChannelMux(COM_channel: Integer); dispid 45;
    procedure setPowerUpPOTValues; dispid 46;
    function getPOTValues: OleVariant; dispid 47;
    procedure setPOTValue(COM_pot: Integer; COM_value: Integer); dispid 48;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 49;
  end;

// *********************************************************************//
// Interface: ICoJazStatus
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29D7CE97-BBFC-5652-81FD-F29FB469D5E7}
// *********************************************************************//
  ICoJazStatus = interface(IDispatch)
    ['{29D7CE97-BBFC-5652-81FD-F29FB469D5E7}']
    procedure CreateJazStatus; safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoJazStatusDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29D7CE97-BBFC-5652-81FD-F29FB469D5E7}
// *********************************************************************//
  ICoJazStatusDisp = dispinterface
    ['{29D7CE97-BBFC-5652-81FD-F29FB469D5E7}']
    procedure CreateJazStatus; dispid 1;
    function toString: WideString; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoJazUSB
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C21C65F4-62D8-536D-807B-485EBC64A826}
// *********************************************************************//
  ICoJazUSB = interface(IDispatch)
    ['{C21C65F4-62D8-536D-807B-485EBC64A826}']
    procedure CreateJazUSB; safecall;
    procedure CreateJazUSBB(COM_i: Integer); safecall;
    procedure setEndpoints; safecall;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; safecall;
    function getDataOutEndPoint: ICoUSBEndpointDescriptor; safecall;
    function getLowSpeedInEndPoint: ICoUSBEndpointDescriptor; safecall;
    procedure openSpectrometer(COM_index: Integer); safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    function getStatus: ICoSpectrometerStatus; safecall;
    function readIntegrationTime: Integer; safecall;
    function toString: WideString; safecall;
    procedure setExternalTriggerMode(COM_mode: Integer); safecall;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; safecall;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; safecall;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_index: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); safecall;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; safecall;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); safecall;
    function getStrayLight(COM_index: Integer): Double; safecall;
    procedure setAutonullingConfiguration(const COM_configuration: ICoAutonullingConfiguration); safecall;
    procedure setAutonullingScanValue(COM_value: Integer); safecall;
    procedure setAutonullingScanStatus(COM_value: Integer); safecall;
    procedure writeAutonullingConfigurationToSpectrometer; safecall;
    function readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration; safecall;
    function getAutonullingScanValue: Integer; safecall;
    function getAutonullingScanStatus: Integer; safecall;
    function getAutonullingConfiguration: ICoAutonullingConfiguration; safecall;
    function getChannelsPresent: OleVariant; safecall;
    function isChannelPresent(COM_index: Integer): WordBool; safecall;
    procedure setChannelMux(COM_index: Integer); safecall;
    procedure setChannelStatus(COM_index: Integer; COM_status: WordBool); safecall;
    procedure setDeepWellStatus(COM_status: WordBool); safecall;
    procedure setChannelPresent(COM_index: Integer; COM_present: WordBool); safecall;
    function isDeepWell: WordBool; safecall;
    function isInterpolationEnabled: WordBool; safecall;
    procedure setInterpolationEnabled(COM_enabled: WordBool); safecall;
    procedure addChannelListener(const COM_listener: ICoMultiChannelListener); safecall;
    procedure removeChannelListener(const COM_listener: ICoMultiChannelListener); safecall;
    procedure setPowerUpPOTValues; safecall;
    function getPOTValues: OleVariant; safecall;
    procedure setPOTValue(COM_pot: Integer; COM_value: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoJazUSBDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C21C65F4-62D8-536D-807B-485EBC64A826}
// *********************************************************************//
  ICoJazUSBDisp = dispinterface
    ['{C21C65F4-62D8-536D-807B-485EBC64A826}']
    procedure CreateJazUSB; dispid 1;
    procedure CreateJazUSBB(COM_i: Integer); dispid 2;
    procedure setEndpoints; dispid 3;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; dispid 4;
    function getDataOutEndPoint: ICoUSBEndpointDescriptor; dispid 5;
    function getLowSpeedInEndPoint: ICoUSBEndpointDescriptor; dispid 6;
    procedure openSpectrometer(COM_index: Integer); dispid 7;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 8;
    function getStatus: ICoSpectrometerStatus; dispid 9;
    function readIntegrationTime: Integer; dispid 10;
    function toString: WideString; dispid 11;
    procedure setExternalTriggerMode(COM_mode: Integer); dispid 12;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; dispid 13;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 14;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; dispid 16;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; dispid 18;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); dispid 19;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 20;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 22;
    function getWavelengths(COM_index: Integer): OleVariant; dispid 24;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); dispid 25;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; dispid 26;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; dispid 29;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); dispid 30;
    function getStrayLight(COM_index: Integer): Double; dispid 31;
    procedure setAutonullingConfiguration(const COM_configuration: ICoAutonullingConfiguration); dispid 32;
    procedure setAutonullingScanValue(COM_value: Integer); dispid 33;
    procedure setAutonullingScanStatus(COM_value: Integer); dispid 34;
    procedure writeAutonullingConfigurationToSpectrometer; dispid 35;
    function readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration; dispid 36;
    function getAutonullingScanValue: Integer; dispid 37;
    function getAutonullingScanStatus: Integer; dispid 38;
    function getAutonullingConfiguration: ICoAutonullingConfiguration; dispid 39;
    function getChannelsPresent: OleVariant; dispid 40;
    function isChannelPresent(COM_index: Integer): WordBool; dispid 41;
    procedure setChannelMux(COM_index: Integer); dispid 43;
    procedure setChannelStatus(COM_index: Integer; COM_status: WordBool); dispid 44;
    procedure setDeepWellStatus(COM_status: WordBool); dispid 45;
    procedure setChannelPresent(COM_index: Integer; COM_present: WordBool); dispid 46;
    function isDeepWell: WordBool; dispid 47;
    function isInterpolationEnabled: WordBool; dispid 48;
    procedure setInterpolationEnabled(COM_enabled: WordBool); dispid 49;
    procedure addChannelListener(const COM_listener: ICoMultiChannelListener); dispid 50;
    procedure removeChannelListener(const COM_listener: ICoMultiChannelListener); dispid 51;
    procedure setPowerUpPOTValues; dispid 52;
    function getPOTValues: OleVariant; dispid 53;
    procedure setPOTValue(COM_pot: Integer; COM_value: Integer); dispid 54;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 55;
  end;

// *********************************************************************//
// Interface: ICoLS450_FunctionsGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F8217074-5B31-59D0-90EB-D6441D9A8023}
// *********************************************************************//
  ICoLS450_FunctionsGUIProvider = interface(IDispatch)
    ['{F8217074-5B31-59D0-90EB-D6441D9A8023}']
    procedure CreateLS450_FunctionsGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoLS450_FunctionsGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F8217074-5B31-59D0-90EB-D6441D9A8023}
// *********************************************************************//
  ICoLS450_FunctionsGUIProviderDisp = dispinterface
    ['{F8217074-5B31-59D0-90EB-D6441D9A8023}']
    procedure CreateLS450_FunctionsGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoLS450_FunctionsImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A91B2E0C-90C3-599F-905F-986C71C6C26B}
// *********************************************************************//
  ICoLS450_FunctionsImpl = interface(IDispatch)
    ['{A91B2E0C-90C3-599F-905F-986C71C6C26B}']
    procedure CreateLS450_FunctionsImplB(const COM_usbInt: ICoUSBInterface; 
                                         const COM_plugin: ICoSpectrometerPlugIn); safecall;
    function getLS450Coefficients: ICoLS450Coefficients; safecall;
    procedure setLS450Coefficients(const COM_ls450Coefficients: ICoLS450Coefficients); safecall;
    procedure loadInfo; safecall;
    procedure saveInfo; safecall;
    function getLS450Info(COM_index: Integer): WideString; safecall;
    procedure setAllLS450Info(const COM_coef: ICoLS450Coefficients); safecall;
    function getAllLS450Info: ICoLS450Coefficients; safecall;
    procedure setLS450Info(COM_index: Integer; const COM_str: WideString); safecall;
    procedure setLEDMode(COM_pulsed: WordBool); safecall;
    procedure loadLS450CoefficientsFromEEPROM; safecall;
    function getO2ProbeCalibrationCoefficients: OleVariant; safecall;
    procedure setO2ProbeCalibrationCoefficients(COM_coefficients: OleVariant); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoLS450_FunctionsImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A91B2E0C-90C3-599F-905F-986C71C6C26B}
// *********************************************************************//
  ICoLS450_FunctionsImplDisp = dispinterface
    ['{A91B2E0C-90C3-599F-905F-986C71C6C26B}']
    procedure CreateLS450_FunctionsImplB(const COM_usbInt: ICoUSBInterface; 
                                         const COM_plugin: ICoSpectrometerPlugIn); dispid 1;
    function getLS450Coefficients: ICoLS450Coefficients; dispid 2;
    procedure setLS450Coefficients(const COM_ls450Coefficients: ICoLS450Coefficients); dispid 3;
    procedure loadInfo; dispid 4;
    procedure saveInfo; dispid 5;
    function getLS450Info(COM_index: Integer): WideString; dispid 6;
    procedure setAllLS450Info(const COM_coef: ICoLS450Coefficients); dispid 7;
    function getAllLS450Info: ICoLS450Coefficients; dispid 8;
    procedure setLS450Info(COM_index: Integer; const COM_str: WideString); dispid 9;
    procedure setLEDMode(COM_pulsed: WordBool); dispid 10;
    procedure loadLS450CoefficientsFromEEPROM; dispid 11;
    function getO2ProbeCalibrationCoefficients: OleVariant; dispid 12;
    procedure setO2ProbeCalibrationCoefficients(COM_coefficients: OleVariant); dispid 13;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 15;
  end;

// *********************************************************************//
// Interface: ICoLS450_FunctionsImpl_2000
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EEC7A92F-A873-53F8-8110-8E2FB31853AB}
// *********************************************************************//
  ICoLS450_FunctionsImpl_2000 = interface(IDispatch)
    ['{EEC7A92F-A873-53F8-8110-8E2FB31853AB}']
    procedure CreateLS450_FunctionsImpl_2000B(const COM_usbInt: ICoUSBInterface; 
                                              const COM_plugin: ICoSpectrometerPlugIn); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoLS450_FunctionsImpl_2000Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EEC7A92F-A873-53F8-8110-8E2FB31853AB}
// *********************************************************************//
  ICoLS450_FunctionsImpl_2000Disp = dispinterface
    ['{EEC7A92F-A873-53F8-8110-8E2FB31853AB}']
    procedure CreateLS450_FunctionsImpl_2000B(const COM_usbInt: ICoUSBInterface; 
                                              const COM_plugin: ICoSpectrometerPlugIn); dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoLS450_FunctionsImpl_4000
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2106D410-967E-5DC3-9073-5F11B832F885}
// *********************************************************************//
  ICoLS450_FunctionsImpl_4000 = interface(IDispatch)
    ['{2106D410-967E-5DC3-9073-5F11B832F885}']
    procedure CreateLS450_FunctionsImpl_4000B(const COM_usbInt: ICoUSBInterface; 
                                              const COM_plugin: ICoSpectrometerPlugIn); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoLS450_FunctionsImpl_4000Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2106D410-967E-5DC3-9073-5F11B832F885}
// *********************************************************************//
  ICoLS450_FunctionsImpl_4000Disp = dispinterface
    ['{2106D410-967E-5DC3-9073-5F11B832F885}']
    procedure CreateLS450_FunctionsImpl_4000B(const COM_usbInt: ICoUSBInterface; 
                                              const COM_plugin: ICoSpectrometerPlugIn); dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoLaserGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0A930BEA-7847-5677-9103-D6D68B11B10F}
// *********************************************************************//
  ICoLaserGUIProvider = interface(IDispatch)
    ['{0A930BEA-7847-5677-9103-D6D68B11B10F}']
    procedure CreateLaserGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoLaserGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0A930BEA-7847-5677-9103-D6D68B11B10F}
// *********************************************************************//
  ICoLaserGUIProviderDisp = dispinterface
    ['{0A930BEA-7847-5677-9103-D6D68B11B10F}']
    procedure CreateLaserGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoLaserProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A7E147B9-A8E5-56AD-903F-079A80AE219F}
// *********************************************************************//
  ICoLaserProvider = interface(IDispatch)
    ['{A7E147B9-A8E5-56AD-903F-079A80AE219F}']
    procedure CreateLaserProvider; safecall;
    function getLaser(COM_param0: Integer): ICoLaser; safecall;
    function getLasers: ICoLaserCollection; safecall;
    function getNumberOfEnabledLasers: Integer; safecall;
    function getNumberOfSupportedLasers: Integer; safecall;
    procedure setNumberOfSupportedLasers(COM_param0: Integer); safecall;
    procedure getLaserInfo(COM_param0: Integer); safecall;
    procedure setLaserInfo(COM_param0: Integer); safecall;
    procedure setDefaultLaser(COM_param0: Integer); safecall;
    function getDefaultLaser: Integer; safecall;
    function isLaserTemperatureRegulation: WordBool; safecall;
    procedure setLaserTemperatureRegulation(COM_param0: WordBool); safecall;
    procedure getLaserTemperatureInfo; safecall;
    procedure setLaserTemperatureInfo; safecall;
    function getMinimumLaserSetpoint: Integer; safecall;
    procedure setMinimumLaserSetpoint(COM_param0: Integer); safecall;
    function getMaximumLaserSetpoint: Integer; safecall;
    procedure setMaximumLaserSetpoint(COM_param0: Integer); safecall;
    function getLaserPowerInfo: Integer; safecall;
    procedure setLaserPowerInfo(COM_param0: Integer); safecall;
    function isLaserPowerRegulation: WordBool; safecall;
    procedure setLaserPowerRegulation(COM_param0: WordBool); safecall;
    function getMinimumLaserPowerSetpoint: Integer; safecall;
    procedure setMinimumLaserPowerSetpoint(COM_param0: Integer); safecall;
    function getMaximumLaserPowerSetpoint: Integer; safecall;
    procedure setMaximumLaserPowerSetpoint(COM_param0: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoLaserProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A7E147B9-A8E5-56AD-903F-079A80AE219F}
// *********************************************************************//
  ICoLaserProviderDisp = dispinterface
    ['{A7E147B9-A8E5-56AD-903F-079A80AE219F}']
    procedure CreateLaserProvider; dispid 1;
    function getLaser(COM_param0: Integer): ICoLaser; dispid 2;
    function getLasers: ICoLaserCollection; dispid 3;
    function getNumberOfEnabledLasers: Integer; dispid 5;
    function getNumberOfSupportedLasers: Integer; dispid 6;
    procedure setNumberOfSupportedLasers(COM_param0: Integer); dispid 7;
    procedure getLaserInfo(COM_param0: Integer); dispid 8;
    procedure setLaserInfo(COM_param0: Integer); dispid 9;
    procedure setDefaultLaser(COM_param0: Integer); dispid 10;
    function getDefaultLaser: Integer; dispid 11;
    function isLaserTemperatureRegulation: WordBool; dispid 12;
    procedure setLaserTemperatureRegulation(COM_param0: WordBool); dispid 13;
    procedure getLaserTemperatureInfo; dispid 14;
    procedure setLaserTemperatureInfo; dispid 15;
    function getMinimumLaserSetpoint: Integer; dispid 16;
    procedure setMinimumLaserSetpoint(COM_param0: Integer); dispid 17;
    function getMaximumLaserSetpoint: Integer; dispid 18;
    procedure setMaximumLaserSetpoint(COM_param0: Integer); dispid 19;
    function getLaserPowerInfo: Integer; dispid 20;
    procedure setLaserPowerInfo(COM_param0: Integer); dispid 21;
    function isLaserPowerRegulation: WordBool; dispid 22;
    procedure setLaserPowerRegulation(COM_param0: WordBool); dispid 23;
    function getMinimumLaserPowerSetpoint: Integer; dispid 24;
    procedure setMinimumLaserPowerSetpoint(COM_param0: Integer); dispid 25;
    function getMaximumLaserPowerSetpoint: Integer; dispid 26;
    procedure setMaximumLaserPowerSetpoint(COM_param0: Integer); dispid 27;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 28;
  end;

// *********************************************************************//
// Interface: ICoLaserProviderImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D4269F9B-638C-5E0C-8050-A93DD0A4C3FC}
// *********************************************************************//
  ICoLaserProviderImpl = interface(IDispatch)
    ['{D4269F9B-638C-5E0C-8050-A93DD0A4C3FC}']
    procedure CreateLaserProviderImplB(const COM_usbInt: ICoUSBInterface; 
                                       const COM_spec: ICoMMSRamanSpectrometer); safecall;
    function getLaser(COM_laserIndex: Integer): ICoLaser; safecall;
    function getLasers: ICoLaserCollection; safecall;
    function getNumberOfEnabledLasers: Integer; safecall;
    function getNumberOfSupportedLasers: Integer; safecall;
    procedure setNumberOfSupportedLasers(COM_numLasers: Integer); safecall;
    procedure getLaserInfo(COM_laserIndex: Integer); safecall;
    procedure setLaserInfo(COM_laserIndex: Integer); safecall;
    function getDefaultLaser: Integer; safecall;
    procedure setDefaultLaser(COM_defaultLaser: Integer); safecall;
    procedure setLaserTemperatureRegulation(COM_laserTemperatureRegulation: WordBool); safecall;
    procedure getLaserTemperatureInfo; safecall;
    procedure setLaserTemperatureInfo; safecall;
    function isLaserTemperatureRegulation: WordBool; safecall;
    function getMinimumLaserSetpoint: Integer; safecall;
    procedure setMinimumLaserSetpoint(COM_minimumLaserSetpoint: Integer); safecall;
    function getMaximumLaserSetpoint: Integer; safecall;
    procedure setMaximumLaserSetpoint(COM_maximumLaserSetpoint: Integer); safecall;
    procedure setLaserPowerRegulation(COM_laserPowerRegulation: WordBool); safecall;
    function getLaserPowerInfo: Integer; safecall;
    procedure setLaserPowerInfo(COM_power: Integer); safecall;
    function isLaserPowerRegulation: WordBool; safecall;
    function getMinimumLaserPowerSetpoint: Integer; safecall;
    procedure setMinimumLaserPowerSetpoint(COM_minimumLaserPowerSetpoint: Integer); safecall;
    function getMaximumLaserPowerSetpoint: Integer; safecall;
    procedure setMaximumLaserPowerSetpoint(COM_maximumLaserPowerSetpoint: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoLaserProviderImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D4269F9B-638C-5E0C-8050-A93DD0A4C3FC}
// *********************************************************************//
  ICoLaserProviderImplDisp = dispinterface
    ['{D4269F9B-638C-5E0C-8050-A93DD0A4C3FC}']
    procedure CreateLaserProviderImplB(const COM_usbInt: ICoUSBInterface; 
                                       const COM_spec: ICoMMSRamanSpectrometer); dispid 1;
    function getLaser(COM_laserIndex: Integer): ICoLaser; dispid 2;
    function getLasers: ICoLaserCollection; dispid 3;
    function getNumberOfEnabledLasers: Integer; dispid 5;
    function getNumberOfSupportedLasers: Integer; dispid 6;
    procedure setNumberOfSupportedLasers(COM_numLasers: Integer); dispid 7;
    procedure getLaserInfo(COM_laserIndex: Integer); dispid 8;
    procedure setLaserInfo(COM_laserIndex: Integer); dispid 9;
    function getDefaultLaser: Integer; dispid 10;
    procedure setDefaultLaser(COM_defaultLaser: Integer); dispid 11;
    procedure setLaserTemperatureRegulation(COM_laserTemperatureRegulation: WordBool); dispid 12;
    procedure getLaserTemperatureInfo; dispid 13;
    procedure setLaserTemperatureInfo; dispid 14;
    function isLaserTemperatureRegulation: WordBool; dispid 15;
    function getMinimumLaserSetpoint: Integer; dispid 16;
    procedure setMinimumLaserSetpoint(COM_minimumLaserSetpoint: Integer); dispid 17;
    function getMaximumLaserSetpoint: Integer; dispid 18;
    procedure setMaximumLaserSetpoint(COM_maximumLaserSetpoint: Integer); dispid 19;
    procedure setLaserPowerRegulation(COM_laserPowerRegulation: WordBool); dispid 20;
    function getLaserPowerInfo: Integer; dispid 21;
    procedure setLaserPowerInfo(COM_power: Integer); dispid 22;
    function isLaserPowerRegulation: WordBool; dispid 23;
    function getMinimumLaserPowerSetpoint: Integer; dispid 24;
    procedure setMinimumLaserPowerSetpoint(COM_minimumLaserPowerSetpoint: Integer); dispid 25;
    function getMaximumLaserPowerSetpoint: Integer; dispid 26;
    procedure setMaximumLaserPowerSetpoint(COM_maximumLaserPowerSetpoint: Integer); dispid 27;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 29;
  end;

// *********************************************************************//
// Interface: ICoListIterator
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EE8130ED-924F-51BA-8157-68BA084110E6}
// *********************************************************************//
  ICoListIterator = interface(IDispatch)
    ['{EE8130ED-924F-51BA-8157-68BA084110E6}']
    procedure CreateListIterator; safecall;
    function nextIndex: Integer; safecall;
    function previousIndex: Integer; safecall;
    procedure Remove; safecall;
    function hasNext: WordBool; safecall;
    function hasPrevious: WordBool; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoListIteratorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EE8130ED-924F-51BA-8157-68BA084110E6}
// *********************************************************************//
  ICoListIteratorDisp = dispinterface
    ['{EE8130ED-924F-51BA-8157-68BA084110E6}']
    procedure CreateListIterator; dispid 1;
    function nextIndex: Integer; dispid 2;
    function previousIndex: Integer; dispid 3;
    procedure Remove; dispid 4;
    function hasNext: WordBool; dispid 5;
    function hasPrevious: WordBool; dispid 6;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 7;
  end;

// *********************************************************************//
// Interface: ICoList
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {503C0A3C-7F79-5910-800C-65B5CDF903D6}
// *********************************************************************//
  ICoList = interface(IDispatch)
    ['{503C0A3C-7F79-5910-800C-65B5CDF903D6}']
    procedure CreateList; safecall;
    function hashCode: Integer; safecall;
    function size: Integer; safecall;
    procedure clear; safecall;
    function isEmpty: WordBool; safecall;
    function addAll(COM_param0: Integer; const COM_param1: ICoCollection): WordBool; safecall;
    function addAllB(const COM_param0: ICoCollection): WordBool; safecall;
    function containsAll(const COM_param0: ICoCollection): WordBool; safecall;
    function removeAll(const COM_param0: ICoCollection): WordBool; safecall;
    function retainAll(const COM_param0: ICoCollection): WordBool; safecall;
    function iterator: ICoIterator; safecall;
    function subList(COM_param0: Integer; COM_param1: Integer): ICoList; safecall;
    function listIterator: ICoListIterator; safecall;
    function listIteratorB(COM_param0: Integer): ICoListIterator; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoListDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {503C0A3C-7F79-5910-800C-65B5CDF903D6}
// *********************************************************************//
  ICoListDisp = dispinterface
    ['{503C0A3C-7F79-5910-800C-65B5CDF903D6}']
    procedure CreateList; dispid 1;
    function hashCode: Integer; dispid 2;
    function size: Integer; dispid 3;
    procedure clear; dispid 4;
    function isEmpty: WordBool; dispid 5;
    function addAll(COM_param0: Integer; const COM_param1: ICoCollection): WordBool; dispid 6;
    function addAllB(const COM_param0: ICoCollection): WordBool; dispid 7;
    function containsAll(const COM_param0: ICoCollection): WordBool; dispid 8;
    function removeAll(const COM_param0: ICoCollection): WordBool; dispid 9;
    function retainAll(const COM_param0: ICoCollection): WordBool; dispid 10;
    function iterator: ICoIterator; dispid 11;
    function subList(COM_param0: Integer; COM_param1: Integer): ICoList; dispid 12;
    function listIterator: ICoListIterator; dispid 13;
    function listIteratorB(COM_param0: Integer): ICoListIterator; dispid 14;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 15;
  end;

// *********************************************************************//
// Interface: ICoMMSRamanChannel
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B8EE5E9D-8D20-56B2-8170-637813EB93C1}
// *********************************************************************//
  ICoMMSRamanChannel = interface(IDispatch)
    ['{B8EE5E9D-8D20-56B2-8170-637813EB93C1}']
    procedure CreateMMSRamanChannelB(const COM_spectrometer: ICoMMSRaman; 
                                     const COM_coefficients: ICoCoefficients; COM_channel: Integer); safecall;
    procedure generateMetadata(const COM_sb: ICoSpectrometerInfo; COM_index: Integer); safecall;
    procedure getCoefficientsFromSpectrometer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMMSRamanChannelDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B8EE5E9D-8D20-56B2-8170-637813EB93C1}
// *********************************************************************//
  ICoMMSRamanChannelDisp = dispinterface
    ['{B8EE5E9D-8D20-56B2-8170-637813EB93C1}']
    procedure CreateMMSRamanChannelB(const COM_spectrometer: ICoMMSRaman; 
                                     const COM_coefficients: ICoCoefficients; COM_channel: Integer); dispid 1;
    procedure generateMetadata(const COM_sb: ICoSpectrometerInfo; COM_index: Integer); dispid 2;
    procedure getCoefficientsFromSpectrometer; dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoMMSRamanConstants
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2ED2724E-A40E-5D54-9129-5C964648B6F3}
// *********************************************************************//
  ICoMMSRamanConstants = interface(IDispatch)
    ['{2ED2724E-A40E-5D54-9129-5C964648B6F3}']
    procedure CreateMMSRamanConstants; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMMSRamanConstantsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2ED2724E-A40E-5D54-9129-5C964648B6F3}
// *********************************************************************//
  ICoMMSRamanConstantsDisp = dispinterface
    ['{2ED2724E-A40E-5D54-9129-5C964648B6F3}']
    procedure CreateMMSRamanConstants; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoMasterClockDivisor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {606DB847-95E6-5EA8-81AE-774CB83900BD}
// *********************************************************************//
  ICoMasterClockDivisor = interface(IDispatch)
    ['{606DB847-95E6-5EA8-81AE-774CB83900BD}']
    procedure CreateMasterClockDivisor; safecall;
    function getMasterClockDivisor: Integer; safecall;
    procedure setMasterClockDivisor(COM_param0: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMasterClockDivisorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {606DB847-95E6-5EA8-81AE-774CB83900BD}
// *********************************************************************//
  ICoMasterClockDivisorDisp = dispinterface
    ['{606DB847-95E6-5EA8-81AE-774CB83900BD}']
    procedure CreateMasterClockDivisor; dispid 1;
    function getMasterClockDivisor: Integer; dispid 2;
    procedure setMasterClockDivisor(COM_param0: Integer); dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoMasterClockDivisorImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2C874B89-034C-50F0-8194-8855A0527FD6}
// *********************************************************************//
  ICoMasterClockDivisorImpl = interface(IDispatch)
    ['{2C874B89-034C-50F0-8194-8855A0527FD6}']
    procedure CreateMasterClockDivisorImplB(const COM_usbInt: ICoUSBInterface); safecall;
    function getMasterClockDivisor: Integer; safecall;
    procedure setMasterClockDivisor(COM_value: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMasterClockDivisorImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2C874B89-034C-50F0-8194-8855A0527FD6}
// *********************************************************************//
  ICoMasterClockDivisorImplDisp = dispinterface
    ['{2C874B89-034C-50F0-8194-8855A0527FD6}']
    procedure CreateMasterClockDivisorImplB(const COM_usbInt: ICoUSBInterface); dispid 1;
    function getMasterClockDivisor: Integer; dispid 2;
    procedure setMasterClockDivisor(COM_value: Integer); dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoMasterClockDivisorListener
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {39708381-AD50-5164-90F1-49750684A42E}
// *********************************************************************//
  ICoMasterClockDivisorListener = interface(IDispatch)
    ['{39708381-AD50-5164-90F1-49750684A42E}']
    procedure CreateMasterClockDivisorListener; safecall;
    procedure masterClockChanged(COM_param0: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMasterClockDivisorListenerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {39708381-AD50-5164-90F1-49750684A42E}
// *********************************************************************//
  ICoMasterClockDivisorListenerDisp = dispinterface
    ['{39708381-AD50-5164-90F1-49750684A42E}']
    procedure CreateMasterClockDivisorListener; dispid 1;
    procedure masterClockChanged(COM_param0: Integer); dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoMasterClockRate
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {67058E79-062D-5F6A-808C-49CB51FE4D34}
// *********************************************************************//
  ICoMasterClockRate = interface(IDispatch)
    ['{67058E79-062D-5F6A-808C-49CB51FE4D34}']
    procedure CreateMasterClockRate; safecall;
    procedure setMasterClock(COM_param0: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMasterClockRateDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {67058E79-062D-5F6A-808C-49CB51FE4D34}
// *********************************************************************//
  ICoMasterClockRateDisp = dispinterface
    ['{67058E79-062D-5F6A-808C-49CB51FE4D34}']
    procedure CreateMasterClockRate; dispid 1;
    procedure setMasterClock(COM_param0: Integer); dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoMasterClockRateImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6D7C615C-3E77-5D2C-9060-972425312EBD}
// *********************************************************************//
  ICoMasterClockRateImpl = interface(IDispatch)
    ['{6D7C615C-3E77-5D2C-9060-972425312EBD}']
    procedure CreateMasterClockRateImplB(const COM_usbInt: ICoUSBInterface); safecall;
    procedure setMasterClock(COM_param0: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMasterClockRateImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6D7C615C-3E77-5D2C-9060-972425312EBD}
// *********************************************************************//
  ICoMasterClockRateImplDisp = dispinterface
    ['{6D7C615C-3E77-5D2C-9060-972425312EBD}']
    procedure CreateMasterClockRateImplB(const COM_usbInt: ICoUSBInterface); dispid 1;
    procedure setMasterClock(COM_param0: Integer); dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoMasterClockRateImpl_2000
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4B3B48EC-ABE7-50F3-90D2-6FA3EFED896F}
// *********************************************************************//
  ICoMasterClockRateImpl_2000 = interface(IDispatch)
    ['{4B3B48EC-ABE7-50F3-90D2-6FA3EFED896F}']
    procedure CreateMasterClockRateImpl_2000B(const COM_usbInt: ICoUSBInterface); safecall;
    procedure setMasterClock(COM_rate: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMasterClockRateImpl_2000Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4B3B48EC-ABE7-50F3-90D2-6FA3EFED896F}
// *********************************************************************//
  ICoMasterClockRateImpl_2000Disp = dispinterface
    ['{4B3B48EC-ABE7-50F3-90D2-6FA3EFED896F}']
    procedure CreateMasterClockRateImpl_2000B(const COM_usbInt: ICoUSBInterface); dispid 1;
    procedure setMasterClock(COM_rate: Integer); dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoMasterClockRateImpl_ADC
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {90171331-9C25-5B31-8140-82352EF9C75F}
// *********************************************************************//
  ICoMasterClockRateImpl_ADC = interface(IDispatch)
    ['{90171331-9C25-5B31-8140-82352EF9C75F}']
    procedure CreateMasterClockRateImpl_ADCB(const COM_usbInt: ICoUSBInterface); safecall;
    procedure setMasterClock(COM_rate: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMasterClockRateImpl_ADCDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {90171331-9C25-5B31-8140-82352EF9C75F}
// *********************************************************************//
  ICoMasterClockRateImpl_ADCDisp = dispinterface
    ['{90171331-9C25-5B31-8140-82352EF9C75F}']
    procedure CreateMasterClockRateImpl_ADCB(const COM_usbInt: ICoUSBInterface); dispid 1;
    procedure setMasterClock(COM_rate: Integer); dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoMasterClockRateImpl_MMSRaman
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {59199C6E-A878-5F8A-9199-437D7E92F994}
// *********************************************************************//
  ICoMasterClockRateImpl_MMSRaman = interface(IDispatch)
    ['{59199C6E-A878-5F8A-9199-437D7E92F994}']
    procedure CreateMasterClockRateImpl_MMSRamanB(const COM_usbInt: ICoUSBInterface; 
                                                  const COM_spec: ICoMMSRaman); safecall;
    procedure setMasterClock(COM_rate: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMasterClockRateImpl_MMSRamanDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {59199C6E-A878-5F8A-9199-437D7E92F994}
// *********************************************************************//
  ICoMasterClockRateImpl_MMSRamanDisp = dispinterface
    ['{59199C6E-A878-5F8A-9199-437D7E92F994}']
    procedure CreateMasterClockRateImpl_MMSRamanB(const COM_usbInt: ICoUSBInterface; 
                                                  const COM_spec: ICoMMSRaman); dispid 1;
    procedure setMasterClock(COM_rate: Integer); dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoMaya2000
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C9CBA76E-87B6-5F66-8082-D7BC06946B91}
// *********************************************************************//
  ICoMaya2000 = interface(IDispatch)
    ['{C9CBA76E-87B6-5F66-8082-D7BC06946B91}']
    procedure CreateMaya2000; safecall;
    procedure CreateMaya2000B(COM_i: Integer); safecall;
    procedure setEndpoints; safecall;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; safecall;
    procedure openSpectrometer(COM_index: Integer); safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    procedure setStrobeDelay(COM_delay: Integer); safecall;
    function getActualIntegrationTime: Integer; safecall;
    function getPlugIns: ICoSpectrometerPlugInCollection; safecall;
    function getNumberOfPlugIns: Integer; safecall;
    function isPlugInDetected(COM_id: Integer): WordBool; safecall;
    function initializePlugIns: OleVariant; safecall;
    procedure detectPlugIns; safecall;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer; safecall;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant; safecall;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; safecall;
    function getPSOCVersion: WideString; safecall;
    function getFPGAFirmwareVersion: WideString; safecall;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; safecall;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); safecall;
    function getContinuousStrobeDelayMinimum: Integer; safecall;
    function getContinuousStrobeDelayMaximum: Integer; safecall;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; safecall;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer); safecall;
    function getIntegrationTimeBaseClock: Integer; safecall;
    function getIntegrationClockTimer: Integer; safecall;
    function getAdvancedIntegrationTimeMinimum: Integer; safecall;
    function getAdvancedIntegrationTimeMaximum: Integer; safecall;
    function getAdvancedIntegrationTimeIncrement: Integer; safecall;
    procedure setExternalTriggerMode(COM_mode: Integer); safecall;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; safecall;
    procedure setShutterClock(COM_value: Integer); safecall;
    function getShutterClock: Integer; safecall;
    procedure setSingleStrobeLow(COM_value: Integer); safecall;
    procedure setSingleStrobeHigh(COM_value: Integer); safecall;
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double; safecall;
    function getSingleStrobeLow: Integer; safecall;
    function getSingleStrobeHigh: Integer; safecall;
    function getSingleStrobeMinimum: Integer; safecall;
    function getSingleStrobeMaximum: Integer; safecall;
    function getSingleStrobeIncrement: Integer; safecall;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setValueAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setDirectionBitmask(COM_bitmask: Smallint); safecall;
    procedure setMuxBitmask(COM_bitmask: Smallint); safecall;
    procedure setValueBitmask(COM_bitmask: Smallint); safecall;
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool); safecall;
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool); safecall;
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool); safecall;
    function getTotalGPIOBits: Integer; safecall;
    function getDirectionBits: ICoBitSet; safecall;
    function getMuxBits: ICoBitSet; safecall;
    function getValueBits: ICoBitSet; safecall;
    function getValueBit(COM_bitNumber: Integer): Integer; safecall;
    function getNumberOfPins: Integer; safecall;
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant; safecall;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant); safecall;
    procedure setMasterClockDivisor(COM_value: Integer); safecall;
    function getMasterClockDivisor: Integer; safecall;
    procedure setExternalTriggerDelay(COM_counts: Integer); safecall;
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double; safecall;
    function getExternalTriggerDelayMinimum: Integer; safecall;
    function getExternalTriggerDelayMaximum: Integer; safecall;
    function getExternalTriggerDelayIncrement: Integer; safecall;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; safecall;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_index: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); safecall;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; safecall;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); safecall;
    function getStrayLight(COM_index: Integer): Double; safecall;
    function isAdvancedVersion: WordBool; safecall;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMaya2000Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C9CBA76E-87B6-5F66-8082-D7BC06946B91}
// *********************************************************************//
  ICoMaya2000Disp = dispinterface
    ['{C9CBA76E-87B6-5F66-8082-D7BC06946B91}']
    procedure CreateMaya2000; dispid 1;
    procedure CreateMaya2000B(COM_i: Integer); dispid 2;
    procedure setEndpoints; dispid 3;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; dispid 4;
    procedure openSpectrometer(COM_index: Integer); dispid 5;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 6;
    procedure setStrobeDelay(COM_delay: Integer); dispid 7;
    function getActualIntegrationTime: Integer; dispid 8;
    function getPlugIns: ICoSpectrometerPlugInCollection; dispid 9;
    function getNumberOfPlugIns: Integer; dispid 10;
    function isPlugInDetected(COM_id: Integer): WordBool; dispid 11;
    function initializePlugIns: OleVariant; dispid 12;
    procedure detectPlugIns; dispid 13;
    function setI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant; 
                         COM_i2C: OleVariant): Integer; dispid 14;
    function getI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant): OleVariant; dispid 15;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; dispid 16;
    function getPSOCVersion: WideString; dispid 17;
    function getFPGAFirmwareVersion: WideString; dispid 18;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; dispid 19;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); dispid 20;
    function getContinuousStrobeDelayMinimum: Integer; dispid 21;
    function getContinuousStrobeDelayMaximum: Integer; dispid 22;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; dispid 23;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer); dispid 24;
    function getIntegrationTimeBaseClock: Integer; dispid 25;
    function getIntegrationClockTimer: Integer; dispid 26;
    function getAdvancedIntegrationTimeMinimum: Integer; dispid 27;
    function getAdvancedIntegrationTimeMaximum: Integer; dispid 28;
    function getAdvancedIntegrationTimeIncrement: Integer; dispid 29;
    procedure setExternalTriggerMode(COM_mode: Integer); dispid 30;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; dispid 31;
    procedure setShutterClock(COM_value: Integer); dispid 32;
    function getShutterClock: Integer; dispid 33;
    procedure setSingleStrobeLow(COM_value: Integer); dispid 34;
    procedure setSingleStrobeHigh(COM_value: Integer); dispid 35;
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double; dispid 36;
    function getSingleStrobeLow: Integer; dispid 37;
    function getSingleStrobeHigh: Integer; dispid 38;
    function getSingleStrobeMinimum: Integer; dispid 39;
    function getSingleStrobeMaximum: Integer; dispid 40;
    function getSingleStrobeIncrement: Integer; dispid 41;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet); dispid 42;
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet); dispid 43;
    procedure setValueAllBits(const COM_bitSet: ICoBitSet); dispid 44;
    procedure setDirectionBitmask(COM_bitmask: Smallint); dispid 45;
    procedure setMuxBitmask(COM_bitmask: Smallint); dispid 46;
    procedure setValueBitmask(COM_bitmask: Smallint); dispid 47;
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool); dispid 48;
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool); dispid 49;
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool); dispid 50;
    function getTotalGPIOBits: Integer; dispid 51;
    function getDirectionBits: ICoBitSet; dispid 52;
    function getMuxBits: ICoBitSet; dispid 53;
    function getValueBits: ICoBitSet; dispid 54;
    function getValueBit(COM_bitNumber: Integer): Integer; dispid 55;
    function getNumberOfPins: Integer; dispid 56;
    function getIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant): OleVariant; dispid 57;
    procedure setIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant; 
                                              COM_data: OleVariant); dispid 58;
    procedure setMasterClockDivisor(COM_value: Integer); dispid 59;
    function getMasterClockDivisor: Integer; dispid 60;
    procedure setExternalTriggerDelay(COM_counts: Integer); dispid 61;
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double; dispid 62;
    function getExternalTriggerDelayMinimum: Integer; dispid 63;
    function getExternalTriggerDelayMaximum: Integer; dispid 64;
    function getExternalTriggerDelayIncrement: Integer; dispid 65;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 66;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; dispid 68;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; dispid 70;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); dispid 71;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 72;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 74;
    function getWavelengths(COM_index: Integer): OleVariant; dispid 76;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); dispid 77;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; dispid 78;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; dispid 81;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); dispid 82;
    function getStrayLight(COM_index: Integer): Double; dispid 83;
    function isAdvancedVersion: WordBool; dispid 84;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 85;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 86;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 87;
  end;

// *********************************************************************//
// Interface: ICoMayaPro2000
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {13E74ED1-B93F-56C5-9049-ED54011CEE9C}
// *********************************************************************//
  ICoMayaPro2000 = interface(IDispatch)
    ['{13E74ED1-B93F-56C5-9049-ED54011CEE9C}']
    procedure CreateMayaPro2000; safecall;
    procedure CreateMayaPro2000B(COM_i: Integer); safecall;
    procedure setEndpoints; safecall;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; safecall;
    procedure openSpectrometer(COM_index: Integer); safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    procedure setStrobeDelay(COM_delay: Integer); safecall;
    function getActualIntegrationTime: Integer; safecall;
    function getPlugIns: ICoSpectrometerPlugInCollection; safecall;
    function getNumberOfPlugIns: Integer; safecall;
    function isPlugInDetected(COM_id: Integer): WordBool; safecall;
    function initializePlugIns: OleVariant; safecall;
    procedure detectPlugIns; safecall;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer; safecall;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant; safecall;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; safecall;
    function getPSOCVersion: WideString; safecall;
    function getFPGAFirmwareVersion: WideString; safecall;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; safecall;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); safecall;
    function getContinuousStrobeDelayMinimum: Integer; safecall;
    function getContinuousStrobeDelayMaximum: Integer; safecall;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; safecall;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer); safecall;
    function getIntegrationTimeBaseClock: Integer; safecall;
    function getIntegrationClockTimer: Integer; safecall;
    function getAdvancedIntegrationTimeMinimum: Integer; safecall;
    function getAdvancedIntegrationTimeMaximum: Integer; safecall;
    function getAdvancedIntegrationTimeIncrement: Integer; safecall;
    procedure setExternalTriggerMode(COM_mode: Integer); safecall;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; safecall;
    procedure setShutterClock(COM_value: Integer); safecall;
    function getShutterClock: Integer; safecall;
    procedure setSingleStrobeLow(COM_value: Integer); safecall;
    procedure setSingleStrobeHigh(COM_value: Integer); safecall;
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double; safecall;
    function getSingleStrobeLow: Integer; safecall;
    function getSingleStrobeHigh: Integer; safecall;
    function getSingleStrobeMinimum: Integer; safecall;
    function getSingleStrobeMaximum: Integer; safecall;
    function getSingleStrobeIncrement: Integer; safecall;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setValueAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setDirectionBitmask(COM_bitmask: Smallint); safecall;
    procedure setMuxBitmask(COM_bitmask: Smallint); safecall;
    procedure setValueBitmask(COM_bitmask: Smallint); safecall;
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool); safecall;
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool); safecall;
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool); safecall;
    function getTotalGPIOBits: Integer; safecall;
    function getDirectionBits: ICoBitSet; safecall;
    function getMuxBits: ICoBitSet; safecall;
    function getValueBits: ICoBitSet; safecall;
    function getValueBit(COM_bitNumber: Integer): Integer; safecall;
    function getNumberOfPins: Integer; safecall;
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant; safecall;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant); safecall;
    procedure setMasterClockDivisor(COM_value: Integer); safecall;
    function getMasterClockDivisor: Integer; safecall;
    procedure setExternalTriggerDelay(COM_counts: Integer); safecall;
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double; safecall;
    function getExternalTriggerDelayMinimum: Integer; safecall;
    function getExternalTriggerDelayMaximum: Integer; safecall;
    function getExternalTriggerDelayIncrement: Integer; safecall;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; safecall;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_index: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); safecall;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; safecall;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); safecall;
    function getStrayLight(COM_index: Integer): Double; safecall;
    function isAdvancedVersion: WordBool; safecall;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMayaPro2000Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {13E74ED1-B93F-56C5-9049-ED54011CEE9C}
// *********************************************************************//
  ICoMayaPro2000Disp = dispinterface
    ['{13E74ED1-B93F-56C5-9049-ED54011CEE9C}']
    procedure CreateMayaPro2000; dispid 1;
    procedure CreateMayaPro2000B(COM_i: Integer); dispid 2;
    procedure setEndpoints; dispid 3;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; dispid 4;
    procedure openSpectrometer(COM_index: Integer); dispid 5;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 6;
    procedure setStrobeDelay(COM_delay: Integer); dispid 7;
    function getActualIntegrationTime: Integer; dispid 8;
    function getPlugIns: ICoSpectrometerPlugInCollection; dispid 9;
    function getNumberOfPlugIns: Integer; dispid 10;
    function isPlugInDetected(COM_id: Integer): WordBool; dispid 11;
    function initializePlugIns: OleVariant; dispid 12;
    procedure detectPlugIns; dispid 13;
    function setI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant; 
                         COM_i2C: OleVariant): Integer; dispid 14;
    function getI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant): OleVariant; dispid 15;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; dispid 16;
    function getPSOCVersion: WideString; dispid 17;
    function getFPGAFirmwareVersion: WideString; dispid 18;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; dispid 19;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); dispid 20;
    function getContinuousStrobeDelayMinimum: Integer; dispid 21;
    function getContinuousStrobeDelayMaximum: Integer; dispid 22;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; dispid 23;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer); dispid 24;
    function getIntegrationTimeBaseClock: Integer; dispid 25;
    function getIntegrationClockTimer: Integer; dispid 26;
    function getAdvancedIntegrationTimeMinimum: Integer; dispid 27;
    function getAdvancedIntegrationTimeMaximum: Integer; dispid 28;
    function getAdvancedIntegrationTimeIncrement: Integer; dispid 29;
    procedure setExternalTriggerMode(COM_mode: Integer); dispid 30;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; dispid 31;
    procedure setShutterClock(COM_value: Integer); dispid 32;
    function getShutterClock: Integer; dispid 33;
    procedure setSingleStrobeLow(COM_value: Integer); dispid 34;
    procedure setSingleStrobeHigh(COM_value: Integer); dispid 35;
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double; dispid 36;
    function getSingleStrobeLow: Integer; dispid 37;
    function getSingleStrobeHigh: Integer; dispid 38;
    function getSingleStrobeMinimum: Integer; dispid 39;
    function getSingleStrobeMaximum: Integer; dispid 40;
    function getSingleStrobeIncrement: Integer; dispid 41;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet); dispid 42;
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet); dispid 43;
    procedure setValueAllBits(const COM_bitSet: ICoBitSet); dispid 44;
    procedure setDirectionBitmask(COM_bitmask: Smallint); dispid 45;
    procedure setMuxBitmask(COM_bitmask: Smallint); dispid 46;
    procedure setValueBitmask(COM_bitmask: Smallint); dispid 47;
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool); dispid 48;
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool); dispid 49;
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool); dispid 50;
    function getTotalGPIOBits: Integer; dispid 51;
    function getDirectionBits: ICoBitSet; dispid 52;
    function getMuxBits: ICoBitSet; dispid 53;
    function getValueBits: ICoBitSet; dispid 54;
    function getValueBit(COM_bitNumber: Integer): Integer; dispid 55;
    function getNumberOfPins: Integer; dispid 56;
    function getIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant): OleVariant; dispid 57;
    procedure setIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant; 
                                              COM_data: OleVariant); dispid 58;
    procedure setMasterClockDivisor(COM_value: Integer); dispid 59;
    function getMasterClockDivisor: Integer; dispid 60;
    procedure setExternalTriggerDelay(COM_counts: Integer); dispid 61;
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double; dispid 62;
    function getExternalTriggerDelayMinimum: Integer; dispid 63;
    function getExternalTriggerDelayMaximum: Integer; dispid 64;
    function getExternalTriggerDelayIncrement: Integer; dispid 65;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 66;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; dispid 68;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; dispid 70;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); dispid 71;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 72;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 74;
    function getWavelengths(COM_index: Integer): OleVariant; dispid 76;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); dispid 77;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; dispid 78;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; dispid 81;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); dispid 82;
    function getStrayLight(COM_index: Integer): Double; dispid 83;
    function isAdvancedVersion: WordBool; dispid 84;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 85;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 86;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 87;
  end;

// *********************************************************************//
// Interface: ICoMethodDescriptorCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0208E80C-9077-5034-90F3-EC97D0394316}
// *********************************************************************//
  ICoMethodDescriptorCollection = interface(IDispatch)
    ['{0208E80C-9077-5034-90F3-EC97D0394316}']
    function Item(index: OleVariant): OleVariant; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const pnewMethodDescriptorCollection: IDispatch); safecall;
    procedure Remove(index: Integer); safecall;
    function Get__NewEnum: IUnknown; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  ICoMethodDescriptorCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0208E80C-9077-5034-90F3-EC97D0394316}
// *********************************************************************//
  ICoMethodDescriptorCollectionDisp = dispinterface
    ['{0208E80C-9077-5034-90F3-EC97D0394316}']
    function Item(index: OleVariant): OleVariant; dispid 0;
    property Count: Integer readonly dispid 1;
    procedure Add(const pnewMethodDescriptorCollection: IDispatch); dispid 2;
    procedure Remove(index: Integer); dispid 3;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// Interface: ICoMultiChannelGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9182B44D-97AE-5D5C-8012-2668E3FF1FE7}
// *********************************************************************//
  ICoMultiChannelGUIProvider = interface(IDispatch)
    ['{9182B44D-97AE-5D5C-8012-2668E3FF1FE7}']
    procedure CreateMultiChannelGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMultiChannelGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9182B44D-97AE-5D5C-8012-2668E3FF1FE7}
// *********************************************************************//
  ICoMultiChannelGUIProviderDisp = dispinterface
    ['{9182B44D-97AE-5D5C-8012-2668E3FF1FE7}']
    procedure CreateMultiChannelGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoMultiChannelImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9B1EAE05-9BA3-527C-8156-2034F81800AC}
// *********************************************************************//
  ICoMultiChannelImpl = interface(IDispatch)
    ['{9B1EAE05-9BA3-527C-8156-2034F81800AC}']
    procedure CreateMultiChannelImplB(const COM_usbInt: ICoUSBInterface; 
                                      const COM_s: ICoADC1000USB; COM_numChans: Integer); safecall;
    function getNumberOfChannels: Integer; safecall;
    function getChannelsPresent: OleVariant; safecall;
    procedure setChannelStatus(COM_index: Integer; COM_status: WordBool); safecall;
    function isChannelPresent(COM_index: Integer): WordBool; safecall;
    function getNumberOfEnabledChannels: Integer; safecall;
    procedure setChannelMux(COM_index: Integer); safecall;
    procedure setChannelPresent(COM_index: Integer; COM_present: WordBool); safecall;
    procedure setDeepWellStatus(COM_present: WordBool); safecall;
    function getChannelIndices: OleVariant; safecall;
    function isDeepWell: WordBool; safecall;
    function isRotatorEnabled: WordBool; safecall;
    procedure setRotatorEnabled(COM_rotatorEnabled: WordBool); safecall;
    function isInterpolationEnabled: WordBool; safecall;
    procedure setInterpolationEnabled(COM_interpolationEnabled: WordBool); safecall;
    procedure addChannelListener(const COM_listener: ICoMultiChannelListener); safecall;
    procedure removeChannelListener(const COM_listener: ICoMultiChannelListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMultiChannelImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9B1EAE05-9BA3-527C-8156-2034F81800AC}
// *********************************************************************//
  ICoMultiChannelImplDisp = dispinterface
    ['{9B1EAE05-9BA3-527C-8156-2034F81800AC}']
    procedure CreateMultiChannelImplB(const COM_usbInt: ICoUSBInterface; 
                                      const COM_s: ICoADC1000USB; COM_numChans: Integer); dispid 1;
    function getNumberOfChannels: Integer; dispid 2;
    function getChannelsPresent: OleVariant; dispid 4;
    procedure setChannelStatus(COM_index: Integer; COM_status: WordBool); dispid 5;
    function isChannelPresent(COM_index: Integer): WordBool; dispid 6;
    function getNumberOfEnabledChannels: Integer; dispid 7;
    procedure setChannelMux(COM_index: Integer); dispid 8;
    procedure setChannelPresent(COM_index: Integer; COM_present: WordBool); dispid 9;
    procedure setDeepWellStatus(COM_present: WordBool); dispid 10;
    function getChannelIndices: OleVariant; dispid 11;
    function isDeepWell: WordBool; dispid 12;
    function isRotatorEnabled: WordBool; dispid 13;
    procedure setRotatorEnabled(COM_rotatorEnabled: WordBool); dispid 14;
    function isInterpolationEnabled: WordBool; dispid 15;
    procedure setInterpolationEnabled(COM_interpolationEnabled: WordBool); dispid 16;
    procedure addChannelListener(const COM_listener: ICoMultiChannelListener); dispid 18;
    procedure removeChannelListener(const COM_listener: ICoMultiChannelListener); dispid 19;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 20;
  end;

// *********************************************************************//
// Interface: ICoMultiChannelImpl_JazNetwork
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29F6DAE1-B3ED-5124-8068-62FBA4C95B39}
// *********************************************************************//
  ICoMultiChannelImpl_JazNetwork = interface(IDispatch)
    ['{29F6DAE1-B3ED-5124-8068-62FBA4C95B39}']
    procedure CreateMultiChannelImpl_JazNetworkB(const COM_jaz: ICoJazNetwork); safecall;
    function getNumberOfChannels: Integer; safecall;
    function getChannelsPresent: OleVariant; safecall;
    function isChannelPresent(COM_index: Integer): WordBool; safecall;
    function getNumberOfEnabledChannels: Integer; safecall;
    function getChannelIndices: OleVariant; safecall;
    procedure setChannelMux(COM_index: Integer); safecall;
    procedure setChannelStatus(COM_index: Integer; COM_status: WordBool); safecall;
    procedure setDeepWellStatus(COM_status: WordBool); safecall;
    procedure setChannelPresent(COM_index: Integer; COM_present: WordBool); safecall;
    function isRotatorEnabled: WordBool; safecall;
    function isDeepWell: WordBool; safecall;
    procedure setRotatorEnabled(COM_enabled: WordBool); safecall;
    function isInterpolationEnabled: WordBool; safecall;
    procedure setInterpolationEnabled(COM_enabled: WordBool); safecall;
    procedure addChannelListener(const COM_listener: ICoMultiChannelListener); safecall;
    procedure removeChannelListener(const COM_listener: ICoMultiChannelListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMultiChannelImpl_JazNetworkDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29F6DAE1-B3ED-5124-8068-62FBA4C95B39}
// *********************************************************************//
  ICoMultiChannelImpl_JazNetworkDisp = dispinterface
    ['{29F6DAE1-B3ED-5124-8068-62FBA4C95B39}']
    procedure CreateMultiChannelImpl_JazNetworkB(const COM_jaz: ICoJazNetwork); dispid 1;
    function getNumberOfChannels: Integer; dispid 2;
    function getChannelsPresent: OleVariant; dispid 3;
    function isChannelPresent(COM_index: Integer): WordBool; dispid 4;
    function getNumberOfEnabledChannels: Integer; dispid 5;
    function getChannelIndices: OleVariant; dispid 7;
    procedure setChannelMux(COM_index: Integer); dispid 8;
    procedure setChannelStatus(COM_index: Integer; COM_status: WordBool); dispid 9;
    procedure setDeepWellStatus(COM_status: WordBool); dispid 10;
    procedure setChannelPresent(COM_index: Integer; COM_present: WordBool); dispid 11;
    function isRotatorEnabled: WordBool; dispid 12;
    function isDeepWell: WordBool; dispid 13;
    procedure setRotatorEnabled(COM_enabled: WordBool); dispid 14;
    function isInterpolationEnabled: WordBool; dispid 15;
    procedure setInterpolationEnabled(COM_enabled: WordBool); dispid 16;
    procedure addChannelListener(const COM_listener: ICoMultiChannelListener); dispid 17;
    procedure removeChannelListener(const COM_listener: ICoMultiChannelListener); dispid 18;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 20;
  end;

// *********************************************************************//
// Interface: ICoMultiChannelImpl_JazUSB
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5571E8B5-ECAB-5B5C-80DA-DB4132CE7767}
// *********************************************************************//
  ICoMultiChannelImpl_JazUSB = interface(IDispatch)
    ['{5571E8B5-ECAB-5B5C-80DA-DB4132CE7767}']
    procedure CreateMultiChannelImpl_JazUSBB(const COM_usbInterface: ICoUSBInterface; 
                                             const COM_jaz: ICoJazUSB); safecall;
    function getNumberOfChannels: Integer; safecall;
    function getChannelsPresent: OleVariant; safecall;
    function isChannelPresent(COM_index: Integer): WordBool; safecall;
    function getNumberOfEnabledChannels: Integer; safecall;
    function getChannelIndices: OleVariant; safecall;
    procedure setChannelMux(COM_index: Integer); safecall;
    procedure setChannelStatus(COM_index: Integer; COM_status: WordBool); safecall;
    procedure setDeepWellStatus(COM_status: WordBool); safecall;
    procedure setChannelPresent(COM_index: Integer; COM_present: WordBool); safecall;
    function isRotatorEnabled: WordBool; safecall;
    function isDeepWell: WordBool; safecall;
    procedure setRotatorEnabled(COM_enabled: WordBool); safecall;
    function isInterpolationEnabled: WordBool; safecall;
    procedure setInterpolationEnabled(COM_enabled: WordBool); safecall;
    procedure addChannelListener(const COM_listener: ICoMultiChannelListener); safecall;
    procedure removeChannelListener(const COM_listener: ICoMultiChannelListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMultiChannelImpl_JazUSBDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5571E8B5-ECAB-5B5C-80DA-DB4132CE7767}
// *********************************************************************//
  ICoMultiChannelImpl_JazUSBDisp = dispinterface
    ['{5571E8B5-ECAB-5B5C-80DA-DB4132CE7767}']
    procedure CreateMultiChannelImpl_JazUSBB(const COM_usbInterface: ICoUSBInterface; 
                                             const COM_jaz: ICoJazUSB); dispid 1;
    function getNumberOfChannels: Integer; dispid 2;
    function getChannelsPresent: OleVariant; dispid 3;
    function isChannelPresent(COM_index: Integer): WordBool; dispid 4;
    function getNumberOfEnabledChannels: Integer; dispid 5;
    function getChannelIndices: OleVariant; dispid 7;
    procedure setChannelMux(COM_index: Integer); dispid 8;
    procedure setChannelStatus(COM_index: Integer; COM_status: WordBool); dispid 9;
    procedure setDeepWellStatus(COM_status: WordBool); dispid 10;
    procedure setChannelPresent(COM_index: Integer; COM_present: WordBool); dispid 11;
    function isRotatorEnabled: WordBool; dispid 12;
    function isDeepWell: WordBool; dispid 13;
    procedure setRotatorEnabled(COM_enabled: WordBool); dispid 14;
    function isInterpolationEnabled: WordBool; dispid 15;
    procedure setInterpolationEnabled(COM_enabled: WordBool); dispid 16;
    procedure addChannelListener(const COM_listener: ICoMultiChannelListener); dispid 17;
    procedure removeChannelListener(const COM_listener: ICoMultiChannelListener); dispid 18;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 20;
  end;

// *********************************************************************//
// Interface: ICoMultiChannelProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C3AAAA6A-1D1A-5145-91B2-A08748468AAB}
// *********************************************************************//
  ICoMultiChannelProvider = interface(IDispatch)
    ['{C3AAAA6A-1D1A-5145-91B2-A08748468AAB}']
    procedure CreateMultiChannelProvider; safecall;
    function getNumberOfChannels: Integer; safecall;
    function getChannelsPresent: OleVariant; safecall;
    function isChannelPresent(COM_param0: Integer): WordBool; safecall;
    function getNumberOfEnabledChannels: Integer; safecall;
    function getChannelIndices: OleVariant; safecall;
    procedure setChannelMux(COM_param0: Integer); safecall;
    procedure setChannelStatus(COM_param0: Integer; COM_param1: WordBool); safecall;
    procedure setDeepWellStatus(COM_param0: WordBool); safecall;
    procedure setChannelPresent(COM_param0: Integer; COM_param1: WordBool); safecall;
    function isRotatorEnabled: WordBool; safecall;
    function isDeepWell: WordBool; safecall;
    procedure setRotatorEnabled(COM_param0: WordBool); safecall;
    function isInterpolationEnabled: WordBool; safecall;
    procedure setInterpolationEnabled(COM_param0: WordBool); safecall;
    procedure addChannelListener(const COM_param0: ICoMultiChannelListener); safecall;
    procedure removeChannelListener(const COM_param0: ICoMultiChannelListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoMultiChannelProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C3AAAA6A-1D1A-5145-91B2-A08748468AAB}
// *********************************************************************//
  ICoMultiChannelProviderDisp = dispinterface
    ['{C3AAAA6A-1D1A-5145-91B2-A08748468AAB}']
    procedure CreateMultiChannelProvider; dispid 1;
    function getNumberOfChannels: Integer; dispid 2;
    function getChannelsPresent: OleVariant; dispid 3;
    function isChannelPresent(COM_param0: Integer): WordBool; dispid 4;
    function getNumberOfEnabledChannels: Integer; dispid 5;
    function getChannelIndices: OleVariant; dispid 7;
    procedure setChannelMux(COM_param0: Integer); dispid 8;
    procedure setChannelStatus(COM_param0: Integer; COM_param1: WordBool); dispid 9;
    procedure setDeepWellStatus(COM_param0: WordBool); dispid 10;
    procedure setChannelPresent(COM_param0: Integer; COM_param1: WordBool); dispid 11;
    function isRotatorEnabled: WordBool; dispid 12;
    function isDeepWell: WordBool; dispid 13;
    procedure setRotatorEnabled(COM_param0: WordBool); dispid 14;
    function isInterpolationEnabled: WordBool; dispid 15;
    procedure setInterpolationEnabled(COM_param0: WordBool); dispid 16;
    procedure addChannelListener(const COM_param0: ICoMultiChannelListener); dispid 17;
    procedure removeChannelListener(const COM_param0: ICoMultiChannelListener); dispid 18;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 19;
  end;

// *********************************************************************//
// Interface: ICoNIR
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {41C53C71-15DE-51C9-9108-5AD662916C6A}
// *********************************************************************//
  ICoNIR = interface(IDispatch)
    ['{41C53C71-15DE-51C9-9108-5AD662916C6A}']
    procedure setEndpoints; safecall;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; safecall;
    procedure CreateNIR; safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    function readStatus: ICoSpectrometerStatus; safecall;
    function readIntegrationTime: Integer; safecall;
    procedure setIntegrationTime(COM_intTime: Integer); safecall;
    function toString: WideString; safecall;
    procedure setHighGain(COM_gain: WordBool); safecall;
    procedure setHighGainDefault(COM_gain: WordBool); safecall;
    function getHighGainDefault: WordBool; safecall;
    procedure setExternalTriggerMode(COM_mode: Integer); safecall;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; safecall;
    procedure setTECEnable(COM_enable: WordBool); safecall;
    procedure setFanEnable(COM_enable: WordBool); safecall;
    function getDetectorTemperatureCelsius: Double; safecall;
    function getDetectorTemperatureSetPointCelsius: Double; safecall;
    procedure setDetectorSetPointCelsius(COM_point: Double); safecall;
    function getSetPointMinimumCelsius: Double; safecall;
    function getSetPointMaximumCelsius: Double; safecall;
    function getSetPointIncrementCelsius: Double; safecall;
    function isSaveTECStateEnabled: WordBool; safecall;
    procedure saveTECState; safecall;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; safecall;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_index: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); safecall;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; safecall;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); safecall;
    function getStrayLight(COM_index: Integer): Double; safecall;
    function getBadPixels: OleVariant; safecall;
    procedure setBadPixels(COM_pixels: OleVariant); safecall;
    function removeBadPixels(const COM_spectrum: ICoSpectrum): ICoSpectrum; safecall;
    function getNumberOfBadPixels: Integer; safecall;
    function getAllPixels: OleVariant; safecall;
    procedure setBadPixelsToSpectrometer; safecall;
    function getBadPixelsFromSpectrometer: OleVariant; safecall;
    function isAdvancedVersion: WordBool; safecall;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoNIRDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {41C53C71-15DE-51C9-9108-5AD662916C6A}
// *********************************************************************//
  ICoNIRDisp = dispinterface
    ['{41C53C71-15DE-51C9-9108-5AD662916C6A}']
    procedure setEndpoints; dispid 1;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; dispid 2;
    procedure CreateNIR; dispid 3;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 4;
    function readStatus: ICoSpectrometerStatus; dispid 5;
    function readIntegrationTime: Integer; dispid 6;
    procedure setIntegrationTime(COM_intTime: Integer); dispid 7;
    function toString: WideString; dispid 8;
    procedure setHighGain(COM_gain: WordBool); dispid 9;
    procedure setHighGainDefault(COM_gain: WordBool); dispid 10;
    function getHighGainDefault: WordBool; dispid 11;
    procedure setExternalTriggerMode(COM_mode: Integer); dispid 12;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; dispid 13;
    procedure setTECEnable(COM_enable: WordBool); dispid 14;
    procedure setFanEnable(COM_enable: WordBool); dispid 15;
    function getDetectorTemperatureCelsius: Double; dispid 16;
    function getDetectorTemperatureSetPointCelsius: Double; dispid 17;
    procedure setDetectorSetPointCelsius(COM_point: Double); dispid 18;
    function getSetPointMinimumCelsius: Double; dispid 19;
    function getSetPointMaximumCelsius: Double; dispid 20;
    function getSetPointIncrementCelsius: Double; dispid 21;
    function isSaveTECStateEnabled: WordBool; dispid 22;
    procedure saveTECState; dispid 23;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 24;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; dispid 26;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; dispid 28;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); dispid 29;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 30;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 32;
    function getWavelengths(COM_index: Integer): OleVariant; dispid 34;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); dispid 35;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; dispid 36;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; dispid 39;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); dispid 40;
    function getStrayLight(COM_index: Integer): Double; dispid 41;
    function getBadPixels: OleVariant; dispid 42;
    procedure setBadPixels(COM_pixels: OleVariant); dispid 43;
    function removeBadPixels(const COM_spectrum: ICoSpectrum): ICoSpectrum; dispid 44;
    function getNumberOfBadPixels: Integer; dispid 45;
    function getAllPixels: OleVariant; dispid 46;
    procedure setBadPixelsToSpectrometer; dispid 47;
    function getBadPixelsFromSpectrometer: OleVariant; dispid 48;
    function isAdvancedVersion: WordBool; dispid 49;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 50;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 51;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 52;
  end;

// *********************************************************************//
// Interface: ICoNIR256
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AFA47AE3-ADE7-5E78-80CC-733933EC2947}
// *********************************************************************//
  ICoNIR256 = interface(IDispatch)
    ['{AFA47AE3-ADE7-5E78-80CC-733933EC2947}']
    procedure CreateNIR256; safecall;
    procedure CreateNIR256B(COM_i: Integer); safecall;
    procedure openSpectrometer(COM_index: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoNIR256Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AFA47AE3-ADE7-5E78-80CC-733933EC2947}
// *********************************************************************//
  ICoNIR256Disp = dispinterface
    ['{AFA47AE3-ADE7-5E78-80CC-733933EC2947}']
    procedure CreateNIR256; dispid 1;
    procedure CreateNIR256B(COM_i: Integer); dispid 2;
    procedure openSpectrometer(COM_index: Integer); dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoNIR512
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4BA509C6-5C1F-5C82-81EF-0E4173BF415C}
// *********************************************************************//
  ICoNIR512 = interface(IDispatch)
    ['{4BA509C6-5C1F-5C82-81EF-0E4173BF415C}']
    procedure CreateNIR512; safecall;
    procedure CreateNIR512B(COM_i: Integer); safecall;
    procedure openSpectrometer(COM_index: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoNIR512Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4BA509C6-5C1F-5C82-81EF-0E4173BF415C}
// *********************************************************************//
  ICoNIR512Disp = dispinterface
    ['{4BA509C6-5C1F-5C82-81EF-0E4173BF415C}']
    procedure CreateNIR512; dispid 1;
    procedure CreateNIR512B(COM_i: Integer); dispid 2;
    procedure openSpectrometer(COM_index: Integer); dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoNIRStatus
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {85640759-9082-5696-91AA-6B9A8F1AA86D}
// *********************************************************************//
  ICoNIRStatus = interface(IDispatch)
    ['{85640759-9082-5696-91AA-6B9A8F1AA86D}']
    procedure CreateNIRStatus; safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoNIRStatusDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {85640759-9082-5696-91AA-6B9A8F1AA86D}
// *********************************************************************//
  ICoNIRStatusDisp = dispinterface
    ['{85640759-9082-5696-91AA-6B9A8F1AA86D}']
    procedure CreateNIRStatus; dispid 1;
    function toString: WideString; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoNetworkSource
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B9D41F53-7C60-5A79-9029-2B7ECC62CA95}
// *********************************************************************//
  ICoNetworkSource = interface(IDispatch)
    ['{B9D41F53-7C60-5A79-9029-2B7ECC62CA95}']
    procedure CreateNetworkSource; safecall;
    procedure connectToSource(const COM_param0: WideString; COM_param1: Integer); safecall;
    function isConnected: WordBool; safecall;
    procedure disconnect; safecall;
    procedure reconnect; safecall;
    function getAddress: WideString; safecall;
    function getPort: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoNetworkSourceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B9D41F53-7C60-5A79-9029-2B7ECC62CA95}
// *********************************************************************//
  ICoNetworkSourceDisp = dispinterface
    ['{B9D41F53-7C60-5A79-9029-2B7ECC62CA95}']
    procedure CreateNetworkSource; dispid 1;
    procedure connectToSource(const COM_param0: WideString; COM_param1: Integer); dispid 2;
    function isConnected: WordBool; dispid 3;
    procedure disconnect; dispid 4;
    procedure reconnect; dispid 5;
    function getAddress: WideString; dispid 6;
    function getPort: Integer; dispid 7;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 8;
  end;

// *********************************************************************//
// Interface: ICoNetworkSourceGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A3691349-112F-5BA6-8066-87149E72D6A0}
// *********************************************************************//
  ICoNetworkSourceGUIProvider = interface(IDispatch)
    ['{A3691349-112F-5BA6-8066-87149E72D6A0}']
    procedure CreateNetworkSourceGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoNetworkSourceGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A3691349-112F-5BA6-8066-87149E72D6A0}
// *********************************************************************//
  ICoNetworkSourceGUIProviderDisp = dispinterface
    ['{A3691349-112F-5BA6-8066-87149E72D6A0}']
    procedure CreateNetworkSourceGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoNetworkSpectrometer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1192C9B1-F263-51AF-81AC-57219033B9DC}
// *********************************************************************//
  ICoNetworkSpectrometer = interface(IDispatch)
    ['{1192C9B1-F263-51AF-81AC-57219033B9DC}']
    procedure CreateNetworkSpectrometer; safecall;
    function getAddress: WideString; safecall;
    function getPort: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoNetworkSpectrometerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1192C9B1-F263-51AF-81AC-57219033B9DC}
// *********************************************************************//
  ICoNetworkSpectrometerDisp = dispinterface
    ['{1192C9B1-F263-51AF-81AC-57219033B9DC}']
    procedure CreateNetworkSpectrometer; dispid 1;
    function getAddress: WideString; dispid 2;
    function getPort: Integer; dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoNetworkSourceImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EA4CB78D-4D2F-55E7-8105-DD2A8B90FDD9}
// *********************************************************************//
  ICoNetworkSourceImpl = interface(IDispatch)
    ['{EA4CB78D-4D2F-55E7-8105-DD2A8B90FDD9}']
    procedure CreateNetworkSourceImplB(const COM_usb: ICoUSBInterface; 
                                       const COM_spec: ICoNetworkSpectrometer); safecall;
    procedure connectToSource(const COM_address: WideString; COM_port: Integer); safecall;
    function isConnected: WordBool; safecall;
    procedure disconnect; safecall;
    procedure reconnect; safecall;
    function getAddress: WideString; safecall;
    function getPort: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoNetworkSourceImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EA4CB78D-4D2F-55E7-8105-DD2A8B90FDD9}
// *********************************************************************//
  ICoNetworkSourceImplDisp = dispinterface
    ['{EA4CB78D-4D2F-55E7-8105-DD2A8B90FDD9}']
    procedure CreateNetworkSourceImplB(const COM_usb: ICoUSBInterface; 
                                       const COM_spec: ICoNetworkSpectrometer); dispid 1;
    procedure connectToSource(const COM_address: WideString; COM_port: Integer); dispid 2;
    function isConnected: WordBool; dispid 3;
    procedure disconnect; dispid 5;
    procedure reconnect; dispid 6;
    function getAddress: WideString; dispid 7;
    function getPort: Integer; dispid 8;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 9;
  end;

// *********************************************************************//
// Interface: ICoNodeGraphCertificate
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {862DF15F-B678-57FB-9098-42E6D4E58235}
// *********************************************************************//
  ICoNodeGraphCertificate = interface(IDispatch)
    ['{862DF15F-B678-57FB-9098-42E6D4E58235}']
    procedure CreateNodeGraphCertificateB(COM_isTransient: WordBool); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoNodeGraphCertificateDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {862DF15F-B678-57FB-9098-42E6D4E58235}
// *********************************************************************//
  ICoNodeGraphCertificateDisp = dispinterface
    ['{862DF15F-B678-57FB-9098-42E6D4E58235}']
    procedure CreateNodeGraphCertificateB(COM_isTransient: WordBool); dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoNonlinearityCorrectionGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5D35F6C2-485A-5B95-8101-4D3891ECA855}
// *********************************************************************//
  ICoNonlinearityCorrectionGUIProvider = interface(IDispatch)
    ['{5D35F6C2-485A-5B95-8101-4D3891ECA855}']
    procedure CreateNonlinearityCorrectionGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoNonlinearityCorrectionGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5D35F6C2-485A-5B95-8101-4D3891ECA855}
// *********************************************************************//
  ICoNonlinearityCorrectionGUIProviderDisp = dispinterface
    ['{5D35F6C2-485A-5B95-8101-4D3891ECA855}']
    procedure CreateNonlinearityCorrectionGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoNonlinearityCorrectionImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6C533F7E-EA4A-5992-9006-1EADA53180E4}
// *********************************************************************//
  ICoNonlinearityCorrectionImpl = interface(IDispatch)
    ['{6C533F7E-EA4A-5992-9006-1EADA53180E4}']
    procedure CreateNonlinearityCorrectionImplB(const COM_usbInt: ICoUSBInterface; 
                                                const COM_s: ICoSpectrometer); safecall;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficientsSingleChannel(COM_channelIndex: Integer): OleVariant; safecall;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_channelIndex: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoNonlinearityCorrectionImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6C533F7E-EA4A-5992-9006-1EADA53180E4}
// *********************************************************************//
  ICoNonlinearityCorrectionImplDisp = dispinterface
    ['{6C533F7E-EA4A-5992-9006-1EADA53180E4}']
    procedure CreateNonlinearityCorrectionImplB(const COM_usbInt: ICoUSBInterface; 
                                                const COM_s: ICoSpectrometer); dispid 1;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 2;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; dispid 4;
    function getNonlinearityCoefficientsSingleChannel(COM_channelIndex: Integer): OleVariant; dispid 6;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_channelIndex: Integer); dispid 7;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 9;
  end;

// *********************************************************************//
// Interface: ICoNonlinearityCorrectionProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EF32F8F3-1554-50C8-9166-03248E3B5C68}
// *********************************************************************//
  ICoNonlinearityCorrectionProvider = interface(IDispatch)
    ['{EF32F8F3-1554-50C8-9166-03248E3B5C68}']
    procedure CreateNonlinearityCorrectionProvider; safecall;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficientsSingleChannel(COM_param0: Integer): OleVariant; safecall;
    procedure setNonlinearityCoefficientsSingleChannel(COM_param0: OleVariant; COM_param1: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoNonlinearityCorrectionProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EF32F8F3-1554-50C8-9166-03248E3B5C68}
// *********************************************************************//
  ICoNonlinearityCorrectionProviderDisp = dispinterface
    ['{EF32F8F3-1554-50C8-9166-03248E3B5C68}']
    procedure CreateNonlinearityCorrectionProvider; dispid 1;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 3;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; dispid 5;
    function getNonlinearityCoefficientsSingleChannel(COM_param0: Integer): OleVariant; dispid 6;
    procedure setNonlinearityCoefficientsSingleChannel(COM_param0: OleVariant; COM_param1: Integer); dispid 7;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 8;
  end;

// *********************************************************************//
// Interface: ICoVector
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9536B4C2-4A00-5D9B-9024-4D9D6274BF5C}
// *********************************************************************//
  ICoVector = interface(IDispatch)
    ['{9536B4C2-4A00-5D9B-9024-4D9D6274BF5C}']
    function capacity: Integer; safecall;
    function hashCode: Integer; safecall;
    function size: Integer; safecall;
    procedure CreateVector; safecall;
    procedure clear; safecall;
    procedure removeAllElements; safecall;
    procedure trimToSize; safecall;
    function isEmpty: WordBool; safecall;
    procedure CreateVectorB(COM_param0: Integer); safecall;
    procedure ensureCapacity(COM_param0: Integer); safecall;
    procedure removeElementAt(COM_param0: Integer); safecall;
    procedure setSize(COM_param0: Integer); safecall;
    procedure CreateVectorC(COM_param0: Integer; COM_param1: Integer); safecall;
    function toString: WideString; safecall;
    function addAll(COM_param0: Integer; const COM_param1: ICoCollection): WordBool; safecall;
    procedure CreateVectorD(const COM_param0: ICoCollection); safecall;
    function addAllB(const COM_param0: ICoCollection): WordBool; safecall;
    function containsAll(const COM_param0: ICoCollection): WordBool; safecall;
    function removeAll(const COM_param0: ICoCollection): WordBool; safecall;
    function retainAll(const COM_param0: ICoCollection): WordBool; safecall;
    function elements: ICoEnumeration; safecall;
    function subList(COM_param0: Integer; COM_param1: Integer): ICoList; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoVectorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9536B4C2-4A00-5D9B-9024-4D9D6274BF5C}
// *********************************************************************//
  ICoVectorDisp = dispinterface
    ['{9536B4C2-4A00-5D9B-9024-4D9D6274BF5C}']
    function capacity: Integer; dispid 1;
    function hashCode: Integer; dispid 2;
    function size: Integer; dispid 3;
    procedure CreateVector; dispid 4;
    procedure clear; dispid 5;
    procedure removeAllElements; dispid 6;
    procedure trimToSize; dispid 7;
    function isEmpty: WordBool; dispid 8;
    procedure CreateVectorB(COM_param0: Integer); dispid 9;
    procedure ensureCapacity(COM_param0: Integer); dispid 10;
    procedure removeElementAt(COM_param0: Integer); dispid 11;
    procedure setSize(COM_param0: Integer); dispid 12;
    procedure CreateVectorC(COM_param0: Integer; COM_param1: Integer); dispid 13;
    function toString: WideString; dispid 14;
    function addAll(COM_param0: Integer; const COM_param1: ICoCollection): WordBool; dispid 15;
    procedure CreateVectorD(const COM_param0: ICoCollection); dispid 16;
    function addAllB(const COM_param0: ICoCollection): WordBool; dispid 17;
    function containsAll(const COM_param0: ICoCollection): WordBool; dispid 18;
    function removeAll(const COM_param0: ICoCollection): WordBool; dispid 19;
    function retainAll(const COM_param0: ICoCollection): WordBool; dispid 20;
    function elements: ICoEnumeration; dispid 21;
    function subList(COM_param0: Integer; COM_param1: Integer): ICoList; dispid 22;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 23;
  end;

// *********************************************************************//
// Interface: ICoSpectrumCertificate
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4B64E62D-FDDE-5759-8138-AC34EE15C9EE}
// *********************************************************************//
  ICoSpectrumCertificate = interface(IDispatch)
    ['{4B64E62D-FDDE-5759-8138-AC34EE15C9EE}']
    procedure CreateSpectrumCertificateC(const COM_that: ICoSpectrumCertificate); safecall;
    function getSourceID: Integer; safecall;
    function getTimestamp: ICoHighResTimeStamp; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrumCertificateDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4B64E62D-FDDE-5759-8138-AC34EE15C9EE}
// *********************************************************************//
  ICoSpectrumCertificateDisp = dispinterface
    ['{4B64E62D-FDDE-5759-8138-AC34EE15C9EE}']
    procedure CreateSpectrumCertificateC(const COM_that: ICoSpectrumCertificate); dispid 1;
    function getSourceID: Integer; dispid 2;
    function getTimestamp: ICoHighResTimeStamp; dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoOmniSpectrum
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1F7B97F9-4446-59F5-80B4-7B99C0F74302}
// *********************************************************************//
  ICoOmniSpectrum = interface(IDispatch)
    ['{1F7B97F9-4446-59F5-80B4-7B99C0F74302}']
    procedure CreateOmniSpectrumB(const COM_omniSpectrum: ICoOmniSpectrum); safecall;
    procedure CreateOmniSpectrumC(const COM_spectrometerChannelInfo: ICoSpectrometerChannelInfo); safecall;
    procedure CreateOmniSpectrumD(const COM_spectrometerChannelInfo: ICoSpectrometerChannelInfo; 
                                  COM_spectrum: OleVariant; COM_saturated: WordBool; 
                                  COM_integrationTime: Integer; 
                                  const COM_acquisitionTime: ICoHighResTimeStamp; 
                                  COM_boxcarWidth: Integer; COM_scansToAverage: Integer; 
                                  COM_correctForElectricalDark: WordBool; 
                                  COM_correctForNonLinearity: WordBool; 
                                  COM_correctForStrayLight: WordBool; COM_strobeEnabled: WordBool; 
                                  COM_strobeDelay: Integer; COM_rotationEnabled: WordBool; 
                                  const COM_userName: WideString); safecall;
    function getCopyWithUniqueCertificates: ICoOmniSpectrum; safecall;
    function isSaturated: WordBool; safecall;
    procedure setSaturated(COM_saturated: WordBool); safecall;
    function getIntegrationTime: Integer; safecall;
    procedure setIntegrationTime(COM_integrationTime: Integer); safecall;
    function isStrobeEnabled: WordBool; safecall;
    procedure setStrobeEnabled(COM_strobeEnabled: WordBool); safecall;
    function getStrobeDelay: Integer; safecall;
    procedure setStrobeDelay(COM_strobeDelay: Integer); safecall;
    function getPixelValues: OleVariant; safecall;
    procedure setPixelValues(COM_pixelValues: OleVariant); safecall;
    function getAcquisitionTime: ICoHighResTimeStamp; safecall;
    procedure setAcquisitionTime(const COM_acquisitionTime: ICoHighResTimeStamp); safecall;
    function getBoxcarWidth: Integer; safecall;
    procedure setBoxcarWidth(COM_boxcarWidth: Integer); safecall;
    function getScansToAverage: Integer; safecall;
    procedure setScanToAverage(COM_scansToAverage: Integer); safecall;
    function isCorrectForElectricalDark: WordBool; safecall;
    procedure setCorrectForElectricalDark(COM_correctForElectricalDark: WordBool); safecall;
    function isCorrectForNonLinearity: WordBool; safecall;
    procedure setCorrectForNonLinearity(COM_correctForNonLinearity: WordBool); safecall;
    function isCorrectForStrayLight: WordBool; safecall;
    procedure setCorrectForStrayLight(COM_correctForStrayLight: WordBool); safecall;
    function isRotationEnabled: WordBool; safecall;
    procedure setRotationEnabled(COM_rotationEnabled: WordBool); safecall;
    function getUserName: WideString; safecall;
    procedure setUserName(const COM_userName: WideString); safecall;
    function getCertificates: ICoVector; safecall;
    procedure addCertificate(const COM_certificate: ICoSpectrumCertificate); safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoOmniSpectrumDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1F7B97F9-4446-59F5-80B4-7B99C0F74302}
// *********************************************************************//
  ICoOmniSpectrumDisp = dispinterface
    ['{1F7B97F9-4446-59F5-80B4-7B99C0F74302}']
    procedure CreateOmniSpectrumB(const COM_omniSpectrum: ICoOmniSpectrum); dispid 1;
    procedure CreateOmniSpectrumC(const COM_spectrometerChannelInfo: ICoSpectrometerChannelInfo); dispid 2;
    procedure CreateOmniSpectrumD(const COM_spectrometerChannelInfo: ICoSpectrometerChannelInfo; 
                                  COM_spectrum: OleVariant; COM_saturated: WordBool; 
                                  COM_integrationTime: Integer; 
                                  const COM_acquisitionTime: ICoHighResTimeStamp; 
                                  COM_boxcarWidth: Integer; COM_scansToAverage: Integer; 
                                  COM_correctForElectricalDark: WordBool; 
                                  COM_correctForNonLinearity: WordBool; 
                                  COM_correctForStrayLight: WordBool; COM_strobeEnabled: WordBool; 
                                  COM_strobeDelay: Integer; COM_rotationEnabled: WordBool; 
                                  const COM_userName: WideString); dispid 3;
    function getCopyWithUniqueCertificates: ICoOmniSpectrum; dispid 4;
    function isSaturated: WordBool; dispid 5;
    procedure setSaturated(COM_saturated: WordBool); dispid 6;
    function getIntegrationTime: Integer; dispid 7;
    procedure setIntegrationTime(COM_integrationTime: Integer); dispid 8;
    function isStrobeEnabled: WordBool; dispid 9;
    procedure setStrobeEnabled(COM_strobeEnabled: WordBool); dispid 10;
    function getStrobeDelay: Integer; dispid 11;
    procedure setStrobeDelay(COM_strobeDelay: Integer); dispid 12;
    function getPixelValues: OleVariant; dispid 13;
    procedure setPixelValues(COM_pixelValues: OleVariant); dispid 14;
    function getAcquisitionTime: ICoHighResTimeStamp; dispid 15;
    procedure setAcquisitionTime(const COM_acquisitionTime: ICoHighResTimeStamp); dispid 16;
    function getBoxcarWidth: Integer; dispid 17;
    procedure setBoxcarWidth(COM_boxcarWidth: Integer); dispid 18;
    function getScansToAverage: Integer; dispid 19;
    procedure setScanToAverage(COM_scansToAverage: Integer); dispid 20;
    function isCorrectForElectricalDark: WordBool; dispid 21;
    procedure setCorrectForElectricalDark(COM_correctForElectricalDark: WordBool); dispid 22;
    function isCorrectForNonLinearity: WordBool; dispid 23;
    procedure setCorrectForNonLinearity(COM_correctForNonLinearity: WordBool); dispid 24;
    function isCorrectForStrayLight: WordBool; dispid 25;
    procedure setCorrectForStrayLight(COM_correctForStrayLight: WordBool); dispid 26;
    function isRotationEnabled: WordBool; dispid 27;
    procedure setRotationEnabled(COM_rotationEnabled: WordBool); dispid 28;
    function getUserName: WideString; dispid 29;
    procedure setUserName(const COM_userName: WideString); dispid 30;
    function getCertificates: ICoVector; dispid 31;
    procedure addCertificate(const COM_certificate: ICoSpectrumCertificate); dispid 32;
    function toString: WideString; dispid 33;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 34;
  end;

// *********************************************************************//
// Interface: ICoOpCodes
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CE335C38-FE52-5CCF-81CC-E5F9468CC8D1}
// *********************************************************************//
  ICoOpCodes = interface(IDispatch)
    ['{CE335C38-FE52-5CCF-81CC-E5F9468CC8D1}']
    procedure CreateOpCodes; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoOpCodesDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CE335C38-FE52-5CCF-81CC-E5F9468CC8D1}
// *********************************************************************//
  ICoOpCodesDisp = dispinterface
    ['{CE335C38-FE52-5CCF-81CC-E5F9468CC8D1}']
    procedure CreateOpCodes; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoPlugInProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BA05620E-002E-5031-9186-00659D3D0D44}
// *********************************************************************//
  ICoPlugInProvider = interface(IDispatch)
    ['{BA05620E-002E-5031-9186-00659D3D0D44}']
    procedure CreatePlugInProvider; safecall;
    function getPlugIns: ICoSpectrometerPlugInCollection; safecall;
    function initializePlugIns: OleVariant; safecall;
    procedure detectPlugIns; safecall;
    function isPlugInDetected(COM_param0: Integer): WordBool; safecall;
    function getNumberOfPlugIns: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoPlugInProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BA05620E-002E-5031-9186-00659D3D0D44}
// *********************************************************************//
  ICoPlugInProviderDisp = dispinterface
    ['{BA05620E-002E-5031-9186-00659D3D0D44}']
    procedure CreatePlugInProvider; dispid 1;
    function getPlugIns: ICoSpectrometerPlugInCollection; dispid 2;
    function initializePlugIns: OleVariant; dispid 3;
    procedure detectPlugIns; dispid 4;
    function isPlugInDetected(COM_param0: Integer): WordBool; dispid 5;
    function getNumberOfPlugIns: Integer; dispid 6;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 7;
  end;

// *********************************************************************//
// Interface: ICoPlugInProviderImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {10CDF3FA-265B-5540-9009-D06919A56D60}
// *********************************************************************//
  ICoPlugInProviderImpl = interface(IDispatch)
    ['{10CDF3FA-265B-5540-9009-D06919A56D60}']
    procedure CreatePlugInProviderImplB(const COM_usbInt: ICoUSBInterface; 
                                        const COM_spec: ICoSpectrometer); safecall;
    procedure detectPlugIns; safecall;
    function getNumberOfPlugIns: Integer; safecall;
    function initializePlugIns: OleVariant; safecall;
    function isPlugInDetected(COM_id: Integer): WordBool; safecall;
    function getPlugIns: ICoSpectrometerPlugInCollection; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoPlugInProviderImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {10CDF3FA-265B-5540-9009-D06919A56D60}
// *********************************************************************//
  ICoPlugInProviderImplDisp = dispinterface
    ['{10CDF3FA-265B-5540-9009-D06919A56D60}']
    procedure CreatePlugInProviderImplB(const COM_usbInt: ICoUSBInterface; 
                                        const COM_spec: ICoSpectrometer); dispid 1;
    procedure detectPlugIns; dispid 2;
    function getNumberOfPlugIns: Integer; dispid 3;
    function initializePlugIns: OleVariant; dispid 4;
    function isPlugInDetected(COM_id: Integer): WordBool; dispid 5;
    function getPlugIns: ICoSpectrometerPlugInCollection; dispid 6;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 7;
  end;

// *********************************************************************//
// Interface: ICoPlugInProviderImplFPGA
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {94F32959-DA59-5995-8003-61F995A945F5}
// *********************************************************************//
  ICoPlugInProviderImplFPGA = interface(IDispatch)
    ['{94F32959-DA59-5995-8003-61F995A945F5}']
    procedure CreatePlugInProviderImplFPGAB(const COM_usbInt: ICoUSBInterface; 
                                            const COM_spec: ICoSpectrometer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoPlugInProviderImplFPGADisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {94F32959-DA59-5995-8003-61F995A945F5}
// *********************************************************************//
  ICoPlugInProviderImplFPGADisp = dispinterface
    ['{94F32959-DA59-5995-8003-61F995A945F5}']
    procedure CreatePlugInProviderImplFPGAB(const COM_usbInt: ICoUSBInterface; 
                                            const COM_spec: ICoSpectrometer); dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoPlugInProviderImplNonFPGA
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1210590D-22B7-5F2E-81D1-17F9A6FBD036}
// *********************************************************************//
  ICoPlugInProviderImplNonFPGA = interface(IDispatch)
    ['{1210590D-22B7-5F2E-81D1-17F9A6FBD036}']
    procedure CreatePlugInProviderImplNonFPGAB(const COM_usbInt: ICoUSBInterface; 
                                               const COM_spec: ICoSpectrometer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoPlugInProviderImplNonFPGADisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1210590D-22B7-5F2E-81D1-17F9A6FBD036}
// *********************************************************************//
  ICoPlugInProviderImplNonFPGADisp = dispinterface
    ['{1210590D-22B7-5F2E-81D1-17F9A6FBD036}']
    procedure CreatePlugInProviderImplNonFPGAB(const COM_usbInt: ICoUSBInterface; 
                                               const COM_spec: ICoSpectrometer); dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoPollingTest
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {47E5B508-0437-5381-913E-2EFDA7CD6C44}
// *********************************************************************//
  ICoPollingTest = interface(IDispatch)
    ['{47E5B508-0437-5381-913E-2EFDA7CD6C44}']
    procedure CreatePollingTest; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoPollingTestDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {47E5B508-0437-5381-913E-2EFDA7CD6C44}
// *********************************************************************//
  ICoPollingTestDisp = dispinterface
    ['{47E5B508-0437-5381-913E-2EFDA7CD6C44}']
    procedure CreatePollingTest; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoQE65000
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D014CDA0-509A-5093-9110-1DE328D403DA}
// *********************************************************************//
  ICoQE65000 = interface(IDispatch)
    ['{D014CDA0-509A-5093-9110-1DE328D403DA}']
    procedure CreateQE65000; safecall;
    procedure CreateQE65000B(COM_i: Integer); safecall;
    procedure setEndpoints; safecall;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; safecall;
    procedure openSpectrometer(COM_index: Integer); safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    procedure setStrobeDelay(COM_delay: Integer); safecall;
    function getActualIntegrationTime: Integer; safecall;
    function getPlugIns: ICoSpectrometerPlugInCollection; safecall;
    function getNumberOfPlugIns: Integer; safecall;
    function isPlugInDetected(COM_id: Integer): WordBool; safecall;
    function initializePlugIns: OleVariant; safecall;
    procedure detectPlugIns; safecall;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer; safecall;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant; safecall;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; safecall;
    function getPSOCVersion: WideString; safecall;
    function getFPGAFirmwareVersion: WideString; safecall;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; safecall;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); safecall;
    function getContinuousStrobeDelayMinimum: Integer; safecall;
    function getContinuousStrobeDelayMaximum: Integer; safecall;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; safecall;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer); safecall;
    function getIntegrationTimeBaseClock: Integer; safecall;
    function getIntegrationClockTimer: Integer; safecall;
    function getAdvancedIntegrationTimeMinimum: Integer; safecall;
    function getAdvancedIntegrationTimeMaximum: Integer; safecall;
    function getAdvancedIntegrationTimeIncrement: Integer; safecall;
    procedure setExternalTriggerMode(COM_mode: Integer); safecall;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; safecall;
    procedure setShutterClock(COM_value: Integer); safecall;
    function getShutterClock: Integer; safecall;
    procedure setSingleStrobeLow(COM_value: Integer); safecall;
    procedure setSingleStrobeHigh(COM_value: Integer); safecall;
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double; safecall;
    function getSingleStrobeLow: Integer; safecall;
    function getSingleStrobeHigh: Integer; safecall;
    function getSingleStrobeMinimum: Integer; safecall;
    function getSingleStrobeMaximum: Integer; safecall;
    function getSingleStrobeIncrement: Integer; safecall;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setValueAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setDirectionBitmask(COM_bitmask: Smallint); safecall;
    procedure setMuxBitmask(COM_bitmask: Smallint); safecall;
    procedure setValueBitmask(COM_bitmask: Smallint); safecall;
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool); safecall;
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool); safecall;
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool); safecall;
    function getTotalGPIOBits: Integer; safecall;
    function getDirectionBits: ICoBitSet; safecall;
    function getMuxBits: ICoBitSet; safecall;
    function getValueBits: ICoBitSet; safecall;
    function getValueBit(COM_bitNumber: Integer): Integer; safecall;
    function getNumberOfPins: Integer; safecall;
    function getBoardTemperatureCelsius: Double; safecall;
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant; safecall;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant); safecall;
    procedure setMasterClockDivisor(COM_value: Integer); safecall;
    function getMasterClockDivisor: Integer; safecall;
    procedure setExternalTriggerDelay(COM_counts: Integer); safecall;
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double; safecall;
    function getExternalTriggerDelayMinimum: Integer; safecall;
    function getExternalTriggerDelayMaximum: Integer; safecall;
    function getExternalTriggerDelayIncrement: Integer; safecall;
    procedure setTECEnable(COM_enable: WordBool); safecall;
    procedure setFanEnable(COM_enable: WordBool); safecall;
    function getDetectorTemperatureCelsius: Double; safecall;
    function getDetectorTemperatureSetPointCelsius: Double; safecall;
    procedure setDetectorSetPointCelsius(COM_point: Double); safecall;
    function getSetPointMinimumCelsius: Double; safecall;
    function getSetPointMaximumCelsius: Double; safecall;
    function getSetPointIncrementCelsius: Double; safecall;
    function isSaveTECStateEnabled: WordBool; safecall;
    procedure saveTECState; safecall;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; safecall;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_index: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); safecall;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; safecall;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); safecall;
    function getStrayLight(COM_index: Integer): Double; safecall;
    function isAdvancedVersion: WordBool; safecall;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    function getSpectrometer: ICoQE65000; safecall;
    procedure addExposureListener(const COM_listener: ICoExposureListener); safecall;
    function getCcdWidth: Integer; safecall;
    function getCcdHeight: Integer; safecall;
    function getLastExposure: ICoSpectrometerExposure; safecall;
    procedure removeExposureListener(const COM_listener: ICoExposureListener); safecall;
    function getQE65000Exposure(const COM_spectrum: ICoSpectrum): ICoSpectrometerExposure; safecall;
    procedure set2DMode(COM_channelIndex: Integer); safecall;
    procedure set1DMode(COM_channelIndex: Integer); safecall;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; safecall;
    function has1DMode: WordBool; safecall;
    function is1DMode: WordBool; safecall;
    function is2DMode: WordBool; safecall;
    function get2DintegrationTime: Integer; safecall;
    procedure addIntegrationTimeChangeListener(const COM_listener: ICoIntegrationTimeChangeListener); safecall;
    procedure removeIntegrationTimeChangeListener(const COM_listener: ICoIntegrationTimeChangeListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoQE65000Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D014CDA0-509A-5093-9110-1DE328D403DA}
// *********************************************************************//
  ICoQE65000Disp = dispinterface
    ['{D014CDA0-509A-5093-9110-1DE328D403DA}']
    procedure CreateQE65000; dispid 1;
    procedure CreateQE65000B(COM_i: Integer); dispid 2;
    procedure setEndpoints; dispid 3;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; dispid 4;
    procedure openSpectrometer(COM_index: Integer); dispid 5;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 6;
    procedure setStrobeDelay(COM_delay: Integer); dispid 7;
    function getActualIntegrationTime: Integer; dispid 8;
    function getPlugIns: ICoSpectrometerPlugInCollection; dispid 9;
    function getNumberOfPlugIns: Integer; dispid 10;
    function isPlugInDetected(COM_id: Integer): WordBool; dispid 11;
    function initializePlugIns: OleVariant; dispid 12;
    procedure detectPlugIns; dispid 13;
    function setI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant; 
                         COM_i2C: OleVariant): Integer; dispid 14;
    function getI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant): OleVariant; dispid 15;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; dispid 16;
    function getPSOCVersion: WideString; dispid 17;
    function getFPGAFirmwareVersion: WideString; dispid 18;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; dispid 19;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); dispid 20;
    function getContinuousStrobeDelayMinimum: Integer; dispid 21;
    function getContinuousStrobeDelayMaximum: Integer; dispid 22;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; dispid 23;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer); dispid 24;
    function getIntegrationTimeBaseClock: Integer; dispid 25;
    function getIntegrationClockTimer: Integer; dispid 26;
    function getAdvancedIntegrationTimeMinimum: Integer; dispid 27;
    function getAdvancedIntegrationTimeMaximum: Integer; dispid 28;
    function getAdvancedIntegrationTimeIncrement: Integer; dispid 29;
    procedure setExternalTriggerMode(COM_mode: Integer); dispid 30;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; dispid 31;
    procedure setShutterClock(COM_value: Integer); dispid 32;
    function getShutterClock: Integer; dispid 33;
    procedure setSingleStrobeLow(COM_value: Integer); dispid 34;
    procedure setSingleStrobeHigh(COM_value: Integer); dispid 35;
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double; dispid 36;
    function getSingleStrobeLow: Integer; dispid 37;
    function getSingleStrobeHigh: Integer; dispid 38;
    function getSingleStrobeMinimum: Integer; dispid 39;
    function getSingleStrobeMaximum: Integer; dispid 40;
    function getSingleStrobeIncrement: Integer; dispid 41;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet); dispid 42;
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet); dispid 43;
    procedure setValueAllBits(const COM_bitSet: ICoBitSet); dispid 44;
    procedure setDirectionBitmask(COM_bitmask: Smallint); dispid 45;
    procedure setMuxBitmask(COM_bitmask: Smallint); dispid 46;
    procedure setValueBitmask(COM_bitmask: Smallint); dispid 47;
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool); dispid 48;
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool); dispid 49;
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool); dispid 50;
    function getTotalGPIOBits: Integer; dispid 51;
    function getDirectionBits: ICoBitSet; dispid 52;
    function getMuxBits: ICoBitSet; dispid 53;
    function getValueBits: ICoBitSet; dispid 54;
    function getValueBit(COM_bitNumber: Integer): Integer; dispid 55;
    function getNumberOfPins: Integer; dispid 56;
    function getBoardTemperatureCelsius: Double; dispid 57;
    function getIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant): OleVariant; dispid 58;
    procedure setIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant; 
                                              COM_data: OleVariant); dispid 59;
    procedure setMasterClockDivisor(COM_value: Integer); dispid 60;
    function getMasterClockDivisor: Integer; dispid 61;
    procedure setExternalTriggerDelay(COM_counts: Integer); dispid 62;
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double; dispid 63;
    function getExternalTriggerDelayMinimum: Integer; dispid 64;
    function getExternalTriggerDelayMaximum: Integer; dispid 65;
    function getExternalTriggerDelayIncrement: Integer; dispid 66;
    procedure setTECEnable(COM_enable: WordBool); dispid 67;
    procedure setFanEnable(COM_enable: WordBool); dispid 68;
    function getDetectorTemperatureCelsius: Double; dispid 69;
    function getDetectorTemperatureSetPointCelsius: Double; dispid 70;
    procedure setDetectorSetPointCelsius(COM_point: Double); dispid 71;
    function getSetPointMinimumCelsius: Double; dispid 72;
    function getSetPointMaximumCelsius: Double; dispid 73;
    function getSetPointIncrementCelsius: Double; dispid 74;
    function isSaveTECStateEnabled: WordBool; dispid 75;
    procedure saveTECState; dispid 76;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 77;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; dispid 79;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; dispid 81;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); dispid 82;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 83;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 85;
    function getWavelengths(COM_index: Integer): OleVariant; dispid 87;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); dispid 88;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; dispid 89;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; dispid 92;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); dispid 93;
    function getStrayLight(COM_index: Integer): Double; dispid 94;
    function isAdvancedVersion: WordBool; dispid 95;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 96;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 97;
    function getSpectrometer: ICoQE65000; dispid 98;
    procedure addExposureListener(const COM_listener: ICoExposureListener); dispid 99;
    function getCcdWidth: Integer; dispid 100;
    function getCcdHeight: Integer; dispid 101;
    function getLastExposure: ICoSpectrometerExposure; dispid 102;
    procedure removeExposureListener(const COM_listener: ICoExposureListener); dispid 103;
    function getQE65000Exposure(const COM_spectrum: ICoSpectrum): ICoSpectrometerExposure; dispid 104;
    procedure set2DMode(COM_channelIndex: Integer); dispid 105;
    procedure set1DMode(COM_channelIndex: Integer); dispid 106;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; dispid 107;
    function has1DMode: WordBool; dispid 108;
    function is1DMode: WordBool; dispid 109;
    function is2DMode: WordBool; dispid 110;
    function get2DintegrationTime: Integer; dispid 111;
    procedure addIntegrationTimeChangeListener(const COM_listener: ICoIntegrationTimeChangeListener); dispid 112;
    procedure removeIntegrationTimeChangeListener(const COM_listener: ICoIntegrationTimeChangeListener); dispid 113;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 114;
  end;

// *********************************************************************//
// Interface: ICoRamanExposure
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {69CDC3E8-3D8B-5036-812A-7BBCBAA07E3B}
// *********************************************************************//
  ICoRamanExposure = interface(IDispatch)
    ['{69CDC3E8-3D8B-5036-812A-7BBCBAA07E3B}']
    procedure CreateRamanExposureB(const COM_source: ICoMMSRaman); safecall;
    function getShutterState: Shortint; safecall;
    procedure setShutterState(COM_shutterState: Shortint); safecall;
    function getExposureType: Shortint; safecall;
    procedure setExposureType(COM_exposureType: Shortint); safecall;
    function getExposuresToAverage: Smallint; safecall;
    procedure setExposuresToAverage(COM_exposuresToAverage: Smallint); safecall;
    function getStrExposureType: WideString; safecall;
    function getBitsPerPixel: Integer; safecall;
    procedure setBitsPerPixel(COM_bitsPerPixel: Integer); safecall;
    function getExposureTime: Integer; safecall;
    procedure setExposureTime(COM_exposureTime: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoRamanExposureDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {69CDC3E8-3D8B-5036-812A-7BBCBAA07E3B}
// *********************************************************************//
  ICoRamanExposureDisp = dispinterface
    ['{69CDC3E8-3D8B-5036-812A-7BBCBAA07E3B}']
    procedure CreateRamanExposureB(const COM_source: ICoMMSRaman); dispid 1;
    function getShutterState: {??Shortint}OleVariant; dispid 2;
    procedure setShutterState(COM_shutterState: {??Shortint}OleVariant); dispid 3;
    function getExposureType: {??Shortint}OleVariant; dispid 4;
    procedure setExposureType(COM_exposureType: {??Shortint}OleVariant); dispid 5;
    function getExposuresToAverage: Smallint; dispid 6;
    procedure setExposuresToAverage(COM_exposuresToAverage: Smallint); dispid 7;
    function getStrExposureType: WideString; dispid 10;
    function getBitsPerPixel: Integer; dispid 11;
    procedure setBitsPerPixel(COM_bitsPerPixel: Integer); dispid 12;
    function getExposureTime: Integer; dispid 13;
    procedure setExposureTime(COM_exposureTime: Integer); dispid 14;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 15;
  end;

// *********************************************************************//
// Interface: ICoRamanReconstruction
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F79FA1CF-503A-53D3-81A7-A7E540A2D095}
// *********************************************************************//
  ICoRamanReconstruction = interface(IDispatch)
    ['{F79FA1CF-503A-53D3-81A7-A7E540A2D095}']
    procedure CreateRamanReconstruction; safecall;
    function getAlgorithm: Shortint; safecall;
    procedure setAlgorithm(COM_algorithm: Shortint); safecall;
    function getReconstructionType: Shortint; safecall;
    procedure setReconstructionType(COM_reconstructionType: Shortint); safecall;
    function isSaturated: WordBool; safecall;
    procedure setSaturated(COM_saturated: WordBool); safecall;
    function getIntensities: OleVariant; safecall;
    procedure setIntensities(COM_intensities: OleVariant); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoRamanReconstructionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F79FA1CF-503A-53D3-81A7-A7E540A2D095}
// *********************************************************************//
  ICoRamanReconstructionDisp = dispinterface
    ['{F79FA1CF-503A-53D3-81A7-A7E540A2D095}']
    procedure CreateRamanReconstruction; dispid 1;
    function getAlgorithm: {??Shortint}OleVariant; dispid 2;
    procedure setAlgorithm(COM_algorithm: {??Shortint}OleVariant); dispid 3;
    function getReconstructionType: {??Shortint}OleVariant; dispid 4;
    procedure setReconstructionType(COM_reconstructionType: {??Shortint}OleVariant); dispid 5;
    function isSaturated: WordBool; dispid 6;
    procedure setSaturated(COM_saturated: WordBool); dispid 7;
    function getIntensities: OleVariant; dispid 8;
    procedure setIntensities(COM_intensities: OleVariant); dispid 9;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 10;
  end;

// *********************************************************************//
// Interface: ICoRawData
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DD079D1B-2F76-5870-91FE-BEB990D8B826}
// *********************************************************************//
  ICoRawData = interface(IDispatch)
    ['{DD079D1B-2F76-5870-91FE-BEB990D8B826}']
    procedure CreateRawDataB(COM_numBytes: Integer); safecall;
    function getData: OleVariant; safecall;
    procedure setData(COM_data: OleVariant); safecall;
    function getStartTime: Integer; safecall;
    procedure setStartTime(COM_startTime: Integer); safecall;
    function getEndTime: Integer; safecall;
    procedure setEndTime(COM_endTime: Integer); safecall;
    function getRequestingChannel: Integer; safecall;
    procedure setRequestingChannel(COM_requestingChannel: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoRawDataDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DD079D1B-2F76-5870-91FE-BEB990D8B826}
// *********************************************************************//
  ICoRawDataDisp = dispinterface
    ['{DD079D1B-2F76-5870-91FE-BEB990D8B826}']
    procedure CreateRawDataB(COM_numBytes: Integer); dispid 1;
    function getData: OleVariant; dispid 2;
    procedure setData(COM_data: OleVariant); dispid 3;
    function getStartTime: Integer; dispid 4;
    procedure setStartTime(COM_startTime: Integer); dispid 5;
    function getEndTime: Integer; dispid 6;
    procedure setEndTime(COM_endTime: Integer); dispid 7;
    function getRequestingChannel: Integer; dispid 8;
    procedure setRequestingChannel(COM_requestingChannel: Integer); dispid 9;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 10;
  end;

// *********************************************************************//
// Interface: ICoSAS
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F4688BAB-EBBE-56FE-906B-0883E463072F}
// *********************************************************************//
  ICoSAS = interface(IDispatch)
    ['{F4688BAB-EBBE-56FE-906B-0883E463072F}']
    procedure CreateSAS; safecall;
    procedure CreateSASB(COM_i: Integer); safecall;
    procedure setEndpoints; safecall;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; safecall;
    procedure openSpectrometer(COM_index: Integer); safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; safecall;
    function getSpectrumB: ICoSpectrum; safecall;
    function getStatus: ICoSpectrometerStatus; safecall;
    function readIntegrationTime: Integer; safecall;
    function toString: WideString; safecall;
    procedure setExternalTriggerMode(COM_mode: Integer); safecall;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; safecall;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; safecall;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_index: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); safecall;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; safecall;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); safecall;
    function getStrayLight(COM_index: Integer): Double; safecall;
    function isAdvancedVersion: WordBool; safecall;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSASDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {F4688BAB-EBBE-56FE-906B-0883E463072F}
// *********************************************************************//
  ICoSASDisp = dispinterface
    ['{F4688BAB-EBBE-56FE-906B-0883E463072F}']
    procedure CreateSAS; dispid 1;
    procedure CreateSASB(COM_i: Integer); dispid 2;
    procedure setEndpoints; dispid 3;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; dispid 4;
    procedure openSpectrometer(COM_index: Integer); dispid 5;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 6;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; dispid 7;
    function getSpectrumB: ICoSpectrum; dispid 8;
    function getStatus: ICoSpectrometerStatus; dispid 9;
    function readIntegrationTime: Integer; dispid 10;
    function toString: WideString; dispid 11;
    procedure setExternalTriggerMode(COM_mode: Integer); dispid 12;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; dispid 13;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 14;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; dispid 16;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; dispid 18;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); dispid 19;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 20;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 22;
    function getWavelengths(COM_index: Integer): OleVariant; dispid 24;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); dispid 25;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; dispid 26;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; dispid 29;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); dispid 30;
    function getStrayLight(COM_index: Integer): Double; dispid 31;
    function isAdvancedVersion: WordBool; dispid 32;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 33;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 34;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 35;
  end;

// *********************************************************************//
// Interface: ICoSASChannel
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D3C1BA2E-2EC6-5F48-8000-2D5DA1388A2A}
// *********************************************************************//
  ICoSASChannel = interface(IDispatch)
    ['{D3C1BA2E-2EC6-5F48-8000-2D5DA1388A2A}']
    procedure CreateSASChannelB(const COM_spectrometer: ICoSpectrometer; 
                                const COM_coefficients: ICoCoefficients; COM_channel: Integer); safecall;
    procedure getCoefficientsFromSpectrometer; safecall;
    procedure setCoefficients; safecall;
    procedure setWavelengthCalibration; safecall;
    function getEndingWavelength: Double; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSASChannelDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D3C1BA2E-2EC6-5F48-8000-2D5DA1388A2A}
// *********************************************************************//
  ICoSASChannelDisp = dispinterface
    ['{D3C1BA2E-2EC6-5F48-8000-2D5DA1388A2A}']
    procedure CreateSASChannelB(const COM_spectrometer: ICoSpectrometer; 
                                const COM_coefficients: ICoCoefficients; COM_channel: Integer); dispid 1;
    procedure getCoefficientsFromSpectrometer; dispid 2;
    procedure setCoefficients; dispid 3;
    procedure setWavelengthCalibration; dispid 4;
    function getEndingWavelength: Double; dispid 5;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 6;
  end;

// *********************************************************************//
// Interface: ICoSHA
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9EC03059-14A0-55F6-9156-EE43EEA2E59E}
// *********************************************************************//
  ICoSHA = interface(IDispatch)
    ['{9EC03059-14A0-55F6-9156-EE43EEA2E59E}']
    procedure CreateSHA; safecall;
    function isHyperAdapterPresent: WordBool; safecall;
    function setHyperAdapterDAC(COM_param0: Double): Integer; safecall;
    function readHyperAdapterEEPROM(COM_param0: OleVariant; COM_param1: Integer; COM_param2: Integer): Integer; safecall;
    function writeHyperAdapterEEPROM(COM_param0: OleVariant; COM_param1: Integer; 
                                     COM_param2: Integer): Integer; safecall;
    procedure initSHA(const COM_param0: ICoSHAChannel); safecall;
    procedure calibrate; safecall;
    function getCalibrationTime: Double; safecall;
    procedure restoreCalibration; safecall;
    function getSHAChannel: ICoSHAChannel; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSHADisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9EC03059-14A0-55F6-9156-EE43EEA2E59E}
// *********************************************************************//
  ICoSHADisp = dispinterface
    ['{9EC03059-14A0-55F6-9156-EE43EEA2E59E}']
    procedure CreateSHA; dispid 1;
    function isHyperAdapterPresent: WordBool; dispid 2;
    function setHyperAdapterDAC(COM_param0: Double): Integer; dispid 3;
    function readHyperAdapterEEPROM(COM_param0: OleVariant; COM_param1: Integer; COM_param2: Integer): Integer; dispid 4;
    function writeHyperAdapterEEPROM(COM_param0: OleVariant; COM_param1: Integer; 
                                     COM_param2: Integer): Integer; dispid 5;
    procedure initSHA(const COM_param0: ICoSHAChannel); dispid 6;
    procedure calibrate; dispid 7;
    function getCalibrationTime: Double; dispid 8;
    procedure restoreCalibration; dispid 9;
    function getSHAChannel: ICoSHAChannel; dispid 10;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 11;
  end;

// *********************************************************************//
// Interface: ICoSHAConstants
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E2CB4AC8-03D2-51A4-904B-395C0C7D32AD}
// *********************************************************************//
  ICoSHAConstants = interface(IDispatch)
    ['{E2CB4AC8-03D2-51A4-904B-395C0C7D32AD}']
    procedure CreateSHAConstants; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSHAConstantsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E2CB4AC8-03D2-51A4-904B-395C0C7D32AD}
// *********************************************************************//
  ICoSHAConstantsDisp = dispinterface
    ['{E2CB4AC8-03D2-51A4-904B-395C0C7D32AD}']
    procedure CreateSHAConstants; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoSHAGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {155CA90B-643F-5CD8-906A-02BEF31B1C1D}
// *********************************************************************//
  ICoSHAGUIProvider = interface(IDispatch)
    ['{155CA90B-643F-5CD8-906A-02BEF31B1C1D}']
    procedure CreateSHAGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSHAGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {155CA90B-643F-5CD8-906A-02BEF31B1C1D}
// *********************************************************************//
  ICoSHAGUIProviderDisp = dispinterface
    ['{155CA90B-643F-5CD8-906A-02BEF31B1C1D}']
    procedure CreateSHAGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoSHAImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7527BE21-E906-5F50-91BD-DBA03303CE69}
// *********************************************************************//
  ICoSHAImpl = interface(IDispatch)
    ['{7527BE21-E906-5F50-91BD-DBA03303CE69}']
    procedure CreateSHAImplB(const COM_usbInt: ICoUSBInterface; 
                             const COM_spectrometer: ICoSpectrometer); safecall;
    function isHyperAdapterPresent: WordBool; safecall;
    procedure initSHA(const COM_channel: ICoSHAChannel); safecall;
    function setHyperAdapterDAC(COM_voltage: Double): Integer; safecall;
    function readHyperAdapterEEPROM(COM_data: OleVariant; COM_start: Integer; COM_length: Integer): Integer; safecall;
    function writeHyperAdapterEEPROM(COM_data: OleVariant; COM_start: Integer; COM_length: Integer): Integer; safecall;
    procedure calibrate; safecall;
    procedure restoreCalibration; safecall;
    function getCalibrationTime: Double; safecall;
    function getSHAChannel: ICoSHAChannel; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSHAImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7527BE21-E906-5F50-91BD-DBA03303CE69}
// *********************************************************************//
  ICoSHAImplDisp = dispinterface
    ['{7527BE21-E906-5F50-91BD-DBA03303CE69}']
    procedure CreateSHAImplB(const COM_usbInt: ICoUSBInterface; 
                             const COM_spectrometer: ICoSpectrometer); dispid 1;
    function isHyperAdapterPresent: WordBool; dispid 2;
    procedure initSHA(const COM_channel: ICoSHAChannel); dispid 3;
    function setHyperAdapterDAC(COM_voltage: Double): Integer; dispid 4;
    function readHyperAdapterEEPROM(COM_data: OleVariant; COM_start: Integer; COM_length: Integer): Integer; dispid 5;
    function writeHyperAdapterEEPROM(COM_data: OleVariant; COM_start: Integer; COM_length: Integer): Integer; dispid 6;
    procedure calibrate; dispid 7;
    procedure restoreCalibration; dispid 8;
    function getCalibrationTime: Double; dispid 9;
    function getSHAChannel: ICoSHAChannel; dispid 10;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 12;
  end;

// *********************************************************************//
// Interface: ICoSPIBus
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {71A80A36-04A8-5747-91C9-42651B1B46AE}
// *********************************************************************//
  ICoSPIBus = interface(IDispatch)
    ['{71A80A36-04A8-5747-91C9-42651B1B46AE}']
    procedure CreateSPIBus; safecall;
    function getSPIBytes(COM_param0: OleVariant; COM_param1: Integer): OleVariant; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSPIBusDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {71A80A36-04A8-5747-91C9-42651B1B46AE}
// *********************************************************************//
  ICoSPIBusDisp = dispinterface
    ['{71A80A36-04A8-5747-91C9-42651B1B46AE}']
    procedure CreateSPIBus; dispid 1;
    function getSPIBytes(COM_param0: OleVariant; COM_param1: Integer): OleVariant; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoSPIBusGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1CFFD3AA-C819-5548-9151-60A1E3C59B54}
// *********************************************************************//
  ICoSPIBusGUIProvider = interface(IDispatch)
    ['{1CFFD3AA-C819-5548-9151-60A1E3C59B54}']
    procedure CreateSPIBusGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSPIBusGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1CFFD3AA-C819-5548-9151-60A1E3C59B54}
// *********************************************************************//
  ICoSPIBusGUIProviderDisp = dispinterface
    ['{1CFFD3AA-C819-5548-9151-60A1E3C59B54}']
    procedure CreateSPIBusGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoSPIBusImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E0E698A5-2594-53E6-9013-B2B9A5250DE2}
// *********************************************************************//
  ICoSPIBusImpl = interface(IDispatch)
    ['{E0E698A5-2594-53E6-9013-B2B9A5250DE2}']
    procedure CreateSPIBusImplB(const COM_usbInt: ICoUSBInterface); safecall;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSPIBusImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E0E698A5-2594-53E6-9013-B2B9A5250DE2}
// *********************************************************************//
  ICoSPIBusImplDisp = dispinterface
    ['{E0E698A5-2594-53E6-9013-B2B9A5250DE2}']
    procedure CreateSPIBusImplB(const COM_usbInt: ICoUSBInterface); dispid 1;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoSPIBusImplFPGA
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AD6703AA-5F53-550E-91E3-8946270E6657}
// *********************************************************************//
  ICoSPIBusImplFPGA = interface(IDispatch)
    ['{AD6703AA-5F53-550E-91E3-8946270E6657}']
    procedure CreateSPIBusImplFPGAB(const COM_usb: ICoUSBInterface); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSPIBusImplFPGADisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AD6703AA-5F53-550E-91E3-8946270E6657}
// *********************************************************************//
  ICoSPIBusImplFPGADisp = dispinterface
    ['{AD6703AA-5F53-550E-91E3-8946270E6657}']
    procedure CreateSPIBusImplFPGAB(const COM_usb: ICoUSBInterface); dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoSPIBusImplNonFPGA
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29964F0D-DA69-5F19-8176-A7382D1FCA6F}
// *********************************************************************//
  ICoSPIBusImplNonFPGA = interface(IDispatch)
    ['{29964F0D-DA69-5F19-8176-A7382D1FCA6F}']
    procedure CreateSPIBusImplNonFPGAB(const COM_usb: ICoUSBInterface); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSPIBusImplNonFPGADisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29964F0D-DA69-5F19-8176-A7382D1FCA6F}
// *********************************************************************//
  ICoSPIBusImplNonFPGADisp = dispinterface
    ['{29964F0D-DA69-5F19-8176-A7382D1FCA6F}']
    procedure CreateSPIBusImplNonFPGAB(const COM_usb: ICoUSBInterface); dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoShutterClock
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4E8D34A9-55A5-5AF6-8182-014DB346B329}
// *********************************************************************//
  ICoShutterClock = interface(IDispatch)
    ['{4E8D34A9-55A5-5AF6-8182-014DB346B329}']
    procedure CreateShutterClock; safecall;
    function getShutterClock: Integer; safecall;
    procedure setShutterClock(COM_param0: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoShutterClockDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4E8D34A9-55A5-5AF6-8182-014DB346B329}
// *********************************************************************//
  ICoShutterClockDisp = dispinterface
    ['{4E8D34A9-55A5-5AF6-8182-014DB346B329}']
    procedure CreateShutterClock; dispid 1;
    function getShutterClock: Integer; dispid 2;
    procedure setShutterClock(COM_param0: Integer); dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoShutterClockImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0337B03A-5AE8-5A11-90A5-8B480D65FCAD}
// *********************************************************************//
  ICoShutterClockImpl = interface(IDispatch)
    ['{0337B03A-5AE8-5A11-90A5-8B480D65FCAD}']
    procedure CreateShutterClockImplB(const COM_usbInt: ICoUSBInterface); safecall;
    function getShutterClock: Integer; safecall;
    procedure setShutterClock(COM_value: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoShutterClockImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0337B03A-5AE8-5A11-90A5-8B480D65FCAD}
// *********************************************************************//
  ICoShutterClockImplDisp = dispinterface
    ['{0337B03A-5AE8-5A11-90A5-8B480D65FCAD}']
    procedure CreateShutterClockImplB(const COM_usbInt: ICoUSBInterface); dispid 1;
    function getShutterClock: Integer; dispid 2;
    procedure setShutterClock(COM_value: Integer); dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoSimulation
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CBD7A4D7-F502-5A5A-80E7-8EB77987257B}
// *********************************************************************//
  ICoSimulation = interface(IDispatch)
    ['{CBD7A4D7-F502-5A5A-80E7-8EB77987257B}']
    procedure CreateSimulationB(COM_i: Integer); safecall;
    procedure openSpectrometer(COM_index: Integer); safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; safecall;
    procedure setNumberOfPixels(COM_pixels: Integer; COM_dark: Integer); safecall;
    procedure setSpectrumType(COM_type: Integer); safecall;
    function getTest(const COM_test: WideString): WideString; safecall;
    function getSerialNumber: WideString; safecall;
    function getFirmwareVersion: WideString; safecall;
    procedure setStrobeEnable(COM_strobe: WordBool); safecall;
    procedure setIntegrationTime(COM_intTime: Integer); safecall;
    procedure closeSpectrometer; safecall;
    function getInfo(COM_slot: Integer): WideString; safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_index: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSimulationDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CBD7A4D7-F502-5A5A-80E7-8EB77987257B}
// *********************************************************************//
  ICoSimulationDisp = dispinterface
    ['{CBD7A4D7-F502-5A5A-80E7-8EB77987257B}']
    procedure CreateSimulationB(COM_i: Integer); dispid 1;
    procedure openSpectrometer(COM_index: Integer); dispid 2;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 3;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; dispid 4;
    procedure setNumberOfPixels(COM_pixels: Integer; COM_dark: Integer); dispid 5;
    procedure setSpectrumType(COM_type: Integer); dispid 6;
    function getTest(const COM_test: WideString): WideString; dispid 7;
    function getSerialNumber: WideString; dispid 8;
    function getFirmwareVersion: WideString; dispid 9;
    procedure setStrobeEnable(COM_strobe: WordBool); dispid 10;
    procedure setIntegrationTime(COM_intTime: Integer); dispid 11;
    procedure closeSpectrometer; dispid 12;
    function getInfo(COM_slot: Integer): WideString; dispid 13;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 14;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 16;
    function getWavelengths(COM_index: Integer): OleVariant; dispid 18;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); dispid 19;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 20;
  end;

// *********************************************************************//
// Interface: ICoSimulationChannel
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {52D2C5EB-FCC8-5E52-81F9-9021AF1C8BEB}
// *********************************************************************//
  ICoSimulationChannel = interface(IDispatch)
    ['{52D2C5EB-FCC8-5E52-81F9-9021AF1C8BEB}']
    procedure CreateSimulationChannelB(const COM_s: ICoSpectrometer; const COM_c: ICoCoefficients; 
                                       COM_i: Integer); safecall;
    procedure getCoefficientsFromSpectrometer; safecall;
    procedure fixNumberOfPixels; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSimulationChannelDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {52D2C5EB-FCC8-5E52-81F9-9021AF1C8BEB}
// *********************************************************************//
  ICoSimulationChannelDisp = dispinterface
    ['{52D2C5EB-FCC8-5E52-81F9-9021AF1C8BEB}']
    procedure CreateSimulationChannelB(const COM_s: ICoSpectrometer; const COM_c: ICoCoefficients; 
                                       COM_i: Integer); dispid 1;
    procedure getCoefficientsFromSpectrometer; dispid 2;
    procedure fixNumberOfPixels; dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoSimulationGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {00152669-793A-5EB1-9079-7386D2E1A966}
// *********************************************************************//
  ICoSimulationGUIProvider = interface(IDispatch)
    ['{00152669-793A-5EB1-9079-7386D2E1A966}']
    procedure CreateSimulationGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSimulationGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {00152669-793A-5EB1-9079-7386D2E1A966}
// *********************************************************************//
  ICoSimulationGUIProviderDisp = dispinterface
    ['{00152669-793A-5EB1-9079-7386D2E1A966}']
    procedure CreateSimulationGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoSimulationImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D9BED1D4-F814-509D-90A7-6ED7E35BD7DF}
// *********************************************************************//
  ICoSimulationImpl = interface(IDispatch)
    ['{D9BED1D4-F814-509D-90A7-6ED7E35BD7DF}']
    procedure CreateSimulationImplB(const COM_s: ICoSimulation); safecall;
    procedure setNumberOfPixels(COM_pixels: Integer; COM_dark: Integer); safecall;
    procedure setSpectrumType(COM_type: Integer); safecall;
    function getNumberOfPixels: Integer; safecall;
    function getNumberOfDarkPixels: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSimulationImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D9BED1D4-F814-509D-90A7-6ED7E35BD7DF}
// *********************************************************************//
  ICoSimulationImplDisp = dispinterface
    ['{D9BED1D4-F814-509D-90A7-6ED7E35BD7DF}']
    procedure CreateSimulationImplB(const COM_s: ICoSimulation); dispid 1;
    procedure setNumberOfPixels(COM_pixels: Integer; COM_dark: Integer); dispid 2;
    procedure setSpectrumType(COM_type: Integer); dispid 3;
    function getNumberOfPixels: Integer; dispid 4;
    function getNumberOfDarkPixels: Integer; dispid 5;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 7;
  end;

// *********************************************************************//
// Interface: ICoSimulationProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7BEB43FA-9C11-588D-8091-46E672BB6BC9}
// *********************************************************************//
  ICoSimulationProvider = interface(IDispatch)
    ['{7BEB43FA-9C11-588D-8091-46E672BB6BC9}']
    procedure CreateSimulationProvider; safecall;
    procedure setNumberOfPixels(COM_param0: Integer; COM_param1: Integer); safecall;
    procedure setSpectrumType(COM_param0: Integer); safecall;
    function getNumberOfPixels: Integer; safecall;
    function getNumberOfDarkPixels: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSimulationProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7BEB43FA-9C11-588D-8091-46E672BB6BC9}
// *********************************************************************//
  ICoSimulationProviderDisp = dispinterface
    ['{7BEB43FA-9C11-588D-8091-46E672BB6BC9}']
    procedure CreateSimulationProvider; dispid 1;
    procedure setNumberOfPixels(COM_param0: Integer; COM_param1: Integer); dispid 2;
    procedure setSpectrumType(COM_param0: Integer); dispid 3;
    function getNumberOfPixels: Integer; dispid 4;
    function getNumberOfDarkPixels: Integer; dispid 5;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 6;
  end;

// *********************************************************************//
// Interface: ICoSingleStrobe
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {10ACB7B6-A940-5C4D-9067-E7FE66F4CBFC}
// *********************************************************************//
  ICoSingleStrobe = interface(IDispatch)
    ['{10ACB7B6-A940-5C4D-9067-E7FE66F4CBFC}']
    procedure CreateSingleStrobe; safecall;
    function getSingleStrobeHigh: Integer; safecall;
    procedure setSingleStrobeHigh(COM_param0: Integer); safecall;
    function getSingleStrobeLow: Integer; safecall;
    procedure setSingleStrobeLow(COM_param0: Integer); safecall;
    function getSingleStrobeMinimum: Integer; safecall;
    function getSingleStrobeMaximum: Integer; safecall;
    function getSingleStrobeIncrement: Integer; safecall;
    function getSingleStrobeCountsToMicros(COM_param0: Integer): Double; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSingleStrobeDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {10ACB7B6-A940-5C4D-9067-E7FE66F4CBFC}
// *********************************************************************//
  ICoSingleStrobeDisp = dispinterface
    ['{10ACB7B6-A940-5C4D-9067-E7FE66F4CBFC}']
    procedure CreateSingleStrobe; dispid 1;
    function getSingleStrobeHigh: Integer; dispid 2;
    procedure setSingleStrobeHigh(COM_param0: Integer); dispid 3;
    function getSingleStrobeLow: Integer; dispid 4;
    procedure setSingleStrobeLow(COM_param0: Integer); dispid 5;
    function getSingleStrobeMinimum: Integer; dispid 6;
    function getSingleStrobeMaximum: Integer; dispid 7;
    function getSingleStrobeIncrement: Integer; dispid 8;
    function getSingleStrobeCountsToMicros(COM_param0: Integer): Double; dispid 9;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 10;
  end;

// *********************************************************************//
// Interface: ICoSingleStrobeGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4995AAF7-CCD7-5FC6-9005-8C65548592E7}
// *********************************************************************//
  ICoSingleStrobeGUIProvider = interface(IDispatch)
    ['{4995AAF7-CCD7-5FC6-9005-8C65548592E7}']
    procedure CreateSingleStrobeGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSingleStrobeGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4995AAF7-CCD7-5FC6-9005-8C65548592E7}
// *********************************************************************//
  ICoSingleStrobeGUIProviderDisp = dispinterface
    ['{4995AAF7-CCD7-5FC6-9005-8C65548592E7}']
    procedure CreateSingleStrobeGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoSingleStrobeImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1E307F05-9DFA-595B-81B6-59923DB58E72}
// *********************************************************************//
  ICoSingleStrobeImpl = interface(IDispatch)
    ['{1E307F05-9DFA-595B-81B6-59923DB58E72}']
    procedure CreateSingleStrobeImplB(const COM_usbInt: ICoUSBInterface); safecall;
    function getSingleStrobeHigh: Integer; safecall;
    function getSingleStrobeLow: Integer; safecall;
    procedure setSingleStrobeHigh(COM_value: Integer); safecall;
    procedure setSingleStrobeLow(COM_value: Integer); safecall;
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double; safecall;
    function getSingleStrobeIncrement: Integer; safecall;
    function getSingleStrobeMaximum: Integer; safecall;
    function getSingleStrobeMinimum: Integer; safecall;
    procedure masterClockChanged(COM_newValue: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSingleStrobeImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1E307F05-9DFA-595B-81B6-59923DB58E72}
// *********************************************************************//
  ICoSingleStrobeImplDisp = dispinterface
    ['{1E307F05-9DFA-595B-81B6-59923DB58E72}']
    procedure CreateSingleStrobeImplB(const COM_usbInt: ICoUSBInterface); dispid 1;
    function getSingleStrobeHigh: Integer; dispid 2;
    function getSingleStrobeLow: Integer; dispid 3;
    procedure setSingleStrobeHigh(COM_value: Integer); dispid 4;
    procedure setSingleStrobeLow(COM_value: Integer); dispid 5;
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double; dispid 6;
    function getSingleStrobeIncrement: Integer; dispid 7;
    function getSingleStrobeMaximum: Integer; dispid 8;
    function getSingleStrobeMinimum: Integer; dispid 9;
    procedure masterClockChanged(COM_newValue: Integer); dispid 10;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 12;
  end;

// *********************************************************************//
// Interface: ICoSpectrumListener
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B97C3247-573E-562A-91B7-208374E8B74D}
// *********************************************************************//
  ICoSpectrumListener = interface(IDispatch)
    ['{B97C3247-573E-562A-91B7-208374E8B74D}']
    procedure CreateSpectrumListener; safecall;
    procedure newSpectrum(const COM_param0: ICoSpectrum); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrumListenerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B97C3247-573E-562A-91B7-208374E8B74D}
// *********************************************************************//
  ICoSpectrumListenerDisp = dispinterface
    ['{B97C3247-573E-562A-91B7-208374E8B74D}']
    procedure CreateSpectrumListener; dispid 1;
    procedure newSpectrum(const COM_param0: ICoSpectrum); dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoSpectrumProducer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {24ECF802-2C5A-5853-918B-940E3A6C80A5}
// *********************************************************************//
  ICoSpectrumProducer = interface(IDispatch)
    ['{24ECF802-2C5A-5853-918B-940E3A6C80A5}']
    procedure CreateSpectrumProducer; safecall;
    procedure addSpectrumListener(const COM_param0: ICoSpectrumListener); safecall;
    procedure removeSpectrumListener(const COM_param0: ICoSpectrumListener); safecall;
    function getSpectrum(const COM_param0: ICoSpectrum): ICoSpectrum; safecall;
    function getNumberOfPixels: Integer; safecall;
    function getNumberOfDarkPixels: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrumProducerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {24ECF802-2C5A-5853-918B-940E3A6C80A5}
// *********************************************************************//
  ICoSpectrumProducerDisp = dispinterface
    ['{24ECF802-2C5A-5853-918B-940E3A6C80A5}']
    procedure CreateSpectrumProducer; dispid 1;
    procedure addSpectrumListener(const COM_param0: ICoSpectrumListener); dispid 2;
    procedure removeSpectrumListener(const COM_param0: ICoSpectrumListener); dispid 3;
    function getSpectrum(const COM_param0: ICoSpectrum): ICoSpectrum; dispid 4;
    function getNumberOfPixels: Integer; dispid 5;
    function getNumberOfDarkPixels: Integer; dispid 6;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 7;
  end;

// *********************************************************************//
// Interface: ICoSpectrumHandler
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {04DDEF76-081F-5F81-81B4-9AE8CB2AC482}
// *********************************************************************//
  ICoSpectrumHandler = interface(IDispatch)
    ['{04DDEF76-081F-5F81-81B4-9AE8CB2AC482}']
    procedure CreateSpectrumHandler; safecall;
    procedure CreateSpectrumHandlerB(COM_numLightPixels: Integer; COM_numDarkPixels: Integer); safecall;
    function getMaximumQueueSize: Integer; safecall;
    procedure setMaximumQueueSize(COM_maximumQueueSize: Integer); safecall;
    function getProcessingMode: Integer; safecall;
    procedure setProcessingMode(COM_processingMode: Integer); safecall;
    procedure newSpectrum(const COM_spectrum: ICoSpectrum); safecall;
    procedure setSource(const COM_producer: ICoSpectrumProducer); safecall;
    procedure removeSource(const COM_producer: ICoSpectrumProducer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrumHandlerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {04DDEF76-081F-5F81-81B4-9AE8CB2AC482}
// *********************************************************************//
  ICoSpectrumHandlerDisp = dispinterface
    ['{04DDEF76-081F-5F81-81B4-9AE8CB2AC482}']
    procedure CreateSpectrumHandler; dispid 1;
    procedure CreateSpectrumHandlerB(COM_numLightPixels: Integer; COM_numDarkPixels: Integer); dispid 2;
    function getMaximumQueueSize: Integer; dispid 3;
    procedure setMaximumQueueSize(COM_maximumQueueSize: Integer); dispid 4;
    function getProcessingMode: Integer; dispid 5;
    procedure setProcessingMode(COM_processingMode: Integer); dispid 6;
    procedure newSpectrum(const COM_spectrum: ICoSpectrum); dispid 7;
    procedure setSource(const COM_producer: ICoSpectrumProducer); dispid 8;
    procedure removeSource(const COM_producer: ICoSpectrumProducer); dispid 9;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 10;
  end;

// *********************************************************************//
// Interface: ICoSpectralProcessor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0323DA99-3493-586A-80F3-60A320B96758}
// *********************************************************************//
  ICoSpectralProcessor = interface(IDispatch)
    ['{0323DA99-3493-586A-80F3-60A320B96758}']
    procedure CreateSpectralProcessorB(const COM_channel: ICoSpectrometerChannel; 
                                       COM_daemon: WordBool); safecall;
    procedure destroyProcessor; safecall;
    function getOmniSpectrum: ICoOmniSpectrum; safecall;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; safecall;
    procedure processSpectrum(const COM_spectrum: ICoSpectrum); safecall;
    procedure stopAveraging; safecall;
    procedure boxcarAverage(const COM_spectrum: ICoSpectrum); safecall;
    procedure correctForStrayLight(const COM_spectrum: ICoSpectrum); safecall;
    procedure correctForElectricalDarkSignal(const COM_spectrum: ICoSpectrum); safecall;
    procedure correctForDetectorNonlinearity(const COM_spectrum: ICoSpectrum); safecall;
    function getScansToAverage: Integer; safecall;
    procedure setScansToAverage(COM_scansToAverage: Integer); safecall;
    function isCorrectForDetectorNonlinearity: WordBool; safecall;
    procedure setCorrectForDetectorNonlinearity(COM_correctForDetectorNonlinearity: WordBool); safecall;
    function getSmoothingWindowSize: Integer; safecall;
    procedure setSmoothingWindowSize(COM_newSmoothingWindowSize: Integer); safecall;
    function isCorrectForElectricalDark: WordBool; safecall;
    procedure setCorrectForElectricalDark(COM_correctForElectricalDark: WordBool); safecall;
    function isCorrectForStrayLight: WordBool; safecall;
    procedure setCorrectForStrayLight(COM_correctForStrayLight: WordBool); safecall;
    function getSmoothingWindowWeights: OleVariant; safecall;
    procedure setSmoothingWindowWeights(COM_smoothingWindowWeights: OleVariant); safecall;
    procedure setDarkSpectrum(const COM_dark: ICoOmniSpectrum); safecall;
    function getExternalTriggerMode: Integer; safecall;
    procedure setExternalTriggerMode(COM_mode: Integer); safecall;
    function getIntegrationTime: Integer; safecall;
    procedure setIntegrationTime(COM_newIntegrationTime: Integer); safecall;
    function getStrobeEnable: WordBool; safecall;
    function getAutoToggleStrobeLampEnable: WordBool; safecall;
    procedure setStrobeEnable(COM_enable: WordBool); safecall;
    procedure setAutoToggleStrobeLampEnable(COM_enable: WordBool); safecall;
    function getStrobeDelay: Integer; safecall;
    procedure setStrobeDelay(COM_newDelay: Integer); safecall;
    procedure setParameters(COM_sta: Integer; COM_ced: WordBool; COM_cnl: WordBool; 
                            COM_csl: WordBool; COM_bcw: Integer; COM_it: Integer; COM_se: WordBool; 
                            COM_sd: Integer; COM_etm: Integer; COM_atl: WordBool); safecall;
    function getSpectrometerChannel: ICoSpectrometerChannel; safecall;
    procedure attachSource(const COM_source: ICoSpectrumHandler); safecall;
    procedure detachSource; safecall;
    procedure stop; safecall;
    procedure finalize; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectralProcessorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0323DA99-3493-586A-80F3-60A320B96758}
// *********************************************************************//
  ICoSpectralProcessorDisp = dispinterface
    ['{0323DA99-3493-586A-80F3-60A320B96758}']
    procedure CreateSpectralProcessorB(const COM_channel: ICoSpectrometerChannel; 
                                       COM_daemon: WordBool); dispid 1;
    procedure destroyProcessor; dispid 2;
    function getOmniSpectrum: ICoOmniSpectrum; dispid 3;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum; dispid 4;
    procedure processSpectrum(const COM_spectrum: ICoSpectrum); dispid 5;
    procedure stopAveraging; dispid 6;
    procedure boxcarAverage(const COM_spectrum: ICoSpectrum); dispid 7;
    procedure correctForStrayLight(const COM_spectrum: ICoSpectrum); dispid 8;
    procedure correctForElectricalDarkSignal(const COM_spectrum: ICoSpectrum); dispid 9;
    procedure correctForDetectorNonlinearity(const COM_spectrum: ICoSpectrum); dispid 10;
    function getScansToAverage: Integer; dispid 11;
    procedure setScansToAverage(COM_scansToAverage: Integer); dispid 12;
    function isCorrectForDetectorNonlinearity: WordBool; dispid 13;
    procedure setCorrectForDetectorNonlinearity(COM_correctForDetectorNonlinearity: WordBool); dispid 14;
    function getSmoothingWindowSize: Integer; dispid 15;
    procedure setSmoothingWindowSize(COM_newSmoothingWindowSize: Integer); dispid 16;
    function isCorrectForElectricalDark: WordBool; dispid 17;
    procedure setCorrectForElectricalDark(COM_correctForElectricalDark: WordBool); dispid 18;
    function isCorrectForStrayLight: WordBool; dispid 19;
    procedure setCorrectForStrayLight(COM_correctForStrayLight: WordBool); dispid 20;
    function getSmoothingWindowWeights: OleVariant; dispid 21;
    procedure setSmoothingWindowWeights(COM_smoothingWindowWeights: OleVariant); dispid 22;
    procedure setDarkSpectrum(const COM_dark: ICoOmniSpectrum); dispid 23;
    function getExternalTriggerMode: Integer; dispid 24;
    procedure setExternalTriggerMode(COM_mode: Integer); dispid 25;
    function getIntegrationTime: Integer; dispid 26;
    procedure setIntegrationTime(COM_newIntegrationTime: Integer); dispid 27;
    function getStrobeEnable: WordBool; dispid 28;
    function getAutoToggleStrobeLampEnable: WordBool; dispid 29;
    procedure setStrobeEnable(COM_enable: WordBool); dispid 30;
    procedure setAutoToggleStrobeLampEnable(COM_enable: WordBool); dispid 31;
    function getStrobeDelay: Integer; dispid 32;
    procedure setStrobeDelay(COM_newDelay: Integer); dispid 33;
    procedure setParameters(COM_sta: Integer; COM_ced: WordBool; COM_cnl: WordBool; 
                            COM_csl: WordBool; COM_bcw: Integer; COM_it: Integer; COM_se: WordBool; 
                            COM_sd: Integer; COM_etm: Integer; COM_atl: WordBool); dispid 34;
    function getSpectrometerChannel: ICoSpectrometerChannel; dispid 35;
    procedure attachSource(const COM_source: ICoSpectrumHandler); dispid 36;
    procedure detachSource; dispid 37;
    procedure stop; dispid 38;
    procedure finalize; dispid 39;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 40;
  end;

// *********************************************************************//
// Interface: ICoSpectrometerAssembly
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CF0B23E7-EDAC-51F2-80FB-815DF8344C51}
// *********************************************************************//
  ICoSpectrometerAssembly = interface(IDispatch)
    ['{CF0B23E7-EDAC-51F2-80FB-815DF8344C51}']
    procedure CreateSpectrometerAssemblyB(const COM_spectrometerObject: ICoSpectrometer); safecall;
    procedure closeSpectrometer; safecall;
    function getChannel(COM_channelIndex: Integer): ICoSpectrometerChannel; safecall;
    function getSpectralProcessor(COM_channelIndex: Integer): ICoSpectralProcessor; safecall;
    function getSpectrometer: ICoSpectrometer; safecall;
    procedure setSaturationState(COM_channelIndex: Integer; COM_saturationFlag: WordBool); safecall;
    function getSaturationState(COM_channelIndex: Integer): WordBool; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrometerAssemblyDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CF0B23E7-EDAC-51F2-80FB-815DF8344C51}
// *********************************************************************//
  ICoSpectrometerAssemblyDisp = dispinterface
    ['{CF0B23E7-EDAC-51F2-80FB-815DF8344C51}']
    procedure CreateSpectrometerAssemblyB(const COM_spectrometerObject: ICoSpectrometer); dispid 1;
    procedure closeSpectrometer; dispid 2;
    function getChannel(COM_channelIndex: Integer): ICoSpectrometerChannel; dispid 3;
    function getSpectralProcessor(COM_channelIndex: Integer): ICoSpectralProcessor; dispid 4;
    function getSpectrometer: ICoSpectrometer; dispid 5;
    procedure setSaturationState(COM_channelIndex: Integer; COM_saturationFlag: WordBool); dispid 6;
    function getSaturationState(COM_channelIndex: Integer): WordBool; dispid 7;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 8;
  end;

// *********************************************************************//
// Interface: ICoSpectrometerCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AD7728B2-6007-5641-903C-498F3795A197}
// *********************************************************************//
  ICoSpectrometerCollection = interface(IDispatch)
    ['{AD7728B2-6007-5641-903C-498F3795A197}']
    function Item(index: OleVariant): OleVariant; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const pnewSpectrometerCollection: IDispatch); safecall;
    procedure Remove(index: Integer); safecall;
    function Get__NewEnum: IUnknown; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrometerCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AD7728B2-6007-5641-903C-498F3795A197}
// *********************************************************************//
  ICoSpectrometerCollectionDisp = dispinterface
    ['{AD7728B2-6007-5641-903C-498F3795A197}']
    function Item(index: OleVariant): OleVariant; dispid 0;
    property Count: Integer readonly dispid 1;
    procedure Add(const pnewSpectrometerCollection: IDispatch); dispid 2;
    procedure Remove(index: Integer); dispid 3;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// Interface: ICoSpectrometerFactory
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DA28657B-1ED3-5C17-8102-9796729D8D0E}
// *********************************************************************//
  ICoSpectrometerFactory = interface(IDispatch)
    ['{DA28657B-1ED3-5C17-8102-9796729D8D0E}']
    procedure CreateSpectrometerFactory; safecall;
    procedure closeSpectrometer(const COM_spectrometer: ICoSpectrometer); safecall;
    procedure closeSpectrometer_NOT_USED_YET(const COM_spectrometer: ICoSpectrometer); safecall;
    function getAllAttachedSpectrometers_NOT_USED_YET: ICoSpectrometerCollection; safecall;
    function getAllSpectrometers: ICoSpectrometerCollection; safecall;
    function getAllUnclaimedSpectrometers: ICoSpectrometerCollection; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrometerFactoryDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DA28657B-1ED3-5C17-8102-9796729D8D0E}
// *********************************************************************//
  ICoSpectrometerFactoryDisp = dispinterface
    ['{DA28657B-1ED3-5C17-8102-9796729D8D0E}']
    procedure CreateSpectrometerFactory; dispid 1;
    procedure closeSpectrometer(const COM_spectrometer: ICoSpectrometer); dispid 2;
    procedure closeSpectrometer_NOT_USED_YET(const COM_spectrometer: ICoSpectrometer); dispid 3;
    function getAllAttachedSpectrometers_NOT_USED_YET: ICoSpectrometerCollection; dispid 4;
    function getAllSpectrometers: ICoSpectrometerCollection; dispid 5;
    function getAllUnclaimedSpectrometers: ICoSpectrometerCollection; dispid 6;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 7;
  end;

// *********************************************************************//
// Interface: ICoSpectrometerPlugInInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8B65395B-1EF2-5B94-8132-519F353C25C4}
// *********************************************************************//
  ICoSpectrometerPlugInInfo = interface(IDispatch)
    ['{8B65395B-1EF2-5B94-8132-519F353C25C4}']
    procedure CreateSpectrometerPlugInInfo; safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrometerPlugInInfoDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8B65395B-1EF2-5B94-8132-519F353C25C4}
// *********************************************************************//
  ICoSpectrometerPlugInInfoDisp = dispinterface
    ['{8B65395B-1EF2-5B94-8132-519F353C25C4}']
    procedure CreateSpectrometerPlugInInfo; dispid 1;
    function toString: WideString; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoSpectrumConsumer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {39414217-CE28-5B82-8154-F2A285F55F12}
// *********************************************************************//
  ICoSpectrumConsumer = interface(IDispatch)
    ['{39414217-CE28-5B82-8154-F2A285F55F12}']
    procedure CreateSpectrumConsumer; safecall;
    procedure setSource(const COM_param0: ICoSpectrumProducer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrumConsumerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {39414217-CE28-5B82-8154-F2A285F55F12}
// *********************************************************************//
  ICoSpectrumConsumerDisp = dispinterface
    ['{39414217-CE28-5B82-8154-F2A285F55F12}']
    procedure CreateSpectrumConsumer; dispid 1;
    procedure setSource(const COM_param0: ICoSpectrumProducer); dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoSpectrumProducerBase
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {61BB1A46-1DD7-5B8E-8039-ECE041C528BF}
// *********************************************************************//
  ICoSpectrumProducerBase = interface(IDispatch)
    ['{61BB1A46-1DD7-5B8E-8039-ECE041C528BF}']
    procedure CreateSpectrumProducerBase; safecall;
    procedure CreateSpectrumProducerBaseB(COM_numPixels: Integer; COM_numDarkPixels: Integer); safecall;
    procedure addSpectrumListener(const COM_listener: ICoSpectrumListener); safecall;
    procedure removeSpectrumListener(const COM_listener: ICoSpectrumListener); safecall;
    function getUnfilledSpectrum: ICoSpectrum; safecall;
    function getUnfilledSpectrumB(COM_pixels: Integer; COM_dark: Integer): ICoSpectrum; safecall;
    function getNumberOfPixels: Integer; safecall;
    function getNumberOfDarkPixels: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSpectrumProducerBaseDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {61BB1A46-1DD7-5B8E-8039-ECE041C528BF}
// *********************************************************************//
  ICoSpectrumProducerBaseDisp = dispinterface
    ['{61BB1A46-1DD7-5B8E-8039-ECE041C528BF}']
    procedure CreateSpectrumProducerBase; dispid 1;
    procedure CreateSpectrumProducerBaseB(COM_numPixels: Integer; COM_numDarkPixels: Integer); dispid 2;
    procedure addSpectrumListener(const COM_listener: ICoSpectrumListener); dispid 3;
    procedure removeSpectrumListener(const COM_listener: ICoSpectrumListener); dispid 4;
    function getUnfilledSpectrum: ICoSpectrum; dispid 5;
    function getUnfilledSpectrumB(COM_pixels: Integer; COM_dark: Integer): ICoSpectrum; dispid 6;
    function getNumberOfPixels: Integer; dispid 7;
    function getNumberOfDarkPixels: Integer; dispid 8;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 9;
  end;

// *********************************************************************//
// Interface: ICoStatus
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1D370D9D-55D2-590B-81BF-B6FB49ECBF97}
// *********************************************************************//
  ICoStatus = interface(IDispatch)
    ['{1D370D9D-55D2-590B-81BF-B6FB49ECBF97}']
    procedure CreateStatus; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoStatusDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1D370D9D-55D2-590B-81BF-B6FB49ECBF97}
// *********************************************************************//
  ICoStatusDisp = dispinterface
    ['{1D370D9D-55D2-590B-81BF-B6FB49ECBF97}']
    procedure CreateStatus; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoStatusGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8923A441-5E81-5A8F-90CC-F03191FAB1DE}
// *********************************************************************//
  ICoStatusGUIProvider = interface(IDispatch)
    ['{8923A441-5E81-5A8F-90CC-F03191FAB1DE}']
    procedure CreateStatusGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoStatusGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8923A441-5E81-5A8F-90CC-F03191FAB1DE}
// *********************************************************************//
  ICoStatusGUIProviderDisp = dispinterface
    ['{8923A441-5E81-5A8F-90CC-F03191FAB1DE}']
    procedure CreateStatusGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoStatusImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E3A61053-AACB-524F-8116-8B7C28700A97}
// *********************************************************************//
  ICoStatusImpl = interface(IDispatch)
    ['{E3A61053-AACB-524F-8116-8B7C28700A97}']
    procedure CreateStatusImpl; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoStatusImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E3A61053-AACB-524F-8116-8B7C28700A97}
// *********************************************************************//
  ICoStatusImplDisp = dispinterface
    ['{E3A61053-AACB-524F-8116-8B7C28700A97}']
    procedure CreateStatusImpl; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoStatusProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AA9C37C9-4D0E-57F8-9181-9A03E4FA33F7}
// *********************************************************************//
  ICoStatusProvider = interface(IDispatch)
    ['{AA9C37C9-4D0E-57F8-9181-9A03E4FA33F7}']
    procedure CreateStatusProvider; safecall;
    function getStatus: ICoSpectrometerStatus; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoStatusProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AA9C37C9-4D0E-57F8-9181-9A03E4FA33F7}
// *********************************************************************//
  ICoStatusProviderDisp = dispinterface
    ['{AA9C37C9-4D0E-57F8-9181-9A03E4FA33F7}']
    procedure CreateStatusProvider; dispid 1;
    function getStatus: ICoSpectrometerStatus; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoStopSpectrum
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B2B8507C-C278-5447-9106-F79F72E07F8F}
// *********************************************************************//
  ICoStopSpectrum = interface(IDispatch)
    ['{B2B8507C-C278-5447-9106-F79F72E07F8F}']
    procedure CreateStopSpectrum; safecall;
    procedure stopSpectralAcquisition; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoStopSpectrumDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B2B8507C-C278-5447-9106-F79F72E07F8F}
// *********************************************************************//
  ICoStopSpectrumDisp = dispinterface
    ['{B2B8507C-C278-5447-9106-F79F72E07F8F}']
    procedure CreateStopSpectrum; dispid 1;
    procedure stopSpectralAcquisition; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoStopSpectrumGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CC474DCD-95BA-51CF-91EF-0D59E1491AF8}
// *********************************************************************//
  ICoStopSpectrumGUIProvider = interface(IDispatch)
    ['{CC474DCD-95BA-51CF-91EF-0D59E1491AF8}']
    procedure CreateStopSpectrumGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoStopSpectrumGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CC474DCD-95BA-51CF-91EF-0D59E1491AF8}
// *********************************************************************//
  ICoStopSpectrumGUIProviderDisp = dispinterface
    ['{CC474DCD-95BA-51CF-91EF-0D59E1491AF8}']
    procedure CreateStopSpectrumGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoStopSpectrumImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EF27F2D0-BEA3-5AC0-8058-2106F83D81E4}
// *********************************************************************//
  ICoStopSpectrumImpl = interface(IDispatch)
    ['{EF27F2D0-BEA3-5AC0-8058-2106F83D81E4}']
    procedure CreateStopSpectrumImplB(const COM_usbInt: ICoUSBInterface); safecall;
    procedure stopSpectralAcquisition; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoStopSpectrumImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EF27F2D0-BEA3-5AC0-8058-2106F83D81E4}
// *********************************************************************//
  ICoStopSpectrumImplDisp = dispinterface
    ['{EF27F2D0-BEA3-5AC0-8058-2106F83D81E4}']
    procedure CreateStopSpectrumImplB(const COM_usbInt: ICoUSBInterface); dispid 1;
    procedure stopSpectralAcquisition; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoStrayLightCorrection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7A615C60-E197-5912-90F7-630B3D3DB721}
// *********************************************************************//
  ICoStrayLightCorrection = interface(IDispatch)
    ['{7A615C60-E197-5912-90F7-630B3D3DB721}']
    procedure CreateStrayLightCorrection; safecall;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; safecall;
    function getStrayLight(COM_param0: Integer): Double; safecall;
    procedure setStrayLight(COM_param0: Double; COM_param1: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoStrayLightCorrectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7A615C60-E197-5912-90F7-630B3D3DB721}
// *********************************************************************//
  ICoStrayLightCorrectionDisp = dispinterface
    ['{7A615C60-E197-5912-90F7-630B3D3DB721}']
    procedure CreateStrayLightCorrection; dispid 1;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; dispid 3;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; dispid 5;
    function getStrayLight(COM_param0: Integer): Double; dispid 6;
    procedure setStrayLight(COM_param0: Double; COM_param1: Integer); dispid 7;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 8;
  end;

// *********************************************************************//
// Interface: ICoStrayLightCorrectionGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2895D36A-5645-5E83-9175-EBF93A2ABCB2}
// *********************************************************************//
  ICoStrayLightCorrectionGUIProvider = interface(IDispatch)
    ['{2895D36A-5645-5E83-9175-EBF93A2ABCB2}']
    procedure CreateStrayLightCorrectionGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoStrayLightCorrectionGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2895D36A-5645-5E83-9175-EBF93A2ABCB2}
// *********************************************************************//
  ICoStrayLightCorrectionGUIProviderDisp = dispinterface
    ['{2895D36A-5645-5E83-9175-EBF93A2ABCB2}']
    procedure CreateStrayLightCorrectionGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoStrayLightCorrectionImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9C9E8CEF-E467-53A2-9096-10A59344C8BE}
// *********************************************************************//
  ICoStrayLightCorrectionImpl = interface(IDispatch)
    ['{9C9E8CEF-E467-53A2-9096-10A59344C8BE}']
    procedure CreateStrayLightCorrectionImplB(const COM_usbInt: ICoUSBInterface; 
                                              const COM_s: ICoSpectrometer); safecall;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; safecall;
    function getStrayLight(COM_channel: Integer): Double; safecall;
    function getStrayLightSlope(COM_channel: Integer): Double; safecall;
    procedure setStrayLight(COM_sl: Double; COM_channel: Integer); safecall;
    procedure setStrayLightB(COM_intercept: Double; COM_slope: Double; COM_channel: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoStrayLightCorrectionImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9C9E8CEF-E467-53A2-9096-10A59344C8BE}
// *********************************************************************//
  ICoStrayLightCorrectionImplDisp = dispinterface
    ['{9C9E8CEF-E467-53A2-9096-10A59344C8BE}']
    procedure CreateStrayLightCorrectionImplB(const COM_usbInt: ICoUSBInterface; 
                                              const COM_s: ICoSpectrometer); dispid 1;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; dispid 2;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; dispid 4;
    function getStrayLight(COM_channel: Integer): Double; dispid 6;
    function getStrayLightSlope(COM_channel: Integer): Double; dispid 7;
    procedure setStrayLight(COM_sl: Double; COM_channel: Integer); dispid 8;
    procedure setStrayLightB(COM_intercept: Double; COM_slope: Double; COM_channel: Integer); dispid 9;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 11;
  end;

// *********************************************************************//
// Interface: ICoStringCollection
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {25485A5E-462A-58C1-912D-4B0B7DFE31CE}
// *********************************************************************//
  ICoStringCollection = interface(IDispatch)
    ['{25485A5E-462A-58C1-912D-4B0B7DFE31CE}']
    function Item(index: OleVariant): OleVariant; safecall;
    function Get_Count: Integer; safecall;
    procedure Add(const pnewStringCollection: IDispatch); safecall;
    procedure Remove(index: Integer); safecall;
    function Get__NewEnum: IUnknown; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  ICoStringCollectionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {25485A5E-462A-58C1-912D-4B0B7DFE31CE}
// *********************************************************************//
  ICoStringCollectionDisp = dispinterface
    ['{25485A5E-462A-58C1-912D-4B0B7DFE31CE}']
    function Item(index: OleVariant): OleVariant; dispid 0;
    property Count: Integer readonly dispid 1;
    procedure Add(const pnewStringCollection: IDispatch); dispid 2;
    procedure Remove(index: Integer); dispid 3;
    property _NewEnum: IUnknown readonly dispid -4;
  end;

// *********************************************************************//
// Interface: ICoSupportStatus
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {786DCE1D-4279-5409-81A1-7FB92DE8CDA0}
// *********************************************************************//
  ICoSupportStatus = interface(IDispatch)
    ['{786DCE1D-4279-5409-81A1-7FB92DE8CDA0}']
    procedure CreateSupportStatus; safecall;
    function isSupported: WordBool; safecall;
    procedure setSupportedStatus(COM_supportedStatus: WordBool); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoSupportStatusDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {786DCE1D-4279-5409-81A1-7FB92DE8CDA0}
// *********************************************************************//
  ICoSupportStatusDisp = dispinterface
    ['{786DCE1D-4279-5409-81A1-7FB92DE8CDA0}']
    procedure CreateSupportStatus; dispid 1;
    function isSupported: WordBool; dispid 2;
    procedure setSupportedStatus(COM_supportedStatus: WordBool); dispid 3;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: ICoThermoElectric
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {77D0D72C-06B2-5119-81EE-6753F6DD706D}
// *********************************************************************//
  ICoThermoElectric = interface(IDispatch)
    ['{77D0D72C-06B2-5119-81EE-6753F6DD706D}']
    procedure CreateThermoElectric; safecall;
    procedure setTECEnable(COM_param0: WordBool); safecall;
    procedure setFanEnable(COM_param0: WordBool); safecall;
    function getDetectorTemperatureCelsius: Double; safecall;
    function getDetectorTemperatureSetPointCelsius: Double; safecall;
    procedure setDetectorSetPointCelsius(COM_param0: Double); safecall;
    function getSetPointMinimumCelsius: Double; safecall;
    function getSetPointMaximumCelsius: Double; safecall;
    function getSetPointIncrementCelsius: Double; safecall;
    function isSaveTECStateEnabled: WordBool; safecall;
    procedure saveTECState; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoThermoElectricDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {77D0D72C-06B2-5119-81EE-6753F6DD706D}
// *********************************************************************//
  ICoThermoElectricDisp = dispinterface
    ['{77D0D72C-06B2-5119-81EE-6753F6DD706D}']
    procedure CreateThermoElectric; dispid 1;
    procedure setTECEnable(COM_param0: WordBool); dispid 2;
    procedure setFanEnable(COM_param0: WordBool); dispid 3;
    function getDetectorTemperatureCelsius: Double; dispid 4;
    function getDetectorTemperatureSetPointCelsius: Double; dispid 5;
    procedure setDetectorSetPointCelsius(COM_param0: Double); dispid 6;
    function getSetPointMinimumCelsius: Double; dispid 7;
    function getSetPointMaximumCelsius: Double; dispid 8;
    function getSetPointIncrementCelsius: Double; dispid 9;
    function isSaveTECStateEnabled: WordBool; dispid 10;
    procedure saveTECState; dispid 11;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 12;
  end;

// *********************************************************************//
// Interface: ICoThermoElectricGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D48499F0-2027-59C0-90C6-1BAC72FD252F}
// *********************************************************************//
  ICoThermoElectricGUIProvider = interface(IDispatch)
    ['{D48499F0-2027-59C0-90C6-1BAC72FD252F}']
    procedure CreateThermoElectricGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoThermoElectricGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D48499F0-2027-59C0-90C6-1BAC72FD252F}
// *********************************************************************//
  ICoThermoElectricGUIProviderDisp = dispinterface
    ['{D48499F0-2027-59C0-90C6-1BAC72FD252F}']
    procedure CreateThermoElectricGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoThermoElectricImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C2DB7893-1F39-5574-91EF-73BD965E46ED}
// *********************************************************************//
  ICoThermoElectricImpl = interface(IDispatch)
    ['{C2DB7893-1F39-5574-91EF-73BD965E46ED}']
    procedure CreateThermoElectricImplB(const COM_usbInt: ICoUSBInterface); safecall;
    procedure setTECEnable(COM_param0: WordBool); safecall;
    procedure setFanEnable(COM_param0: WordBool); safecall;
    function getDetectorTemperatureCelsius: Double; safecall;
    function getDetectorTemperatureSetPointCelsius: Double; safecall;
    procedure setDetectorSetPointCelsius(COM_param0: Double); safecall;
    function getSetPointMinimumCelsius: Double; safecall;
    function getSetPointMaximumCelsius: Double; safecall;
    function getSetPointIncrementCelsius: Double; safecall;
    function isSaveTECStateEnabled: WordBool; safecall;
    procedure saveTECState; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoThermoElectricImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C2DB7893-1F39-5574-91EF-73BD965E46ED}
// *********************************************************************//
  ICoThermoElectricImplDisp = dispinterface
    ['{C2DB7893-1F39-5574-91EF-73BD965E46ED}']
    procedure CreateThermoElectricImplB(const COM_usbInt: ICoUSBInterface); dispid 1;
    procedure setTECEnable(COM_param0: WordBool); dispid 2;
    procedure setFanEnable(COM_param0: WordBool); dispid 3;
    function getDetectorTemperatureCelsius: Double; dispid 4;
    function getDetectorTemperatureSetPointCelsius: Double; dispid 5;
    procedure setDetectorSetPointCelsius(COM_param0: Double); dispid 6;
    function getSetPointMinimumCelsius: Double; dispid 7;
    function getSetPointMaximumCelsius: Double; dispid 8;
    function getSetPointIncrementCelsius: Double; dispid 9;
    function isSaveTECStateEnabled: WordBool; dispid 10;
    procedure saveTECState; dispid 11;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 12;
  end;

// *********************************************************************//
// Interface: ICoThermoElectricImpl_NIR
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7868676B-70D4-5E14-8195-C1AE51CC028E}
// *********************************************************************//
  ICoThermoElectricImpl_NIR = interface(IDispatch)
    ['{7868676B-70D4-5E14-8195-C1AE51CC028E}']
    procedure CreateThermoElectricImpl_NIRB(const COM_usbInt: ICoUSBInterface); safecall;
    procedure setFanEnable(COM_enable: WordBool); safecall;
    procedure setTECEnable(COM_enable: WordBool); safecall;
    function getDetectorTemperatureCelsius: Double; safecall;
    function getDetectorTemperatureSetPointCelsius: Double; safecall;
    procedure setDetectorSetPointCelsius(COM_tempCelsius: Double); safecall;
    function getSetPointMinimumCelsius: Double; safecall;
    function getSetPointMaximumCelsius: Double; safecall;
    function getSetPointIncrementCelsius: Double; safecall;
    function isSaveTECStateEnabled: WordBool; safecall;
    procedure saveTECState; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoThermoElectricImpl_NIRDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7868676B-70D4-5E14-8195-C1AE51CC028E}
// *********************************************************************//
  ICoThermoElectricImpl_NIRDisp = dispinterface
    ['{7868676B-70D4-5E14-8195-C1AE51CC028E}']
    procedure CreateThermoElectricImpl_NIRB(const COM_usbInt: ICoUSBInterface); dispid 1;
    procedure setFanEnable(COM_enable: WordBool); dispid 2;
    procedure setTECEnable(COM_enable: WordBool); dispid 3;
    function getDetectorTemperatureCelsius: Double; dispid 4;
    function getDetectorTemperatureSetPointCelsius: Double; dispid 5;
    procedure setDetectorSetPointCelsius(COM_tempCelsius: Double); dispid 6;
    function getSetPointMinimumCelsius: Double; dispid 7;
    function getSetPointMaximumCelsius: Double; dispid 8;
    function getSetPointIncrementCelsius: Double; dispid 9;
    function isSaveTECStateEnabled: WordBool; dispid 10;
    procedure saveTECState; dispid 11;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 13;
  end;

// *********************************************************************//
// Interface: ICoThermoElectricImpl_QE65000
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {93A38CC1-D1A1-55F3-8008-880795793245}
// *********************************************************************//
  ICoThermoElectricImpl_QE65000 = interface(IDispatch)
    ['{93A38CC1-D1A1-55F3-8008-880795793245}']
    procedure CreateThermoElectricImpl_QE65000B(const COM_usbInt: ICoUSBInterface); safecall;
    procedure setTECEnable(COM_enable: WordBool); safecall;
    procedure setFanEnable(COM_enable: WordBool); safecall;
    function getDetectorTemperatureCelsius: Double; safecall;
    function getDetectorTemperatureSetPointCelsius: Double; safecall;
    procedure setDetectorSetPointCelsius(COM_tempCelsius: Double); safecall;
    function getSetPointMinimumCelsius: Double; safecall;
    function getSetPointMaximumCelsius: Double; safecall;
    function getSetPointIncrementCelsius: Double; safecall;
    function isSaveTECStateEnabled: WordBool; safecall;
    procedure saveTECState; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoThermoElectricImpl_QE65000Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {93A38CC1-D1A1-55F3-8008-880795793245}
// *********************************************************************//
  ICoThermoElectricImpl_QE65000Disp = dispinterface
    ['{93A38CC1-D1A1-55F3-8008-880795793245}']
    procedure CreateThermoElectricImpl_QE65000B(const COM_usbInt: ICoUSBInterface); dispid 1;
    procedure setTECEnable(COM_enable: WordBool); dispid 2;
    procedure setFanEnable(COM_enable: WordBool); dispid 3;
    function getDetectorTemperatureCelsius: Double; dispid 4;
    function getDetectorTemperatureSetPointCelsius: Double; dispid 5;
    procedure setDetectorSetPointCelsius(COM_tempCelsius: Double); dispid 6;
    function getSetPointMinimumCelsius: Double; dispid 7;
    function getSetPointMaximumCelsius: Double; dispid 8;
    function getSetPointIncrementCelsius: Double; dispid 9;
    function isSaveTECStateEnabled: WordBool; dispid 10;
    procedure saveTECState; dispid 11;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 13;
  end;

// *********************************************************************//
// Interface: ICoThermoElectricShowFanControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {928F0FB8-3908-5D50-8123-CDBF23ABBC71}
// *********************************************************************//
  ICoThermoElectricShowFanControl = interface(IDispatch)
    ['{928F0FB8-3908-5D50-8123-CDBF23ABBC71}']
    procedure CreateThermoElectricShowFanControl; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoThermoElectricShowFanControlDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {928F0FB8-3908-5D50-8123-CDBF23ABBC71}
// *********************************************************************//
  ICoThermoElectricShowFanControlDisp = dispinterface
    ['{928F0FB8-3908-5D50-8123-CDBF23ABBC71}']
    procedure CreateThermoElectricShowFanControl; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoUSB2000Plus
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1971D913-20C2-51F7-8080-BD2CE86AEDF8}
// *********************************************************************//
  ICoUSB2000Plus = interface(IDispatch)
    ['{1971D913-20C2-51F7-8080-BD2CE86AEDF8}']
    procedure CreateUSB2000Plus; safecall;
    procedure CreateUSB2000PlusB(COM_i: Integer); safecall;
    procedure setEndpoints; safecall;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; safecall;
    procedure openSpectrometer(COM_index: Integer); safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    function getStatus: ICoSpectrometerStatus; safecall;
    function readIntegrationTime: Integer; safecall;
    procedure setStrobeDelay(COM_delay: Integer); safecall;
    function toString: WideString; safecall;
    function getPlugIns: ICoSpectrometerPlugInCollection; safecall;
    function getNumberOfPlugIns: Integer; safecall;
    function isPlugInDetected(COM_id: Integer): WordBool; safecall;
    function initializePlugIns: OleVariant; safecall;
    procedure detectPlugIns; safecall;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer; safecall;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant; safecall;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; safecall;
    function getPSOCVersion: WideString; safecall;
    function getFPGAFirmwareVersion: WideString; safecall;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; safecall;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); safecall;
    function getContinuousStrobeDelayMinimum: Integer; safecall;
    function getContinuousStrobeDelayMaximum: Integer; safecall;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; safecall;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer); safecall;
    function getIntegrationTimeBaseClock: Integer; safecall;
    function getIntegrationClockTimer: Integer; safecall;
    function getAdvancedIntegrationTimeMinimum: Integer; safecall;
    function getAdvancedIntegrationTimeMaximum: Integer; safecall;
    function getAdvancedIntegrationTimeIncrement: Integer; safecall;
    procedure setExternalTriggerMode(COM_mode: Integer); safecall;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; safecall;
    procedure setShutterClock(COM_value: Integer); safecall;
    function getShutterClock: Integer; safecall;
    procedure setSingleStrobeLow(COM_value: Integer); safecall;
    procedure setSingleStrobeHigh(COM_value: Integer); safecall;
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double; safecall;
    function getSingleStrobeLow: Integer; safecall;
    function getSingleStrobeHigh: Integer; safecall;
    function getSingleStrobeMinimum: Integer; safecall;
    function getSingleStrobeMaximum: Integer; safecall;
    function getSingleStrobeIncrement: Integer; safecall;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setValueAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setDirectionBitmask(COM_bitmask: Smallint); safecall;
    procedure setMuxBitmask(COM_bitmask: Smallint); safecall;
    procedure setValueBitmask(COM_bitmask: Smallint); safecall;
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool); safecall;
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool); safecall;
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool); safecall;
    function getTotalGPIOBits: Integer; safecall;
    function getDirectionBits: ICoBitSet; safecall;
    function getMuxBits: ICoBitSet; safecall;
    function getValueBit(COM_bitNumber: Integer): Integer; safecall;
    function getValueBits: ICoBitSet; safecall;
    function getNumberOfPins: Integer; safecall;
    function getBoardTemperatureCelsius: Double; safecall;
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant; safecall;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant); safecall;
    procedure setMasterClockDivisor(COM_value: Integer); safecall;
    function getMasterClockDivisor: Integer; safecall;
    procedure setExternalTriggerDelay(COM_counts: Integer); safecall;
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double; safecall;
    function getExternalTriggerDelayMinimum: Integer; safecall;
    function getExternalTriggerDelayMaximum: Integer; safecall;
    function getExternalTriggerDelayIncrement: Integer; safecall;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; safecall;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_index: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); safecall;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; safecall;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); safecall;
    function getStrayLight(COM_index: Integer): Double; safecall;
    function getAutonullingScanStatus: Integer; safecall;
    function getAutonullingScanValue: Integer; safecall;
    procedure setAutonullingScanStatus(COM_value: Integer); safecall;
    procedure setAutonullingScanValue(COM_value: Integer); safecall;
    function getAutonullingConfiguration: ICoAutonullingConfiguration; safecall;
    procedure setAutonullingConfiguration(const COM_cfg: ICoAutonullingConfiguration); safecall;
    procedure writeAutonullingConfigurationToSpectrometer; safecall;
    function readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration; safecall;
    function isAdvancedVersion: WordBool; safecall;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSB2000PlusDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1971D913-20C2-51F7-8080-BD2CE86AEDF8}
// *********************************************************************//
  ICoUSB2000PlusDisp = dispinterface
    ['{1971D913-20C2-51F7-8080-BD2CE86AEDF8}']
    procedure CreateUSB2000Plus; dispid 1;
    procedure CreateUSB2000PlusB(COM_i: Integer); dispid 2;
    procedure setEndpoints; dispid 3;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; dispid 4;
    procedure openSpectrometer(COM_index: Integer); dispid 5;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 6;
    function getStatus: ICoSpectrometerStatus; dispid 7;
    function readIntegrationTime: Integer; dispid 8;
    procedure setStrobeDelay(COM_delay: Integer); dispid 9;
    function toString: WideString; dispid 10;
    function getPlugIns: ICoSpectrometerPlugInCollection; dispid 11;
    function getNumberOfPlugIns: Integer; dispid 12;
    function isPlugInDetected(COM_id: Integer): WordBool; dispid 13;
    function initializePlugIns: OleVariant; dispid 14;
    procedure detectPlugIns; dispid 15;
    function setI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant; 
                         COM_i2C: OleVariant): Integer; dispid 16;
    function getI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant): OleVariant; dispid 17;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; dispid 18;
    function getPSOCVersion: WideString; dispid 19;
    function getFPGAFirmwareVersion: WideString; dispid 20;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; dispid 21;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); dispid 22;
    function getContinuousStrobeDelayMinimum: Integer; dispid 23;
    function getContinuousStrobeDelayMaximum: Integer; dispid 24;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; dispid 25;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer); dispid 26;
    function getIntegrationTimeBaseClock: Integer; dispid 27;
    function getIntegrationClockTimer: Integer; dispid 28;
    function getAdvancedIntegrationTimeMinimum: Integer; dispid 29;
    function getAdvancedIntegrationTimeMaximum: Integer; dispid 30;
    function getAdvancedIntegrationTimeIncrement: Integer; dispid 31;
    procedure setExternalTriggerMode(COM_mode: Integer); dispid 32;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; dispid 33;
    procedure setShutterClock(COM_value: Integer); dispid 34;
    function getShutterClock: Integer; dispid 35;
    procedure setSingleStrobeLow(COM_value: Integer); dispid 36;
    procedure setSingleStrobeHigh(COM_value: Integer); dispid 37;
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double; dispid 38;
    function getSingleStrobeLow: Integer; dispid 39;
    function getSingleStrobeHigh: Integer; dispid 40;
    function getSingleStrobeMinimum: Integer; dispid 41;
    function getSingleStrobeMaximum: Integer; dispid 42;
    function getSingleStrobeIncrement: Integer; dispid 43;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet); dispid 44;
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet); dispid 45;
    procedure setValueAllBits(const COM_bitSet: ICoBitSet); dispid 46;
    procedure setDirectionBitmask(COM_bitmask: Smallint); dispid 47;
    procedure setMuxBitmask(COM_bitmask: Smallint); dispid 48;
    procedure setValueBitmask(COM_bitmask: Smallint); dispid 49;
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool); dispid 50;
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool); dispid 51;
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool); dispid 52;
    function getTotalGPIOBits: Integer; dispid 53;
    function getDirectionBits: ICoBitSet; dispid 54;
    function getMuxBits: ICoBitSet; dispid 55;
    function getValueBit(COM_bitNumber: Integer): Integer; dispid 56;
    function getValueBits: ICoBitSet; dispid 57;
    function getNumberOfPins: Integer; dispid 58;
    function getBoardTemperatureCelsius: Double; dispid 59;
    function getIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant): OleVariant; dispid 60;
    procedure setIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant; 
                                              COM_data: OleVariant); dispid 61;
    procedure setMasterClockDivisor(COM_value: Integer); dispid 62;
    function getMasterClockDivisor: Integer; dispid 63;
    procedure setExternalTriggerDelay(COM_counts: Integer); dispid 64;
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double; dispid 65;
    function getExternalTriggerDelayMinimum: Integer; dispid 66;
    function getExternalTriggerDelayMaximum: Integer; dispid 67;
    function getExternalTriggerDelayIncrement: Integer; dispid 68;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 69;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; dispid 71;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; dispid 73;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); dispid 74;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 75;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 77;
    function getWavelengths(COM_index: Integer): OleVariant; dispid 79;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); dispid 80;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; dispid 81;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; dispid 84;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); dispid 85;
    function getStrayLight(COM_index: Integer): Double; dispid 86;
    function getAutonullingScanStatus: Integer; dispid 87;
    function getAutonullingScanValue: Integer; dispid 88;
    procedure setAutonullingScanStatus(COM_value: Integer); dispid 89;
    procedure setAutonullingScanValue(COM_value: Integer); dispid 90;
    function getAutonullingConfiguration: ICoAutonullingConfiguration; dispid 91;
    procedure setAutonullingConfiguration(const COM_cfg: ICoAutonullingConfiguration); dispid 92;
    procedure writeAutonullingConfigurationToSpectrometer; dispid 93;
    function readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration; dispid 94;
    function isAdvancedVersion: WordBool; dispid 95;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 96;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 97;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 98;
  end;

// *********************************************************************//
// Interface: ICoUSB2000PlusStatus
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CB2E15E7-CBFC-5C4D-807D-00D5318AD5F0}
// *********************************************************************//
  ICoUSB2000PlusStatus = interface(IDispatch)
    ['{CB2E15E7-CBFC-5C4D-807D-00D5318AD5F0}']
    procedure CreateUSB2000PlusStatus; safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSB2000PlusStatusDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {CB2E15E7-CBFC-5C4D-807D-00D5318AD5F0}
// *********************************************************************//
  ICoUSB2000PlusStatusDisp = dispinterface
    ['{CB2E15E7-CBFC-5C4D-807D-00D5318AD5F0}']
    procedure CreateUSB2000PlusStatus; dispid 1;
    function toString: WideString; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoUSB325
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FD14D082-43F1-5634-800B-4A7141158A56}
// *********************************************************************//
  ICoUSB325 = interface(IDispatch)
    ['{FD14D082-43F1-5634-800B-4A7141158A56}']
    procedure CreateUSB325; safecall;
    procedure CreateUSB325B(COM_i: Integer); safecall;
    function getNumberOfPixels: Integer; safecall;
    function getNumberOfDarkPixels: Integer; safecall;
    procedure setEndpoints; safecall;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; safecall;
    procedure openSpectrometer(COM_index: Integer); safecall;
    function getChannels: ICoSpectrometerChannelCollection; safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    function getStatus: ICoSpectrometerStatus; safecall;
    function readIntegrationTime: Integer; safecall;
    procedure setMasterClock(COM_freq: Integer); safecall;
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant; safecall;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant); safecall;
    function toString: WideString; safecall;
    function getActualIntegrationTime: Integer; safecall;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; safecall;
    procedure setExternalTriggerMode(COM_mode: Integer); safecall;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; safecall;
    function isPlugInDetected(COM_id: Integer): WordBool; safecall;
    function getPlugIns: ICoSpectrometerPlugInCollection; safecall;
    function getNumberOfPlugIns: Integer; safecall;
    function initializePlugIns: OleVariant; safecall;
    procedure detectPlugIns; safecall;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; safecall;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_index: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); safecall;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; safecall;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); safecall;
    function getStrayLight(COM_index: Integer): Double; safecall;
    function isAdvancedVersion: WordBool; safecall;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSB325Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FD14D082-43F1-5634-800B-4A7141158A56}
// *********************************************************************//
  ICoUSB325Disp = dispinterface
    ['{FD14D082-43F1-5634-800B-4A7141158A56}']
    procedure CreateUSB325; dispid 1;
    procedure CreateUSB325B(COM_i: Integer); dispid 2;
    function getNumberOfPixels: Integer; dispid 3;
    function getNumberOfDarkPixels: Integer; dispid 4;
    procedure setEndpoints; dispid 5;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; dispid 6;
    procedure openSpectrometer(COM_index: Integer); dispid 7;
    function getChannels: ICoSpectrometerChannelCollection; dispid 8;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 9;
    function getStatus: ICoSpectrometerStatus; dispid 10;
    function readIntegrationTime: Integer; dispid 11;
    procedure setMasterClock(COM_freq: Integer); dispid 12;
    function getIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant): OleVariant; dispid 13;
    procedure setIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant; 
                                              COM_data: OleVariant); dispid 14;
    function toString: WideString; dispid 15;
    function getActualIntegrationTime: Integer; dispid 16;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; dispid 17;
    procedure setExternalTriggerMode(COM_mode: Integer); dispid 18;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; dispid 19;
    function isPlugInDetected(COM_id: Integer): WordBool; dispid 20;
    function getPlugIns: ICoSpectrometerPlugInCollection; dispid 21;
    function getNumberOfPlugIns: Integer; dispid 22;
    function initializePlugIns: OleVariant; dispid 23;
    procedure detectPlugIns; dispid 24;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 25;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; dispid 27;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; dispid 29;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); dispid 30;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 31;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 33;
    function getWavelengths(COM_index: Integer): OleVariant; dispid 35;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); dispid 36;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; dispid 37;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; dispid 40;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); dispid 41;
    function getStrayLight(COM_index: Integer): Double; dispid 42;
    function isAdvancedVersion: WordBool; dispid 43;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 44;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 45;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 46;
  end;

// *********************************************************************//
// Interface: ICoUSB4000
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6BFC2AE4-C9B4-59F2-8046-45F44B66425B}
// *********************************************************************//
  ICoUSB4000 = interface(IDispatch)
    ['{6BFC2AE4-C9B4-59F2-8046-45F44B66425B}']
    procedure CreateUSB4000; safecall;
    procedure CreateUSB4000B(COM_i: Integer); safecall;
    procedure setEndpoints; safecall;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; safecall;
    procedure openSpectrometer(COM_index: Integer); safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    procedure readSpectrum(COM_data: OleVariant); safecall;
    procedure readSpectrumB; safecall;
    function getStatus: ICoSpectrometerStatus; safecall;
    function readIntegrationTime: Integer; safecall;
    procedure setIntegrationTime(COM_intTime: Integer); safecall;
    function getGatingModeIntegrationTime: Integer; safecall;
    procedure addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); safecall;
    procedure removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); safecall;
    procedure setStrobeDelay(COM_delay: Integer); safecall;
    function toString: WideString; safecall;
    function getPlugIns: ICoSpectrometerPlugInCollection; safecall;
    function getNumberOfPlugIns: Integer; safecall;
    function isPlugInDetected(COM_id: Integer): WordBool; safecall;
    function initializePlugIns: OleVariant; safecall;
    procedure detectPlugIns; safecall;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer; safecall;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant; safecall;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; safecall;
    function getPSOCVersion: WideString; safecall;
    function getFPGAFirmwareVersion: WideString; safecall;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; safecall;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); safecall;
    function getContinuousStrobeDelayMinimum: Integer; safecall;
    function getContinuousStrobeDelayMaximum: Integer; safecall;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; safecall;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer); safecall;
    function getIntegrationTimeBaseClock: Integer; safecall;
    function getIntegrationClockTimer: Integer; safecall;
    function getAdvancedIntegrationTimeMinimum: Integer; safecall;
    function getAdvancedIntegrationTimeMaximum: Integer; safecall;
    function getAdvancedIntegrationTimeIncrement: Integer; safecall;
    procedure setExternalTriggerMode(COM_mode: Integer); safecall;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; safecall;
    procedure setShutterClock(COM_value: Integer); safecall;
    function getShutterClock: Integer; safecall;
    procedure setSingleStrobeLow(COM_value: Integer); safecall;
    procedure setSingleStrobeHigh(COM_value: Integer); safecall;
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double; safecall;
    function getSingleStrobeLow: Integer; safecall;
    function getSingleStrobeHigh: Integer; safecall;
    function getSingleStrobeMinimum: Integer; safecall;
    function getSingleStrobeMaximum: Integer; safecall;
    function getSingleStrobeIncrement: Integer; safecall;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setValueAllBits(const COM_bitSet: ICoBitSet); safecall;
    procedure setDirectionBitmask(COM_bitmask: Smallint); safecall;
    procedure setMuxBitmask(COM_bitmask: Smallint); safecall;
    procedure setValueBitmask(COM_bitmask: Smallint); safecall;
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool); safecall;
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool); safecall;
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool); safecall;
    function getTotalGPIOBits: Integer; safecall;
    function getDirectionBits: ICoBitSet; safecall;
    function getMuxBits: ICoBitSet; safecall;
    function getValueBit(COM_bitNumber: Integer): Integer; safecall;
    function getValueBits: ICoBitSet; safecall;
    function getNumberOfPins: Integer; safecall;
    function getBoardTemperatureCelsius: Double; safecall;
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant; safecall;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant); safecall;
    procedure setMasterClockDivisor(COM_value: Integer); safecall;
    function getMasterClockDivisor: Integer; safecall;
    procedure setExternalTriggerDelay(COM_counts: Integer); safecall;
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double; safecall;
    function getExternalTriggerDelayMinimum: Integer; safecall;
    function getExternalTriggerDelayMaximum: Integer; safecall;
    function getExternalTriggerDelayIncrement: Integer; safecall;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; safecall;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_index: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); safecall;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; safecall;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); safecall;
    function getStrayLight(COM_index: Integer): Double; safecall;
    function getAutonullingScanStatus: Integer; safecall;
    function getAutonullingScanValue: Integer; safecall;
    procedure setAutonullingScanStatus(COM_value: Integer); safecall;
    procedure setAutonullingScanValue(COM_value: Integer); safecall;
    function getAutonullingConfiguration: ICoAutonullingConfiguration; safecall;
    procedure setAutonullingConfiguration(const COM_cfg: ICoAutonullingConfiguration); safecall;
    procedure writeAutonullingConfigurationToSpectrometer; safecall;
    function readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration; safecall;
    function isAdvancedVersion: WordBool; safecall;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSB4000Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6BFC2AE4-C9B4-59F2-8046-45F44B66425B}
// *********************************************************************//
  ICoUSB4000Disp = dispinterface
    ['{6BFC2AE4-C9B4-59F2-8046-45F44B66425B}']
    procedure CreateUSB4000; dispid 1;
    procedure CreateUSB4000B(COM_i: Integer); dispid 2;
    procedure setEndpoints; dispid 3;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; dispid 4;
    procedure openSpectrometer(COM_index: Integer); dispid 5;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 6;
    procedure readSpectrum(COM_data: OleVariant); dispid 7;
    procedure readSpectrumB; dispid 8;
    function getStatus: ICoSpectrometerStatus; dispid 9;
    function readIntegrationTime: Integer; dispid 10;
    procedure setIntegrationTime(COM_intTime: Integer); dispid 11;
    function getGatingModeIntegrationTime: Integer; dispid 12;
    procedure addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); dispid 13;
    procedure removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener); dispid 14;
    procedure setStrobeDelay(COM_delay: Integer); dispid 15;
    function toString: WideString; dispid 16;
    function getPlugIns: ICoSpectrometerPlugInCollection; dispid 17;
    function getNumberOfPlugIns: Integer; dispid 18;
    function isPlugInDetected(COM_id: Integer): WordBool; dispid 19;
    function initializePlugIns: OleVariant; dispid 20;
    procedure detectPlugIns; dispid 21;
    function setI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant; 
                         COM_i2C: OleVariant): Integer; dispid 22;
    function getI2CBytes(COM_address: {??Shortint}OleVariant; COM_numBytes: {??Shortint}OleVariant): OleVariant; dispid 23;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; dispid 24;
    function getPSOCVersion: WideString; dispid 25;
    function getFPGAFirmwareVersion: WideString; dispid 26;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double; dispid 27;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer); dispid 28;
    function getContinuousStrobeDelayMinimum: Integer; dispid 29;
    function getContinuousStrobeDelayMaximum: Integer; dispid 30;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer; dispid 31;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer); dispid 32;
    function getIntegrationTimeBaseClock: Integer; dispid 33;
    function getIntegrationClockTimer: Integer; dispid 34;
    function getAdvancedIntegrationTimeMinimum: Integer; dispid 35;
    function getAdvancedIntegrationTimeMaximum: Integer; dispid 36;
    function getAdvancedIntegrationTimeIncrement: Integer; dispid 37;
    procedure setExternalTriggerMode(COM_mode: Integer); dispid 38;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; dispid 39;
    procedure setShutterClock(COM_value: Integer); dispid 40;
    function getShutterClock: Integer; dispid 41;
    procedure setSingleStrobeLow(COM_value: Integer); dispid 42;
    procedure setSingleStrobeHigh(COM_value: Integer); dispid 43;
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double; dispid 44;
    function getSingleStrobeLow: Integer; dispid 45;
    function getSingleStrobeHigh: Integer; dispid 46;
    function getSingleStrobeMinimum: Integer; dispid 47;
    function getSingleStrobeMaximum: Integer; dispid 48;
    function getSingleStrobeIncrement: Integer; dispid 49;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet); dispid 50;
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet); dispid 51;
    procedure setValueAllBits(const COM_bitSet: ICoBitSet); dispid 52;
    procedure setDirectionBitmask(COM_bitmask: Smallint); dispid 53;
    procedure setMuxBitmask(COM_bitmask: Smallint); dispid 54;
    procedure setValueBitmask(COM_bitmask: Smallint); dispid 55;
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool); dispid 56;
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool); dispid 57;
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool); dispid 58;
    function getTotalGPIOBits: Integer; dispid 59;
    function getDirectionBits: ICoBitSet; dispid 60;
    function getMuxBits: ICoBitSet; dispid 61;
    function getValueBit(COM_bitNumber: Integer): Integer; dispid 62;
    function getValueBits: ICoBitSet; dispid 63;
    function getNumberOfPins: Integer; dispid 64;
    function getBoardTemperatureCelsius: Double; dispid 65;
    function getIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant): OleVariant; dispid 66;
    procedure setIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant; 
                                              COM_data: OleVariant); dispid 67;
    procedure setMasterClockDivisor(COM_value: Integer); dispid 68;
    function getMasterClockDivisor: Integer; dispid 69;
    procedure setExternalTriggerDelay(COM_counts: Integer); dispid 70;
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double; dispid 71;
    function getExternalTriggerDelayMinimum: Integer; dispid 72;
    function getExternalTriggerDelayMaximum: Integer; dispid 73;
    function getExternalTriggerDelayIncrement: Integer; dispid 74;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 75;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; dispid 77;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; dispid 79;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); dispid 80;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 81;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 83;
    function getWavelengths(COM_index: Integer): OleVariant; dispid 85;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); dispid 86;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; dispid 87;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; dispid 90;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); dispid 91;
    function getStrayLight(COM_index: Integer): Double; dispid 92;
    function getAutonullingScanStatus: Integer; dispid 93;
    function getAutonullingScanValue: Integer; dispid 94;
    procedure setAutonullingScanStatus(COM_value: Integer); dispid 95;
    procedure setAutonullingScanValue(COM_value: Integer); dispid 96;
    function getAutonullingConfiguration: ICoAutonullingConfiguration; dispid 97;
    procedure setAutonullingConfiguration(const COM_cfg: ICoAutonullingConfiguration); dispid 98;
    procedure writeAutonullingConfigurationToSpectrometer; dispid 99;
    function readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration; dispid 100;
    function isAdvancedVersion: WordBool; dispid 101;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 102;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 103;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 104;
  end;

// *********************************************************************//
// Interface: ICoUSB4000Status
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E5E69CAA-1D6A-5C43-80CB-715EE316E467}
// *********************************************************************//
  ICoUSB4000Status = interface(IDispatch)
    ['{E5E69CAA-1D6A-5C43-80CB-715EE316E467}']
    procedure CreateUSB4000Status; safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSB4000StatusDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E5E69CAA-1D6A-5C43-80CB-715EE316E467}
// *********************************************************************//
  ICoUSB4000StatusDisp = dispinterface
    ['{E5E69CAA-1D6A-5C43-80CB-715EE316E467}']
    procedure CreateUSB4000Status; dispid 1;
    function toString: WideString; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoUSB650
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FDF32347-263A-5A43-81C2-B65B7B32A6B8}
// *********************************************************************//
  ICoUSB650 = interface(IDispatch)
    ['{FDF32347-263A-5A43-81C2-B65B7B32A6B8}']
    procedure CreateUSB650; safecall;
    procedure CreateUSB650B(COM_i: Integer); safecall;
    function getNumberOfPixels: Integer; safecall;
    function getNumberOfDarkPixels: Integer; safecall;
    procedure setEndpoints; safecall;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; safecall;
    procedure openSpectrometer(COM_index: Integer); safecall;
    function getChannels: ICoSpectrometerChannelCollection; safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    function getStatus: ICoSpectrometerStatus; safecall;
    function readIntegrationTime: Integer; safecall;
    procedure setMasterClock(COM_freq: Integer); safecall;
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant; safecall;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant); safecall;
    function getActualIntegrationTime: Integer; safecall;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; safecall;
    procedure setExternalTriggerMode(COM_mode: Integer); safecall;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; safecall;
    function isPlugInDetected(COM_id: Integer): WordBool; safecall;
    function getPlugIns: ICoSpectrometerPlugInCollection; safecall;
    function getNumberOfPlugIns: Integer; safecall;
    function initializePlugIns: OleVariant; safecall;
    procedure detectPlugIns; safecall;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; safecall;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; safecall;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_index: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); safecall;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; safecall;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); safecall;
    function getStrayLight(COM_index: Integer): Double; safecall;
    function isAdvancedVersion: WordBool; safecall;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSB650Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FDF32347-263A-5A43-81C2-B65B7B32A6B8}
// *********************************************************************//
  ICoUSB650Disp = dispinterface
    ['{FDF32347-263A-5A43-81C2-B65B7B32A6B8}']
    procedure CreateUSB650; dispid 1;
    procedure CreateUSB650B(COM_i: Integer); dispid 2;
    function getNumberOfPixels: Integer; dispid 3;
    function getNumberOfDarkPixels: Integer; dispid 4;
    procedure setEndpoints; dispid 5;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor; dispid 6;
    procedure openSpectrometer(COM_index: Integer); dispid 7;
    function getChannels: ICoSpectrometerChannelCollection; dispid 8;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 9;
    function getStatus: ICoSpectrometerStatus; dispid 10;
    function readIntegrationTime: Integer; dispid 11;
    procedure setMasterClock(COM_freq: Integer); dispid 12;
    function getIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant): OleVariant; dispid 13;
    procedure setIrradianceCalibrationFactors(COM_address: {??Shortint}OleVariant; 
                                              COM_data: OleVariant); dispid 14;
    function getActualIntegrationTime: Integer; dispid 15;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant; dispid 16;
    procedure setExternalTriggerMode(COM_mode: Integer); dispid 17;
    function getExternalTriggerModes: ICoExternalTriggerModeCollection; dispid 18;
    function isPlugInDetected(COM_id: Integer): WordBool; dispid 19;
    function getPlugIns: ICoSpectrometerPlugInCollection; dispid 20;
    function getNumberOfPlugIns: Integer; dispid 21;
    function initializePlugIns: OleVariant; dispid 22;
    procedure detectPlugIns; dispid 23;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 24;
    function getNonlinearityCoefficients: ICoCoefficientsCollection; dispid 26;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant; dispid 28;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer); dispid 29;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 30;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 32;
    function getWavelengths(COM_index: Integer): OleVariant; dispid 34;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer); dispid 35;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection; dispid 36;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection; dispid 39;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer); dispid 40;
    function getStrayLight(COM_index: Integer): Double; dispid 41;
    function isAdvancedVersion: WordBool; dispid 42;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 43;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 44;
    function toString: WideString; dispid 45;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 46;
  end;

// *********************************************************************//
// Interface: ICoUSBCommonDescriptor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4086EF88-3BEA-5656-9137-AD42F97B28B5}
// *********************************************************************//
  ICoUSBCommonDescriptor = interface(IDispatch)
    ['{4086EF88-3BEA-5656-9137-AD42F97B28B5}']
    procedure CreateUSBCommonDescriptor; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSBCommonDescriptorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4086EF88-3BEA-5656-9137-AD42F97B28B5}
// *********************************************************************//
  ICoUSBCommonDescriptorDisp = dispinterface
    ['{4086EF88-3BEA-5656-9137-AD42F97B28B5}']
    procedure CreateUSBCommonDescriptor; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoUSBConfigurationDescriptor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {46BD006A-80A1-527C-9085-3987B589EB2C}
// *********************************************************************//
  ICoUSBConfigurationDescriptor = interface(IDispatch)
    ['{46BD006A-80A1-527C-9085-3987B589EB2C}']
    procedure CreateUSBConfigurationDescriptor; safecall;
    function toString: WideString; safecall;
    function getLength: Shortint; safecall;
    function getDescriptorType: Shortint; safecall;
    function getTotalLength: Smallint; safecall;
    function getNumInterfaces: Shortint; safecall;
    function getConfigurationValue: Shortint; safecall;
    function getConfiguration: Shortint; safecall;
    function getAttributes: Shortint; safecall;
    function getMaxPower: Shortint; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSBConfigurationDescriptorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {46BD006A-80A1-527C-9085-3987B589EB2C}
// *********************************************************************//
  ICoUSBConfigurationDescriptorDisp = dispinterface
    ['{46BD006A-80A1-527C-9085-3987B589EB2C}']
    procedure CreateUSBConfigurationDescriptor; dispid 1;
    function toString: WideString; dispid 2;
    function getLength: {??Shortint}OleVariant; dispid 3;
    function getDescriptorType: {??Shortint}OleVariant; dispid 4;
    function getTotalLength: Smallint; dispid 5;
    function getNumInterfaces: {??Shortint}OleVariant; dispid 6;
    function getConfigurationValue: {??Shortint}OleVariant; dispid 7;
    function getConfiguration: {??Shortint}OleVariant; dispid 8;
    function getAttributes: {??Shortint}OleVariant; dispid 9;
    function getMaxPower: {??Shortint}OleVariant; dispid 10;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 11;
  end;

// *********************************************************************//
// Interface: ICoUSBConstants
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {25133B83-3272-5E1F-81DE-9832F1CF5936}
// *********************************************************************//
  ICoUSBConstants = interface(IDispatch)
    ['{25133B83-3272-5E1F-81DE-9832F1CF5936}']
    procedure CreateUSBConstants; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSBConstantsDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {25133B83-3272-5E1F-81DE-9832F1CF5936}
// *********************************************************************//
  ICoUSBConstantsDisp = dispinterface
    ['{25133B83-3272-5E1F-81DE-9832F1CF5936}']
    procedure CreateUSBConstants; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoUSBDeviceDescriptor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C05F6210-7572-52E8-916A-8909C420D427}
// *********************************************************************//
  ICoUSBDeviceDescriptor = interface(IDispatch)
    ['{C05F6210-7572-52E8-916A-8909C420D427}']
    procedure CreateUSBDeviceDescriptor; safecall;
    function toString: WideString; safecall;
    function getLength: Shortint; safecall;
    function getDescriptorType: Shortint; safecall;
    function getbcdUSB: Smallint; safecall;
    function getDeviceClass: Shortint; safecall;
    function getDeviceSubClass: Shortint; safecall;
    function getDeviceProtocol: Shortint; safecall;
    function getMaxPacketSize0: Smallint; safecall;
    function getVendorID: Smallint; safecall;
    function getProductID: Smallint; safecall;
    function getbcdDevice: Smallint; safecall;
    function getManufacturer: Shortint; safecall;
    function getProduct: Shortint; safecall;
    function getSerialNumber: Shortint; safecall;
    function getNumConfigurations: Shortint; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSBDeviceDescriptorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C05F6210-7572-52E8-916A-8909C420D427}
// *********************************************************************//
  ICoUSBDeviceDescriptorDisp = dispinterface
    ['{C05F6210-7572-52E8-916A-8909C420D427}']
    procedure CreateUSBDeviceDescriptor; dispid 1;
    function toString: WideString; dispid 2;
    function getLength: {??Shortint}OleVariant; dispid 3;
    function getDescriptorType: {??Shortint}OleVariant; dispid 4;
    function getbcdUSB: Smallint; dispid 5;
    function getDeviceClass: {??Shortint}OleVariant; dispid 6;
    function getDeviceSubClass: {??Shortint}OleVariant; dispid 7;
    function getDeviceProtocol: {??Shortint}OleVariant; dispid 8;
    function getMaxPacketSize0: Smallint; dispid 9;
    function getVendorID: Smallint; dispid 10;
    function getProductID: Smallint; dispid 11;
    function getbcdDevice: Smallint; dispid 12;
    function getManufacturer: {??Shortint}OleVariant; dispid 13;
    function getProduct: {??Shortint}OleVariant; dispid 14;
    function getSerialNumber: {??Shortint}OleVariant; dispid 15;
    function getNumConfigurations: {??Shortint}OleVariant; dispid 16;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 17;
  end;

// *********************************************************************//
// Interface: ICoUSBEndpointDevice
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3BAA6767-9F60-530D-90E1-03AEF0C7F389}
// *********************************************************************//
  ICoUSBEndpointDevice = interface(IDispatch)
    ['{3BAA6767-9F60-530D-90E1-03AEF0C7F389}']
    procedure CreateUSBEndpointDevice; safecall;
    function getEndpoint(COM_param0: Integer): ICoUSBEndpointDescriptor; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSBEndpointDeviceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3BAA6767-9F60-530D-90E1-03AEF0C7F389}
// *********************************************************************//
  ICoUSBEndpointDeviceDisp = dispinterface
    ['{3BAA6767-9F60-530D-90E1-03AEF0C7F389}']
    procedure CreateUSBEndpointDevice; dispid 1;
    function getEndpoint(COM_param0: Integer): ICoUSBEndpointDescriptor; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoUSBImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C2C7116B-6346-5BD9-8081-BDC1CCB4758D}
// *********************************************************************//
  ICoUSBImpl = interface(IDispatch)
    ['{C2C7116B-6346-5BD9-8081-BDC1CCB4758D}']
    procedure CreateUSBImpl; safecall;
    function getInputBuffer: OleVariant; safecall;
    function getOutputBuffer: OleVariant; safecall;
    procedure increaseInputBufferSize(COM_size: Integer); safecall;
    procedure increaseOutputBufferSize(COM_size: Integer); safecall;
    procedure bulkIn(const COM_endPointDescriptor: ICoUSBEndpointDescriptor; COM_data: OleVariant; 
                     COM_length: Integer); safecall;
    procedure bulkOut(const COM_endPointDescriptor: ICoUSBEndpointDescriptor; COM_data: OleVariant; 
                      COM_length: Integer); safecall;
    function readUSBStringDescriptor(COM_num: Integer): WideString; safecall;
    procedure openDevice(COM_vendorID: Integer; COM_prodID: Integer; COM_index: Integer); safecall;
    procedure closeDevice; safecall;
    function toString: WideString; safecall;
    function getUSBStringDescriptor(COM_index: Integer): WideString; safecall;
    function isUSB2Mode: WordBool; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSBImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C2C7116B-6346-5BD9-8081-BDC1CCB4758D}
// *********************************************************************//
  ICoUSBImplDisp = dispinterface
    ['{C2C7116B-6346-5BD9-8081-BDC1CCB4758D}']
    procedure CreateUSBImpl; dispid 1;
    function getInputBuffer: OleVariant; dispid 2;
    function getOutputBuffer: OleVariant; dispid 3;
    procedure increaseInputBufferSize(COM_size: Integer); dispid 4;
    procedure increaseOutputBufferSize(COM_size: Integer); dispid 5;
    procedure bulkIn(const COM_endPointDescriptor: ICoUSBEndpointDescriptor; COM_data: OleVariant; 
                     COM_length: Integer); dispid 6;
    procedure bulkOut(const COM_endPointDescriptor: ICoUSBEndpointDescriptor; COM_data: OleVariant; 
                      COM_length: Integer); dispid 7;
    function readUSBStringDescriptor(COM_num: Integer): WideString; dispid 8;
    procedure openDevice(COM_vendorID: Integer; COM_prodID: Integer; COM_index: Integer); dispid 9;
    procedure closeDevice; dispid 10;
    function toString: WideString; dispid 11;
    function getUSBStringDescriptor(COM_index: Integer): WideString; dispid 12;
    function isUSB2Mode: WordBool; dispid 13;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 14;
  end;

// *********************************************************************//
// Interface: ICoUSBInterfaceDescriptor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A6E5B74A-1967-511F-814B-25ADC84B59BA}
// *********************************************************************//
  ICoUSBInterfaceDescriptor = interface(IDispatch)
    ['{A6E5B74A-1967-511F-814B-25ADC84B59BA}']
    procedure CreateUSBInterfaceDescriptor; safecall;
    function toString: WideString; safecall;
    function getLength: Shortint; safecall;
    function getDescriptorType: Shortint; safecall;
    function getInterfaceNumber: Shortint; safecall;
    function getAlternateSetting: Shortint; safecall;
    function getNumEndpoints: Shortint; safecall;
    function getInterfaceClass: Shortint; safecall;
    function getInterfaceSubClass: Shortint; safecall;
    function getInterfaceProtocol: Shortint; safecall;
    function getInterface: Shortint; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSBInterfaceDescriptorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A6E5B74A-1967-511F-814B-25ADC84B59BA}
// *********************************************************************//
  ICoUSBInterfaceDescriptorDisp = dispinterface
    ['{A6E5B74A-1967-511F-814B-25ADC84B59BA}']
    procedure CreateUSBInterfaceDescriptor; dispid 1;
    function toString: WideString; dispid 2;
    function getLength: {??Shortint}OleVariant; dispid 3;
    function getDescriptorType: {??Shortint}OleVariant; dispid 4;
    function getInterfaceNumber: {??Shortint}OleVariant; dispid 5;
    function getAlternateSetting: {??Shortint}OleVariant; dispid 6;
    function getNumEndpoints: {??Shortint}OleVariant; dispid 7;
    function getInterfaceClass: {??Shortint}OleVariant; dispid 8;
    function getInterfaceSubClass: {??Shortint}OleVariant; dispid 9;
    function getInterfaceProtocol: {??Shortint}OleVariant; dispid 10;
    function getInterface: {??Shortint}OleVariant; dispid 11;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 12;
  end;

// *********************************************************************//
// Interface: ICoUSBLogicalPortStatus
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {38A725E5-9D9F-5094-8077-CB3AAE8F40ED}
// *********************************************************************//
  ICoUSBLogicalPortStatus = interface(IDispatch)
    ['{38A725E5-9D9F-5094-8077-CB3AAE8F40ED}']
    procedure CreateUSBLogicalPortStatus; safecall;
    function getSpectrometer: ICoSpectrometer; safecall;
    function isDevicePresent: WordBool; safecall;
    procedure setDeviceNotPresent; safecall;
    procedure setDevicePresent(const COM_spectrometer: ICoSpectrometer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSBLogicalPortStatusDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {38A725E5-9D9F-5094-8077-CB3AAE8F40ED}
// *********************************************************************//
  ICoUSBLogicalPortStatusDisp = dispinterface
    ['{38A725E5-9D9F-5094-8077-CB3AAE8F40ED}']
    procedure CreateUSBLogicalPortStatus; dispid 1;
    function getSpectrometer: ICoSpectrometer; dispid 2;
    function isDevicePresent: WordBool; dispid 3;
    procedure setDeviceNotPresent; dispid 4;
    procedure setDevicePresent(const COM_spectrometer: ICoSpectrometer); dispid 5;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 6;
  end;

// *********************************************************************//
// Interface: ICoUSBProductInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BA7F3CEB-83A9-5289-90E0-452F4CC5A5F1}
// *********************************************************************//
  ICoUSBProductInfo = interface(IDispatch)
    ['{BA7F3CEB-83A9-5289-90E0-452F4CC5A5F1}']
    procedure CreateUSBProductInfoB(const COM_name: WideString; const COM_className: WideString; 
                                    COM_vendorID: Integer; COM_productID: Integer); safecall;
    function getProductInfo(COM_vendorID: Integer; COM_productID: Integer): ICoUSBProductInfo; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSBProductInfoDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BA7F3CEB-83A9-5289-90E0-452F4CC5A5F1}
// *********************************************************************//
  ICoUSBProductInfoDisp = dispinterface
    ['{BA7F3CEB-83A9-5289-90E0-452F4CC5A5F1}']
    procedure CreateUSBProductInfoB(const COM_name: WideString; const COM_className: WideString; 
                                    COM_vendorID: Integer; COM_productID: Integer); dispid 1;
    function getProductInfo(COM_vendorID: Integer; COM_productID: Integer): ICoUSBProductInfo; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoUSBStringDescriptor
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AACF7B8F-7F48-5D88-90BC-3475FA40EF8C}
// *********************************************************************//
  ICoUSBStringDescriptor = interface(IDispatch)
    ['{AACF7B8F-7F48-5D88-90BC-3475FA40EF8C}']
    procedure CreateUSBStringDescriptor; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSBStringDescriptorDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AACF7B8F-7F48-5D88-90BC-3475FA40EF8C}
// *********************************************************************//
  ICoUSBStringDescriptorDisp = dispinterface
    ['{AACF7B8F-7F48-5D88-90BC-3475FA40EF8C}']
    procedure CreateUSBStringDescriptor; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoUSB_ISS
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1E5F9031-811E-5FEC-813C-FA108AD43BAF}
// *********************************************************************//
  ICoUSB_ISS = interface(IDispatch)
    ['{1E5F9031-811E-5FEC-813C-FA108AD43BAF}']
    procedure CreateUSB_ISSB(const COM_spectrometer: ICoUSBSpectrometer; 
                             const COM_usb: ICoUSBInterface); safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSB_ISSDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1E5F9031-811E-5FEC-813C-FA108AD43BAF}
// *********************************************************************//
  ICoUSB_ISSDisp = dispinterface
    ['{1E5F9031-811E-5FEC-813C-FA108AD43BAF}']
    procedure CreateUSB_ISSB(const COM_spectrometer: ICoUSBSpectrometer; 
                             const COM_usb: ICoUSBInterface); dispid 1;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 2;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 3;
  end;

// *********************************************************************//
// Interface: ICoUSB_ISS_UV
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2B8934A6-666D-59D2-8007-74684B3D07B5}
// *********************************************************************//
  ICoUSB_ISS_UV = interface(IDispatch)
    ['{2B8934A6-666D-59D2-8007-74684B3D07B5}']
    procedure CreateUSB_ISS_UVB(const COM_spectrometer: ICoUSBSpectrometer; 
                                const COM_usb: ICoUSBInterface); safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    procedure setPowerUpPOTValues; safecall;
    procedure setPOTValue(COM_pot: Integer; COM_value: Integer); safecall;
    function getPOTValues: OleVariant; safecall;
    procedure setLampOn(COM_lampOn: WordBool); safecall;
    function isLampOn: WordBool; safecall;
    procedure setVisLampOn(COM_lampOn: WordBool); safecall;
    function isVisLampOn: WordBool; safecall;
    procedure setVisLampIntensity(COM_intens: Smallint); safecall;
    function getVisLampIntensity: Smallint; safecall;
    procedure setUVLampIntensity(COM_intens: Smallint); safecall;
    function getUVLampIntensity: Smallint; safecall;
    function getLampIntensityMinimum: Integer; safecall;
    function getLampIntensityMaximum: Integer; safecall;
    function getLampIntensityIncrement: Integer; safecall;
    function toString: WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSB_ISS_UVDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2B8934A6-666D-59D2-8007-74684B3D07B5}
// *********************************************************************//
  ICoUSB_ISS_UVDisp = dispinterface
    ['{2B8934A6-666D-59D2-8007-74684B3D07B5}']
    procedure CreateUSB_ISS_UVB(const COM_spectrometer: ICoUSBSpectrometer; 
                                const COM_usb: ICoUSBInterface); dispid 1;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 2;
    procedure setPowerUpPOTValues; dispid 3;
    procedure setPOTValue(COM_pot: Integer; COM_value: Integer); dispid 4;
    function getPOTValues: OleVariant; dispid 5;
    procedure setLampOn(COM_lampOn: WordBool); dispid 6;
    function isLampOn: WordBool; dispid 7;
    procedure setVisLampOn(COM_lampOn: WordBool); dispid 8;
    function isVisLampOn: WordBool; dispid 9;
    procedure setVisLampIntensity(COM_intens: Smallint); dispid 10;
    function getVisLampIntensity: Smallint; dispid 11;
    procedure setUVLampIntensity(COM_intens: Smallint); dispid 12;
    function getUVLampIntensity: Smallint; dispid 13;
    function getLampIntensityMinimum: Integer; dispid 14;
    function getLampIntensityMaximum: Integer; dispid 15;
    function getLampIntensityIncrement: Integer; dispid 16;
    function toString: WideString; dispid 17;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 18;
  end;

// *********************************************************************//
// Interface: ICoUSB_LS450
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7F864876-AB8F-5690-911F-EBE8C6D71452}
// *********************************************************************//
  ICoUSB_LS450 = interface(IDispatch)
    ['{7F864876-AB8F-5690-911F-EBE8C6D71452}']
    procedure CreateUSB_LS450B(const COM_spectrometer: ICoUSBSpectrometer; 
                               const COM_usbInt: ICoUSBInterface); safecall;
    function getGUIFeatures: ICoGUIProviderCollection; safecall;
    function toString: WideString; safecall;
    procedure setLEDMode(COM_pulsed: WordBool); safecall;
    function getLS450Coefficients: ICoLS450Coefficients; safecall;
    procedure setLS450Coefficients(const COM_coeffs: ICoLS450Coefficients); safecall;
    procedure setLS450Info(COM_index: Integer; const COM_str: WideString); safecall;
    function getLS450Info(COM_index: Integer): WideString; safecall;
    procedure saveInfo; safecall;
    procedure loadInfo; safecall;
    procedure setAllLS450Info(const COM_ls450Coefficients: ICoLS450Coefficients); safecall;
    function getAllLS450Info: ICoLS450Coefficients; safecall;
    procedure loadLS450CoefficientsFromEEPROM; safecall;
    function getO2ProbeCalibrationCoefficients: OleVariant; safecall;
    procedure setO2ProbeCalibrationCoefficients(COM_coefficients: OleVariant); safecall;
    procedure setDACCounts(COM_counts: Integer); safecall;
    function analogOutCountsToMilliamps(COM_counts: Integer): Double; safecall;
    function getDACMinimum: Integer; safecall;
    function getDACMaximum: Integer; safecall;
    function getDACIncrement: Integer; safecall;
    function getExternalTemperatureCelsius: Double; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUSB_LS450Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7F864876-AB8F-5690-911F-EBE8C6D71452}
// *********************************************************************//
  ICoUSB_LS450Disp = dispinterface
    ['{7F864876-AB8F-5690-911F-EBE8C6D71452}']
    procedure CreateUSB_LS450B(const COM_spectrometer: ICoUSBSpectrometer; 
                               const COM_usbInt: ICoUSBInterface); dispid 1;
    function getGUIFeatures: ICoGUIProviderCollection; dispid 2;
    function toString: WideString; dispid 3;
    procedure setLEDMode(COM_pulsed: WordBool); dispid 4;
    function getLS450Coefficients: ICoLS450Coefficients; dispid 5;
    procedure setLS450Coefficients(const COM_coeffs: ICoLS450Coefficients); dispid 6;
    procedure setLS450Info(COM_index: Integer; const COM_str: WideString); dispid 7;
    function getLS450Info(COM_index: Integer): WideString; dispid 8;
    procedure saveInfo; dispid 9;
    procedure loadInfo; dispid 10;
    procedure setAllLS450Info(const COM_ls450Coefficients: ICoLS450Coefficients); dispid 11;
    function getAllLS450Info: ICoLS450Coefficients; dispid 12;
    procedure loadLS450CoefficientsFromEEPROM; dispid 13;
    function getO2ProbeCalibrationCoefficients: OleVariant; dispid 14;
    procedure setO2ProbeCalibrationCoefficients(COM_coefficients: OleVariant); dispid 15;
    procedure setDACCounts(COM_counts: Integer); dispid 16;
    function analogOutCountsToMilliamps(COM_counts: Integer): Double; dispid 17;
    function getDACMinimum: Integer; dispid 18;
    function getDACMaximum: Integer; dispid 19;
    function getDACIncrement: Integer; dispid 20;
    function getExternalTemperatureCelsius: Double; dispid 21;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 22;
  end;

// *********************************************************************//
// Interface: ICoUV_VIS_LightSource
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {63D8AFBE-B6E7-54CE-8128-630E86FA0D6B}
// *********************************************************************//
  ICoUV_VIS_LightSource = interface(IDispatch)
    ['{63D8AFBE-B6E7-54CE-8128-630E86FA0D6B}']
    procedure CreateUV_VIS_LightSource; safecall;
    procedure setPowerUpPOTValues; safecall;
    procedure setPOTValue(COM_param0: Integer; COM_param1: Integer); safecall;
    function getPOTValues: OleVariant; safecall;
    procedure setLampOn(COM_param0: WordBool); safecall;
    function isLampOn: WordBool; safecall;
    procedure setVisLampOn(COM_param0: WordBool); safecall;
    function isVisLampOn: WordBool; safecall;
    procedure setVisLampIntensity(COM_param0: Smallint); safecall;
    function getVisLampIntensity: Smallint; safecall;
    procedure setUVLampIntensity(COM_param0: Smallint); safecall;
    function getUVLampIntensity: Smallint; safecall;
    function getLampIntensityMinimum: Integer; safecall;
    function getLampIntensityMaximum: Integer; safecall;
    function getLampIntensityIncrement: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUV_VIS_LightSourceDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {63D8AFBE-B6E7-54CE-8128-630E86FA0D6B}
// *********************************************************************//
  ICoUV_VIS_LightSourceDisp = dispinterface
    ['{63D8AFBE-B6E7-54CE-8128-630E86FA0D6B}']
    procedure CreateUV_VIS_LightSource; dispid 1;
    procedure setPowerUpPOTValues; dispid 2;
    procedure setPOTValue(COM_param0: Integer; COM_param1: Integer); dispid 3;
    function getPOTValues: OleVariant; dispid 4;
    procedure setLampOn(COM_param0: WordBool); dispid 5;
    function isLampOn: WordBool; dispid 6;
    procedure setVisLampOn(COM_param0: WordBool); dispid 7;
    function isVisLampOn: WordBool; dispid 8;
    procedure setVisLampIntensity(COM_param0: Smallint); dispid 9;
    function getVisLampIntensity: Smallint; dispid 10;
    procedure setUVLampIntensity(COM_param0: Smallint); dispid 11;
    function getUVLampIntensity: Smallint; dispid 12;
    function getLampIntensityMinimum: Integer; dispid 13;
    function getLampIntensityMaximum: Integer; dispid 14;
    function getLampIntensityIncrement: Integer; dispid 15;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 16;
  end;

// *********************************************************************//
// Interface: ICoUV_VIS_LightSourceGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {453014F3-E447-54EB-80DF-C1D9DDC4AF0E}
// *********************************************************************//
  ICoUV_VIS_LightSourceGUIProvider = interface(IDispatch)
    ['{453014F3-E447-54EB-80DF-C1D9DDC4AF0E}']
    procedure CreateUV_VIS_LightSourceGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUV_VIS_LightSourceGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {453014F3-E447-54EB-80DF-C1D9DDC4AF0E}
// *********************************************************************//
  ICoUV_VIS_LightSourceGUIProviderDisp = dispinterface
    ['{453014F3-E447-54EB-80DF-C1D9DDC4AF0E}']
    procedure CreateUV_VIS_LightSourceGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoUV_VIS_LightSourceImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0C127E0E-64D8-5BD7-8042-F688D1A948B2}
// *********************************************************************//
  ICoUV_VIS_LightSourceImpl = interface(IDispatch)
    ['{0C127E0E-64D8-5BD7-8042-F688D1A948B2}']
    procedure CreateUV_VIS_LightSourceImplB(const COM_usbInt: ICoUSBInterface); safecall;
    procedure setLampOn(COM_lampOn: WordBool); safecall;
    function isLampOn: WordBool; safecall;
    function isVisLampOn: WordBool; safecall;
    procedure setVisLampOn(COM_lampOn: WordBool); safecall;
    function getVisLampIntensity: Smallint; safecall;
    procedure setVisLampIntensity(COM_intens: Smallint); safecall;
    procedure setUVLampIntensity(COM_intens: Smallint); safecall;
    function getUVLampIntensity: Smallint; safecall;
    procedure setPowerUpPOTValues; safecall;
    function getPOTValues: OleVariant; safecall;
    procedure setPOTValue(COM_pot: Integer; COM_value: Integer); safecall;
    function getLampIntensityMinimum: Integer; safecall;
    function getLampIntensityMaximum: Integer; safecall;
    function getLampIntensityIncrement: Integer; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUV_VIS_LightSourceImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0C127E0E-64D8-5BD7-8042-F688D1A948B2}
// *********************************************************************//
  ICoUV_VIS_LightSourceImplDisp = dispinterface
    ['{0C127E0E-64D8-5BD7-8042-F688D1A948B2}']
    procedure CreateUV_VIS_LightSourceImplB(const COM_usbInt: ICoUSBInterface); dispid 1;
    procedure setLampOn(COM_lampOn: WordBool); dispid 2;
    function isLampOn: WordBool; dispid 3;
    function isVisLampOn: WordBool; dispid 4;
    procedure setVisLampOn(COM_lampOn: WordBool); dispid 5;
    function getVisLampIntensity: Smallint; dispid 6;
    procedure setVisLampIntensity(COM_intens: Smallint); dispid 7;
    procedure setUVLampIntensity(COM_intens: Smallint); dispid 8;
    function getUVLampIntensity: Smallint; dispid 9;
    procedure setPowerUpPOTValues; dispid 10;
    function getPOTValues: OleVariant; dispid 11;
    procedure setPOTValue(COM_pot: Integer; COM_value: Integer); dispid 12;
    function getLampIntensityMinimum: Integer; dispid 13;
    function getLampIntensityMaximum: Integer; dispid 14;
    function getLampIntensityIncrement: Integer; dispid 15;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 17;
  end;

// *********************************************************************//
// Interface: ICoUV_VIS_LightSourceImpl_2000
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {87939515-C221-5F6E-90B2-0DAEA7712E12}
// *********************************************************************//
  ICoUV_VIS_LightSourceImpl_2000 = interface(IDispatch)
    ['{87939515-C221-5F6E-90B2-0DAEA7712E12}']
    procedure CreateUV_VIS_LightSourceImpl_2000B(const COM_usbInt: ICoUSBInterface); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUV_VIS_LightSourceImpl_2000Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {87939515-C221-5F6E-90B2-0DAEA7712E12}
// *********************************************************************//
  ICoUV_VIS_LightSourceImpl_2000Disp = dispinterface
    ['{87939515-C221-5F6E-90B2-0DAEA7712E12}']
    procedure CreateUV_VIS_LightSourceImpl_2000B(const COM_usbInt: ICoUSBInterface); dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoUV_VIS_LightSourceImpl_4000
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {565CF604-978C-5BA1-807E-3A921A79EA1A}
// *********************************************************************//
  ICoUV_VIS_LightSourceImpl_4000 = interface(IDispatch)
    ['{565CF604-978C-5BA1-807E-3A921A79EA1A}']
    procedure CreateUV_VIS_LightSourceImpl_4000B(const COM_usbInt: ICoUSBInterface); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUV_VIS_LightSourceImpl_4000Disp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {565CF604-978C-5BA1-807E-3A921A79EA1A}
// *********************************************************************//
  ICoUV_VIS_LightSourceImpl_4000Disp = dispinterface
    ['{565CF604-978C-5BA1-807E-3A921A79EA1A}']
    procedure CreateUV_VIS_LightSourceImpl_4000B(const COM_usbInt: ICoUSBInterface); dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoUV_VIS_LightSourceJAZCompatible
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DDE1DEFF-86E6-514E-904E-54F0E7CA3E03}
// *********************************************************************//
  ICoUV_VIS_LightSourceJAZCompatible = interface(IDispatch)
    ['{DDE1DEFF-86E6-514E-904E-54F0E7CA3E03}']
    procedure CreateUV_VIS_LightSourceJAZCompatible; safecall;
    procedure setPowerUpPOTValues; safecall;
    function getPOTValues: OleVariant; safecall;
    procedure setPOTValue(COM_param0: Integer; COM_param1: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUV_VIS_LightSourceJAZCompatibleDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {DDE1DEFF-86E6-514E-904E-54F0E7CA3E03}
// *********************************************************************//
  ICoUV_VIS_LightSourceJAZCompatibleDisp = dispinterface
    ['{DDE1DEFF-86E6-514E-904E-54F0E7CA3E03}']
    procedure CreateUV_VIS_LightSourceJAZCompatible; dispid 1;
    procedure setPowerUpPOTValues; dispid 2;
    function getPOTValues: OleVariant; dispid 3;
    procedure setPOTValue(COM_param0: Integer; COM_param1: Integer); dispid 4;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 5;
  end;

// *********************************************************************//
// Interface: ICoUV_VIS_LightSourceImpl_JAZ
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BDC4D21D-B555-59B0-910A-3644D411139B}
// *********************************************************************//
  ICoUV_VIS_LightSourceImpl_JAZ = interface(IDispatch)
    ['{BDC4D21D-B555-59B0-910A-3644D411139B}']
    procedure CreateUV_VIS_LightSourceImpl_JAZB(const COM_usbInt: ICoUSBInterface; 
                                                const COM_spec: ICoUV_VIS_LightSourceJAZCompatible); safecall;
    procedure setPowerUpPOTValues; safecall;
    function getJAZPOTValues: OleVariant; safecall;
    procedure setPOTValue(COM_pot: Integer; COM_value: Integer); safecall;
    function getLampIntensityMaximum: Integer; safecall;
    procedure setVisLampIntensity(COM_intens: Smallint); safecall;
    procedure setUVLampIntensity(COM_intens: Smallint); safecall;
    function getUVLampIntensity: Smallint; safecall;
    function getVisLampIntensity: Smallint; safecall;
    function isLampOn: WordBool; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUV_VIS_LightSourceImpl_JAZDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BDC4D21D-B555-59B0-910A-3644D411139B}
// *********************************************************************//
  ICoUV_VIS_LightSourceImpl_JAZDisp = dispinterface
    ['{BDC4D21D-B555-59B0-910A-3644D411139B}']
    procedure CreateUV_VIS_LightSourceImpl_JAZB(const COM_usbInt: ICoUSBInterface; 
                                                const COM_spec: ICoUV_VIS_LightSourceJAZCompatible); dispid 1;
    procedure setPowerUpPOTValues; dispid 2;
    function getJAZPOTValues: OleVariant; dispid 3;
    procedure setPOTValue(COM_pot: Integer; COM_value: Integer); dispid 4;
    function getLampIntensityMaximum: Integer; dispid 5;
    procedure setVisLampIntensity(COM_intens: Smallint); dispid 6;
    procedure setUVLampIntensity(COM_intens: Smallint); dispid 7;
    function getUVLampIntensity: Smallint; dispid 8;
    function getVisLampIntensity: Smallint; dispid 9;
    function isLampOn: WordBool; dispid 10;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 11;
  end;

// *********************************************************************//
// Interface: ICoUniUSB
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9CA86CAE-68C8-52FD-916D-D8FB54E0668D}
// *********************************************************************//
  ICoUniUSB = interface(IDispatch)
    ['{9CA86CAE-68C8-52FD-916D-D8FB54E0668D}']
    procedure CreateUniUSB; safecall;
    function isUSB2Mode: WordBool; safecall;
    function openDevice(COM_vendID: Integer; COM_prodID: Integer; COM_number: Integer): Integer; safecall;
    procedure closeDevice(COM_devID: Integer); safecall;
    function bulkIn(COM_devID: Integer; const COM_endPointDescriptor: ICoUSBEndpointDescriptor; 
                    COM_data: OleVariant; COM_size: Integer): Integer; safecall;
    function bulkOut(COM_devID: Integer; const COM_endPointDescriptor: ICoUSBEndpointDescriptor; 
                     COM_data: OleVariant; COM_size: Integer): Integer; safecall;
    procedure resetPipe(COM_devID: Integer; const COM_endPointDescriptor: ICoUSBEndpointDescriptor); safecall;
    procedure abortPipe(COM_devID: Integer; const COM_endPointDescriptor: ICoUSBEndpointDescriptor); safecall;
    function getUSBConfigurationDescriptor(COM_devID: Integer; COM_configNum: Integer): ICoUSBConfigurationDescriptor; safecall;
    function getUSBDeviceDescriptor(COM_devID: Integer): ICoUSBDeviceDescriptor; safecall;
    function getUSBInterfaceDescriptor(COM_devID: Integer): ICoUSBInterfaceDescriptor; safecall;
    function getUSBStringDescriptor(COM_devID: Integer; COM_index: Integer): WideString; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUniUSBDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9CA86CAE-68C8-52FD-916D-D8FB54E0668D}
// *********************************************************************//
  ICoUniUSBDisp = dispinterface
    ['{9CA86CAE-68C8-52FD-916D-D8FB54E0668D}']
    procedure CreateUniUSB; dispid 1;
    function isUSB2Mode: WordBool; dispid 2;
    function openDevice(COM_vendID: Integer; COM_prodID: Integer; COM_number: Integer): Integer; dispid 3;
    procedure closeDevice(COM_devID: Integer); dispid 4;
    function bulkIn(COM_devID: Integer; const COM_endPointDescriptor: ICoUSBEndpointDescriptor; 
                    COM_data: OleVariant; COM_size: Integer): Integer; dispid 5;
    function bulkOut(COM_devID: Integer; const COM_endPointDescriptor: ICoUSBEndpointDescriptor; 
                     COM_data: OleVariant; COM_size: Integer): Integer; dispid 6;
    procedure resetPipe(COM_devID: Integer; const COM_endPointDescriptor: ICoUSBEndpointDescriptor); dispid 7;
    procedure abortPipe(COM_devID: Integer; const COM_endPointDescriptor: ICoUSBEndpointDescriptor); dispid 8;
    function getUSBConfigurationDescriptor(COM_devID: Integer; COM_configNum: Integer): ICoUSBConfigurationDescriptor; dispid 9;
    function getUSBDeviceDescriptor(COM_devID: Integer): ICoUSBDeviceDescriptor; dispid 10;
    function getUSBInterfaceDescriptor(COM_devID: Integer): ICoUSBInterfaceDescriptor; dispid 11;
    function getUSBStringDescriptor(COM_devID: Integer; COM_index: Integer): WideString; dispid 12;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 13;
  end;

// *********************************************************************//
// Interface: ICoUniUSBPipeManager
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {905EF4DF-24DF-5E81-8075-ED5D816DCF74}
// *********************************************************************//
  ICoUniUSBPipeManager = interface(IDispatch)
    ['{905EF4DF-24DF-5E81-8075-ED5D816DCF74}']
    procedure CreateUniUSBPipeManager; safecall;
    procedure addDeviceMapping(COM_devID: Integer; const COM_mapping: ICoEndpointToPipeMapping); safecall;
    function getPipe(COM_devID: Integer; COM_endPoint: Smallint): Integer; safecall;
    procedure removeDeviceMapping(COM_devID: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoUniUSBPipeManagerDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {905EF4DF-24DF-5E81-8075-ED5D816DCF74}
// *********************************************************************//
  ICoUniUSBPipeManagerDisp = dispinterface
    ['{905EF4DF-24DF-5E81-8075-ED5D816DCF74}']
    procedure CreateUniUSBPipeManager; dispid 1;
    procedure addDeviceMapping(COM_devID: Integer; const COM_mapping: ICoEndpointToPipeMapping); dispid 2;
    function getPipe(COM_devID: Integer; COM_endPoint: Smallint): Integer; dispid 3;
    procedure removeDeviceMapping(COM_devID: Integer); dispid 4;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 5;
  end;

// *********************************************************************//
// Interface: ICoVersion
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6D8D59DA-EB63-573D-9007-ED97488A9EBA}
// *********************************************************************//
  ICoVersion = interface(IDispatch)
    ['{6D8D59DA-EB63-573D-9007-ED97488A9EBA}']
    procedure CreateVersion; safecall;
    function isAdvancedVersion: WordBool; safecall;
    function getFirmwareVersion: WideString; safecall;
    procedure addAcquisitionListener(const COM_param0: ICoAcquisitionListener); safecall;
    procedure removeAcquisitionListener(const COM_param0: ICoAcquisitionListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoVersionDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6D8D59DA-EB63-573D-9007-ED97488A9EBA}
// *********************************************************************//
  ICoVersionDisp = dispinterface
    ['{6D8D59DA-EB63-573D-9007-ED97488A9EBA}']
    procedure CreateVersion; dispid 1;
    function isAdvancedVersion: WordBool; dispid 2;
    function getFirmwareVersion: WideString; dispid 3;
    procedure addAcquisitionListener(const COM_param0: ICoAcquisitionListener); dispid 4;
    procedure removeAcquisitionListener(const COM_param0: ICoAcquisitionListener); dispid 5;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 6;
  end;

// *********************************************************************//
// Interface: ICoVersionGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {25D13161-1B32-5078-81DF-705C879C3DD6}
// *********************************************************************//
  ICoVersionGUIProvider = interface(IDispatch)
    ['{25D13161-1B32-5078-81DF-705C879C3DD6}']
    procedure CreateVersionGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoVersionGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {25D13161-1B32-5078-81DF-705C879C3DD6}
// *********************************************************************//
  ICoVersionGUIProviderDisp = dispinterface
    ['{25D13161-1B32-5078-81DF-705C879C3DD6}']
    procedure CreateVersionGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoVersionImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {01FEE2E1-4F1F-5A31-8131-8D2F12FB7292}
// *********************************************************************//
  ICoVersionImpl = interface(IDispatch)
    ['{01FEE2E1-4F1F-5A31-8131-8D2F12FB7292}']
    procedure CreateVersionImplB(const COM_usbInt: ICoUSBInterface; 
                                 const COM_spectrometer: ICoSpectrometer); safecall;
    function isAdvancedVersion: WordBool; safecall;
    function getFirmwareVersion: WideString; safecall;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoVersionImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {01FEE2E1-4F1F-5A31-8131-8D2F12FB7292}
// *********************************************************************//
  ICoVersionImplDisp = dispinterface
    ['{01FEE2E1-4F1F-5A31-8131-8D2F12FB7292}']
    procedure CreateVersionImplB(const COM_usbInt: ICoUSBInterface; 
                                 const COM_spectrometer: ICoSpectrometer); dispid 1;
    function isAdvancedVersion: WordBool; dispid 2;
    function getFirmwareVersion: WideString; dispid 3;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 5;
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener); dispid 6;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 7;
  end;

// *********************************************************************//
// Interface: ICoWavelengthCalibrationGUIProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A5E0FD64-31A6-585C-804B-46848479AC8D}
// *********************************************************************//
  ICoWavelengthCalibrationGUIProvider = interface(IDispatch)
    ['{A5E0FD64-31A6-585C-804B-46848479AC8D}']
    procedure CreateWavelengthCalibrationGUIProvider; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoWavelengthCalibrationGUIProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A5E0FD64-31A6-585C-804B-46848479AC8D}
// *********************************************************************//
  ICoWavelengthCalibrationGUIProviderDisp = dispinterface
    ['{A5E0FD64-31A6-585C-804B-46848479AC8D}']
    procedure CreateWavelengthCalibrationGUIProvider; dispid 1;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 2;
  end;

// *********************************************************************//
// Interface: ICoWavelengthCalibrationImpl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {13292F69-F32B-513B-915E-CB9F187BC432}
// *********************************************************************//
  ICoWavelengthCalibrationImpl = interface(IDispatch)
    ['{13292F69-F32B-513B-915E-CB9F187BC432}']
    procedure CreateWavelengthCalibrationImplB(const COM_usbInt: ICoUSBInterface; 
                                               const COM_s: ICoSpectrometer); safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_channel: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wl: OleVariant; COM_channel: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoWavelengthCalibrationImplDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {13292F69-F32B-513B-915E-CB9F187BC432}
// *********************************************************************//
  ICoWavelengthCalibrationImplDisp = dispinterface
    ['{13292F69-F32B-513B-915E-CB9F187BC432}']
    procedure CreateWavelengthCalibrationImplB(const COM_usbInt: ICoUSBInterface; 
                                               const COM_s: ICoSpectrometer); dispid 1;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 3;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 5;
    function getWavelengths(COM_channel: Integer): OleVariant; dispid 6;
    procedure setWavelengths(COM_wl: OleVariant; COM_channel: Integer); dispid 7;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 9;
  end;

// *********************************************************************//
// Interface: ICoWavelengthCalibrationImpl_MMSRaman
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B0CC345B-92F6-5045-804C-4A0BF5319A94}
// *********************************************************************//
  ICoWavelengthCalibrationImpl_MMSRaman = interface(IDispatch)
    ['{B0CC345B-92F6-5045-804C-4A0BF5319A94}']
    procedure CreateWavelengthCalibrationImpl_MMSRamanB(const COM_usb: ICoUSBInterface; 
                                                        const COM_s: ICoMMSRamanSpectrometer); safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_index: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_wavelengths: OleVariant; COM_index: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoWavelengthCalibrationImpl_MMSRamanDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B0CC345B-92F6-5045-804C-4A0BF5319A94}
// *********************************************************************//
  ICoWavelengthCalibrationImpl_MMSRamanDisp = dispinterface
    ['{B0CC345B-92F6-5045-804C-4A0BF5319A94}']
    procedure CreateWavelengthCalibrationImpl_MMSRamanB(const COM_usb: ICoUSBInterface; 
                                                        const COM_s: ICoMMSRamanSpectrometer); dispid 1;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 3;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 5;
    function getWavelengths(COM_index: Integer): OleVariant; dispid 6;
    procedure setWavelengths(COM_wavelengths: OleVariant; COM_index: Integer); dispid 7;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 9;
  end;

// *********************************************************************//
// Interface: ICoWavelengthCalibrationProvider
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7A4495F8-85AB-5A02-91D9-2282AFC3E0F9}
// *********************************************************************//
  ICoWavelengthCalibrationProvider = interface(IDispatch)
    ['{7A4495F8-85AB-5A02-91D9-2282AFC3E0F9}']
    procedure CreateWavelengthCalibrationProvider; safecall;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; safecall;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; safecall;
    function getWavelengths(COM_param0: Integer): OleVariant; safecall;
    procedure setWavelengths(COM_param0: OleVariant; COM_param1: Integer); safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoWavelengthCalibrationProviderDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7A4495F8-85AB-5A02-91D9-2282AFC3E0F9}
// *********************************************************************//
  ICoWavelengthCalibrationProviderDisp = dispinterface
    ['{7A4495F8-85AB-5A02-91D9-2282AFC3E0F9}']
    procedure CreateWavelengthCalibrationProvider; dispid 1;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection; dispid 3;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection; dispid 5;
    function getWavelengths(COM_param0: Integer): OleVariant; dispid 6;
    procedure setWavelengths(COM_param0: OleVariant; COM_param1: Integer); dispid 7;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 8;
  end;

// *********************************************************************//
// Interface: ICoWavelengthCalibrationTableModel
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {73B5369F-4044-585C-80F9-8E29E9FB7A98}
// *********************************************************************//
  ICoWavelengthCalibrationTableModel = interface(IDispatch)
    ['{73B5369F-4044-585C-80F9-8E29E9FB7A98}']
    procedure CreateWavelengthCalibrationTableModel; safecall;
    procedure setCoefficients(COM_coefficients: OleVariant); safecall;
    function getCoefficient(COM_row: Integer): Double; safecall;
    function isCellEditable(COM_rowIndex: Integer; COM_columnIndex: Integer): WordBool; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoWavelengthCalibrationTableModelDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {73B5369F-4044-585C-80F9-8E29E9FB7A98}
// *********************************************************************//
  ICoWavelengthCalibrationTableModelDisp = dispinterface
    ['{73B5369F-4044-585C-80F9-8E29E9FB7A98}']
    procedure CreateWavelengthCalibrationTableModel; dispid 1;
    procedure setCoefficients(COM_coefficients: OleVariant); dispid 2;
    function getCoefficient(COM_row: Integer): Double; dispid 3;
    function isCellEditable(COM_rowIndex: Integer; COM_columnIndex: Integer): WordBool; dispid 4;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 5;
  end;

// *********************************************************************//
// Interface: ICoWrapper
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EC41C2F1-AE7B-5388-81A9-6E1C82AFE801}
// *********************************************************************//
  ICoWrapper = interface(IDispatch)
    ['{EC41C2F1-AE7B-5388-81A9-6E1C82AFE801}']
    procedure CreateWrapper; safecall;
    function getApiVersion: WideString; safecall;
    function getBuildNumber: Integer; safecall;
    function getLastException: WideString; safecall;
    function getLastExceptionStackTrace: WideString; safecall;
    function openAllSpectrometers: Integer; safecall;
    function getName(COM_spectrometerIndex: Integer): WideString; safecall;
    function getMaximumIntegrationTime(COM_spectrometerIndex: Integer): Integer; safecall;
    function getMinimumIntegrationTime(COM_spectrometerIndex: Integer): Integer; safecall;
    function getMaximumIntensity(COM_spectrometerIndex: Integer): Integer; safecall;
    function getNumberOfSpectrometersFound: Integer; safecall;
    function getFirmwareVersion(COM_spectrometerIndex: Integer): WideString; safecall;
    function getSerialNumber(COM_spectrometerIndex: Integer): WideString; safecall;
    function getNumberOfPixels(COM_spectrometerIndex: Integer): Integer; safecall;
    function getNumberOfDarkPixels(COM_spectrometerIndex: Integer): Integer; safecall;
    function getNumberOfEnabledChannels(COM_spectrometerIndex: Integer): Integer; safecall;
    procedure setIntegrationTime(COM_spectrometerIndex: Integer; COM_usec: Integer); safecall;
    procedure setIntegrationTimeB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer; 
                                  COM_usec: Integer); safecall;
    function getIntegrationTime(COM_spectrometerIndex: Integer): Integer; safecall;
    function getIntegrationTimeB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Integer; safecall;
    procedure setScansToAverage(COM_spectrometerIndex: Integer; COM_numberOfScansToAverage: Integer); safecall;
    procedure setScansToAverageB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer; 
                                 COM_numberOfScansToAverage: Integer); safecall;
    function getScansToAverage(COM_spectrometerIndex: Integer): Integer; safecall;
    function getScansToAverageB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Integer; safecall;
    function getBench(COM_spectrometerIndex: Integer): ICoBench; safecall;
    procedure setBoxcarWidth(COM_spectrometerIndex: Integer; 
                             COM_numberOfPixelsOnEitherSideOfCenter: Integer); safecall;
    procedure setBoxcarWidthB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer; 
                              COM_numberOfPixelsOnEitherSideOfCenter: Integer); safecall;
    function getBoxcarWidth(COM_spectrometerIndex: Integer): Integer; safecall;
    function getBoxcarWidthB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Integer; safecall;
    procedure setExternalTriggerMode(COM_spectrometerIndex: Integer; COM_mode: Integer); safecall;
    procedure setExternalTriggerModeB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer; 
                                      COM_mode: Integer); safecall;
    function getExternalTriggerMode(COM_spectrometerIndex: Integer): Integer; safecall;
    function getExternalTriggerModeB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Integer; safecall;
    procedure setCorrectForElectricalDark(COM_spectrometerIndex: Integer; COM_enable: Integer); safecall;
    procedure setCorrectForElectricalDarkB(COM_spectrometerIndex: Integer; 
                                           COM_channelIndex: Integer; COM_enable: Integer); safecall;
    procedure setCorrectForDetectorNonlinearity(COM_spectrometerIndex: Integer; COM_enable: Integer); safecall;
    procedure setCorrectForDetectorNonlinearityB(COM_spectrometerIndex: Integer; 
                                                 COM_channelIndex: Integer; COM_enable: Integer); safecall;
    procedure setStrobeEnable(COM_spectrometerIndex: Integer; COM_lampOn: Integer); safecall;
    procedure setStrobeEnableB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer; 
                               COM_lampOn: Integer); safecall;
    function getStrobeEnable(COM_spectrometerIndex: Integer): Integer; safecall;
    function getStrobeEnableB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Integer; safecall;
    function getWavelengths(COM_spectrometerIndex: Integer): OleVariant; safecall;
    function getWavelengthsB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): OleVariant; safecall;
    function getWavelengthIntercept(COM_spectrometerIndex: Integer): Double; safecall;
    function getWavelengthInterceptB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Double; safecall;
    function getWavelengthFirst(COM_spectrometerIndex: Integer): Double; safecall;
    function getWavelengthFirstB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Double; safecall;
    function getWavelengthSecond(COM_spectrometerIndex: Integer): Double; safecall;
    function getWavelengthSecondB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Double; safecall;
    function getWavelengthThird(COM_spectrometerIndex: Integer): Double; safecall;
    function getWavelengthThirdB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Double; safecall;
    function getSpectrum(COM_spectrometerIndex: Integer): OleVariant; safecall;
    function getSpectrumB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): OleVariant; safecall;
    function isSaturated(COM_spectrometerIndex: Integer): WordBool; safecall;
    function isSaturatedB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): WordBool; safecall;
    procedure closeAllSpectrometers; safecall;
    procedure closeSpectrometer(COM_spectrometerIndex: Integer); safecall;
    function getFeatureControllerGPIO(COM_spectrometerIndex: Integer): ICoGPIO; safecall;
    function isFeatureSupportedGPIO(COM_spectrometerIndex: Integer): WordBool; safecall;
    function getFeatureControllerSPIBus(COM_spectrometerIndex: Integer): ICoSPIBus; safecall;
    function isFeatureSupportedSPIBus(COM_spectrometerIndex: Integer): WordBool; safecall;
    function getFeatureControllerSingleStrobe(COM_spectrometerIndex: Integer): ICoSingleStrobe; safecall;
    function isFeatureSupportedSingleStrobe(COM_spectrometerIndex: Integer): WordBool; safecall;
    function getFeatureControllerContinuousStrobe(COM_spectrometerIndex: Integer): ICoContinuousStrobe; safecall;
    function isFeatureSupportedContinuousStrobe(COM_spectrometerIndex: Integer): WordBool; safecall;
    function getFeatureControllerBoardTemperature(COM_spectrometerIndex: Integer): ICoBoardTemperature; safecall;
    function isFeatureSupportedBoardTemperature(COM_spectrometerIndex: Integer): WordBool; safecall;
    function getFeatureControllerAnalogIn(COM_spectrometerIndex: Integer): ICoAnalogIn; safecall;
    function isFeatureSupportedAnalogIn(COM_spectrometerIndex: Integer): WordBool; safecall;
    function getFeatureControllerAnalogOut(COM_spectrometerIndex: Integer): ICoAnalogOut; safecall;
    function isFeatureSupportedAnalogOut(COM_spectrometerIndex: Integer): WordBool; safecall;
    function getFeatureControllerExternalTriggerDelay(COM_spectrometerIndex: Integer): ICoExternalTriggerDelay; safecall;
    function isFeatureSupportedExternalTriggerDelay(COM_spectrometerIndex: Integer): WordBool; safecall;
    function getFeatureControllerIrradianceCalibrationFactor(COM_spectrometerIndex: Integer): ICoIrradianceCalibrationFactor; safecall;
    function isFeatureSupportedIrradianceCalibrationFactor(COM_spectrometerIndex: Integer): WordBool; safecall;
    function getFeatureControllerNonlinearityCorrectionProvider(COM_spectrometerIndex: Integer): ICoNonlinearityCorrectionProvider; safecall;
    function isFeatureSupportedNonlinearityCorrectionProvider(COM_spectrometerIndex: Integer): WordBool; safecall;
    function getFeatureControllerStrayLightCorrection(COM_spectrometerIndex: Integer): ICoStrayLightCorrection; safecall;
    function isFeatureSupportedStrayLightCorrection(COM_spectrometerIndex: Integer): WordBool; safecall;
    function getFeatureControllerVersion(COM_spectrometerIndex: Integer): ICoVersion; safecall;
    function isFeatureSupportedVersion(COM_spectrometerIndex: Integer): WordBool; safecall;
    function getFeatureControllerWavelengthCalibrationProvider(COM_spectrometerIndex: Integer): ICoWavelengthCalibrationProvider; safecall;
    function isFeatureSupportedWavelengthCalibrationProvider(COM_spectrometerIndex: Integer): WordBool; safecall;
    function getFeatureControllerThermoElectric(COM_spectrometerIndex: Integer): ICoThermoElectric; safecall;
    function isFeatureSupportedThermoElectric(COM_spectrometerIndex: Integer): WordBool; safecall;
    procedure setAutoToggleStrobeLampEnable(COM_spectrometerIndex: Integer; COM_enable: WordBool); safecall;
    procedure setAutoToggleStrobeLampEnableB(COM_spectrometerIndex: Integer; 
                                             COM_channelIndex: Integer; COM_enable: WordBool); safecall;
    procedure highSpdAcq_AllocateBuffer(COM_spectrometerIndex: Integer; COM_numberOfSpectra: Integer); safecall;
    procedure highSpdAcq_StartAcquisition(COM_spectrometerIndex: Integer); safecall;
    procedure highSpdAcq_StartAcquisitionB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer); safecall;
    procedure highSpdAcq_StopAcquisition; safecall;
    function highSpdAcq_GetNumberOfSpectraAcquired: Integer; safecall;
    function highSpdAcq_GetSpectrum(COM_spectrumNumber: Integer): OleVariant; safecall;
    function highSpdAcq_IsSaturated(COM_spectrumNumber: Integer): WordBool; safecall;
    function highSpdAcq_GetTimeStamp(COM_spectrumNumber: Integer): ICoHighResTimeStamp; safecall;
    function GetOwnedClass: Largeuint; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoWrapperDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {EC41C2F1-AE7B-5388-81A9-6E1C82AFE801}
// *********************************************************************//
  ICoWrapperDisp = dispinterface
    ['{EC41C2F1-AE7B-5388-81A9-6E1C82AFE801}']
    procedure CreateWrapper; dispid 1;
    function getApiVersion: WideString; dispid 2;
    function getBuildNumber: Integer; dispid 3;
    function getLastException: WideString; dispid 4;
    function getLastExceptionStackTrace: WideString; dispid 5;
    function openAllSpectrometers: Integer; dispid 6;
    function getName(COM_spectrometerIndex: Integer): WideString; dispid 7;
    function getMaximumIntegrationTime(COM_spectrometerIndex: Integer): Integer; dispid 8;
    function getMinimumIntegrationTime(COM_spectrometerIndex: Integer): Integer; dispid 9;
    function getMaximumIntensity(COM_spectrometerIndex: Integer): Integer; dispid 10;
    function getNumberOfSpectrometersFound: Integer; dispid 11;
    function getFirmwareVersion(COM_spectrometerIndex: Integer): WideString; dispid 12;
    function getSerialNumber(COM_spectrometerIndex: Integer): WideString; dispid 13;
    function getNumberOfPixels(COM_spectrometerIndex: Integer): Integer; dispid 14;
    function getNumberOfDarkPixels(COM_spectrometerIndex: Integer): Integer; dispid 15;
    function getNumberOfEnabledChannels(COM_spectrometerIndex: Integer): Integer; dispid 16;
    procedure setIntegrationTime(COM_spectrometerIndex: Integer; COM_usec: Integer); dispid 17;
    procedure setIntegrationTimeB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer; 
                                  COM_usec: Integer); dispid 18;
    function getIntegrationTime(COM_spectrometerIndex: Integer): Integer; dispid 19;
    function getIntegrationTimeB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Integer; dispid 20;
    procedure setScansToAverage(COM_spectrometerIndex: Integer; COM_numberOfScansToAverage: Integer); dispid 21;
    procedure setScansToAverageB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer; 
                                 COM_numberOfScansToAverage: Integer); dispid 22;
    function getScansToAverage(COM_spectrometerIndex: Integer): Integer; dispid 23;
    function getScansToAverageB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Integer; dispid 24;
    function getBench(COM_spectrometerIndex: Integer): ICoBench; dispid 25;
    procedure setBoxcarWidth(COM_spectrometerIndex: Integer; 
                             COM_numberOfPixelsOnEitherSideOfCenter: Integer); dispid 26;
    procedure setBoxcarWidthB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer; 
                              COM_numberOfPixelsOnEitherSideOfCenter: Integer); dispid 27;
    function getBoxcarWidth(COM_spectrometerIndex: Integer): Integer; dispid 28;
    function getBoxcarWidthB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Integer; dispid 29;
    procedure setExternalTriggerMode(COM_spectrometerIndex: Integer; COM_mode: Integer); dispid 30;
    procedure setExternalTriggerModeB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer; 
                                      COM_mode: Integer); dispid 31;
    function getExternalTriggerMode(COM_spectrometerIndex: Integer): Integer; dispid 32;
    function getExternalTriggerModeB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Integer; dispid 33;
    procedure setCorrectForElectricalDark(COM_spectrometerIndex: Integer; COM_enable: Integer); dispid 34;
    procedure setCorrectForElectricalDarkB(COM_spectrometerIndex: Integer; 
                                           COM_channelIndex: Integer; COM_enable: Integer); dispid 35;
    procedure setCorrectForDetectorNonlinearity(COM_spectrometerIndex: Integer; COM_enable: Integer); dispid 36;
    procedure setCorrectForDetectorNonlinearityB(COM_spectrometerIndex: Integer; 
                                                 COM_channelIndex: Integer; COM_enable: Integer); dispid 37;
    procedure setStrobeEnable(COM_spectrometerIndex: Integer; COM_lampOn: Integer); dispid 38;
    procedure setStrobeEnableB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer; 
                               COM_lampOn: Integer); dispid 39;
    function getStrobeEnable(COM_spectrometerIndex: Integer): Integer; dispid 40;
    function getStrobeEnableB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Integer; dispid 41;
    function getWavelengths(COM_spectrometerIndex: Integer): OleVariant; dispid 42;
    function getWavelengthsB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): OleVariant; dispid 43;
    function getWavelengthIntercept(COM_spectrometerIndex: Integer): Double; dispid 44;
    function getWavelengthInterceptB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Double; dispid 45;
    function getWavelengthFirst(COM_spectrometerIndex: Integer): Double; dispid 46;
    function getWavelengthFirstB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Double; dispid 47;
    function getWavelengthSecond(COM_spectrometerIndex: Integer): Double; dispid 48;
    function getWavelengthSecondB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Double; dispid 49;
    function getWavelengthThird(COM_spectrometerIndex: Integer): Double; dispid 50;
    function getWavelengthThirdB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Double; dispid 51;
    function getSpectrum(COM_spectrometerIndex: Integer): OleVariant; dispid 52;
    function getSpectrumB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): OleVariant; dispid 53;
    function isSaturated(COM_spectrometerIndex: Integer): WordBool; dispid 54;
    function isSaturatedB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): WordBool; dispid 55;
    procedure closeAllSpectrometers; dispid 56;
    procedure closeSpectrometer(COM_spectrometerIndex: Integer); dispid 57;
    function getFeatureControllerGPIO(COM_spectrometerIndex: Integer): ICoGPIO; dispid 58;
    function isFeatureSupportedGPIO(COM_spectrometerIndex: Integer): WordBool; dispid 59;
    function getFeatureControllerSPIBus(COM_spectrometerIndex: Integer): ICoSPIBus; dispid 60;
    function isFeatureSupportedSPIBus(COM_spectrometerIndex: Integer): WordBool; dispid 61;
    function getFeatureControllerSingleStrobe(COM_spectrometerIndex: Integer): ICoSingleStrobe; dispid 62;
    function isFeatureSupportedSingleStrobe(COM_spectrometerIndex: Integer): WordBool; dispid 63;
    function getFeatureControllerContinuousStrobe(COM_spectrometerIndex: Integer): ICoContinuousStrobe; dispid 64;
    function isFeatureSupportedContinuousStrobe(COM_spectrometerIndex: Integer): WordBool; dispid 65;
    function getFeatureControllerBoardTemperature(COM_spectrometerIndex: Integer): ICoBoardTemperature; dispid 66;
    function isFeatureSupportedBoardTemperature(COM_spectrometerIndex: Integer): WordBool; dispid 67;
    function getFeatureControllerAnalogIn(COM_spectrometerIndex: Integer): ICoAnalogIn; dispid 68;
    function isFeatureSupportedAnalogIn(COM_spectrometerIndex: Integer): WordBool; dispid 69;
    function getFeatureControllerAnalogOut(COM_spectrometerIndex: Integer): ICoAnalogOut; dispid 70;
    function isFeatureSupportedAnalogOut(COM_spectrometerIndex: Integer): WordBool; dispid 71;
    function getFeatureControllerExternalTriggerDelay(COM_spectrometerIndex: Integer): ICoExternalTriggerDelay; dispid 72;
    function isFeatureSupportedExternalTriggerDelay(COM_spectrometerIndex: Integer): WordBool; dispid 73;
    function getFeatureControllerIrradianceCalibrationFactor(COM_spectrometerIndex: Integer): ICoIrradianceCalibrationFactor; dispid 74;
    function isFeatureSupportedIrradianceCalibrationFactor(COM_spectrometerIndex: Integer): WordBool; dispid 75;
    function getFeatureControllerNonlinearityCorrectionProvider(COM_spectrometerIndex: Integer): ICoNonlinearityCorrectionProvider; dispid 76;
    function isFeatureSupportedNonlinearityCorrectionProvider(COM_spectrometerIndex: Integer): WordBool; dispid 77;
    function getFeatureControllerStrayLightCorrection(COM_spectrometerIndex: Integer): ICoStrayLightCorrection; dispid 78;
    function isFeatureSupportedStrayLightCorrection(COM_spectrometerIndex: Integer): WordBool; dispid 79;
    function getFeatureControllerVersion(COM_spectrometerIndex: Integer): ICoVersion; dispid 80;
    function isFeatureSupportedVersion(COM_spectrometerIndex: Integer): WordBool; dispid 81;
    function getFeatureControllerWavelengthCalibrationProvider(COM_spectrometerIndex: Integer): ICoWavelengthCalibrationProvider; dispid 82;
    function isFeatureSupportedWavelengthCalibrationProvider(COM_spectrometerIndex: Integer): WordBool; dispid 83;
    function getFeatureControllerThermoElectric(COM_spectrometerIndex: Integer): ICoThermoElectric; dispid 84;
    function isFeatureSupportedThermoElectric(COM_spectrometerIndex: Integer): WordBool; dispid 85;
    procedure setAutoToggleStrobeLampEnable(COM_spectrometerIndex: Integer; COM_enable: WordBool); dispid 86;
    procedure setAutoToggleStrobeLampEnableB(COM_spectrometerIndex: Integer; 
                                             COM_channelIndex: Integer; COM_enable: WordBool); dispid 87;
    procedure highSpdAcq_AllocateBuffer(COM_spectrometerIndex: Integer; COM_numberOfSpectra: Integer); dispid 88;
    procedure highSpdAcq_StartAcquisition(COM_spectrometerIndex: Integer); dispid 89;
    procedure highSpdAcq_StartAcquisitionB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer); dispid 90;
    procedure highSpdAcq_StopAcquisition; dispid 91;
    function highSpdAcq_GetNumberOfSpectraAcquired: Integer; dispid 92;
    function highSpdAcq_GetSpectrum(COM_spectrumNumber: Integer): OleVariant; dispid 93;
    function highSpdAcq_IsSaturated(COM_spectrumNumber: Integer): WordBool; dispid 94;
    function highSpdAcq_GetTimeStamp(COM_spectrumNumber: Integer): ICoHighResTimeStamp; dispid 95;
    function GetOwnedClass: {??Largeuint}OleVariant; dispid 97;
  end;

// *********************************************************************//
// The Class CoCCoSpectrometerInfo provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrometerInfo exposed by              
// the CoClass CCoSpectrometerInfo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrometerInfo = class
    class function Create: ICoSpectrometerInfo;
    class function CreateRemote(const MachineName: string): ICoSpectrometerInfo;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrometerInfo
// Help String      : CoSpectrometerInfo Class
// Default Interface: ICoSpectrometerInfo
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrometerInfoProperties= class;
{$ENDIF}
  TCCoSpectrometerInfo = class(TOleServer)
  private
    FIntf: ICoSpectrometerInfo;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrometerInfoProperties;
    function GetServerProperties: TCCoSpectrometerInfoProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrometerInfo;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrometerInfo);
    procedure Disconnect; override;
    procedure CreateSpectrometerInfoB(const COM_spectrometerInfo: ICoSpectrometerInfo);
    function getSpectrometerFirmwareVersion: WideString;
    function getSpectrometerNumberOfChannels: Integer;
    function getSpectrometerSerialNumber: WideString;
    function getSpectrometerMaximumIntensity: Double;
    function getSpectrometerMinimumIntegrationTime: Integer;
    function getSpectrometerMaximumIntegrationTime: Integer;
    function getSpectrometerIntegrationTimeStep: Integer;
    function getSpectrometerIntegrationTimeBase: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSpectrometerInfo read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrometerInfoProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrometerInfo
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrometerInfoProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrometerInfo;
    function    GetDefaultInterface: ICoSpectrometerInfo;
    constructor Create(AServer: TCCoSpectrometerInfo);
  protected
  public
    property DefaultInterface: ICoSpectrometerInfo read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoCoefficients provides a Create and CreateRemote method to          
// create instances of the default interface ICoCoefficients exposed by              
// the CoClass CCoCoefficients. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoCoefficients = class
    class function Create: ICoCoefficients;
    class function CreateRemote(const MachineName: string): ICoCoefficients;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoCoefficients
// Help String      : CoCoefficients Class
// Default Interface: ICoCoefficients
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoCoefficientsProperties= class;
{$ENDIF}
  TCCoCoefficients = class(TOleServer)
  private
    FIntf: ICoCoefficients;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoCoefficientsProperties;
    function GetServerProperties: TCCoCoefficientsProperties;
{$ENDIF}
    function GetDefaultInterface: ICoCoefficients;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoCoefficients);
    procedure Disconnect; override;
    procedure CreateCoefficients;
    procedure CreateCoefficientsB(const COM_c: ICoCoefficients);
    function getWlIntercept: Double;
    procedure setWlIntercept(COM_value: Double);
    function getWlFirst: Double;
    procedure setWlFirst(COM_value: Double);
    function getWlSecond: Double;
    procedure setWlSecond(COM_value: Double);
    function getWlThird: Double;
    procedure setWlThird(COM_value: Double);
    function getWlCoefficients: OleVariant;
    procedure setWlCoefficients(COM_wl: OleVariant);
    function getNlCoef0: Double;
    procedure setNlCoef0(COM_value: Double);
    function getNlCoef1: Double;
    procedure setNlCoef1(COM_value: Double);
    function getNlCoef2: Double;
    procedure setNlCoef2(COM_value: Double);
    function getNlCoef3: Double;
    procedure setNlCoef3(COM_value: Double);
    function getNlCoef4: Double;
    procedure setNlCoef4(COM_value: Double);
    function getNlCoef5: Double;
    procedure setNlCoef5(COM_value: Double);
    function getNlCoef6: Double;
    procedure setNlCoef6(COM_value: Double);
    function getNlCoef7: Double;
    procedure setNlCoef7(COM_value: Double);
    function getNlOrder: Integer;
    procedure setNlOrder(COM_value: Integer);
    function getNlCoefficients: OleVariant;
    procedure setNlCoefficients(COM_nl: OleVariant);
    function getStrayLight: Double;
    function getStrayLightSlope: Double;
    procedure setStrayLight(COM_value: Double);
    procedure setStrayLightB(COM_intercept: Double; COM_slope: Double);
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoCoefficients read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoCoefficientsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoCoefficients
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoCoefficientsProperties = class(TPersistent)
  private
    FServer:    TCCoCoefficients;
    function    GetDefaultInterface: ICoCoefficients;
    constructor Create(AServer: TCCoCoefficients);
  protected
  public
    property DefaultInterface: ICoCoefficients read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrum provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrum exposed by              
// the CoClass CCoSpectrum. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrum = class
    class function Create: ICoSpectrum;
    class function CreateRemote(const MachineName: string): ICoSpectrum;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrum
// Help String      : CoSpectrum Class
// Default Interface: ICoSpectrum
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrumProperties= class;
{$ENDIF}
  TCCoSpectrum = class(TOleServer)
  private
    FIntf: ICoSpectrum;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrumProperties;
    function GetServerProperties: TCCoSpectrumProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrum;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrum);
    procedure Disconnect; override;
    procedure CreateSpectrumB(COM_totalpixels: Integer; COM_darkPixels: Integer);
    procedure CreateSpectrumC(COM_spectrum: OleVariant; COM_darkPixels: OleVariant);
    function getSpectrum: OleVariant;
    procedure setSpectrum(COM_spectrum: OleVariant);
    function isOfSize(COM_numberOfPixels: Integer; COM_numberOfDarkPixels: Integer): WordBool;
    function getNumberOfDarkPixels: Integer;
    function getDarkPixels: OleVariant;
    function isSameSizeAs(const COM_other: ICoSpectrum): WordBool;
    function isSaturated: WordBool;
    procedure setSaturated(COM_saturated: WordBool);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSpectrum read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrumProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrum
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrumProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrum;
    function    GetDefaultInterface: ICoSpectrum;
    constructor Create(AServer: TCCoSpectrum);
  protected
  public
    property DefaultInterface: ICoSpectrum read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrometerChannelInfo provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrometerChannelInfo exposed by              
// the CoClass CCoSpectrometerChannelInfo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrometerChannelInfo = class
    class function Create: ICoSpectrometerChannelInfo;
    class function CreateRemote(const MachineName: string): ICoSpectrometerChannelInfo;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrometerChannelInfo
// Help String      : CoSpectrometerChannelInfo Class
// Default Interface: ICoSpectrometerChannelInfo
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrometerChannelInfoProperties= class;
{$ENDIF}
  TCCoSpectrometerChannelInfo = class(TOleServer)
  private
    FIntf: ICoSpectrometerChannelInfo;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrometerChannelInfoProperties;
    function GetServerProperties: TCCoSpectrometerChannelInfoProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrometerChannelInfo;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrometerChannelInfo);
    procedure Disconnect; override;
    procedure CreateSpectrometerChannelInfoB(const COM_spectrometerChannelInfo: ICoSpectrometerChannelInfo);
    procedure CreateSpectrometerChannelInfoC(const COM_spectrometerInfo: ICoSpectrometerInfo);
    procedure CreateSpectrometerChannelInfoD(const COM_spectrometerInfo: ICoSpectrometerInfo; 
                                             COM_wavelengths: OleVariant; COM_channel: Integer; 
                                             COM_triggerEnabled: WordBool; 
                                             const COM_coefficients: ICoCoefficients; 
                                             COM_laserWavelength: Double; COM_interlock: WordBool; 
                                             COM_numberOfPixels: Integer; 
                                             COM_numberOfDarkPixels: Integer);
    function getChannelWavelengths: OleVariant;
    procedure setChannelWavelengths(COM_wavelengths: OleVariant);
    function getChannelNumber: Integer;
    procedure setChannelNumber(COM_channel: Integer);
    function isChannelStabilityScanEnabled: WordBool;
    procedure setChannelStabilityScanEnabled(COM_stabilityScanEnabled: WordBool);
    function isChannelExternalTriggerEnabled: WordBool;
    procedure setChannelExternalTriggerEnabled(COM_externalTriggerEnabled: WordBool);
    function getChannelCoefficients: ICoCoefficients;
    procedure setChannelCoefficients(const COM_coefficients: ICoCoefficients);
    function getLaserWavelength: Double;
    procedure setLaserWavelength(COM_laserWavelength: Double);
    function isInterlock: WordBool;
    procedure setInterlock(COM_interlock: WordBool);
    function getNumberOfPixels: Integer;
    function getNumberOfDarkPixels: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSpectrometerChannelInfo read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrometerChannelInfoProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrometerChannelInfo
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrometerChannelInfoProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrometerChannelInfo;
    function    GetDefaultInterface: ICoSpectrometerChannelInfo;
    constructor Create(AServer: TCCoSpectrometerChannelInfo);
  protected
  public
    property DefaultInterface: ICoSpectrometerChannelInfo read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrometerChannel provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrometerChannel exposed by              
// the CoClass CCoSpectrometerChannel. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrometerChannel = class
    class function Create: ICoSpectrometerChannel;
    class function CreateRemote(const MachineName: string): ICoSpectrometerChannel;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrometerChannel
// Help String      : CoSpectrometerChannel Class
// Default Interface: ICoSpectrometerChannel
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrometerChannelProperties= class;
{$ENDIF}
  TCCoSpectrometerChannel = class(TOleServer)
  private
    FIntf: ICoSpectrometerChannel;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrometerChannelProperties;
    function GetServerProperties: TCCoSpectrometerChannelProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrometerChannel;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrometerChannel);
    procedure Disconnect; override;
    procedure generateMetadata(const COM_sb: ICoSpectrometerInfo; COM_index: Integer);
    function getCoefficients: ICoCoefficients;
    procedure setCoefficients(const COM_c: ICoCoefficients);
    function getChannelIndex: Integer;
    procedure getCoefficientsFromSpectrometer;
    procedure setCoefficientsB;
    procedure setWavelengthCalibration;
    procedure setStrayLightCorrection;
    function getWavelength(COM_pixel: Integer): Double;
    function getAllWavelengths: OleVariant;
    function getAllStoredWavelengths: OleVariant;
    function getPixel(COM_wl: Double): Integer;
    function getStartingWavelength: Double;
    function getEndingWavelength: Double;
    function getSpectrum: ICoSpectrum;
    function getSpectrumB(const COM_spectrum: ICoSpectrum): ICoSpectrum;
    function getMaxIntensity: Integer;
    function getLaserWavelength: Double;
    procedure setLaserWavelength(COM_laserWavelength: Double);
    function isInterlock: WordBool;
    procedure setInterlock(COM_interlock: WordBool);
    procedure newSpectrum(const COM_spectrum: ICoSpectrum);
    function getSpectrometerChannelInfo: ICoSpectrometerChannelInfo;
    procedure setSpectrometerChannelInfoCoefficients(const COM_coefficients: ICoCoefficients);
    function getPollingInterval: Integer;
    procedure setPollingInterval(COM_pollingInterval: Integer);
    function isPolling: WordBool;
    procedure setPolling(COM_polling: WordBool);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSpectrometerChannel read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrometerChannelProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrometerChannel
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrometerChannelProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrometerChannel;
    function    GetDefaultInterface: ICoSpectrometerChannel;
    constructor Create(AServer: TCCoSpectrometerChannel);
  protected
  public
    property DefaultInterface: ICoSpectrometerChannel read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrometerChannelCollection provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrometerChannelCollection exposed by              
// the CoClass CCoSpectrometerChannelCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrometerChannelCollection = class
    class function Create: ICoSpectrometerChannelCollection;
    class function CreateRemote(const MachineName: string): ICoSpectrometerChannelCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrometerChannelCollection
// Help String      : CoSpectrometerChannelCollection Class
// Default Interface: ICoSpectrometerChannelCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrometerChannelCollectionProperties= class;
{$ENDIF}
  TCCoSpectrometerChannelCollection = class(TOleServer)
  private
    FIntf: ICoSpectrometerChannelCollection;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrometerChannelCollectionProperties;
    function GetServerProperties: TCCoSpectrometerChannelCollectionProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrometerChannelCollection;
  protected
    procedure InitServerData; override;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrometerChannelCollection);
    procedure Disconnect; override;
    function Item(index: OleVariant): OleVariant;
    procedure Add(const pnewSpectrometerChannelCollection: IDispatch);
    procedure Remove(index: Integer);
    property DefaultInterface: ICoSpectrometerChannelCollection read GetDefaultInterface;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrometerChannelCollectionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrometerChannelCollection
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrometerChannelCollectionProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrometerChannelCollection;
    function    GetDefaultInterface: ICoSpectrometerChannelCollection;
    constructor Create(AServer: TCCoSpectrometerChannelCollection);
  protected
    function Get_Count: Integer;
  public
    property DefaultInterface: ICoSpectrometerChannelCollection read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoBench provides a Create and CreateRemote method to          
// create instances of the default interface ICoBench exposed by              
// the CoClass CCoBench. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoBench = class
    class function Create: ICoBench;
    class function CreateRemote(const MachineName: string): ICoBench;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoBench
// Help String      : CoBench Class
// Default Interface: ICoBench
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoBenchProperties= class;
{$ENDIF}
  TCCoBench = class(TOleServer)
  private
    FIntf: ICoBench;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoBenchProperties;
    function GetServerProperties: TCCoBenchProperties;
{$ENDIF}
    function GetDefaultInterface: ICoBench;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoBench);
    procedure Disconnect; override;
    procedure CreateBench;
    function getFilterWavelength: WideString;
    procedure setFilterWavelength(const COM_value: WideString);
    function getSlitSize: WideString;
    procedure setSlitSize(const COM_value: WideString);
    function getGrating: WideString;
    procedure setGrating(const COM_value: WideString);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoBench read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoBenchProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoBench
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoBenchProperties = class(TPersistent)
  private
    FServer:    TCCoBench;
    function    GetDefaultInterface: ICoBench;
    constructor Create(AServer: TCCoBench);
  protected
  public
    property DefaultInterface: ICoBench read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoDetector provides a Create and CreateRemote method to          
// create instances of the default interface ICoDetector exposed by              
// the CoClass CCoDetector. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoDetector = class
    class function Create: ICoDetector;
    class function CreateRemote(const MachineName: string): ICoDetector;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoDetector
// Help String      : CoDetector Class
// Default Interface: ICoDetector
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoDetectorProperties= class;
{$ENDIF}
  TCCoDetector = class(TOleServer)
  private
    FIntf: ICoDetector;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoDetectorProperties;
    function GetServerProperties: TCCoDetectorProperties;
{$ENDIF}
    function GetDefaultInterface: ICoDetector;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoDetector);
    procedure Disconnect; override;
    procedure CreateDetector;
    function getSerialNumber: WideString;
    procedure setSerialNumber(const COM_value: WideString);
    function getArrayCoatingMfg: WideString;
    procedure setArrayCoatingMfg(const COM_value: WideString);
    function isLensInstalled: WordBool;
    procedure setLensInstalled(COM_value: WordBool);
    function getArrayWavelength: WideString;
    procedure setArrayWavelength(const COM_value: WideString);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoDetector read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoDetectorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoDetector
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoDetectorProperties = class(TPersistent)
  private
    FServer:    TCCoDetector;
    function    GetDefaultInterface: ICoDetector;
    constructor Create(AServer: TCCoDetector);
  protected
  public
    property DefaultInterface: ICoDetector read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoConfiguration provides a Create and CreateRemote method to          
// create instances of the default interface ICoConfiguration exposed by              
// the CoClass CCoConfiguration. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoConfiguration = class
    class function Create: ICoConfiguration;
    class function CreateRemote(const MachineName: string): ICoConfiguration;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoConfiguration
// Help String      : CoConfiguration Class
// Default Interface: ICoConfiguration
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoConfigurationProperties= class;
{$ENDIF}
  TCCoConfiguration = class(TOleServer)
  private
    FIntf: ICoConfiguration;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoConfigurationProperties;
    function GetServerProperties: TCCoConfigurationProperties;
{$ENDIF}
    function GetDefaultInterface: ICoConfiguration;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoConfiguration);
    procedure Disconnect; override;
    procedure getConfigurationFromSpectrometer;
    procedure setConfigurationToSpectrometer;
    function getBench: ICoBench;
    procedure setBench(const COM_value: ICoBench);
    function getDetector: ICoDetector;
    procedure setDetector(const COM_value: ICoDetector);
    function getCpldVersion: WideString;
    procedure setCpldVersion(const COM_value: WideString);
    function isBenchDefined: WordBool;
    function isSpectrometerConfigurationDefined: WordBool;
    function isDetectorSerialNumberDefined: WordBool;
    function isCPLDVersionDefined: WordBool;
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoConfiguration read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoConfigurationProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoConfiguration
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoConfigurationProperties = class(TPersistent)
  private
    FServer:    TCCoConfiguration;
    function    GetDefaultInterface: ICoConfiguration;
    constructor Create(AServer: TCCoConfiguration);
  protected
  public
    property DefaultInterface: ICoConfiguration read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrometer provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrometer exposed by              
// the CoClass CCoSpectrometer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrometer = class
    class function Create: ICoSpectrometer;
    class function CreateRemote(const MachineName: string): ICoSpectrometer;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrometer
// Help String      : CoSpectrometer Class
// Default Interface: ICoSpectrometer
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrometerProperties= class;
{$ENDIF}
  TCCoSpectrometer = class(TOleServer)
  private
    FIntf: ICoSpectrometer;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrometerProperties;
    function GetServerProperties: TCCoSpectrometerProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrometer;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrometer);
    procedure Disconnect; override;
    procedure openSpectrometer(COM_param0: Integer);
    procedure CreateSpectrometer;
    function getSpectrumBase: ICoSpectrometerInfo;
    procedure setStabilityScan(COM_on: WordBool);
    function isStabilityScan: WordBool;
    function getIntegrationTimeMinimum: Integer;
    function getIntegrationTimeMaximum: Integer;
    function getIntegrationTimeIncrement: Integer;
    function getIntegrationTimeBase: Integer;
    function getActualIntegrationTime: Integer;
    function getChannels: ICoSpectrometerChannelCollection;
    function getNumberOfChannels: Integer;
    function getNumberOfEnabledChannels: Integer;
    function getChannelIndices: OleVariant;
    function isRotatorEnabled: WordBool;
    procedure setRotatorEnabled(COM_rotator: WordBool);
    function getBenchSlot: Integer;
    function getSpectrometerConfigSlot: Integer;
    function getDetectorSerialNumberSlot: Integer;
    function getCPLDVersionSlot: Integer;
    procedure getConfigurationFromSpectrometer;
    procedure setConfiguration;
    function getNewCoefficients(COM_index: Integer): ICoCoefficients;
    procedure getCoefficientsFromSpectrometer;
    procedure setCoefficients;
    function getFirmwareVersionNumber: Integer;
    function getCodeVersion(const COM_fileName: WideString): WideString;
    function getMaxIntensity: Integer;
    function isStrobeDelayEnabled: WordBool;
    procedure close;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSpectrometer read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrometerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrometer
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrometerProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrometer;
    function    GetDefaultInterface: ICoSpectrometer;
    constructor Create(AServer: TCCoSpectrometer);
  protected
  public
    property DefaultInterface: ICoSpectrometer read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoADC1000Channel provides a Create and CreateRemote method to          
// create instances of the default interface ICoADC1000Channel exposed by              
// the CoClass CCoADC1000Channel. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoADC1000Channel = class
    class function Create: ICoADC1000Channel;
    class function CreateRemote(const MachineName: string): ICoADC1000Channel;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoADC1000Channel
// Help String      : CoADC1000Channel Class
// Default Interface: ICoADC1000Channel
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoADC1000ChannelProperties= class;
{$ENDIF}
  TCCoADC1000Channel = class(TOleServer)
  private
    FIntf: ICoADC1000Channel;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoADC1000ChannelProperties;
    function GetServerProperties: TCCoADC1000ChannelProperties;
{$ENDIF}
    function GetDefaultInterface: ICoADC1000Channel;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoADC1000Channel);
    procedure Disconnect; override;
    procedure CreateADC1000ChannelB(const COM_spectrometer: ICoSpectrometer; 
                                    const COM_coefficients: ICoCoefficients; COM_channel: Integer);
    procedure getCoefficientsFromSpectrometer;
    procedure setCoefficients;
    procedure setWavelengthCalibration;
    function getAllWavelengths: OleVariant;
    function getWavelength(COM_pixel: Integer): Double;
    function getDeepWellWavelength(COM_pixel: Integer): Double;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
    function getSpectrumB: ICoSpectrum;
    procedure fixNumberOfPixels;
    function isMaster: WordBool;
    function isEnabled: WordBool;
    procedure setEnabled(COM_enabled: WordBool);
    function isInterpolated: WordBool;
    procedure setInterpolated(COM_interpolated: WordBool);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoADC1000Channel read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoADC1000ChannelProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoADC1000Channel
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoADC1000ChannelProperties = class(TPersistent)
  private
    FServer:    TCCoADC1000Channel;
    function    GetDefaultInterface: ICoADC1000Channel;
    constructor Create(AServer: TCCoADC1000Channel);
  protected
  public
    property DefaultInterface: ICoADC1000Channel read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSBEndpointDescriptor provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSBEndpointDescriptor exposed by              
// the CoClass CCoUSBEndpointDescriptor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSBEndpointDescriptor = class
    class function Create: ICoUSBEndpointDescriptor;
    class function CreateRemote(const MachineName: string): ICoUSBEndpointDescriptor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSBEndpointDescriptor
// Help String      : CoUSBEndpointDescriptor Class
// Default Interface: ICoUSBEndpointDescriptor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSBEndpointDescriptorProperties= class;
{$ENDIF}
  TCCoUSBEndpointDescriptor = class(TOleServer)
  private
    FIntf: ICoUSBEndpointDescriptor;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSBEndpointDescriptorProperties;
    function GetServerProperties: TCCoUSBEndpointDescriptorProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSBEndpointDescriptor;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSBEndpointDescriptor);
    procedure Disconnect; override;
    procedure CreateUSBEndpointDescriptor;
    procedure CreateUSBEndpointDescriptorB(COM_bLength: Shortint; COM_bDescriptorType: Shortint; 
                                           COM_bEndpointAddress: Smallint; 
                                           COM_bmAttributes: Shortint; 
                                           COM_wMaxPacketSize: Smallint; COM_bInterval: Shortint);
    function toString: WideString;
    function getLength: Shortint;
    function getDescriptorType: Shortint;
    function getEndpointAddress: Smallint;
    function getAttributes: Shortint;
    function getMaxPacketSize: Smallint;
    function getInterval: Shortint;
    procedure setLength(COM_bLength: Shortint);
    procedure setDescriptorType(COM_bDescriptorType: Shortint);
    procedure setEndpointAddress(COM_bEndpointAddress: Smallint);
    procedure setAttributes(COM_bmAttributes: Shortint);
    procedure setMaxPacketSize(COM_wMaxPacketSize: Smallint);
    procedure setInterval(COM_bInterval: Shortint);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSBEndpointDescriptor read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSBEndpointDescriptorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSBEndpointDescriptor
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSBEndpointDescriptorProperties = class(TPersistent)
  private
    FServer:    TCCoUSBEndpointDescriptor;
    function    GetDefaultInterface: ICoUSBEndpointDescriptor;
    constructor Create(AServer: TCCoUSBEndpointDescriptor);
  protected
  public
    property DefaultInterface: ICoUSBEndpointDescriptor read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoGUIProvider exposed by              
// the CoClass CCoGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoGUIProvider = class
    class function Create: ICoGUIProvider;
    class function CreateRemote(const MachineName: string): ICoGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoGUIProvider
// Help String      : CoGUIProvider Class
// Default Interface: ICoGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoGUIProviderProperties= class;
{$ENDIF}
  TCCoGUIProvider = class(TOleServer)
  private
    FIntf: ICoGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoGUIProviderProperties;
    function GetServerProperties: TCCoGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoGUIProvider);
    procedure Disconnect; override;
    procedure CreateGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoGUIProvider;
    function    GetDefaultInterface: ICoGUIProvider;
    constructor Create(AServer: TCCoGUIProvider);
  protected
  public
    property DefaultInterface: ICoGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoGUIProviderCollection provides a Create and CreateRemote method to          
// create instances of the default interface ICoGUIProviderCollection exposed by              
// the CoClass CCoGUIProviderCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoGUIProviderCollection = class
    class function Create: ICoGUIProviderCollection;
    class function CreateRemote(const MachineName: string): ICoGUIProviderCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoGUIProviderCollection
// Help String      : CoGUIProviderCollection Class
// Default Interface: ICoGUIProviderCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoGUIProviderCollectionProperties= class;
{$ENDIF}
  TCCoGUIProviderCollection = class(TOleServer)
  private
    FIntf: ICoGUIProviderCollection;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoGUIProviderCollectionProperties;
    function GetServerProperties: TCCoGUIProviderCollectionProperties;
{$ENDIF}
    function GetDefaultInterface: ICoGUIProviderCollection;
  protected
    procedure InitServerData; override;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoGUIProviderCollection);
    procedure Disconnect; override;
    function Item(index: OleVariant): OleVariant;
    procedure Add(const pnewGUIProviderCollection: IDispatch);
    procedure Remove(index: Integer);
    property DefaultInterface: ICoGUIProviderCollection read GetDefaultInterface;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoGUIProviderCollectionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoGUIProviderCollection
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoGUIProviderCollectionProperties = class(TPersistent)
  private
    FServer:    TCCoGUIProviderCollection;
    function    GetDefaultInterface: ICoGUIProviderCollection;
    constructor Create(AServer: TCCoGUIProviderCollection);
  protected
    function Get_Count: Integer;
  public
    property DefaultInterface: ICoGUIProviderCollection read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoErrorCode provides a Create and CreateRemote method to          
// create instances of the default interface ICoErrorCode exposed by              
// the CoClass CCoErrorCode. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoErrorCode = class
    class function Create: ICoErrorCode;
    class function CreateRemote(const MachineName: string): ICoErrorCode;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoErrorCode
// Help String      : CoErrorCode Class
// Default Interface: ICoErrorCode
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoErrorCodeProperties= class;
{$ENDIF}
  TCCoErrorCode = class(TOleServer)
  private
    FIntf: ICoErrorCode;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoErrorCodeProperties;
    function GetServerProperties: TCCoErrorCodeProperties;
{$ENDIF}
    function GetDefaultInterface: ICoErrorCode;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoErrorCode);
    procedure Disconnect; override;
    procedure CreateErrorCodeB(COM_newCode: Integer);
    procedure setErrorCode(COM_code: Integer; COM_on: WordBool);
    function getErrorCodes: Integer;
    function isCodeIgnored(COM_code: Integer): WordBool;
    procedure setCodeIgnored(COM_code: Integer; COM_ignore: WordBool);
    function isErrorCodeSet(COM_code: Integer): WordBool;
    function getErrorResponse(COM_code: Integer): WideString;
    function getIngoreResponse: WideString;
    function getErrorCount: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoErrorCode read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoErrorCodeProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoErrorCode
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoErrorCodeProperties = class(TPersistent)
  private
    FServer:    TCCoErrorCode;
    function    GetDefaultInterface: ICoErrorCode;
    constructor Create(AServer: TCCoErrorCode);
  protected
  public
    property DefaultInterface: ICoErrorCode read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoOmniDriverDispatchListener provides a Create and CreateRemote method to          
// create instances of the default interface ICoOmniDriverDispatchListener exposed by              
// the CoClass CCoOmniDriverDispatchListener. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoOmniDriverDispatchListener = class
    class function Create: ICoOmniDriverDispatchListener;
    class function CreateRemote(const MachineName: string): ICoOmniDriverDispatchListener;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoOmniDriverDispatchListener
// Help String      : CoOmniDriverDispatchListener Class
// Default Interface: ICoOmniDriverDispatchListener
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoOmniDriverDispatchListenerProperties= class;
{$ENDIF}
  TCCoOmniDriverDispatchListener = class(TOleServer)
  private
    FIntf: ICoOmniDriverDispatchListener;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoOmniDriverDispatchListenerProperties;
    function GetServerProperties: TCCoOmniDriverDispatchListenerProperties;
{$ENDIF}
    function GetDefaultInterface: ICoOmniDriverDispatchListener;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoOmniDriverDispatchListener);
    procedure Disconnect; override;
    procedure CreateOmniDriverDispatchListener;
    procedure dispatchError(const COM_param0: ICoErrorCode; COM_param1: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoOmniDriverDispatchListener read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoOmniDriverDispatchListenerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoOmniDriverDispatchListener
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoOmniDriverDispatchListenerProperties = class(TPersistent)
  private
    FServer:    TCCoOmniDriverDispatchListener;
    function    GetDefaultInterface: ICoOmniDriverDispatchListener;
    constructor Create(AServer: TCCoOmniDriverDispatchListener);
  protected
  public
    property DefaultInterface: ICoOmniDriverDispatchListener read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoAcquisitionPropertiesListener provides a Create and CreateRemote method to          
// create instances of the default interface ICoAcquisitionPropertiesListener exposed by              
// the CoClass CCoAcquisitionPropertiesListener. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoAcquisitionPropertiesListener = class
    class function Create: ICoAcquisitionPropertiesListener;
    class function CreateRemote(const MachineName: string): ICoAcquisitionPropertiesListener;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoAcquisitionPropertiesListener
// Help String      : CoAcquisitionPropertiesListener Class
// Default Interface: ICoAcquisitionPropertiesListener
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoAcquisitionPropertiesListenerProperties= class;
{$ENDIF}
  TCCoAcquisitionPropertiesListener = class(TOleServer)
  private
    FIntf: ICoAcquisitionPropertiesListener;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoAcquisitionPropertiesListenerProperties;
    function GetServerProperties: TCCoAcquisitionPropertiesListenerProperties;
{$ENDIF}
    function GetDefaultInterface: ICoAcquisitionPropertiesListener;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoAcquisitionPropertiesListener);
    procedure Disconnect; override;
    procedure CreateAcquisitionPropertiesListener;
    procedure acquisitionPropertiesChange;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoAcquisitionPropertiesListener read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoAcquisitionPropertiesListenerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoAcquisitionPropertiesListener
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoAcquisitionPropertiesListenerProperties = class(TPersistent)
  private
    FServer:    TCCoAcquisitionPropertiesListener;
    function    GetDefaultInterface: ICoAcquisitionPropertiesListener;
    constructor Create(AServer: TCCoAcquisitionPropertiesListener);
  protected
  public
    property DefaultInterface: ICoAcquisitionPropertiesListener read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrometerStatus provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrometerStatus exposed by              
// the CoClass CCoSpectrometerStatus. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrometerStatus = class
    class function Create: ICoSpectrometerStatus;
    class function CreateRemote(const MachineName: string): ICoSpectrometerStatus;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrometerStatus
// Help String      : CoSpectrometerStatus Class
// Default Interface: ICoSpectrometerStatus
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrometerStatusProperties= class;
{$ENDIF}
  TCCoSpectrometerStatus = class(TOleServer)
  private
    FIntf: ICoSpectrometerStatus;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrometerStatusProperties;
    function GetServerProperties: TCCoSpectrometerStatusProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrometerStatus;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrometerStatus);
    procedure Disconnect; override;
    procedure CreateSpectrometerStatus;
    function isLampEnabled: WordBool;
    function isTakingScan: WordBool;
    function isDataReady: WordBool;
    function isFailed: WordBool;
    function getNumPixels: Integer;
    function getIntegrationTime: Integer;
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSpectrometerStatus read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrometerStatusProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrometerStatus
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrometerStatusProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrometerStatus;
    function    GetDefaultInterface: ICoSpectrometerStatus;
    constructor Create(AServer: TCCoSpectrometerStatus);
  protected
  public
    property DefaultInterface: ICoSpectrometerStatus read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMultiChannelListener provides a Create and CreateRemote method to          
// create instances of the default interface ICoMultiChannelListener exposed by              
// the CoClass CCoMultiChannelListener. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMultiChannelListener = class
    class function Create: ICoMultiChannelListener;
    class function CreateRemote(const MachineName: string): ICoMultiChannelListener;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMultiChannelListener
// Help String      : CoMultiChannelListener Class
// Default Interface: ICoMultiChannelListener
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMultiChannelListenerProperties= class;
{$ENDIF}
  TCCoMultiChannelListener = class(TOleServer)
  private
    FIntf: ICoMultiChannelListener;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMultiChannelListenerProperties;
    function GetServerProperties: TCCoMultiChannelListenerProperties;
{$ENDIF}
    function GetDefaultInterface: ICoMultiChannelListener;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMultiChannelListener);
    procedure Disconnect; override;
    procedure CreateMultiChannelListener;
    procedure addChannel(COM_param0: Integer);
    procedure removeChannel(COM_param0: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMultiChannelListener read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMultiChannelListenerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMultiChannelListener
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMultiChannelListenerProperties = class(TPersistent)
  private
    FServer:    TCCoMultiChannelListener;
    function    GetDefaultInterface: ICoMultiChannelListener;
    constructor Create(AServer: TCCoMultiChannelListener);
  protected
  public
    property DefaultInterface: ICoMultiChannelListener read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoExternalTriggerMode provides a Create and CreateRemote method to          
// create instances of the default interface ICoExternalTriggerMode exposed by              
// the CoClass CCoExternalTriggerMode. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoExternalTriggerMode = class
    class function Create: ICoExternalTriggerMode;
    class function CreateRemote(const MachineName: string): ICoExternalTriggerMode;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoExternalTriggerMode
// Help String      : CoExternalTriggerMode Class
// Default Interface: ICoExternalTriggerMode
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoExternalTriggerModeProperties= class;
{$ENDIF}
  TCCoExternalTriggerMode = class(TOleServer)
  private
    FIntf: ICoExternalTriggerMode;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoExternalTriggerModeProperties;
    function GetServerProperties: TCCoExternalTriggerModeProperties;
{$ENDIF}
    function GetDefaultInterface: ICoExternalTriggerMode;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoExternalTriggerMode);
    procedure Disconnect; override;
    procedure CreateExternalTriggerModeB(COM_mode: Integer);
    function getExternalTriggerMode: Integer;
    function getExternalTriggerNormal: Integer;
    function getExternalTriggerSoftware: Integer;
    function getExternalTriggerSynchronization: Integer;
    function getExternalTriggerHardware: Integer;
    function getTriggerInternalSingleShot: Integer;
    function getSelfTriggerNormal: Integer;
    function getSelfTriggerSoftware: Integer;
    function getSelfTriggerSynchronization: Integer;
    function getSelfTriggerHardware: Integer;
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoExternalTriggerMode read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoExternalTriggerModeProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoExternalTriggerMode
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoExternalTriggerModeProperties = class(TPersistent)
  private
    FServer:    TCCoExternalTriggerMode;
    function    GetDefaultInterface: ICoExternalTriggerMode;
    constructor Create(AServer: TCCoExternalTriggerMode);
  protected
  public
    property DefaultInterface: ICoExternalTriggerMode read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoExternalTriggerModeCollection provides a Create and CreateRemote method to          
// create instances of the default interface ICoExternalTriggerModeCollection exposed by              
// the CoClass CCoExternalTriggerModeCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoExternalTriggerModeCollection = class
    class function Create: ICoExternalTriggerModeCollection;
    class function CreateRemote(const MachineName: string): ICoExternalTriggerModeCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoExternalTriggerModeCollection
// Help String      : CoExternalTriggerModeCollection Class
// Default Interface: ICoExternalTriggerModeCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoExternalTriggerModeCollectionProperties= class;
{$ENDIF}
  TCCoExternalTriggerModeCollection = class(TOleServer)
  private
    FIntf: ICoExternalTriggerModeCollection;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoExternalTriggerModeCollectionProperties;
    function GetServerProperties: TCCoExternalTriggerModeCollectionProperties;
{$ENDIF}
    function GetDefaultInterface: ICoExternalTriggerModeCollection;
  protected
    procedure InitServerData; override;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoExternalTriggerModeCollection);
    procedure Disconnect; override;
    function Item(index: OleVariant): OleVariant;
    procedure Add(const pnewExternalTriggerModeCollection: IDispatch);
    procedure Remove(index: Integer);
    property DefaultInterface: ICoExternalTriggerModeCollection read GetDefaultInterface;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoExternalTriggerModeCollectionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoExternalTriggerModeCollection
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoExternalTriggerModeCollectionProperties = class(TPersistent)
  private
    FServer:    TCCoExternalTriggerModeCollection;
    function    GetDefaultInterface: ICoExternalTriggerModeCollection;
    constructor Create(AServer: TCCoExternalTriggerModeCollection);
  protected
    function Get_Count: Integer;
  public
    property DefaultInterface: ICoExternalTriggerModeCollection read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoCoefficientsCollection provides a Create and CreateRemote method to          
// create instances of the default interface ICoCoefficientsCollection exposed by              
// the CoClass CCoCoefficientsCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoCoefficientsCollection = class
    class function Create: ICoCoefficientsCollection;
    class function CreateRemote(const MachineName: string): ICoCoefficientsCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoCoefficientsCollection
// Help String      : CoCoefficientsCollection Class
// Default Interface: ICoCoefficientsCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoCoefficientsCollectionProperties= class;
{$ENDIF}
  TCCoCoefficientsCollection = class(TOleServer)
  private
    FIntf: ICoCoefficientsCollection;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoCoefficientsCollectionProperties;
    function GetServerProperties: TCCoCoefficientsCollectionProperties;
{$ENDIF}
    function GetDefaultInterface: ICoCoefficientsCollection;
  protected
    procedure InitServerData; override;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoCoefficientsCollection);
    procedure Disconnect; override;
    function Item(index: OleVariant): OleVariant;
    procedure Add(const pnewCoefficientsCollection: IDispatch);
    procedure Remove(index: Integer);
    property DefaultInterface: ICoCoefficientsCollection read GetDefaultInterface;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoCoefficientsCollectionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoCoefficientsCollection
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoCoefficientsCollectionProperties = class(TPersistent)
  private
    FServer:    TCCoCoefficientsCollection;
    function    GetDefaultInterface: ICoCoefficientsCollection;
    constructor Create(AServer: TCCoCoefficientsCollection);
  protected
    function Get_Count: Integer;
  public
    property DefaultInterface: ICoCoefficientsCollection read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoAcquisitionListener provides a Create and CreateRemote method to          
// create instances of the default interface ICoAcquisitionListener exposed by              
// the CoClass CCoAcquisitionListener. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoAcquisitionListener = class
    class function Create: ICoAcquisitionListener;
    class function CreateRemote(const MachineName: string): ICoAcquisitionListener;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoAcquisitionListener
// Help String      : CoAcquisitionListener Class
// Default Interface: ICoAcquisitionListener
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoAcquisitionListenerProperties= class;
{$ENDIF}
  TCCoAcquisitionListener = class(TOleServer)
  private
    FIntf: ICoAcquisitionListener;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoAcquisitionListenerProperties;
    function GetServerProperties: TCCoAcquisitionListenerProperties;
{$ENDIF}
    function GetDefaultInterface: ICoAcquisitionListener;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoAcquisitionListener);
    procedure Disconnect; override;
    procedure CreateAcquisitionListener;
    procedure pauseSpectrometerAcquisitions(const COM_param0: ICoSpectrometer);
    procedure resumeSpectrometerAcquisitions(const COM_param0: ICoSpectrometer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoAcquisitionListener read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoAcquisitionListenerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoAcquisitionListener
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoAcquisitionListenerProperties = class(TPersistent)
  private
    FServer:    TCCoAcquisitionListener;
    function    GetDefaultInterface: ICoAcquisitionListener;
    constructor Create(AServer: TCCoAcquisitionListener);
  protected
  public
    property DefaultInterface: ICoAcquisitionListener read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoADC1000USB provides a Create and CreateRemote method to          
// create instances of the default interface ICoADC1000USB exposed by              
// the CoClass CCoADC1000USB. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoADC1000USB = class
    class function Create: ICoADC1000USB;
    class function CreateRemote(const MachineName: string): ICoADC1000USB;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoADC1000USB
// Help String      : CoADC1000USB Class
// Default Interface: ICoADC1000USB
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoADC1000USBProperties= class;
{$ENDIF}
  TCCoADC1000USB = class(TOleServer)
  private
    FIntf: ICoADC1000USB;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoADC1000USBProperties;
    function GetServerProperties: TCCoADC1000USBProperties;
{$ENDIF}
    function GetDefaultInterface: ICoADC1000USB;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoADC1000USB);
    procedure Disconnect; override;
    procedure CreateADC1000USB(COM_i: Integer);
    procedure CreateADC1000USBB;
    procedure setEndpoints;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
    procedure openSpectrometer(COM_index: Integer);
    function getGUIFeatures: ICoGUIProviderCollection;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
    function getSpectrumB: ICoSpectrum;
    procedure setCoefficients;
    function getDeepWellMinimumIntegrationTime: Integer;
    procedure addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
    procedure removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
    procedure addAcquisitionPropertiesListener(const COM_listener: ICoAcquisitionPropertiesListener);
    procedure removeAcquisitionPropertiesListener(const COM_listener: ICoAcquisitionPropertiesListener);
    function getActualIntegrationTime: Integer;
    function readStatus: ICoSpectrometerStatus;
    function getNewCoefficients(COM_index: Integer): ICoCoefficients;
    function isDeepWell: WordBool;
    procedure setDeepWell(COM_dw: WordBool);
    procedure setIntegrationTime(COM_intTime: Integer);
    procedure setStrobeDelay(COM_delay: Integer);
    function getNumberOfChannels: Integer;
    function getChannelsPresent: OleVariant;
    function getNumberOfEnabledChannels: Integer;
    procedure setChannelMux(COM_index: Integer);
    procedure setChannelPresent(COM_index: Integer; COM_present: WordBool);
    function isChannelPresent(COM_index: Integer): WordBool;
    procedure setChannelStatus(COM_index: Integer; COM_status: WordBool);
    procedure setDeepWellStatus(COM_status: WordBool);
    function getChannelIndices: OleVariant;
    function isRotatorEnabled: WordBool;
    procedure setRotatorEnabled(COM_enabled: WordBool);
    function isInterpolationEnabled: WordBool;
    procedure setInterpolationEnabled(COM_enabled: WordBool);
    procedure addChannelListener(const COM_listener: ICoMultiChannelListener);
    procedure removeChannelListener(const COM_listener: ICoMultiChannelListener);
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer);
    function getContinuousStrobeDelayMinimum: Integer;
    function getContinuousStrobeDelayMaximum: Integer;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double;
    procedure setMasterClock(COM_rate: Integer);
    procedure setExternalTriggerMode(COM_mode: Integer);
    function getExternalTriggerModes: ICoExternalTriggerModeCollection;
    procedure setDACCounts(COM_counts: Integer; COM_index: Integer);
    function analogOutCountsToVolts(COM_counts: Integer): Double;
    function getDACMinimum: Integer;
    function getDACMaximum: Integer;
    function getDACIncrement: Integer;
    function isDACPresent: WordBool;
    function getDACPins: Integer;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getNonlinearityCoefficients: ICoCoefficientsCollection;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_index: Integer): OleVariant;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer);
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer);
    function getStrayLight(COM_index: Integer): Double;
    function isAdvancedVersion: WordBool;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoADC1000USB read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoADC1000USBProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoADC1000USB
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoADC1000USBProperties = class(TPersistent)
  private
    FServer:    TCCoADC1000USB;
    function    GetDefaultInterface: ICoADC1000USB;
    constructor Create(AServer: TCCoADC1000USB);
  protected
  public
    property DefaultInterface: ICoADC1000USB read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoADC1000USBTest provides a Create and CreateRemote method to          
// create instances of the default interface ICoADC1000USBTest exposed by              
// the CoClass CCoADC1000USBTest. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoADC1000USBTest = class
    class function Create: ICoADC1000USBTest;
    class function CreateRemote(const MachineName: string): ICoADC1000USBTest;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoADC1000USBTest
// Help String      : CoADC1000USBTest Class
// Default Interface: ICoADC1000USBTest
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoADC1000USBTestProperties= class;
{$ENDIF}
  TCCoADC1000USBTest = class(TOleServer)
  private
    FIntf: ICoADC1000USBTest;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoADC1000USBTestProperties;
    function GetServerProperties: TCCoADC1000USBTestProperties;
{$ENDIF}
    function GetDefaultInterface: ICoADC1000USBTest;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoADC1000USBTest);
    procedure Disconnect; override;
    procedure CreateADC1000USBTest;
    procedure setEndpoints;
    procedure runDriverDependent;
    procedure runIndependent;
    procedure initialize;
    function getNumChannels: Integer;
    function readInfo(COM_slot: Integer): WideString;
    procedure setRotatorTrue;
    procedure setChannelMux(COM_channel: Integer);
    function getSpectrum: OleVariant;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoADC1000USBTest read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoADC1000USBTestProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoADC1000USBTest
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoADC1000USBTestProperties = class(TPersistent)
  private
    FServer:    TCCoADC1000USBTest;
    function    GetDefaultInterface: ICoADC1000USBTest;
    constructor Create(AServer: TCCoADC1000USBTest);
  protected
  public
    property DefaultInterface: ICoADC1000USBTest read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoAdvancedIntegrationClock provides a Create and CreateRemote method to          
// create instances of the default interface ICoAdvancedIntegrationClock exposed by              
// the CoClass CCoAdvancedIntegrationClock. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoAdvancedIntegrationClock = class
    class function Create: ICoAdvancedIntegrationClock;
    class function CreateRemote(const MachineName: string): ICoAdvancedIntegrationClock;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoAdvancedIntegrationClock
// Help String      : CoAdvancedIntegrationClock Class
// Default Interface: ICoAdvancedIntegrationClock
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoAdvancedIntegrationClockProperties= class;
{$ENDIF}
  TCCoAdvancedIntegrationClock = class(TOleServer)
  private
    FIntf: ICoAdvancedIntegrationClock;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoAdvancedIntegrationClockProperties;
    function GetServerProperties: TCCoAdvancedIntegrationClockProperties;
{$ENDIF}
    function GetDefaultInterface: ICoAdvancedIntegrationClock;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoAdvancedIntegrationClock);
    procedure Disconnect; override;
    procedure CreateAdvancedIntegrationClock;
    function getIntegrationClockTimer: Integer;
    function getIntegrationTimeBaseClock: Integer;
    procedure setAdvancedIntegrationTime(COM_param0: Integer);
    function getAdvancedIntegrationTimeMinimum: Integer;
    function getAdvancedIntegrationTimeMaximum: Integer;
    function getAdvancedIntegrationTimeIncrement: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoAdvancedIntegrationClock read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoAdvancedIntegrationClockProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoAdvancedIntegrationClock
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoAdvancedIntegrationClockProperties = class(TPersistent)
  private
    FServer:    TCCoAdvancedIntegrationClock;
    function    GetDefaultInterface: ICoAdvancedIntegrationClock;
    constructor Create(AServer: TCCoAdvancedIntegrationClock);
  protected
  public
    property DefaultInterface: ICoAdvancedIntegrationClock read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSBInterface provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSBInterface exposed by              
// the CoClass CCoUSBInterface. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSBInterface = class
    class function Create: ICoUSBInterface;
    class function CreateRemote(const MachineName: string): ICoUSBInterface;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSBInterface
// Help String      : CoUSBInterface Class
// Default Interface: ICoUSBInterface
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSBInterfaceProperties= class;
{$ENDIF}
  TCCoUSBInterface = class(TOleServer)
  private
    FIntf: ICoUSBInterface;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSBInterfaceProperties;
    function GetServerProperties: TCCoUSBInterfaceProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSBInterface;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSBInterface);
    procedure Disconnect; override;
    procedure CreateUSBInterface;
    function getInputBuffer: OleVariant;
    function getOutputBuffer: OleVariant;
    procedure increaseInputBufferSize(COM_param0: Integer);
    procedure increaseOutputBufferSize(COM_param0: Integer);
    procedure bulkIn(const COM_param0: ICoUSBEndpointDescriptor; COM_param1: OleVariant; 
                     COM_param2: Integer);
    procedure bulkOut(const COM_param0: ICoUSBEndpointDescriptor; COM_param1: OleVariant; 
                      COM_param2: Integer);
    procedure openDevice(COM_param0: Integer; COM_param1: Integer; COM_param2: Integer);
    procedure closeDevice;
    function getUSBStringDescriptor(COM_param0: Integer): WideString;
    function isUSB2Mode: WordBool;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSBInterface read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSBInterfaceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSBInterface
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSBInterfaceProperties = class(TPersistent)
  private
    FServer:    TCCoUSBInterface;
    function    GetDefaultInterface: ICoUSBInterface;
    constructor Create(AServer: TCCoUSBInterface);
  protected
  public
    property DefaultInterface: ICoUSBInterface read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoAdvancedIntegrationClockImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoAdvancedIntegrationClockImpl exposed by              
// the CoClass CCoAdvancedIntegrationClockImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoAdvancedIntegrationClockImpl = class
    class function Create: ICoAdvancedIntegrationClockImpl;
    class function CreateRemote(const MachineName: string): ICoAdvancedIntegrationClockImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoAdvancedIntegrationClockImpl
// Help String      : CoAdvancedIntegrationClockImpl Class
// Default Interface: ICoAdvancedIntegrationClockImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoAdvancedIntegrationClockImplProperties= class;
{$ENDIF}
  TCCoAdvancedIntegrationClockImpl = class(TOleServer)
  private
    FIntf: ICoAdvancedIntegrationClockImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoAdvancedIntegrationClockImplProperties;
    function GetServerProperties: TCCoAdvancedIntegrationClockImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoAdvancedIntegrationClockImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoAdvancedIntegrationClockImpl);
    procedure Disconnect; override;
    procedure CreateAdvancedIntegrationClockImplB(const COM_usbInt: ICoUSBInterface);
    function getIntegrationClockTimer: Integer;
    function getIntegrationTimeBaseClock: Integer;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer);
    function getAdvancedIntegrationTimeMinimum: Integer;
    function getAdvancedIntegrationTimeMaximum: Integer;
    function getAdvancedIntegrationTimeIncrement: Integer;
    procedure masterClockChanged(COM_newValue: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoAdvancedIntegrationClockImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoAdvancedIntegrationClockImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoAdvancedIntegrationClockImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoAdvancedIntegrationClockImplProperties = class(TPersistent)
  private
    FServer:    TCCoAdvancedIntegrationClockImpl;
    function    GetDefaultInterface: ICoAdvancedIntegrationClockImpl;
    constructor Create(AServer: TCCoAdvancedIntegrationClockImpl);
  protected
  public
    property DefaultInterface: ICoAdvancedIntegrationClockImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoAdvancedVersion provides a Create and CreateRemote method to          
// create instances of the default interface ICoAdvancedVersion exposed by              
// the CoClass CCoAdvancedVersion. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoAdvancedVersion = class
    class function Create: ICoAdvancedVersion;
    class function CreateRemote(const MachineName: string): ICoAdvancedVersion;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoAdvancedVersion
// Help String      : CoAdvancedVersion Class
// Default Interface: ICoAdvancedVersion
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoAdvancedVersionProperties= class;
{$ENDIF}
  TCCoAdvancedVersion = class(TOleServer)
  private
    FIntf: ICoAdvancedVersion;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoAdvancedVersionProperties;
    function GetServerProperties: TCCoAdvancedVersionProperties;
{$ENDIF}
    function GetDefaultInterface: ICoAdvancedVersion;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoAdvancedVersion);
    procedure Disconnect; override;
    procedure CreateAdvancedVersion;
    function getFPGAFirmwareVersion: WideString;
    function getPSOCVersion: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoAdvancedVersion read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoAdvancedVersionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoAdvancedVersion
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoAdvancedVersionProperties = class(TPersistent)
  private
    FServer:    TCCoAdvancedVersion;
    function    GetDefaultInterface: ICoAdvancedVersion;
    constructor Create(AServer: TCCoAdvancedVersion);
  protected
  public
    property DefaultInterface: ICoAdvancedVersion read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoAdvancedVersionImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoAdvancedVersionImpl exposed by              
// the CoClass CCoAdvancedVersionImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoAdvancedVersionImpl = class
    class function Create: ICoAdvancedVersionImpl;
    class function CreateRemote(const MachineName: string): ICoAdvancedVersionImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoAdvancedVersionImpl
// Help String      : CoAdvancedVersionImpl Class
// Default Interface: ICoAdvancedVersionImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoAdvancedVersionImplProperties= class;
{$ENDIF}
  TCCoAdvancedVersionImpl = class(TOleServer)
  private
    FIntf: ICoAdvancedVersionImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoAdvancedVersionImplProperties;
    function GetServerProperties: TCCoAdvancedVersionImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoAdvancedVersionImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoAdvancedVersionImpl);
    procedure Disconnect; override;
    procedure CreateAdvancedVersionImplB(const COM_usbInt: ICoUSBInterface);
    function getFPGAFirmwareVersion: WideString;
    function getPSOCVersion: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoAdvancedVersionImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoAdvancedVersionImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoAdvancedVersionImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoAdvancedVersionImplProperties = class(TPersistent)
  private
    FServer:    TCCoAdvancedVersionImpl;
    function    GetDefaultInterface: ICoAdvancedVersionImpl;
    constructor Create(AServer: TCCoAdvancedVersionImpl);
  protected
  public
    property DefaultInterface: ICoAdvancedVersionImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoAdvancedVersionImpl_NIR provides a Create and CreateRemote method to          
// create instances of the default interface ICoAdvancedVersionImpl_NIR exposed by              
// the CoClass CCoAdvancedVersionImpl_NIR. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoAdvancedVersionImpl_NIR = class
    class function Create: ICoAdvancedVersionImpl_NIR;
    class function CreateRemote(const MachineName: string): ICoAdvancedVersionImpl_NIR;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoAdvancedVersionImpl_NIR
// Help String      : CoAdvancedVersionImpl_NIR Class
// Default Interface: ICoAdvancedVersionImpl_NIR
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoAdvancedVersionImpl_NIRProperties= class;
{$ENDIF}
  TCCoAdvancedVersionImpl_NIR = class(TOleServer)
  private
    FIntf: ICoAdvancedVersionImpl_NIR;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoAdvancedVersionImpl_NIRProperties;
    function GetServerProperties: TCCoAdvancedVersionImpl_NIRProperties;
{$ENDIF}
    function GetDefaultInterface: ICoAdvancedVersionImpl_NIR;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoAdvancedVersionImpl_NIR);
    procedure Disconnect; override;
    procedure CreateAdvancedVersionImpl_NIRB(const COM_usbInt: ICoUSBInterface);
    function getPSOCVersion: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoAdvancedVersionImpl_NIR read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoAdvancedVersionImpl_NIRProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoAdvancedVersionImpl_NIR
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoAdvancedVersionImpl_NIRProperties = class(TPersistent)
  private
    FServer:    TCCoAdvancedVersionImpl_NIR;
    function    GetDefaultInterface: ICoAdvancedVersionImpl_NIR;
    constructor Create(AServer: TCCoAdvancedVersionImpl_NIR);
  protected
  public
    property DefaultInterface: ICoAdvancedVersionImpl_NIR read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoAnalogIn provides a Create and CreateRemote method to          
// create instances of the default interface ICoAnalogIn exposed by              
// the CoClass CCoAnalogIn. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoAnalogIn = class
    class function Create: ICoAnalogIn;
    class function CreateRemote(const MachineName: string): ICoAnalogIn;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoAnalogIn
// Help String      : CoAnalogIn Class
// Default Interface: ICoAnalogIn
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoAnalogInProperties= class;
{$ENDIF}
  TCCoAnalogIn = class(TOleServer)
  private
    FIntf: ICoAnalogIn;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoAnalogInProperties;
    function GetServerProperties: TCCoAnalogInProperties;
{$ENDIF}
    function GetDefaultInterface: ICoAnalogIn;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoAnalogIn);
    procedure Disconnect; override;
    procedure CreateAnalogIn;
    function getVoltageIn: Double;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoAnalogIn read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoAnalogInProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoAnalogIn
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoAnalogInProperties = class(TPersistent)
  private
    FServer:    TCCoAnalogIn;
    function    GetDefaultInterface: ICoAnalogIn;
    constructor Create(AServer: TCCoAnalogIn);
  protected
  public
    property DefaultInterface: ICoAnalogIn read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoAnalogInGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoAnalogInGUIProvider exposed by              
// the CoClass CCoAnalogInGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoAnalogInGUIProvider = class
    class function Create: ICoAnalogInGUIProvider;
    class function CreateRemote(const MachineName: string): ICoAnalogInGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoAnalogInGUIProvider
// Help String      : CoAnalogInGUIProvider Class
// Default Interface: ICoAnalogInGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoAnalogInGUIProviderProperties= class;
{$ENDIF}
  TCCoAnalogInGUIProvider = class(TOleServer)
  private
    FIntf: ICoAnalogInGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoAnalogInGUIProviderProperties;
    function GetServerProperties: TCCoAnalogInGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoAnalogInGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoAnalogInGUIProvider);
    procedure Disconnect; override;
    procedure CreateAnalogInGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoAnalogInGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoAnalogInGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoAnalogInGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoAnalogInGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoAnalogInGUIProvider;
    function    GetDefaultInterface: ICoAnalogInGUIProvider;
    constructor Create(AServer: TCCoAnalogInGUIProvider);
  protected
  public
    property DefaultInterface: ICoAnalogInGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoAnalogInImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoAnalogInImpl exposed by              
// the CoClass CCoAnalogInImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoAnalogInImpl = class
    class function Create: ICoAnalogInImpl;
    class function CreateRemote(const MachineName: string): ICoAnalogInImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoAnalogInImpl
// Help String      : CoAnalogInImpl Class
// Default Interface: ICoAnalogInImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoAnalogInImplProperties= class;
{$ENDIF}
  TCCoAnalogInImpl = class(TOleServer)
  private
    FIntf: ICoAnalogInImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoAnalogInImplProperties;
    function GetServerProperties: TCCoAnalogInImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoAnalogInImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoAnalogInImpl);
    procedure Disconnect; override;
    procedure CreateAnalogInImplB(const COM_usbInt: ICoUSBInterface);
    function getVoltageIn: Double;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoAnalogInImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoAnalogInImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoAnalogInImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoAnalogInImplProperties = class(TPersistent)
  private
    FServer:    TCCoAnalogInImpl;
    function    GetDefaultInterface: ICoAnalogInImpl;
    constructor Create(AServer: TCCoAnalogInImpl);
  protected
  public
    property DefaultInterface: ICoAnalogInImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoAnalogOut provides a Create and CreateRemote method to          
// create instances of the default interface ICoAnalogOut exposed by              
// the CoClass CCoAnalogOut. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoAnalogOut = class
    class function Create: ICoAnalogOut;
    class function CreateRemote(const MachineName: string): ICoAnalogOut;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoAnalogOut
// Help String      : CoAnalogOut Class
// Default Interface: ICoAnalogOut
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoAnalogOutProperties= class;
{$ENDIF}
  TCCoAnalogOut = class(TOleServer)
  private
    FIntf: ICoAnalogOut;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoAnalogOutProperties;
    function GetServerProperties: TCCoAnalogOutProperties;
{$ENDIF}
    function GetDefaultInterface: ICoAnalogOut;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoAnalogOut);
    procedure Disconnect; override;
    procedure CreateAnalogOut;
    procedure setDACCounts(COM_param0: Integer; COM_param1: Integer);
    function getDACMinimum: Integer;
    function getDACMaximum: Integer;
    function getDACIncrement: Integer;
    function analogOutCountsToVolts(COM_param0: Integer): Double;
    function isDACPresent: WordBool;
    function getDACPins: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoAnalogOut read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoAnalogOutProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoAnalogOut
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoAnalogOutProperties = class(TPersistent)
  private
    FServer:    TCCoAnalogOut;
    function    GetDefaultInterface: ICoAnalogOut;
    constructor Create(AServer: TCCoAnalogOut);
  protected
  public
    property DefaultInterface: ICoAnalogOut read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoAnalogOutGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoAnalogOutGUIProvider exposed by              
// the CoClass CCoAnalogOutGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoAnalogOutGUIProvider = class
    class function Create: ICoAnalogOutGUIProvider;
    class function CreateRemote(const MachineName: string): ICoAnalogOutGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoAnalogOutGUIProvider
// Help String      : CoAnalogOutGUIProvider Class
// Default Interface: ICoAnalogOutGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoAnalogOutGUIProviderProperties= class;
{$ENDIF}
  TCCoAnalogOutGUIProvider = class(TOleServer)
  private
    FIntf: ICoAnalogOutGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoAnalogOutGUIProviderProperties;
    function GetServerProperties: TCCoAnalogOutGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoAnalogOutGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoAnalogOutGUIProvider);
    procedure Disconnect; override;
    procedure CreateAnalogOutGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoAnalogOutGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoAnalogOutGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoAnalogOutGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoAnalogOutGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoAnalogOutGUIProvider;
    function    GetDefaultInterface: ICoAnalogOutGUIProvider;
    constructor Create(AServer: TCCoAnalogOutGUIProvider);
  protected
  public
    property DefaultInterface: ICoAnalogOutGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoAnalogOutImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoAnalogOutImpl exposed by              
// the CoClass CCoAnalogOutImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoAnalogOutImpl = class
    class function Create: ICoAnalogOutImpl;
    class function CreateRemote(const MachineName: string): ICoAnalogOutImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoAnalogOutImpl
// Help String      : CoAnalogOutImpl Class
// Default Interface: ICoAnalogOutImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoAnalogOutImplProperties= class;
{$ENDIF}
  TCCoAnalogOutImpl = class(TOleServer)
  private
    FIntf: ICoAnalogOutImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoAnalogOutImplProperties;
    function GetServerProperties: TCCoAnalogOutImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoAnalogOutImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoAnalogOutImpl);
    procedure Disconnect; override;
    procedure CreateAnalogOutImplB(const COM_usbInt: ICoUSBInterface);
    procedure setDACCounts(COM_param0: Integer; COM_param1: Integer);
    function getDACMinimum: Integer;
    function getDACMaximum: Integer;
    function getDACIncrement: Integer;
    function analogOutCountsToVolts(COM_param0: Integer): Double;
    function isDACPresent: WordBool;
    function getDACPins: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoAnalogOutImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoAnalogOutImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoAnalogOutImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoAnalogOutImplProperties = class(TPersistent)
  private
    FServer:    TCCoAnalogOutImpl;
    function    GetDefaultInterface: ICoAnalogOutImpl;
    constructor Create(AServer: TCCoAnalogOutImpl);
  protected
  public
    property DefaultInterface: ICoAnalogOutImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoAnalogOutImpl_ADC1000 provides a Create and CreateRemote method to          
// create instances of the default interface ICoAnalogOutImpl_ADC1000 exposed by              
// the CoClass CCoAnalogOutImpl_ADC1000. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoAnalogOutImpl_ADC1000 = class
    class function Create: ICoAnalogOutImpl_ADC1000;
    class function CreateRemote(const MachineName: string): ICoAnalogOutImpl_ADC1000;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoAnalogOutImpl_ADC1000
// Help String      : CoAnalogOutImpl_ADC1000 Class
// Default Interface: ICoAnalogOutImpl_ADC1000
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoAnalogOutImpl_ADC1000Properties= class;
{$ENDIF}
  TCCoAnalogOutImpl_ADC1000 = class(TOleServer)
  private
    FIntf: ICoAnalogOutImpl_ADC1000;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoAnalogOutImpl_ADC1000Properties;
    function GetServerProperties: TCCoAnalogOutImpl_ADC1000Properties;
{$ENDIF}
    function GetDefaultInterface: ICoAnalogOutImpl_ADC1000;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoAnalogOutImpl_ADC1000);
    procedure Disconnect; override;
    procedure CreateAnalogOutImpl_ADC1000B(const COM_usbInt: ICoUSBInterface; COM_fw: Integer; 
                                           COM_pins: Integer);
    function isFirmwareValid: WordBool;
    function isDACPresent: WordBool;
    procedure setDACCounts(COM_counts: Integer; COM_channel: Integer);
    function readDACCounts(COM_channel: Integer): Integer;
    function analogOutCountsToVolts(COM_counts: Integer): Double;
    function getDACMinimum: Integer;
    function getDACMaximum: Integer;
    function getDACIncrement: Integer;
    function getDACPins: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoAnalogOutImpl_ADC1000 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoAnalogOutImpl_ADC1000Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoAnalogOutImpl_ADC1000
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoAnalogOutImpl_ADC1000Properties = class(TPersistent)
  private
    FServer:    TCCoAnalogOutImpl_ADC1000;
    function    GetDefaultInterface: ICoAnalogOutImpl_ADC1000;
    constructor Create(AServer: TCCoAnalogOutImpl_ADC1000);
  protected
  public
    property DefaultInterface: ICoAnalogOutImpl_ADC1000 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoAnalogOutImpl_PSOC provides a Create and CreateRemote method to          
// create instances of the default interface ICoAnalogOutImpl_PSOC exposed by              
// the CoClass CCoAnalogOutImpl_PSOC. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoAnalogOutImpl_PSOC = class
    class function Create: ICoAnalogOutImpl_PSOC;
    class function CreateRemote(const MachineName: string): ICoAnalogOutImpl_PSOC;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoAnalogOutImpl_PSOC
// Help String      : CoAnalogOutImpl_PSOC Class
// Default Interface: ICoAnalogOutImpl_PSOC
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoAnalogOutImpl_PSOCProperties= class;
{$ENDIF}
  TCCoAnalogOutImpl_PSOC = class(TOleServer)
  private
    FIntf: ICoAnalogOutImpl_PSOC;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoAnalogOutImpl_PSOCProperties;
    function GetServerProperties: TCCoAnalogOutImpl_PSOCProperties;
{$ENDIF}
    function GetDefaultInterface: ICoAnalogOutImpl_PSOC;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoAnalogOutImpl_PSOC);
    procedure Disconnect; override;
    procedure CreateAnalogOutImpl_PSOCB(const COM_usbInt: ICoUSBInterface);
    procedure setDACCounts(COM_counts: Integer; COM_channel: Integer);
    function analogOutCountsToVolts(COM_counts: Integer): Double;
    function getDACMinimum: Integer;
    function getDACMaximum: Integer;
    function getDACIncrement: Integer;
    function isDACPresent: WordBool;
    function getDACPins: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoAnalogOutImpl_PSOC read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoAnalogOutImpl_PSOCProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoAnalogOutImpl_PSOC
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoAnalogOutImpl_PSOCProperties = class(TPersistent)
  private
    FServer:    TCCoAnalogOutImpl_PSOC;
    function    GetDefaultInterface: ICoAnalogOutImpl_PSOC;
    constructor Create(AServer: TCCoAnalogOutImpl_PSOC);
  protected
  public
    property DefaultInterface: ICoAnalogOutImpl_PSOC read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoAutonullingConfiguration provides a Create and CreateRemote method to          
// create instances of the default interface ICoAutonullingConfiguration exposed by              
// the CoClass CCoAutonullingConfiguration. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoAutonullingConfiguration = class
    class function Create: ICoAutonullingConfiguration;
    class function CreateRemote(const MachineName: string): ICoAutonullingConfiguration;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoAutonullingConfiguration
// Help String      : CoAutonullingConfiguration Class
// Default Interface: ICoAutonullingConfiguration
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoAutonullingConfigurationProperties= class;
{$ENDIF}
  TCCoAutonullingConfiguration = class(TOleServer)
  private
    FIntf: ICoAutonullingConfiguration;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoAutonullingConfigurationProperties;
    function GetServerProperties: TCCoAutonullingConfigurationProperties;
{$ENDIF}
    function GetDefaultInterface: ICoAutonullingConfiguration;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoAutonullingConfiguration);
    procedure Disconnect; override;
    procedure CreateAutonullingConfiguration;
    procedure CreateAutonullingConfigurationB(COM_ena: Integer; COM_temp: Integer; 
                                              COM_dark: Integer; COM_sat: Double);
    function getEnabled: Integer;
    procedure setEnabled(COM_ena: Integer);
    function getTemperatureCompensationEnabled: Integer;
    procedure setTemperatureCompensationEnabled(COM_ena: Integer);
    function getDarkValue: Integer;
    function getSaturationValue: Double;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoAutonullingConfiguration read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoAutonullingConfigurationProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoAutonullingConfiguration
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoAutonullingConfigurationProperties = class(TPersistent)
  private
    FServer:    TCCoAutonullingConfiguration;
    function    GetDefaultInterface: ICoAutonullingConfiguration;
    constructor Create(AServer: TCCoAutonullingConfiguration);
  protected
  public
    property DefaultInterface: ICoAutonullingConfiguration read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoAutonulling provides a Create and CreateRemote method to          
// create instances of the default interface ICoAutonulling exposed by              
// the CoClass CCoAutonulling. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoAutonulling = class
    class function Create: ICoAutonulling;
    class function CreateRemote(const MachineName: string): ICoAutonulling;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoAutonulling
// Help String      : CoAutonulling Class
// Default Interface: ICoAutonulling
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoAutonullingProperties= class;
{$ENDIF}
  TCCoAutonulling = class(TOleServer)
  private
    FIntf: ICoAutonulling;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoAutonullingProperties;
    function GetServerProperties: TCCoAutonullingProperties;
{$ENDIF}
    function GetDefaultInterface: ICoAutonulling;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoAutonulling);
    procedure Disconnect; override;
    procedure CreateAutonulling;
    function getAutonullingScanStatus: Integer;
    procedure setAutonullingScanStatus(COM_param0: Integer);
    function getAutonullingScanValue: Integer;
    procedure setAutonullingScanValue(COM_param0: Integer);
    function getAutonullingConfiguration: ICoAutonullingConfiguration;
    function readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration;
    procedure setAutonullingConfiguration(const COM_param0: ICoAutonullingConfiguration);
    procedure writeAutonullingConfigurationToSpectrometer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoAutonulling read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoAutonullingProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoAutonulling
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoAutonullingProperties = class(TPersistent)
  private
    FServer:    TCCoAutonulling;
    function    GetDefaultInterface: ICoAutonulling;
    constructor Create(AServer: TCCoAutonulling);
  protected
  public
    property DefaultInterface: ICoAutonulling read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoAutonullingGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoAutonullingGUIProvider exposed by              
// the CoClass CCoAutonullingGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoAutonullingGUIProvider = class
    class function Create: ICoAutonullingGUIProvider;
    class function CreateRemote(const MachineName: string): ICoAutonullingGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoAutonullingGUIProvider
// Help String      : CoAutonullingGUIProvider Class
// Default Interface: ICoAutonullingGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoAutonullingGUIProviderProperties= class;
{$ENDIF}
  TCCoAutonullingGUIProvider = class(TOleServer)
  private
    FIntf: ICoAutonullingGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoAutonullingGUIProviderProperties;
    function GetServerProperties: TCCoAutonullingGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoAutonullingGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoAutonullingGUIProvider);
    procedure Disconnect; override;
    procedure CreateAutonullingGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoAutonullingGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoAutonullingGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoAutonullingGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoAutonullingGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoAutonullingGUIProvider;
    function    GetDefaultInterface: ICoAutonullingGUIProvider;
    constructor Create(AServer: TCCoAutonullingGUIProvider);
  protected
  public
    property DefaultInterface: ICoAutonullingGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoAutonullingImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoAutonullingImpl exposed by              
// the CoClass CCoAutonullingImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoAutonullingImpl = class
    class function Create: ICoAutonullingImpl;
    class function CreateRemote(const MachineName: string): ICoAutonullingImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoAutonullingImpl
// Help String      : CoAutonullingImpl Class
// Default Interface: ICoAutonullingImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoAutonullingImplProperties= class;
{$ENDIF}
  TCCoAutonullingImpl = class(TOleServer)
  private
    FIntf: ICoAutonullingImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoAutonullingImplProperties;
    function GetServerProperties: TCCoAutonullingImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoAutonullingImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoAutonullingImpl);
    procedure Disconnect; override;
    procedure CreateAutonullingImplB(const COM_usbInt: ICoUSBInterface);
    function readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration;
    function getAutonullingScanStatus: Integer;
    function getAutonullingScanValue: Integer;
    function getAutonullingConfiguration: ICoAutonullingConfiguration;
    procedure setAutonullingConfiguration(const COM_configuration: ICoAutonullingConfiguration);
    procedure writeAutonullingConfigurationToSpectrometer;
    procedure setAutonullingScanStatus(COM_value: Integer);
    procedure setAutonullingScanValue(COM_value: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoAutonullingImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoAutonullingImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoAutonullingImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoAutonullingImplProperties = class(TPersistent)
  private
    FServer:    TCCoAutonullingImpl;
    function    GetDefaultInterface: ICoAutonullingImpl;
    constructor Create(AServer: TCCoAutonullingImpl);
  protected
  public
    property DefaultInterface: ICoAutonullingImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoBadPixelRemoval provides a Create and CreateRemote method to          
// create instances of the default interface ICoBadPixelRemoval exposed by              
// the CoClass CCoBadPixelRemoval. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoBadPixelRemoval = class
    class function Create: ICoBadPixelRemoval;
    class function CreateRemote(const MachineName: string): ICoBadPixelRemoval;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoBadPixelRemoval
// Help String      : CoBadPixelRemoval Class
// Default Interface: ICoBadPixelRemoval
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoBadPixelRemovalProperties= class;
{$ENDIF}
  TCCoBadPixelRemoval = class(TOleServer)
  private
    FIntf: ICoBadPixelRemoval;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoBadPixelRemovalProperties;
    function GetServerProperties: TCCoBadPixelRemovalProperties;
{$ENDIF}
    function GetDefaultInterface: ICoBadPixelRemoval;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoBadPixelRemoval);
    procedure Disconnect; override;
    procedure CreateBadPixelRemoval;
    function getBadPixels: OleVariant;
    procedure setBadPixels(COM_param0: OleVariant);
    function removeBadPixels(const COM_param0: ICoSpectrum): ICoSpectrum;
    function getNumberOfBadPixels: Integer;
    function getAllPixels: OleVariant;
    procedure setBadPixelsToSpectrometer;
    function getBadPixelsFromSpectrometer: OleVariant;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoBadPixelRemoval read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoBadPixelRemovalProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoBadPixelRemoval
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoBadPixelRemovalProperties = class(TPersistent)
  private
    FServer:    TCCoBadPixelRemoval;
    function    GetDefaultInterface: ICoBadPixelRemoval;
    constructor Create(AServer: TCCoBadPixelRemoval);
  protected
  public
    property DefaultInterface: ICoBadPixelRemoval read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoBadPixelRemovalGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoBadPixelRemovalGUIProvider exposed by              
// the CoClass CCoBadPixelRemovalGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoBadPixelRemovalGUIProvider = class
    class function Create: ICoBadPixelRemovalGUIProvider;
    class function CreateRemote(const MachineName: string): ICoBadPixelRemovalGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoBadPixelRemovalGUIProvider
// Help String      : CoBadPixelRemovalGUIProvider Class
// Default Interface: ICoBadPixelRemovalGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoBadPixelRemovalGUIProviderProperties= class;
{$ENDIF}
  TCCoBadPixelRemovalGUIProvider = class(TOleServer)
  private
    FIntf: ICoBadPixelRemovalGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoBadPixelRemovalGUIProviderProperties;
    function GetServerProperties: TCCoBadPixelRemovalGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoBadPixelRemovalGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoBadPixelRemovalGUIProvider);
    procedure Disconnect; override;
    procedure CreateBadPixelRemovalGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoBadPixelRemovalGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoBadPixelRemovalGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoBadPixelRemovalGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoBadPixelRemovalGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoBadPixelRemovalGUIProvider;
    function    GetDefaultInterface: ICoBadPixelRemovalGUIProvider;
    constructor Create(AServer: TCCoBadPixelRemovalGUIProvider);
  protected
  public
    property DefaultInterface: ICoBadPixelRemovalGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoBadPixelRemovalImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoBadPixelRemovalImpl exposed by              
// the CoClass CCoBadPixelRemovalImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoBadPixelRemovalImpl = class
    class function Create: ICoBadPixelRemovalImpl;
    class function CreateRemote(const MachineName: string): ICoBadPixelRemovalImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoBadPixelRemovalImpl
// Help String      : CoBadPixelRemovalImpl Class
// Default Interface: ICoBadPixelRemovalImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoBadPixelRemovalImplProperties= class;
{$ENDIF}
  TCCoBadPixelRemovalImpl = class(TOleServer)
  private
    FIntf: ICoBadPixelRemovalImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoBadPixelRemovalImplProperties;
    function GetServerProperties: TCCoBadPixelRemovalImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoBadPixelRemovalImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoBadPixelRemovalImpl);
    procedure Disconnect; override;
    procedure CreateBadPixelRemovalImplB(const COM_usbInt: ICoUSBInterface; COM_numPixels: Integer);
    procedure setBadPixelsToSpectrometer;
    function getBadPixelsFromSpectrometer: OleVariant;
    function getBadPixels: OleVariant;
    procedure setBadPixels(COM_pixels: OleVariant);
    function removeBadPixels(const COM_spectrum: ICoSpectrum): ICoSpectrum;
    function getNumberOfBadPixels: Integer;
    procedure setNumberOfBadPixels(COM_num: Integer);
    function getAllPixels: OleVariant;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoBadPixelRemovalImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoBadPixelRemovalImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoBadPixelRemovalImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoBadPixelRemovalImplProperties = class(TPersistent)
  private
    FServer:    TCCoBadPixelRemovalImpl;
    function    GetDefaultInterface: ICoBadPixelRemovalImpl;
    constructor Create(AServer: TCCoBadPixelRemovalImpl);
  protected
  public
    property DefaultInterface: ICoBadPixelRemovalImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoBaseSpecFunctionality provides a Create and CreateRemote method to          
// create instances of the default interface ICoBaseSpecFunctionality exposed by              
// the CoClass CCoBaseSpecFunctionality. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoBaseSpecFunctionality = class
    class function Create: ICoBaseSpecFunctionality;
    class function CreateRemote(const MachineName: string): ICoBaseSpecFunctionality;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoBaseSpecFunctionality
// Help String      : CoBaseSpecFunctionality Class
// Default Interface: ICoBaseSpecFunctionality
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoBaseSpecFunctionalityProperties= class;
{$ENDIF}
  TCCoBaseSpecFunctionality = class(TOleServer)
  private
    FIntf: ICoBaseSpecFunctionality;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoBaseSpecFunctionalityProperties;
    function GetServerProperties: TCCoBaseSpecFunctionalityProperties;
{$ENDIF}
    function GetDefaultInterface: ICoBaseSpecFunctionality;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoBaseSpecFunctionality);
    procedure Disconnect; override;
    procedure CreateBaseSpecFunctionality;
    procedure closeSpectrometer;
    function getActualIntegrationTime: Integer;
    function getChannels: ICoSpectrometerChannelCollection;
    function getClassName: WideString;
    function getDeviceIndex: Integer;
    function isStabilityScan: WordBool;
    function getSpectrum(const COM_param0: ICoSpectrum): ICoSpectrum;
    function getFirmwareVersion: WideString;
    function getFirmwareVersionNumber: Integer;
    function getInfo(COM_param0: Integer): WideString;
    function getIntegrationTimeBase: Integer;
    function getIntegrationTimeIncrement: Integer;
    function getIntegrationTimeMaximum: Integer;
    function getIntegrationTimeMinimum: Integer;
    function getMaxIntensity: Integer;
    function getName: WideString;
    function getSerialNumber: WideString;
    procedure initialize;
    procedure openNextUnclaimed;
    procedure openSpectrometer(COM_param0: Integer);
    procedure getCoefficientsFromSpectrometer;
    procedure getConfigurationFromSpectrometer;
    procedure setStabilityScan(COM_param0: WordBool);
    procedure setInfo(COM_param0: Integer; const COM_param1: WideString);
    procedure setIntegrationTime(COM_param0: Integer);
    procedure setPowerState(COM_param0: WordBool);
    procedure setStrobeEnable(COM_param0: WordBool);
    procedure setStrobeDelay(COM_param0: Integer);
    procedure setCoefficients;
    procedure setConfiguration;
    function isStrobeDelayEnabled: WordBool;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoBaseSpecFunctionality read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoBaseSpecFunctionalityProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoBaseSpecFunctionality
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoBaseSpecFunctionalityProperties = class(TPersistent)
  private
    FServer:    TCCoBaseSpecFunctionality;
    function    GetDefaultInterface: ICoBaseSpecFunctionality;
    constructor Create(AServer: TCCoBaseSpecFunctionality);
  protected
  public
    property DefaultInterface: ICoBaseSpecFunctionality read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoBitSet provides a Create and CreateRemote method to          
// create instances of the default interface ICoBitSet exposed by              
// the CoClass CCoBitSet. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoBitSet = class
    class function Create: ICoBitSet;
    class function CreateRemote(const MachineName: string): ICoBitSet;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoBitSet
// Help String      : CoBitSet Class
// Default Interface: ICoBitSet
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoBitSetProperties= class;
{$ENDIF}
  TCCoBitSet = class(TOleServer)
  private
    FIntf: ICoBitSet;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoBitSetProperties;
    function GetServerProperties: TCCoBitSetProperties;
{$ENDIF}
    function GetDefaultInterface: ICoBitSet;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoBitSet);
    procedure Disconnect; override;
    function cardinality: Integer;
    function hashCode: Integer;
    function length: Integer;
    function size: Integer;
    procedure CreateBitSet;
    procedure clear;
    function isEmpty: WordBool;
    function nextClearBit(COM_param0: Integer): Integer;
    function nextSetBit(COM_param0: Integer): Integer;
    procedure CreateBitSetB(COM_param0: Integer);
    procedure clearB(COM_param0: Integer);
    procedure flip(COM_param0: Integer);
    procedure set_(COM_param0: Integer);
    function get(COM_param0: Integer): WordBool;
    procedure clearC(COM_param0: Integer; COM_param1: Integer);
    procedure flipB(COM_param0: Integer; COM_param1: Integer);
    procedure setB(COM_param0: Integer; COM_param1: Integer);
    procedure setC(COM_param0: Integer; COM_param1: Integer; COM_param2: WordBool);
    procedure setD(COM_param0: Integer; COM_param1: WordBool);
    function toString: WideString;
    function getB(COM_param0: Integer; COM_param1: Integer): ICoBitSet;
    procedure bit_and(const COM_param0: ICoBitSet);
    procedure bit_andNot(const COM_param0: ICoBitSet);
    procedure bit_or(const COM_param0: ICoBitSet);
    procedure bit_xor(const COM_param0: ICoBitSet);
    function intersects(const COM_param0: ICoBitSet): WordBool;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoBitSet read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoBitSetProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoBitSet
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoBitSetProperties = class(TPersistent)
  private
    FServer:    TCCoBitSet;
    function    GetDefaultInterface: ICoBitSet;
    constructor Create(AServer: TCCoBitSet);
  protected
  public
    property DefaultInterface: ICoBitSet read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoBoardTemperature provides a Create and CreateRemote method to          
// create instances of the default interface ICoBoardTemperature exposed by              
// the CoClass CCoBoardTemperature. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoBoardTemperature = class
    class function Create: ICoBoardTemperature;
    class function CreateRemote(const MachineName: string): ICoBoardTemperature;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoBoardTemperature
// Help String      : CoBoardTemperature Class
// Default Interface: ICoBoardTemperature
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoBoardTemperatureProperties= class;
{$ENDIF}
  TCCoBoardTemperature = class(TOleServer)
  private
    FIntf: ICoBoardTemperature;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoBoardTemperatureProperties;
    function GetServerProperties: TCCoBoardTemperatureProperties;
{$ENDIF}
    function GetDefaultInterface: ICoBoardTemperature;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoBoardTemperature);
    procedure Disconnect; override;
    procedure CreateBoardTemperature;
    function getBoardTemperatureCelsius: Double;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoBoardTemperature read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoBoardTemperatureProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoBoardTemperature
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoBoardTemperatureProperties = class(TPersistent)
  private
    FServer:    TCCoBoardTemperature;
    function    GetDefaultInterface: ICoBoardTemperature;
    constructor Create(AServer: TCCoBoardTemperature);
  protected
  public
    property DefaultInterface: ICoBoardTemperature read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoBoardTemperatureGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoBoardTemperatureGUIProvider exposed by              
// the CoClass CCoBoardTemperatureGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoBoardTemperatureGUIProvider = class
    class function Create: ICoBoardTemperatureGUIProvider;
    class function CreateRemote(const MachineName: string): ICoBoardTemperatureGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoBoardTemperatureGUIProvider
// Help String      : CoBoardTemperatureGUIProvider Class
// Default Interface: ICoBoardTemperatureGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoBoardTemperatureGUIProviderProperties= class;
{$ENDIF}
  TCCoBoardTemperatureGUIProvider = class(TOleServer)
  private
    FIntf: ICoBoardTemperatureGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoBoardTemperatureGUIProviderProperties;
    function GetServerProperties: TCCoBoardTemperatureGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoBoardTemperatureGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoBoardTemperatureGUIProvider);
    procedure Disconnect; override;
    procedure CreateBoardTemperatureGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoBoardTemperatureGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoBoardTemperatureGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoBoardTemperatureGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoBoardTemperatureGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoBoardTemperatureGUIProvider;
    function    GetDefaultInterface: ICoBoardTemperatureGUIProvider;
    constructor Create(AServer: TCCoBoardTemperatureGUIProvider);
  protected
  public
    property DefaultInterface: ICoBoardTemperatureGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoBoardTemperatureImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoBoardTemperatureImpl exposed by              
// the CoClass CCoBoardTemperatureImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoBoardTemperatureImpl = class
    class function Create: ICoBoardTemperatureImpl;
    class function CreateRemote(const MachineName: string): ICoBoardTemperatureImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoBoardTemperatureImpl
// Help String      : CoBoardTemperatureImpl Class
// Default Interface: ICoBoardTemperatureImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoBoardTemperatureImplProperties= class;
{$ENDIF}
  TCCoBoardTemperatureImpl = class(TOleServer)
  private
    FIntf: ICoBoardTemperatureImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoBoardTemperatureImplProperties;
    function GetServerProperties: TCCoBoardTemperatureImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoBoardTemperatureImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoBoardTemperatureImpl);
    procedure Disconnect; override;
    procedure CreateBoardTemperatureImplB(const COM_usbInt: ICoUSBInterface);
    function getBoardTemperatureCelsius: Double;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoBoardTemperatureImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoBoardTemperatureImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoBoardTemperatureImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoBoardTemperatureImplProperties = class(TPersistent)
  private
    FServer:    TCCoBoardTemperatureImpl;
    function    GetDefaultInterface: ICoBoardTemperatureImpl;
    constructor Create(AServer: TCCoBoardTemperatureImpl);
  protected
  public
    property DefaultInterface: ICoBoardTemperatureImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoBoardTemperatureImpl_QE65000 provides a Create and CreateRemote method to          
// create instances of the default interface ICoBoardTemperatureImpl_QE65000 exposed by              
// the CoClass CCoBoardTemperatureImpl_QE65000. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoBoardTemperatureImpl_QE65000 = class
    class function Create: ICoBoardTemperatureImpl_QE65000;
    class function CreateRemote(const MachineName: string): ICoBoardTemperatureImpl_QE65000;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoBoardTemperatureImpl_QE65000
// Help String      : CoBoardTemperatureImpl_QE65000 Class
// Default Interface: ICoBoardTemperatureImpl_QE65000
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoBoardTemperatureImpl_QE65000Properties= class;
{$ENDIF}
  TCCoBoardTemperatureImpl_QE65000 = class(TOleServer)
  private
    FIntf: ICoBoardTemperatureImpl_QE65000;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoBoardTemperatureImpl_QE65000Properties;
    function GetServerProperties: TCCoBoardTemperatureImpl_QE65000Properties;
{$ENDIF}
    function GetDefaultInterface: ICoBoardTemperatureImpl_QE65000;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoBoardTemperatureImpl_QE65000);
    procedure Disconnect; override;
    procedure CreateBoardTemperatureImpl_QE65000B(const COM_usbInt: ICoUSBInterface);
    function getBoardTemperatureCelsius: Double;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoBoardTemperatureImpl_QE65000 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoBoardTemperatureImpl_QE65000Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoBoardTemperatureImpl_QE65000
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoBoardTemperatureImpl_QE65000Properties = class(TPersistent)
  private
    FServer:    TCCoBoardTemperatureImpl_QE65000;
    function    GetDefaultInterface: ICoBoardTemperatureImpl_QE65000;
    constructor Create(AServer: TCCoBoardTemperatureImpl_QE65000);
  protected
  public
    property DefaultInterface: ICoBoardTemperatureImpl_QE65000 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoCCDShutter provides a Create and CreateRemote method to          
// create instances of the default interface ICoCCDShutter exposed by              
// the CoClass CCoCCDShutter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoCCDShutter = class
    class function Create: ICoCCDShutter;
    class function CreateRemote(const MachineName: string): ICoCCDShutter;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoCCDShutter
// Help String      : CoCCDShutter Class
// Default Interface: ICoCCDShutter
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoCCDShutterProperties= class;
{$ENDIF}
  TCCoCCDShutter = class(TOleServer)
  private
    FIntf: ICoCCDShutter;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoCCDShutterProperties;
    function GetServerProperties: TCCoCCDShutterProperties;
{$ENDIF}
    function GetDefaultInterface: ICoCCDShutter;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoCCDShutter);
    procedure Disconnect; override;
    procedure CreateCCDShutter;
    function getShutterState: Shortint;
    function isShutterOpen: WordBool;
    procedure openShutter;
    procedure closeShutter;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoCCDShutter read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoCCDShutterProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoCCDShutter
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoCCDShutterProperties = class(TPersistent)
  private
    FServer:    TCCoCCDShutter;
    function    GetDefaultInterface: ICoCCDShutter;
    constructor Create(AServer: TCCoCCDShutter);
  protected
  public
    property DefaultInterface: ICoCCDShutter read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoCCDShutterGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoCCDShutterGUIProvider exposed by              
// the CoClass CCoCCDShutterGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoCCDShutterGUIProvider = class
    class function Create: ICoCCDShutterGUIProvider;
    class function CreateRemote(const MachineName: string): ICoCCDShutterGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoCCDShutterGUIProvider
// Help String      : CoCCDShutterGUIProvider Class
// Default Interface: ICoCCDShutterGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoCCDShutterGUIProviderProperties= class;
{$ENDIF}
  TCCoCCDShutterGUIProvider = class(TOleServer)
  private
    FIntf: ICoCCDShutterGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoCCDShutterGUIProviderProperties;
    function GetServerProperties: TCCoCCDShutterGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoCCDShutterGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoCCDShutterGUIProvider);
    procedure Disconnect; override;
    procedure CreateCCDShutterGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoCCDShutterGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoCCDShutterGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoCCDShutterGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoCCDShutterGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoCCDShutterGUIProvider;
    function    GetDefaultInterface: ICoCCDShutterGUIProvider;
    constructor Create(AServer: TCCoCCDShutterGUIProvider);
  protected
  public
    property DefaultInterface: ICoCCDShutterGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoLaser provides a Create and CreateRemote method to          
// create instances of the default interface ICoLaser exposed by              
// the CoClass CCoLaser. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoLaser = class
    class function Create: ICoLaser;
    class function CreateRemote(const MachineName: string): ICoLaser;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoLaser
// Help String      : CoLaser Class
// Default Interface: ICoLaser
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoLaserProperties= class;
{$ENDIF}
  TCCoLaser = class(TOleServer)
  private
    FIntf: ICoLaser;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoLaserProperties;
    function GetServerProperties: TCCoLaserProperties;
{$ENDIF}
    function GetDefaultInterface: ICoLaser;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoLaser);
    procedure Disconnect; override;
    procedure CreateLaserB(const COM_spectrometer: ICoSpectrometer; COM_laserIndex: Integer);
    function getLaserIndex: Integer;
    function isRemoteEnabled: WordBool;
    procedure setRemoteEnabled(COM_remoteEnabled: WordBool);
    function getLaserWavelength: Single;
    procedure setLaserWavelength(COM_laserWavelength: Single; COM_channelIndex: Integer);
    procedure setLaserWavelengthForAllChannels(COM_laserWavelength: Single);
    function isSafetyKeyOn: WordBool;
    procedure setSafetyKeyOn(COM_safetyKeyOn: WordBool);
    function isLaserPresent: WordBool;
    procedure setLaserPresent(COM_laserPresent: WordBool);
    function isLaserFault: WordBool;
    procedure setLaserFault(COM_laserFault: WordBool);
    function isLaserTemperatureLock: WordBool;
    procedure setLaserTemperatureLock(COM_laserTemperatureLock: WordBool);
    function isLaserPowered: WordBool;
    procedure setLaserPowered(COM_laserPowered: WordBool);
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoLaser read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoLaserProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoLaser
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoLaserProperties = class(TPersistent)
  private
    FServer:    TCCoLaser;
    function    GetDefaultInterface: ICoLaser;
    constructor Create(AServer: TCCoLaser);
  protected
  public
    property DefaultInterface: ICoLaser read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMMSRamanSpectrometer provides a Create and CreateRemote method to          
// create instances of the default interface ICoMMSRamanSpectrometer exposed by              
// the CoClass CCoMMSRamanSpectrometer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMMSRamanSpectrometer = class
    class function Create: ICoMMSRamanSpectrometer;
    class function CreateRemote(const MachineName: string): ICoMMSRamanSpectrometer;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMMSRamanSpectrometer
// Help String      : CoMMSRamanSpectrometer Class
// Default Interface: ICoMMSRamanSpectrometer
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMMSRamanSpectrometerProperties= class;
{$ENDIF}
  TCCoMMSRamanSpectrometer = class(TOleServer)
  private
    FIntf: ICoMMSRamanSpectrometer;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMMSRamanSpectrometerProperties;
    function GetServerProperties: TCCoMMSRamanSpectrometerProperties;
{$ENDIF}
    function GetDefaultInterface: ICoMMSRamanSpectrometer;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMMSRamanSpectrometer);
    procedure Disconnect; override;
    procedure CreateMMSRamanSpectrometer;
    procedure setEndpoints;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
    function getLaser(COM_param0: Integer): ICoLaser;
    function process(COM_opCode: Shortint): OleVariant;
    function processB(COM_opCode: Shortint; COM_schemaOut: Shortint; COM_schemaIn: Shortint): OleVariant;
    function processC(COM_opCode: Shortint; COM_size: Integer): OleVariant;
    function processD(COM_opCode: Shortint; COM_size: Integer; COM_schemaOut: Shortint; 
                      COM_schemaIn: Shortint): OleVariant;
    function processE(COM_opCode: Shortint; COM_size: Integer; COM_data: OleVariant; 
                      COM_schemaOut: Shortint; COM_schemaIn: Shortint): OleVariant;
    function processF(COM_opCode: Shortint; COM_size: Integer; COM_schemaOut: Shortint; 
                      COM_schemaIn: Shortint; const COM_inEndPoint: ICoUSBEndpointDescriptor; 
                      const COM_outEndPoint: ICoUSBEndpointDescriptor): OleVariant;
    function trimTrailingNulls(const COM_toTrim: WideString): WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMMSRamanSpectrometer read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMMSRamanSpectrometerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMMSRamanSpectrometer
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMMSRamanSpectrometerProperties = class(TPersistent)
  private
    FServer:    TCCoMMSRamanSpectrometer;
    function    GetDefaultInterface: ICoMMSRamanSpectrometer;
    constructor Create(AServer: TCCoMMSRamanSpectrometer);
  protected
  public
    property DefaultInterface: ICoMMSRamanSpectrometer read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoCCDShutterImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoCCDShutterImpl exposed by              
// the CoClass CCoCCDShutterImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoCCDShutterImpl = class
    class function Create: ICoCCDShutterImpl;
    class function CreateRemote(const MachineName: string): ICoCCDShutterImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoCCDShutterImpl
// Help String      : CoCCDShutterImpl Class
// Default Interface: ICoCCDShutterImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoCCDShutterImplProperties= class;
{$ENDIF}
  TCCoCCDShutterImpl = class(TOleServer)
  private
    FIntf: ICoCCDShutterImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoCCDShutterImplProperties;
    function GetServerProperties: TCCoCCDShutterImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoCCDShutterImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoCCDShutterImpl);
    procedure Disconnect; override;
    procedure CreateCCDShutterImplB(const COM_usbInt: ICoUSBInterface; 
                                    const COM_spec: ICoMMSRamanSpectrometer);
    function getShutterState: Shortint;
    function isShutterOpen: WordBool;
    procedure openShutter;
    procedure closeShutter;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoCCDShutterImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoCCDShutterImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoCCDShutterImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoCCDShutterImplProperties = class(TPersistent)
  private
    FServer:    TCCoCCDShutterImpl;
    function    GetDefaultInterface: ICoCCDShutterImpl;
    constructor Create(AServer: TCCoCCDShutterImpl);
  protected
  public
    property DefaultInterface: ICoCCDShutterImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoCCDTemperature provides a Create and CreateRemote method to          
// create instances of the default interface ICoCCDTemperature exposed by              
// the CoClass CCoCCDTemperature. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoCCDTemperature = class
    class function Create: ICoCCDTemperature;
    class function CreateRemote(const MachineName: string): ICoCCDTemperature;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoCCDTemperature
// Help String      : CoCCDTemperature Class
// Default Interface: ICoCCDTemperature
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoCCDTemperatureProperties= class;
{$ENDIF}
  TCCoCCDTemperature = class(TOleServer)
  private
    FIntf: ICoCCDTemperature;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoCCDTemperatureProperties;
    function GetServerProperties: TCCoCCDTemperatureProperties;
{$ENDIF}
    function GetDefaultInterface: ICoCCDTemperature;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoCCDTemperature);
    procedure Disconnect; override;
    procedure CreateCCDTemperature;
    procedure getCCDTemperatureInfo;
    procedure setCCDTemperatureInfo(COM_param0: WordBool; COM_param1: Single);
    function isTemperatureRegulation: WordBool;
    procedure setTemperatureRegulation(COM_param0: WordBool);
    function getCCDSetpoint: Single;
    procedure setCCDSetpoint(COM_param0: Single);
    function getMinimumCCDSetpoint: Integer;
    procedure setMinimumCCDSetpoint(COM_param0: Integer);
    function getMaximumCCDSetpoint: Integer;
    procedure setMaximumCCDSetpoint(COM_param0: Integer);
    function getThermistor: Single;
    function isThermFault: WordBool;
    function isTempLock: WordBool;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoCCDTemperature read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoCCDTemperatureProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoCCDTemperature
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoCCDTemperatureProperties = class(TPersistent)
  private
    FServer:    TCCoCCDTemperature;
    function    GetDefaultInterface: ICoCCDTemperature;
    constructor Create(AServer: TCCoCCDTemperature);
  protected
  public
    property DefaultInterface: ICoCCDTemperature read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoCCDTemperatureGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoCCDTemperatureGUIProvider exposed by              
// the CoClass CCoCCDTemperatureGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoCCDTemperatureGUIProvider = class
    class function Create: ICoCCDTemperatureGUIProvider;
    class function CreateRemote(const MachineName: string): ICoCCDTemperatureGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoCCDTemperatureGUIProvider
// Help String      : CoCCDTemperatureGUIProvider Class
// Default Interface: ICoCCDTemperatureGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoCCDTemperatureGUIProviderProperties= class;
{$ENDIF}
  TCCoCCDTemperatureGUIProvider = class(TOleServer)
  private
    FIntf: ICoCCDTemperatureGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoCCDTemperatureGUIProviderProperties;
    function GetServerProperties: TCCoCCDTemperatureGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoCCDTemperatureGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoCCDTemperatureGUIProvider);
    procedure Disconnect; override;
    procedure CreateCCDTemperatureGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoCCDTemperatureGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoCCDTemperatureGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoCCDTemperatureGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoCCDTemperatureGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoCCDTemperatureGUIProvider;
    function    GetDefaultInterface: ICoCCDTemperatureGUIProvider;
    constructor Create(AServer: TCCoCCDTemperatureGUIProvider);
  protected
  public
    property DefaultInterface: ICoCCDTemperatureGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoCCDTemperatureImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoCCDTemperatureImpl exposed by              
// the CoClass CCoCCDTemperatureImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoCCDTemperatureImpl = class
    class function Create: ICoCCDTemperatureImpl;
    class function CreateRemote(const MachineName: string): ICoCCDTemperatureImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoCCDTemperatureImpl
// Help String      : CoCCDTemperatureImpl Class
// Default Interface: ICoCCDTemperatureImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoCCDTemperatureImplProperties= class;
{$ENDIF}
  TCCoCCDTemperatureImpl = class(TOleServer)
  private
    FIntf: ICoCCDTemperatureImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoCCDTemperatureImplProperties;
    function GetServerProperties: TCCoCCDTemperatureImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoCCDTemperatureImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoCCDTemperatureImpl);
    procedure Disconnect; override;
    procedure CreateCCDTemperatureImplB(const COM_usbInt: ICoUSBInterface; 
                                        const COM_spec: ICoMMSRamanSpectrometer);
    procedure getCCDTemperatureInfo;
    procedure setCCDTemperatureInfo(COM_regulation: WordBool; COM_setpoint: Single);
    procedure setTemperatureRegulation(COM_regulation: WordBool);
    function isTemperatureRegulation: WordBool;
    function getCCDSetpoint: Single;
    procedure setCCDSetpoint(COM_setpoint: Single);
    function getMinimumCCDSetpoint: Integer;
    procedure setMinimumCCDSetpoint(COM_min: Integer);
    function getMaximumCCDSetpoint: Integer;
    procedure setMaximumCCDSetpoint(COM_max: Integer);
    function getThermistor: Single;
    function isThermFault: WordBool;
    function isTempLock: WordBool;
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoCCDTemperatureImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoCCDTemperatureImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoCCDTemperatureImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoCCDTemperatureImplProperties = class(TPersistent)
  private
    FServer:    TCCoCCDTemperatureImpl;
    function    GetDefaultInterface: ICoCCDTemperatureImpl;
    constructor Create(AServer: TCCoCCDTemperatureImpl);
  protected
  public
    property DefaultInterface: ICoCCDTemperatureImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMMSRamanCalibration provides a Create and CreateRemote method to          
// create instances of the default interface ICoMMSRamanCalibration exposed by              
// the CoClass CCoMMSRamanCalibration. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMMSRamanCalibration = class
    class function Create: ICoMMSRamanCalibration;
    class function CreateRemote(const MachineName: string): ICoMMSRamanCalibration;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMMSRamanCalibration
// Help String      : CoMMSRamanCalibration Class
// Default Interface: ICoMMSRamanCalibration
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMMSRamanCalibrationProperties= class;
{$ENDIF}
  TCCoMMSRamanCalibration = class(TOleServer)
  private
    FIntf: ICoMMSRamanCalibration;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMMSRamanCalibrationProperties;
    function GetServerProperties: TCCoMMSRamanCalibrationProperties;
{$ENDIF}
    function GetDefaultInterface: ICoMMSRamanCalibration;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMMSRamanCalibration);
    procedure Disconnect; override;
    procedure CreateMMSRamanCalibration;
    procedure CreateMMSRamanCalibrationB(const COM_calibration: ICoMMSRamanCalibration);
    function getMaskRatio: Integer;
    procedure setMaskRatio(COM_maskRatio: Integer);
    function getMaskFlipped: Integer;
    procedure setMaskFlipped(COM_maskFlipped: Integer);
    function getMaskOrientation: WideString;
    function isSpectraFlipped: WordBool;
    procedure setSpectraFlipped(COM_spectraFlipped: WordBool);
    function getMaskIndices: OleVariant;
    procedure setMaskIndices(COM_maskIndices: OleVariant);
    function getMaskXAlignmentAdjustments(COM_index: Integer): Integer;
    function getMaskXAlignmentAdjustmentsB: OleVariant;
    procedure setMaskXAlignmentAdjustments(COM_maskXAlignmentAdjustments: OleVariant);
    function getMaskYAlignmentAdjustments: OleVariant;
    procedure setMaskYAlignmentAdjustments(COM_maskYAlignmentAdjustments: OleVariant);
    function getSourcePeaks: Integer;
    procedure setSourcePeaks(COM_sourcePeaks: Integer);
    function getShifts(COM_index: Integer): Integer;
    function getShiftsB: OleVariant;
    procedure setShifts(COM_index: Integer; COM_shifts: Integer);
    procedure setShiftsB(COM_shifts: OleVariant);
    function getPolynomialOrder: Integer;
    procedure setPolynomialOrder(COM_polynomialOrder: Integer);
    function getObservedPixels: OleVariant;
    procedure setObservedPixels(COM_observedPixels: OleVariant);
    function getActualWavelengths: OleVariant;
    procedure setActualWavelengths(COM_actualWavelengths: OleVariant);
    function getNumberOfDeadPixelColumnsLeft: Integer;
    procedure setNumberOfDeadPixelColumnsLeft(COM_numberOfDeadPixelColumnsLeft: Integer);
    function getNumberOfDeadPixelColumnsRight: Integer;
    procedure setNumberOfDeadPixelColumnsRight(COM_numberOfDeadPixelColumnsRight: Integer);
    function getName: WideString;
    procedure setName(const COM_name: WideString);
    function getMask: WideString;
    procedure setMask(const COM_mask: WideString);
    function getSpectralSource: WideString;
    procedure setSpectralSource(const COM_spectralSource: WideString);
    function getSerialNumber: WideString;
    procedure setSerialNumber(const COM_serialNumber: WideString);
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMMSRamanCalibration read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMMSRamanCalibrationProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMMSRamanCalibration
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMMSRamanCalibrationProperties = class(TPersistent)
  private
    FServer:    TCCoMMSRamanCalibration;
    function    GetDefaultInterface: ICoMMSRamanCalibration;
    constructor Create(AServer: TCCoMMSRamanCalibration);
  protected
  public
    property DefaultInterface: ICoMMSRamanCalibration read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoCalibration provides a Create and CreateRemote method to          
// create instances of the default interface ICoCalibration exposed by              
// the CoClass CCoCalibration. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoCalibration = class
    class function Create: ICoCalibration;
    class function CreateRemote(const MachineName: string): ICoCalibration;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoCalibration
// Help String      : CoCalibration Class
// Default Interface: ICoCalibration
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoCalibrationProperties= class;
{$ENDIF}
  TCCoCalibration = class(TOleServer)
  private
    FIntf: ICoCalibration;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoCalibrationProperties;
    function GetServerProperties: TCCoCalibrationProperties;
{$ENDIF}
    function GetDefaultInterface: ICoCalibration;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoCalibration);
    procedure Disconnect; override;
    procedure CreateCalibration;
    procedure readCalibrationFromSpectrometer;
    procedure writeCalibrationToSpectrometer(const COM_param0: ICoMMSRamanCalibration);
    function getCalibration: ICoMMSRamanCalibration;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoCalibration read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoCalibrationProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoCalibration
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoCalibrationProperties = class(TPersistent)
  private
    FServer:    TCCoCalibration;
    function    GetDefaultInterface: ICoCalibration;
    constructor Create(AServer: TCCoCalibration);
  protected
  public
    property DefaultInterface: ICoCalibration read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoCalibrationGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoCalibrationGUIProvider exposed by              
// the CoClass CCoCalibrationGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoCalibrationGUIProvider = class
    class function Create: ICoCalibrationGUIProvider;
    class function CreateRemote(const MachineName: string): ICoCalibrationGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoCalibrationGUIProvider
// Help String      : CoCalibrationGUIProvider Class
// Default Interface: ICoCalibrationGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoCalibrationGUIProviderProperties= class;
{$ENDIF}
  TCCoCalibrationGUIProvider = class(TOleServer)
  private
    FIntf: ICoCalibrationGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoCalibrationGUIProviderProperties;
    function GetServerProperties: TCCoCalibrationGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoCalibrationGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoCalibrationGUIProvider);
    procedure Disconnect; override;
    procedure CreateCalibrationGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoCalibrationGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoCalibrationGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoCalibrationGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoCalibrationGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoCalibrationGUIProvider;
    function    GetDefaultInterface: ICoCalibrationGUIProvider;
    constructor Create(AServer: TCCoCalibrationGUIProvider);
  protected
  public
    property DefaultInterface: ICoCalibrationGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoCalibrationImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoCalibrationImpl exposed by              
// the CoClass CCoCalibrationImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoCalibrationImpl = class
    class function Create: ICoCalibrationImpl;
    class function CreateRemote(const MachineName: string): ICoCalibrationImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoCalibrationImpl
// Help String      : CoCalibrationImpl Class
// Default Interface: ICoCalibrationImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoCalibrationImplProperties= class;
{$ENDIF}
  TCCoCalibrationImpl = class(TOleServer)
  private
    FIntf: ICoCalibrationImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoCalibrationImplProperties;
    function GetServerProperties: TCCoCalibrationImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoCalibrationImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoCalibrationImpl);
    procedure Disconnect; override;
    procedure CreateCalibrationImplB(const COM_usbInt: ICoUSBInterface; 
                                     const COM_spec: ICoMMSRamanSpectrometer);
    procedure readCalibrationFromSpectrometer;
    procedure writeCalibrationToSpectrometer(const COM_cal: ICoMMSRamanCalibration);
    function getCalibration: ICoMMSRamanCalibration;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoCalibrationImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoCalibrationImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoCalibrationImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoCalibrationImplProperties = class(TPersistent)
  private
    FServer:    TCCoCalibrationImpl;
    function    GetDefaultInterface: ICoCalibrationImpl;
    constructor Create(AServer: TCCoCalibrationImpl);
  protected
  public
    property DefaultInterface: ICoCalibrationImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoIterator provides a Create and CreateRemote method to          
// create instances of the default interface ICoIterator exposed by              
// the CoClass CCoIterator. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoIterator = class
    class function Create: ICoIterator;
    class function CreateRemote(const MachineName: string): ICoIterator;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoIterator
// Help String      : CoIterator Class
// Default Interface: ICoIterator
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoIteratorProperties= class;
{$ENDIF}
  TCCoIterator = class(TOleServer)
  private
    FIntf: ICoIterator;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoIteratorProperties;
    function GetServerProperties: TCCoIteratorProperties;
{$ENDIF}
    function GetDefaultInterface: ICoIterator;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoIterator);
    procedure Disconnect; override;
    procedure CreateIterator;
    procedure Remove;
    function hasNext: WordBool;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoIterator read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoIteratorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoIterator
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoIteratorProperties = class(TPersistent)
  private
    FServer:    TCCoIterator;
    function    GetDefaultInterface: ICoIterator;
    constructor Create(AServer: TCCoIterator);
  protected
  public
    property DefaultInterface: ICoIterator read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoCollection provides a Create and CreateRemote method to          
// create instances of the default interface ICoCollection exposed by              
// the CoClass CCoCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoCollection = class
    class function Create: ICoCollection;
    class function CreateRemote(const MachineName: string): ICoCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoCollection
// Help String      : CoCollection Class
// Default Interface: ICoCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoCollectionProperties= class;
{$ENDIF}
  TCCoCollection = class(TOleServer)
  private
    FIntf: ICoCollection;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoCollectionProperties;
    function GetServerProperties: TCCoCollectionProperties;
{$ENDIF}
    function GetDefaultInterface: ICoCollection;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoCollection);
    procedure Disconnect; override;
    procedure CreateCollection;
    function hashCode: Integer;
    function size: Integer;
    procedure clear;
    function isEmpty: WordBool;
    function addAll(const COM_param0: ICoCollection): WordBool;
    function containsAll(const COM_param0: ICoCollection): WordBool;
    function removeAll(const COM_param0: ICoCollection): WordBool;
    function retainAll(const COM_param0: ICoCollection): WordBool;
    function iterator: ICoIterator;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoCollection read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoCollectionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoCollection
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoCollectionProperties = class(TPersistent)
  private
    FServer:    TCCoCollection;
    function    GetDefaultInterface: ICoCollection;
    constructor Create(AServer: TCCoCollection);
  protected
  public
    property DefaultInterface: ICoCollection read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoConfigureFromFile provides a Create and CreateRemote method to          
// create instances of the default interface ICoConfigureFromFile exposed by              
// the CoClass CCoConfigureFromFile. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoConfigureFromFile = class
    class function Create: ICoConfigureFromFile;
    class function CreateRemote(const MachineName: string): ICoConfigureFromFile;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoConfigureFromFile
// Help String      : CoConfigureFromFile Class
// Default Interface: ICoConfigureFromFile
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoConfigureFromFileProperties= class;
{$ENDIF}
  TCCoConfigureFromFile = class(TOleServer)
  private
    FIntf: ICoConfigureFromFile;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoConfigureFromFileProperties;
    function GetServerProperties: TCCoConfigureFromFileProperties;
{$ENDIF}
    function GetDefaultInterface: ICoConfigureFromFile;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoConfigureFromFile);
    procedure Disconnect; override;
    procedure CreateConfigureFromFile;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoConfigureFromFile read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoConfigureFromFileProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoConfigureFromFile
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoConfigureFromFileProperties = class(TPersistent)
  private
    FServer:    TCCoConfigureFromFile;
    function    GetDefaultInterface: ICoConfigureFromFile;
    constructor Create(AServer: TCCoConfigureFromFile);
  protected
  public
    property DefaultInterface: ICoConfigureFromFile read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoContinuousStrobe provides a Create and CreateRemote method to          
// create instances of the default interface ICoContinuousStrobe exposed by              
// the CoClass CCoContinuousStrobe. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoContinuousStrobe = class
    class function Create: ICoContinuousStrobe;
    class function CreateRemote(const MachineName: string): ICoContinuousStrobe;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoContinuousStrobe
// Help String      : CoContinuousStrobe Class
// Default Interface: ICoContinuousStrobe
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoContinuousStrobeProperties= class;
{$ENDIF}
  TCCoContinuousStrobe = class(TOleServer)
  private
    FIntf: ICoContinuousStrobe;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoContinuousStrobeProperties;
    function GetServerProperties: TCCoContinuousStrobeProperties;
{$ENDIF}
    function GetDefaultInterface: ICoContinuousStrobe;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoContinuousStrobe);
    procedure Disconnect; override;
    procedure CreateContinuousStrobe;
    procedure setContinuousStrobeDelay(COM_param0: Integer);
    function getContinuousStrobeDelayMinimum: Integer;
    function getContinuousStrobeDelayMaximum: Integer;
    function getContinuousStrobeDelayIncrement(COM_param0: Integer): Integer;
    function continuousStrobeCountsToMicros(COM_param0: Integer): Double;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoContinuousStrobe read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoContinuousStrobeProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoContinuousStrobe
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoContinuousStrobeProperties = class(TPersistent)
  private
    FServer:    TCCoContinuousStrobe;
    function    GetDefaultInterface: ICoContinuousStrobe;
    constructor Create(AServer: TCCoContinuousStrobe);
  protected
  public
    property DefaultInterface: ICoContinuousStrobe read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoContinuousStrobeGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoContinuousStrobeGUIProvider exposed by              
// the CoClass CCoContinuousStrobeGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoContinuousStrobeGUIProvider = class
    class function Create: ICoContinuousStrobeGUIProvider;
    class function CreateRemote(const MachineName: string): ICoContinuousStrobeGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoContinuousStrobeGUIProvider
// Help String      : CoContinuousStrobeGUIProvider Class
// Default Interface: ICoContinuousStrobeGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoContinuousStrobeGUIProviderProperties= class;
{$ENDIF}
  TCCoContinuousStrobeGUIProvider = class(TOleServer)
  private
    FIntf: ICoContinuousStrobeGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoContinuousStrobeGUIProviderProperties;
    function GetServerProperties: TCCoContinuousStrobeGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoContinuousStrobeGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoContinuousStrobeGUIProvider);
    procedure Disconnect; override;
    procedure CreateContinuousStrobeGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoContinuousStrobeGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoContinuousStrobeGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoContinuousStrobeGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoContinuousStrobeGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoContinuousStrobeGUIProvider;
    function    GetDefaultInterface: ICoContinuousStrobeGUIProvider;
    constructor Create(AServer: TCCoContinuousStrobeGUIProvider);
  protected
  public
    property DefaultInterface: ICoContinuousStrobeGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoContinuousStrobeImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoContinuousStrobeImpl exposed by              
// the CoClass CCoContinuousStrobeImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoContinuousStrobeImpl = class
    class function Create: ICoContinuousStrobeImpl;
    class function CreateRemote(const MachineName: string): ICoContinuousStrobeImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoContinuousStrobeImpl
// Help String      : CoContinuousStrobeImpl Class
// Default Interface: ICoContinuousStrobeImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoContinuousStrobeImplProperties= class;
{$ENDIF}
  TCCoContinuousStrobeImpl = class(TOleServer)
  private
    FIntf: ICoContinuousStrobeImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoContinuousStrobeImplProperties;
    function GetServerProperties: TCCoContinuousStrobeImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoContinuousStrobeImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoContinuousStrobeImpl);
    procedure Disconnect; override;
    procedure CreateContinuousStrobeImplB(const COM_usbInt: ICoUSBInterface);
    procedure setContinuousStrobeDelay(COM_param0: Integer);
    function getContinuousStrobeDelayMinimum: Integer;
    function getContinuousStrobeDelayMaximum: Integer;
    function getContinuousStrobeDelayIncrement(COM_param0: Integer): Integer;
    function continuousStrobeCountsToMicros(COM_param0: Integer): Double;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoContinuousStrobeImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoContinuousStrobeImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoContinuousStrobeImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoContinuousStrobeImplProperties = class(TPersistent)
  private
    FServer:    TCCoContinuousStrobeImpl;
    function    GetDefaultInterface: ICoContinuousStrobeImpl;
    constructor Create(AServer: TCCoContinuousStrobeImpl);
  protected
  public
    property DefaultInterface: ICoContinuousStrobeImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoContinuousStrobeImpl_ADC1000 provides a Create and CreateRemote method to          
// create instances of the default interface ICoContinuousStrobeImpl_ADC1000 exposed by              
// the CoClass CCoContinuousStrobeImpl_ADC1000. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoContinuousStrobeImpl_ADC1000 = class
    class function Create: ICoContinuousStrobeImpl_ADC1000;
    class function CreateRemote(const MachineName: string): ICoContinuousStrobeImpl_ADC1000;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoContinuousStrobeImpl_ADC1000
// Help String      : CoContinuousStrobeImpl_ADC1000 Class
// Default Interface: ICoContinuousStrobeImpl_ADC1000
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoContinuousStrobeImpl_ADC1000Properties= class;
{$ENDIF}
  TCCoContinuousStrobeImpl_ADC1000 = class(TOleServer)
  private
    FIntf: ICoContinuousStrobeImpl_ADC1000;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoContinuousStrobeImpl_ADC1000Properties;
    function GetServerProperties: TCCoContinuousStrobeImpl_ADC1000Properties;
{$ENDIF}
    function GetDefaultInterface: ICoContinuousStrobeImpl_ADC1000;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoContinuousStrobeImpl_ADC1000);
    procedure Disconnect; override;
    procedure CreateContinuousStrobeImpl_ADC1000B(const COM_usbInt: ICoUSBInterface);
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer);
    function getContinuousStrobeDelayMinimum: Integer;
    function getContinuousStrobeDelayMaximum: Integer;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoContinuousStrobeImpl_ADC1000 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoContinuousStrobeImpl_ADC1000Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoContinuousStrobeImpl_ADC1000
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoContinuousStrobeImpl_ADC1000Properties = class(TPersistent)
  private
    FServer:    TCCoContinuousStrobeImpl_ADC1000;
    function    GetDefaultInterface: ICoContinuousStrobeImpl_ADC1000;
    constructor Create(AServer: TCCoContinuousStrobeImpl_ADC1000);
  protected
  public
    property DefaultInterface: ICoContinuousStrobeImpl_ADC1000 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoContinuousStrobeImpl_FPGA provides a Create and CreateRemote method to          
// create instances of the default interface ICoContinuousStrobeImpl_FPGA exposed by              
// the CoClass CCoContinuousStrobeImpl_FPGA. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoContinuousStrobeImpl_FPGA = class
    class function Create: ICoContinuousStrobeImpl_FPGA;
    class function CreateRemote(const MachineName: string): ICoContinuousStrobeImpl_FPGA;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoContinuousStrobeImpl_FPGA
// Help String      : CoContinuousStrobeImpl_FPGA Class
// Default Interface: ICoContinuousStrobeImpl_FPGA
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoContinuousStrobeImpl_FPGAProperties= class;
{$ENDIF}
  TCCoContinuousStrobeImpl_FPGA = class(TOleServer)
  private
    FIntf: ICoContinuousStrobeImpl_FPGA;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoContinuousStrobeImpl_FPGAProperties;
    function GetServerProperties: TCCoContinuousStrobeImpl_FPGAProperties;
{$ENDIF}
    function GetDefaultInterface: ICoContinuousStrobeImpl_FPGA;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoContinuousStrobeImpl_FPGA);
    procedure Disconnect; override;
    procedure CreateContinuousStrobeImpl_FPGAB(const COM_usbInt: ICoUSBInterface);
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
    function getContinuousStrobeDelayMaximum: Integer;
    function getContinuousStrobeDelayMinimum: Integer;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer);
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double;
    procedure masterClockChanged(COM_newValue: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoContinuousStrobeImpl_FPGA read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoContinuousStrobeImpl_FPGAProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoContinuousStrobeImpl_FPGA
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoContinuousStrobeImpl_FPGAProperties = class(TPersistent)
  private
    FServer:    TCCoContinuousStrobeImpl_FPGA;
    function    GetDefaultInterface: ICoContinuousStrobeImpl_FPGA;
    constructor Create(AServer: TCCoContinuousStrobeImpl_FPGA);
  protected
  public
    property DefaultInterface: ICoContinuousStrobeImpl_FPGA read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoCurrentOut provides a Create and CreateRemote method to          
// create instances of the default interface ICoCurrentOut exposed by              
// the CoClass CCoCurrentOut. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoCurrentOut = class
    class function Create: ICoCurrentOut;
    class function CreateRemote(const MachineName: string): ICoCurrentOut;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoCurrentOut
// Help String      : CoCurrentOut Class
// Default Interface: ICoCurrentOut
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoCurrentOutProperties= class;
{$ENDIF}
  TCCoCurrentOut = class(TOleServer)
  private
    FIntf: ICoCurrentOut;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoCurrentOutProperties;
    function GetServerProperties: TCCoCurrentOutProperties;
{$ENDIF}
    function GetDefaultInterface: ICoCurrentOut;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoCurrentOut);
    procedure Disconnect; override;
    procedure CreateCurrentOut;
    procedure setDACCounts(COM_param0: Integer);
    function getDACMinimum: Integer;
    function getDACMaximum: Integer;
    function getDACIncrement: Integer;
    function analogOutCountsToMilliamps(COM_param0: Integer): Double;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoCurrentOut read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoCurrentOutProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoCurrentOut
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoCurrentOutProperties = class(TPersistent)
  private
    FServer:    TCCoCurrentOut;
    function    GetDefaultInterface: ICoCurrentOut;
    constructor Create(AServer: TCCoCurrentOut);
  protected
  public
    property DefaultInterface: ICoCurrentOut read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoCurrentOutGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoCurrentOutGUIProvider exposed by              
// the CoClass CCoCurrentOutGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoCurrentOutGUIProvider = class
    class function Create: ICoCurrentOutGUIProvider;
    class function CreateRemote(const MachineName: string): ICoCurrentOutGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoCurrentOutGUIProvider
// Help String      : CoCurrentOutGUIProvider Class
// Default Interface: ICoCurrentOutGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoCurrentOutGUIProviderProperties= class;
{$ENDIF}
  TCCoCurrentOutGUIProvider = class(TOleServer)
  private
    FIntf: ICoCurrentOutGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoCurrentOutGUIProviderProperties;
    function GetServerProperties: TCCoCurrentOutGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoCurrentOutGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoCurrentOutGUIProvider);
    procedure Disconnect; override;
    procedure CreateCurrentOutGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoCurrentOutGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoCurrentOutGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoCurrentOutGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoCurrentOutGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoCurrentOutGUIProvider;
    function    GetDefaultInterface: ICoCurrentOutGUIProvider;
    constructor Create(AServer: TCCoCurrentOutGUIProvider);
  protected
  public
    property DefaultInterface: ICoCurrentOutGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoCurrentOutImpl_LS450 provides a Create and CreateRemote method to          
// create instances of the default interface ICoCurrentOutImpl_LS450 exposed by              
// the CoClass CCoCurrentOutImpl_LS450. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoCurrentOutImpl_LS450 = class
    class function Create: ICoCurrentOutImpl_LS450;
    class function CreateRemote(const MachineName: string): ICoCurrentOutImpl_LS450;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoCurrentOutImpl_LS450
// Help String      : CoCurrentOutImpl_LS450 Class
// Default Interface: ICoCurrentOutImpl_LS450
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoCurrentOutImpl_LS450Properties= class;
{$ENDIF}
  TCCoCurrentOutImpl_LS450 = class(TOleServer)
  private
    FIntf: ICoCurrentOutImpl_LS450;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoCurrentOutImpl_LS450Properties;
    function GetServerProperties: TCCoCurrentOutImpl_LS450Properties;
{$ENDIF}
    function GetDefaultInterface: ICoCurrentOutImpl_LS450;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoCurrentOutImpl_LS450);
    procedure Disconnect; override;
    procedure CreateCurrentOutImpl_LS450B(const COM_usbInt: ICoUSBInterface; 
                                          const COM_endPoint: ICoUSBEndpointDescriptor);
    function analogOutCountsToMilliamps(COM_counts: Integer): Double;
    function getDACIncrement: Integer;
    function getDACMaximum: Integer;
    function getDACMinimum: Integer;
    procedure setDACCounts(COM_counts: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoCurrentOutImpl_LS450 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoCurrentOutImpl_LS450Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoCurrentOutImpl_LS450
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoCurrentOutImpl_LS450Properties = class(TPersistent)
  private
    FServer:    TCCoCurrentOutImpl_LS450;
    function    GetDefaultInterface: ICoCurrentOutImpl_LS450;
    constructor Create(AServer: TCCoCurrentOutImpl_LS450);
  protected
  public
    property DefaultInterface: ICoCurrentOutImpl_LS450 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoDeepWellErrorProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoDeepWellErrorProvider exposed by              
// the CoClass CCoDeepWellErrorProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoDeepWellErrorProvider = class
    class function Create: ICoDeepWellErrorProvider;
    class function CreateRemote(const MachineName: string): ICoDeepWellErrorProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoDeepWellErrorProvider
// Help String      : CoDeepWellErrorProvider Class
// Default Interface: ICoDeepWellErrorProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoDeepWellErrorProviderProperties= class;
{$ENDIF}
  TCCoDeepWellErrorProvider = class(TOleServer)
  private
    FIntf: ICoDeepWellErrorProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoDeepWellErrorProviderProperties;
    function GetServerProperties: TCCoDeepWellErrorProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoDeepWellErrorProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoDeepWellErrorProvider);
    procedure Disconnect; override;
    procedure CreateDeepWellErrorProvider;
    function getDeepWellMinimumIntegrationTime: Integer;
    procedure addAcquisitionPropertiesListener(const COM_param0: ICoAcquisitionPropertiesListener);
    procedure removeAcquisitionPropertiesListener(const COM_param0: ICoAcquisitionPropertiesListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoDeepWellErrorProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoDeepWellErrorProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoDeepWellErrorProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoDeepWellErrorProviderProperties = class(TPersistent)
  private
    FServer:    TCCoDeepWellErrorProvider;
    function    GetDefaultInterface: ICoDeepWellErrorProvider;
    constructor Create(AServer: TCCoDeepWellErrorProvider);
  protected
  public
    property DefaultInterface: ICoDeepWellErrorProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoDeepWellErrorProviderImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoDeepWellErrorProviderImpl exposed by              
// the CoClass CCoDeepWellErrorProviderImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoDeepWellErrorProviderImpl = class
    class function Create: ICoDeepWellErrorProviderImpl;
    class function CreateRemote(const MachineName: string): ICoDeepWellErrorProviderImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoDeepWellErrorProviderImpl
// Help String      : CoDeepWellErrorProviderImpl Class
// Default Interface: ICoDeepWellErrorProviderImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoDeepWellErrorProviderImplProperties= class;
{$ENDIF}
  TCCoDeepWellErrorProviderImpl = class(TOleServer)
  private
    FIntf: ICoDeepWellErrorProviderImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoDeepWellErrorProviderImplProperties;
    function GetServerProperties: TCCoDeepWellErrorProviderImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoDeepWellErrorProviderImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoDeepWellErrorProviderImpl);
    procedure Disconnect; override;
    procedure CreateDeepWellErrorProviderImplB(const COM_usbInt: ICoUSBInterface; 
                                               const COM_spectrometer: ICoSpectrometer);
    procedure checkIntegrationTime(COM_intTime: Integer);
    function isInDeepWellMode: WordBool;
    procedure setIgnore(COM_ignore: WordBool);
    procedure addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
    procedure removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
    procedure addAcquisitionPropertiesListener(const COM_listener: ICoAcquisitionPropertiesListener);
    procedure removeAcquisitionPropertiesListener(const COM_listener: ICoAcquisitionPropertiesListener);
    procedure fireAcquisitionPropertiesListener;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoDeepWellErrorProviderImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoDeepWellErrorProviderImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoDeepWellErrorProviderImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoDeepWellErrorProviderImplProperties = class(TPersistent)
  private
    FServer:    TCCoDeepWellErrorProviderImpl;
    function    GetDefaultInterface: ICoDeepWellErrorProviderImpl;
    constructor Create(AServer: TCCoDeepWellErrorProviderImpl);
  protected
  public
    property DefaultInterface: ICoDeepWellErrorProviderImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoEndpointToPipeMapping provides a Create and CreateRemote method to          
// create instances of the default interface ICoEndpointToPipeMapping exposed by              
// the CoClass CCoEndpointToPipeMapping. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoEndpointToPipeMapping = class
    class function Create: ICoEndpointToPipeMapping;
    class function CreateRemote(const MachineName: string): ICoEndpointToPipeMapping;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoEndpointToPipeMapping
// Help String      : CoEndpointToPipeMapping Class
// Default Interface: ICoEndpointToPipeMapping
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoEndpointToPipeMappingProperties= class;
{$ENDIF}
  TCCoEndpointToPipeMapping = class(TOleServer)
  private
    FIntf: ICoEndpointToPipeMapping;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoEndpointToPipeMappingProperties;
    function GetServerProperties: TCCoEndpointToPipeMappingProperties;
{$ENDIF}
    function GetDefaultInterface: ICoEndpointToPipeMapping;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoEndpointToPipeMapping);
    procedure Disconnect; override;
    procedure CreateEndpointToPipeMapping;
    procedure addMapping(COM_pipe: Integer; COM_endPoint: Smallint);
    function getPipe(COM_endPoint: Smallint): Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoEndpointToPipeMapping read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoEndpointToPipeMappingProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoEndpointToPipeMapping
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoEndpointToPipeMappingProperties = class(TPersistent)
  private
    FServer:    TCCoEndpointToPipeMapping;
    function    GetDefaultInterface: ICoEndpointToPipeMapping;
    constructor Create(AServer: TCCoEndpointToPipeMapping);
  protected
  public
    property DefaultInterface: ICoEndpointToPipeMapping read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoEnumeration provides a Create and CreateRemote method to          
// create instances of the default interface ICoEnumeration exposed by              
// the CoClass CCoEnumeration. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoEnumeration = class
    class function Create: ICoEnumeration;
    class function CreateRemote(const MachineName: string): ICoEnumeration;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoEnumeration
// Help String      : CoEnumeration Class
// Default Interface: ICoEnumeration
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoEnumerationProperties= class;
{$ENDIF}
  TCCoEnumeration = class(TOleServer)
  private
    FIntf: ICoEnumeration;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoEnumerationProperties;
    function GetServerProperties: TCCoEnumerationProperties;
{$ENDIF}
    function GetDefaultInterface: ICoEnumeration;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoEnumeration);
    procedure Disconnect; override;
    procedure CreateEnumeration;
    function hasMoreElements: WordBool;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoEnumeration read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoEnumerationProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoEnumeration
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoEnumerationProperties = class(TPersistent)
  private
    FServer:    TCCoEnumeration;
    function    GetDefaultInterface: ICoEnumeration;
    constructor Create(AServer: TCCoEnumeration);
  protected
  public
    property DefaultInterface: ICoEnumeration read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoErrorProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoErrorProvider exposed by              
// the CoClass CCoErrorProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoErrorProvider = class
    class function Create: ICoErrorProvider;
    class function CreateRemote(const MachineName: string): ICoErrorProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoErrorProvider
// Help String      : CoErrorProvider Class
// Default Interface: ICoErrorProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoErrorProviderProperties= class;
{$ENDIF}
  TCCoErrorProvider = class(TOleServer)
  private
    FIntf: ICoErrorProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoErrorProviderProperties;
    function GetServerProperties: TCCoErrorProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoErrorProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoErrorProvider);
    procedure Disconnect; override;
    procedure CreateErrorProvider;
    procedure addOmniDriverDispatchListener(const COM_param0: ICoOmniDriverDispatchListener);
    procedure removeOmniDriverDispatchListener(const COM_param0: ICoOmniDriverDispatchListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoErrorProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoErrorProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoErrorProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoErrorProviderProperties = class(TPersistent)
  private
    FServer:    TCCoErrorProvider;
    function    GetDefaultInterface: ICoErrorProvider;
    constructor Create(AServer: TCCoErrorProvider);
  protected
  public
    property DefaultInterface: ICoErrorProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSBSpectrometerCollection provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSBSpectrometerCollection exposed by              
// the CoClass CCoUSBSpectrometerCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSBSpectrometerCollection = class
    class function Create: ICoUSBSpectrometerCollection;
    class function CreateRemote(const MachineName: string): ICoUSBSpectrometerCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSBSpectrometerCollection
// Help String      : CoUSBSpectrometerCollection Class
// Default Interface: ICoUSBSpectrometerCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSBSpectrometerCollectionProperties= class;
{$ENDIF}
  TCCoUSBSpectrometerCollection = class(TOleServer)
  private
    FIntf: ICoUSBSpectrometerCollection;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSBSpectrometerCollectionProperties;
    function GetServerProperties: TCCoUSBSpectrometerCollectionProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSBSpectrometerCollection;
  protected
    procedure InitServerData; override;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSBSpectrometerCollection);
    procedure Disconnect; override;
    function Item(index: OleVariant): OleVariant;
    procedure Add(const pnewUSBSpectrometerCollection: IDispatch);
    procedure Remove(index: Integer);
    property DefaultInterface: ICoUSBSpectrometerCollection read GetDefaultInterface;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSBSpectrometerCollectionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSBSpectrometerCollection
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSBSpectrometerCollectionProperties = class(TPersistent)
  private
    FServer:    TCCoUSBSpectrometerCollection;
    function    GetDefaultInterface: ICoUSBSpectrometerCollection;
    constructor Create(AServer: TCCoUSBSpectrometerCollection);
  protected
    function Get_Count: Integer;
  public
    property DefaultInterface: ICoUSBSpectrometerCollection read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSBSpectrometer provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSBSpectrometer exposed by              
// the CoClass CCoUSBSpectrometer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSBSpectrometer = class
    class function Create: ICoUSBSpectrometer;
    class function CreateRemote(const MachineName: string): ICoUSBSpectrometer;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSBSpectrometer
// Help String      : CoUSBSpectrometer Class
// Default Interface: ICoUSBSpectrometer
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSBSpectrometerProperties= class;
{$ENDIF}
  TCCoUSBSpectrometer = class(TOleServer)
  private
    FIntf: ICoUSBSpectrometer;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSBSpectrometerProperties;
    function GetServerProperties: TCCoUSBSpectrometerProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSBSpectrometer;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSBSpectrometer);
    procedure Disconnect; override;
    procedure CreateUSBSpectrometer;
    function getInputBuffer: OleVariant;
    function getOutputBuffer: OleVariant;
    procedure openNextUnclaimed;
    procedure openNextUnclaimedUSB;
    function getOpenSpectrometersOfThisType: ICoUSBSpectrometerCollection;
    procedure initialize;
    procedure setIntegrationTime(COM_intTime: Integer);
    procedure setStrobeEnable(COM_strobe: WordBool);
    procedure setStrobeDelay(COM_delay: Integer);
    procedure setPowerState(COM_power: WordBool);
    function getInfo(COM_slot: Integer): WideString;
    procedure setInfo(COM_slot: Integer; const COM_str: WideString);
    function getInfoBytes(COM_slot: Integer): OleVariant;
    procedure setInfoBytes(COM_slot: Integer; COM_byteArray: OleVariant);
    function getSerialNumber: WideString;
    procedure setSerialNumber(const COM_serialNumber: WideString);
    function getDeviceIndex: Integer;
    procedure closeSpectrometer;
    function getFirmwareVersion: WideString;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
    function getName: WideString;
    function getClassName: WideString;
    function getNumberOfPixels(COM_index: Integer): Integer;
    function getNumberOfDarkPixels(COM_index: Integer): Integer;
    function getNumberOfDarkCCDPixels: Integer;
    function getNumberOfCCDPixels: Integer;
    procedure close;
    function isCommunicatingSuccessfully: WordBool;
    function testSpectrometerCommunication: WideString;
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSBSpectrometer read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSBSpectrometerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSBSpectrometer
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSBSpectrometerProperties = class(TPersistent)
  private
    FServer:    TCCoUSBSpectrometer;
    function    GetDefaultInterface: ICoUSBSpectrometer;
    constructor Create(AServer: TCCoUSBSpectrometer);
  protected
  public
    property DefaultInterface: ICoUSBSpectrometer read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoExposureImage provides a Create and CreateRemote method to          
// create instances of the default interface ICoExposureImage exposed by              
// the CoClass CCoExposureImage. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoExposureImage = class
    class function Create: ICoExposureImage;
    class function CreateRemote(const MachineName: string): ICoExposureImage;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoExposureImage
// Help String      : CoExposureImage Class
// Default Interface: ICoExposureImage
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoExposureImageProperties= class;
{$ENDIF}
  TCCoExposureImage = class(TOleServer)
  private
    FIntf: ICoExposureImage;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoExposureImageProperties;
    function GetServerProperties: TCCoExposureImageProperties;
{$ENDIF}
    function GetDefaultInterface: ICoExposureImage;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoExposureImage);
    procedure Disconnect; override;
    procedure CreateExposureImage;
    function getSpectrometer: ICoUSBSpectrometer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoExposureImage read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoExposureImageProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoExposureImage
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoExposureImageProperties = class(TPersistent)
  private
    FServer:    TCCoExposureImage;
    function    GetDefaultInterface: ICoExposureImage;
    constructor Create(AServer: TCCoExposureImage);
  protected
  public
    property DefaultInterface: ICoExposureImage read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoExposureImageGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoExposureImageGUIProvider exposed by              
// the CoClass CCoExposureImageGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoExposureImageGUIProvider = class
    class function Create: ICoExposureImageGUIProvider;
    class function CreateRemote(const MachineName: string): ICoExposureImageGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoExposureImageGUIProvider
// Help String      : CoExposureImageGUIProvider Class
// Default Interface: ICoExposureImageGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoExposureImageGUIProviderProperties= class;
{$ENDIF}
  TCCoExposureImageGUIProvider = class(TOleServer)
  private
    FIntf: ICoExposureImageGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoExposureImageGUIProviderProperties;
    function GetServerProperties: TCCoExposureImageGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoExposureImageGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoExposureImageGUIProvider);
    procedure Disconnect; override;
    procedure CreateExposureImageGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoExposureImageGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoExposureImageGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoExposureImageGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoExposureImageGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoExposureImageGUIProvider;
    function    GetDefaultInterface: ICoExposureImageGUIProvider;
    constructor Create(AServer: TCCoExposureImageGUIProvider);
  protected
  public
    property DefaultInterface: ICoExposureImageGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoExposureImageImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoExposureImageImpl exposed by              
// the CoClass CCoExposureImageImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoExposureImageImpl = class
    class function Create: ICoExposureImageImpl;
    class function CreateRemote(const MachineName: string): ICoExposureImageImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoExposureImageImpl
// Help String      : CoExposureImageImpl Class
// Default Interface: ICoExposureImageImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoExposureImageImplProperties= class;
{$ENDIF}
  TCCoExposureImageImpl = class(TOleServer)
  private
    FIntf: ICoExposureImageImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoExposureImageImplProperties;
    function GetServerProperties: TCCoExposureImageImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoExposureImageImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoExposureImageImpl);
    procedure Disconnect; override;
    procedure CreateExposureImageImplB(const COM_spectrometer: ICoUSBSpectrometer);
    function getSpectrometer: ICoUSBSpectrometer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoExposureImageImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoExposureImageImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoExposureImageImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoExposureImageImplProperties = class(TPersistent)
  private
    FServer:    TCCoExposureImageImpl;
    function    GetDefaultInterface: ICoExposureImageImpl;
    constructor Create(AServer: TCCoExposureImageImpl);
  protected
  public
    property DefaultInterface: ICoExposureImageImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrometerExposure provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrometerExposure exposed by              
// the CoClass CCoSpectrometerExposure. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrometerExposure = class
    class function Create: ICoSpectrometerExposure;
    class function CreateRemote(const MachineName: string): ICoSpectrometerExposure;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrometerExposure
// Help String      : CoSpectrometerExposure Class
// Default Interface: ICoSpectrometerExposure
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrometerExposureProperties= class;
{$ENDIF}
  TCCoSpectrometerExposure = class(TOleServer)
  private
    FIntf: ICoSpectrometerExposure;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrometerExposureProperties;
    function GetServerProperties: TCCoSpectrometerExposureProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrometerExposure;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrometerExposure);
    procedure Disconnect; override;
    function getShutterState: Shortint;
    procedure setShutterState(COM_shutterState: Shortint);
    function getExposureType: Shortint;
    procedure setExposureType(COM_exposureType: Shortint);
    function getExposuresToAverage: Smallint;
    procedure setExposuresToAverage(COM_exposuresToAverage: Smallint);
    function getStrExposureType: WideString;
    function getBitsPerPixel: Integer;
    procedure setBitsPerPixel(COM_bitsPerPixel: Integer);
    function getExposureTime: Integer;
    procedure setExposureTime(COM_exposureTime: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSpectrometerExposure read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrometerExposureProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrometerExposure
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrometerExposureProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrometerExposure;
    function    GetDefaultInterface: ICoSpectrometerExposure;
    constructor Create(AServer: TCCoSpectrometerExposure);
  protected
  public
    property DefaultInterface: ICoSpectrometerExposure read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoExposureListener provides a Create and CreateRemote method to          
// create instances of the default interface ICoExposureListener exposed by              
// the CoClass CCoExposureListener. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoExposureListener = class
    class function Create: ICoExposureListener;
    class function CreateRemote(const MachineName: string): ICoExposureListener;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoExposureListener
// Help String      : CoExposureListener Class
// Default Interface: ICoExposureListener
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoExposureListenerProperties= class;
{$ENDIF}
  TCCoExposureListener = class(TOleServer)
  private
    FIntf: ICoExposureListener;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoExposureListenerProperties;
    function GetServerProperties: TCCoExposureListenerProperties;
{$ENDIF}
    function GetDefaultInterface: ICoExposureListener;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoExposureListener);
    procedure Disconnect; override;
    procedure CreateExposureListener;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoExposureListener read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoExposureListenerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoExposureListener
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoExposureListenerProperties = class(TPersistent)
  private
    FServer:    TCCoExposureListener;
    function    GetDefaultInterface: ICoExposureListener;
    constructor Create(AServer: TCCoExposureListener);
  protected
  public
    property DefaultInterface: ICoExposureListener read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoIntegrationTimeChangeListener provides a Create and CreateRemote method to          
// create instances of the default interface ICoIntegrationTimeChangeListener exposed by              
// the CoClass CCoIntegrationTimeChangeListener. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoIntegrationTimeChangeListener = class
    class function Create: ICoIntegrationTimeChangeListener;
    class function CreateRemote(const MachineName: string): ICoIntegrationTimeChangeListener;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoIntegrationTimeChangeListener
// Help String      : CoIntegrationTimeChangeListener Class
// Default Interface: ICoIntegrationTimeChangeListener
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoIntegrationTimeChangeListenerProperties= class;
{$ENDIF}
  TCCoIntegrationTimeChangeListener = class(TOleServer)
  private
    FIntf: ICoIntegrationTimeChangeListener;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoIntegrationTimeChangeListenerProperties;
    function GetServerProperties: TCCoIntegrationTimeChangeListenerProperties;
{$ENDIF}
    function GetDefaultInterface: ICoIntegrationTimeChangeListener;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoIntegrationTimeChangeListener);
    procedure Disconnect; override;
    procedure CreateIntegrationTimeChangeListener;
    procedure integrationTimeChanged(COM_param0: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoIntegrationTimeChangeListener read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoIntegrationTimeChangeListenerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoIntegrationTimeChangeListener
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoIntegrationTimeChangeListenerProperties = class(TPersistent)
  private
    FServer:    TCCoIntegrationTimeChangeListener;
    function    GetDefaultInterface: ICoIntegrationTimeChangeListener;
    constructor Create(AServer: TCCoIntegrationTimeChangeListener);
  protected
  public
    property DefaultInterface: ICoIntegrationTimeChangeListener read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoExposureImageable provides a Create and CreateRemote method to          
// create instances of the default interface ICoExposureImageable exposed by              
// the CoClass CCoExposureImageable. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoExposureImageable = class
    class function Create: ICoExposureImageable;
    class function CreateRemote(const MachineName: string): ICoExposureImageable;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoExposureImageable
// Help String      : CoExposureImageable Class
// Default Interface: ICoExposureImageable
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoExposureImageableProperties= class;
{$ENDIF}
  TCCoExposureImageable = class(TOleServer)
  private
    FIntf: ICoExposureImageable;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoExposureImageableProperties;
    function GetServerProperties: TCCoExposureImageableProperties;
{$ENDIF}
    function GetDefaultInterface: ICoExposureImageable;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoExposureImageable);
    procedure Disconnect; override;
    procedure CreateExposureImageable;
    function getCcdWidth: Integer;
    function getCcdHeight: Integer;
    procedure set1DMode(COM_param0: Integer);
    procedure set2DMode(COM_param0: Integer);
    function has1DMode: WordBool;
    function get2DintegrationTime: Integer;
    function is2DMode: WordBool;
    function is1DMode: WordBool;
    procedure addIntegrationTimeChangeListener(const COM_param0: ICoIntegrationTimeChangeListener);
    procedure removeIntegrationTimeChangeListener(const COM_param0: ICoIntegrationTimeChangeListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoExposureImageable read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoExposureImageableProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoExposureImageable
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoExposureImageableProperties = class(TPersistent)
  private
    FServer:    TCCoExposureImageable;
    function    GetDefaultInterface: ICoExposureImageable;
    constructor Create(AServer: TCCoExposureImageable);
  protected
  public
    property DefaultInterface: ICoExposureImageable read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoExternalTemperature provides a Create and CreateRemote method to          
// create instances of the default interface ICoExternalTemperature exposed by              
// the CoClass CCoExternalTemperature. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoExternalTemperature = class
    class function Create: ICoExternalTemperature;
    class function CreateRemote(const MachineName: string): ICoExternalTemperature;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoExternalTemperature
// Help String      : CoExternalTemperature Class
// Default Interface: ICoExternalTemperature
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoExternalTemperatureProperties= class;
{$ENDIF}
  TCCoExternalTemperature = class(TOleServer)
  private
    FIntf: ICoExternalTemperature;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoExternalTemperatureProperties;
    function GetServerProperties: TCCoExternalTemperatureProperties;
{$ENDIF}
    function GetDefaultInterface: ICoExternalTemperature;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoExternalTemperature);
    procedure Disconnect; override;
    procedure CreateExternalTemperature;
    function getExternalTemperatureCelsius: Double;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoExternalTemperature read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoExternalTemperatureProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoExternalTemperature
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoExternalTemperatureProperties = class(TPersistent)
  private
    FServer:    TCCoExternalTemperature;
    function    GetDefaultInterface: ICoExternalTemperature;
    constructor Create(AServer: TCCoExternalTemperature);
  protected
  public
    property DefaultInterface: ICoExternalTemperature read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoExternalTemperatureGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoExternalTemperatureGUIProvider exposed by              
// the CoClass CCoExternalTemperatureGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoExternalTemperatureGUIProvider = class
    class function Create: ICoExternalTemperatureGUIProvider;
    class function CreateRemote(const MachineName: string): ICoExternalTemperatureGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoExternalTemperatureGUIProvider
// Help String      : CoExternalTemperatureGUIProvider Class
// Default Interface: ICoExternalTemperatureGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoExternalTemperatureGUIProviderProperties= class;
{$ENDIF}
  TCCoExternalTemperatureGUIProvider = class(TOleServer)
  private
    FIntf: ICoExternalTemperatureGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoExternalTemperatureGUIProviderProperties;
    function GetServerProperties: TCCoExternalTemperatureGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoExternalTemperatureGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoExternalTemperatureGUIProvider);
    procedure Disconnect; override;
    procedure CreateExternalTemperatureGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoExternalTemperatureGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoExternalTemperatureGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoExternalTemperatureGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoExternalTemperatureGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoExternalTemperatureGUIProvider;
    function    GetDefaultInterface: ICoExternalTemperatureGUIProvider;
    constructor Create(AServer: TCCoExternalTemperatureGUIProvider);
  protected
  public
    property DefaultInterface: ICoExternalTemperatureGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoLS450Coefficients provides a Create and CreateRemote method to          
// create instances of the default interface ICoLS450Coefficients exposed by              
// the CoClass CCoLS450Coefficients. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoLS450Coefficients = class
    class function Create: ICoLS450Coefficients;
    class function CreateRemote(const MachineName: string): ICoLS450Coefficients;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoLS450Coefficients
// Help String      : CoLS450Coefficients Class
// Default Interface: ICoLS450Coefficients
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoLS450CoefficientsProperties= class;
{$ENDIF}
  TCCoLS450Coefficients = class(TOleServer)
  private
    FIntf: ICoLS450Coefficients;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoLS450CoefficientsProperties;
    function GetServerProperties: TCCoLS450CoefficientsProperties;
{$ENDIF}
    function GetDefaultInterface: ICoLS450Coefficients;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoLS450Coefficients);
    procedure Disconnect; override;
    procedure CreateLS450Coefficients;
    procedure CreateLS450CoefficientsB(const COM_ls450Coefficients: ICoLS450Coefficients);
    function getTemperatureCalibrationConstant1: Double;
    procedure setTemperatureCalibrationConstant1(COM_t: Double);
    function getTemperatureCalibrationConstant0: Double;
    procedure setTemperatureCalibrationConstant0(COM_t: Double);
    procedure setO2ProbeCalibrationCoefficients(COM_o2Coeffs: OleVariant);
    function getO2ProbeCalibrationCoefficients: OleVariant;
    function geto2_IO_No: Double;
    procedure seto2_IO_No(COM_o2: Double);
    function geto2_IO_0: Double;
    procedure seto2_IO_0(COM_o2: Double);
    function geto2_IO_1: Double;
    procedure seto2_IO_1(COM_o2: Double);
    function geto2_IO_2: Double;
    procedure seto2_IO_2(COM_o2: Double);
    function geto2_K_No: Double;
    procedure seto2_K_No(COM_o2: Double);
    function geto2_K_0: Double;
    procedure seto2_K_0(COM_o2: Double);
    function geto2_K_1: Double;
    procedure seto2_K_1(COM_o2: Double);
    function geto2_K_2: Double;
    procedure seto2_K_2(COM_o2: Double);
    function geto2_K1_No: Double;
    procedure seto2_K1_No(COM_o2: Double);
    function geto2_K1_0: Double;
    procedure seto2_K1_0(COM_o2: Double);
    function geto2_K1_1: Double;
    procedure seto2_K1_1(COM_o2: Double);
    function geto2_K1_2: Double;
    procedure seto2_K1_2(COM_o2: Double);
    function geto2_K2_No: Double;
    procedure seto2_K2_No(COM_o2: Double);
    function geto2_K2_0: Double;
    procedure seto2_K2_0(COM_o2: Double);
    function geto2_K2_1: Double;
    procedure seto2_K2_1(COM_o2: Double);
    function geto2_K2_2: Double;
    procedure seto2_K2_2(COM_o2: Double);
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoLS450Coefficients read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoLS450CoefficientsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoLS450Coefficients
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoLS450CoefficientsProperties = class(TPersistent)
  private
    FServer:    TCCoLS450Coefficients;
    function    GetDefaultInterface: ICoLS450Coefficients;
    constructor Create(AServer: TCCoLS450Coefficients);
  protected
  public
    property DefaultInterface: ICoLS450Coefficients read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoLS450_Functions provides a Create and CreateRemote method to          
// create instances of the default interface ICoLS450_Functions exposed by              
// the CoClass CCoLS450_Functions. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoLS450_Functions = class
    class function Create: ICoLS450_Functions;
    class function CreateRemote(const MachineName: string): ICoLS450_Functions;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoLS450_Functions
// Help String      : CoLS450_Functions Class
// Default Interface: ICoLS450_Functions
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoLS450_FunctionsProperties= class;
{$ENDIF}
  TCCoLS450_Functions = class(TOleServer)
  private
    FIntf: ICoLS450_Functions;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoLS450_FunctionsProperties;
    function GetServerProperties: TCCoLS450_FunctionsProperties;
{$ENDIF}
    function GetDefaultInterface: ICoLS450_Functions;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoLS450_Functions);
    procedure Disconnect; override;
    procedure CreateLS450_Functions;
    procedure setLEDMode(COM_param0: WordBool);
    function getLS450Coefficients: ICoLS450Coefficients;
    procedure setLS450Coefficients(const COM_param0: ICoLS450Coefficients);
    function getLS450Info(COM_param0: Integer): WideString;
    procedure setLS450Info(COM_param0: Integer; const COM_param1: WideString);
    procedure setAllLS450Info(const COM_param0: ICoLS450Coefficients);
    function getAllLS450Info: ICoLS450Coefficients;
    procedure loadInfo;
    procedure saveInfo;
    procedure loadLS450CoefficientsFromEEPROM;
    function getO2ProbeCalibrationCoefficients: OleVariant;
    procedure setO2ProbeCalibrationCoefficients(COM_param0: OleVariant);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoLS450_Functions read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoLS450_FunctionsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoLS450_Functions
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoLS450_FunctionsProperties = class(TPersistent)
  private
    FServer:    TCCoLS450_Functions;
    function    GetDefaultInterface: ICoLS450_Functions;
    constructor Create(AServer: TCCoLS450_Functions);
  protected
  public
    property DefaultInterface: ICoLS450_Functions read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoExternalTemperatureImpl_LS450 provides a Create and CreateRemote method to          
// create instances of the default interface ICoExternalTemperatureImpl_LS450 exposed by              
// the CoClass CCoExternalTemperatureImpl_LS450. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoExternalTemperatureImpl_LS450 = class
    class function Create: ICoExternalTemperatureImpl_LS450;
    class function CreateRemote(const MachineName: string): ICoExternalTemperatureImpl_LS450;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoExternalTemperatureImpl_LS450
// Help String      : CoExternalTemperatureImpl_LS450 Class
// Default Interface: ICoExternalTemperatureImpl_LS450
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoExternalTemperatureImpl_LS450Properties= class;
{$ENDIF}
  TCCoExternalTemperatureImpl_LS450 = class(TOleServer)
  private
    FIntf: ICoExternalTemperatureImpl_LS450;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoExternalTemperatureImpl_LS450Properties;
    function GetServerProperties: TCCoExternalTemperatureImpl_LS450Properties;
{$ENDIF}
    function GetDefaultInterface: ICoExternalTemperatureImpl_LS450;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoExternalTemperatureImpl_LS450);
    procedure Disconnect; override;
    procedure CreateExternalTemperatureImpl_LS450B(const COM_usbInt: ICoUSBInterface; 
                                                   const COM_ls: ICoLS450_Functions);
    function getExternalTemperatureCelsius: Double;
    function getDataOutEndPoint: ICoUSBEndpointDescriptor;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoExternalTemperatureImpl_LS450 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoExternalTemperatureImpl_LS450Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoExternalTemperatureImpl_LS450
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoExternalTemperatureImpl_LS450Properties = class(TPersistent)
  private
    FServer:    TCCoExternalTemperatureImpl_LS450;
    function    GetDefaultInterface: ICoExternalTemperatureImpl_LS450;
    constructor Create(AServer: TCCoExternalTemperatureImpl_LS450);
  protected
  public
    property DefaultInterface: ICoExternalTemperatureImpl_LS450 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoExternalTemperatureImpl_LS450_2000 provides a Create and CreateRemote method to          
// create instances of the default interface ICoExternalTemperatureImpl_LS450_2000 exposed by              
// the CoClass CCoExternalTemperatureImpl_LS450_2000. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoExternalTemperatureImpl_LS450_2000 = class
    class function Create: ICoExternalTemperatureImpl_LS450_2000;
    class function CreateRemote(const MachineName: string): ICoExternalTemperatureImpl_LS450_2000;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoExternalTemperatureImpl_LS450_2000
// Help String      : CoExternalTemperatureImpl_LS450_2000 Class
// Default Interface: ICoExternalTemperatureImpl_LS450_2000
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoExternalTemperatureImpl_LS450_2000Properties= class;
{$ENDIF}
  TCCoExternalTemperatureImpl_LS450_2000 = class(TOleServer)
  private
    FIntf: ICoExternalTemperatureImpl_LS450_2000;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoExternalTemperatureImpl_LS450_2000Properties;
    function GetServerProperties: TCCoExternalTemperatureImpl_LS450_2000Properties;
{$ENDIF}
    function GetDefaultInterface: ICoExternalTemperatureImpl_LS450_2000;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoExternalTemperatureImpl_LS450_2000);
    procedure Disconnect; override;
    procedure CreateExternalTemperatureImpl_LS450_2000B(const COM_usbInt: ICoUSBInterface; 
                                                        const COM_ls: ICoLS450_Functions);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoExternalTemperatureImpl_LS450_2000 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoExternalTemperatureImpl_LS450_2000Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoExternalTemperatureImpl_LS450_2000
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoExternalTemperatureImpl_LS450_2000Properties = class(TPersistent)
  private
    FServer:    TCCoExternalTemperatureImpl_LS450_2000;
    function    GetDefaultInterface: ICoExternalTemperatureImpl_LS450_2000;
    constructor Create(AServer: TCCoExternalTemperatureImpl_LS450_2000);
  protected
  public
    property DefaultInterface: ICoExternalTemperatureImpl_LS450_2000 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoExternalTemperatureImpl_LS450_4000 provides a Create and CreateRemote method to          
// create instances of the default interface ICoExternalTemperatureImpl_LS450_4000 exposed by              
// the CoClass CCoExternalTemperatureImpl_LS450_4000. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoExternalTemperatureImpl_LS450_4000 = class
    class function Create: ICoExternalTemperatureImpl_LS450_4000;
    class function CreateRemote(const MachineName: string): ICoExternalTemperatureImpl_LS450_4000;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoExternalTemperatureImpl_LS450_4000
// Help String      : CoExternalTemperatureImpl_LS450_4000 Class
// Default Interface: ICoExternalTemperatureImpl_LS450_4000
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoExternalTemperatureImpl_LS450_4000Properties= class;
{$ENDIF}
  TCCoExternalTemperatureImpl_LS450_4000 = class(TOleServer)
  private
    FIntf: ICoExternalTemperatureImpl_LS450_4000;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoExternalTemperatureImpl_LS450_4000Properties;
    function GetServerProperties: TCCoExternalTemperatureImpl_LS450_4000Properties;
{$ENDIF}
    function GetDefaultInterface: ICoExternalTemperatureImpl_LS450_4000;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoExternalTemperatureImpl_LS450_4000);
    procedure Disconnect; override;
    procedure CreateExternalTemperatureImpl_LS450_4000B(const COM_usbInt: ICoUSBInterface; 
                                                        const COM_ls: ICoLS450_Functions);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoExternalTemperatureImpl_LS450_4000 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoExternalTemperatureImpl_LS450_4000Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoExternalTemperatureImpl_LS450_4000
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoExternalTemperatureImpl_LS450_4000Properties = class(TPersistent)
  private
    FServer:    TCCoExternalTemperatureImpl_LS450_4000;
    function    GetDefaultInterface: ICoExternalTemperatureImpl_LS450_4000;
    constructor Create(AServer: TCCoExternalTemperatureImpl_LS450_4000);
  protected
  public
    property DefaultInterface: ICoExternalTemperatureImpl_LS450_4000 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoExternalTriggerDelay provides a Create and CreateRemote method to          
// create instances of the default interface ICoExternalTriggerDelay exposed by              
// the CoClass CCoExternalTriggerDelay. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoExternalTriggerDelay = class
    class function Create: ICoExternalTriggerDelay;
    class function CreateRemote(const MachineName: string): ICoExternalTriggerDelay;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoExternalTriggerDelay
// Help String      : CoExternalTriggerDelay Class
// Default Interface: ICoExternalTriggerDelay
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoExternalTriggerDelayProperties= class;
{$ENDIF}
  TCCoExternalTriggerDelay = class(TOleServer)
  private
    FIntf: ICoExternalTriggerDelay;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoExternalTriggerDelayProperties;
    function GetServerProperties: TCCoExternalTriggerDelayProperties;
{$ENDIF}
    function GetDefaultInterface: ICoExternalTriggerDelay;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoExternalTriggerDelay);
    procedure Disconnect; override;
    procedure CreateExternalTriggerDelay;
    procedure setExternalTriggerDelay(COM_param0: Integer);
    function triggerDelayCountsToMicroseconds(COM_param0: Integer): Double;
    function getExternalTriggerDelayMinimum: Integer;
    function getExternalTriggerDelayMaximum: Integer;
    function getExternalTriggerDelayIncrement: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoExternalTriggerDelay read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoExternalTriggerDelayProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoExternalTriggerDelay
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoExternalTriggerDelayProperties = class(TPersistent)
  private
    FServer:    TCCoExternalTriggerDelay;
    function    GetDefaultInterface: ICoExternalTriggerDelay;
    constructor Create(AServer: TCCoExternalTriggerDelay);
  protected
  public
    property DefaultInterface: ICoExternalTriggerDelay read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoExternalTriggerDelayGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoExternalTriggerDelayGUIProvider exposed by              
// the CoClass CCoExternalTriggerDelayGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoExternalTriggerDelayGUIProvider = class
    class function Create: ICoExternalTriggerDelayGUIProvider;
    class function CreateRemote(const MachineName: string): ICoExternalTriggerDelayGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoExternalTriggerDelayGUIProvider
// Help String      : CoExternalTriggerDelayGUIProvider Class
// Default Interface: ICoExternalTriggerDelayGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoExternalTriggerDelayGUIProviderProperties= class;
{$ENDIF}
  TCCoExternalTriggerDelayGUIProvider = class(TOleServer)
  private
    FIntf: ICoExternalTriggerDelayGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoExternalTriggerDelayGUIProviderProperties;
    function GetServerProperties: TCCoExternalTriggerDelayGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoExternalTriggerDelayGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoExternalTriggerDelayGUIProvider);
    procedure Disconnect; override;
    procedure CreateExternalTriggerDelayGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoExternalTriggerDelayGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoExternalTriggerDelayGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoExternalTriggerDelayGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoExternalTriggerDelayGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoExternalTriggerDelayGUIProvider;
    function    GetDefaultInterface: ICoExternalTriggerDelayGUIProvider;
    constructor Create(AServer: TCCoExternalTriggerDelayGUIProvider);
  protected
  public
    property DefaultInterface: ICoExternalTriggerDelayGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoExternalTriggerDelayImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoExternalTriggerDelayImpl exposed by              
// the CoClass CCoExternalTriggerDelayImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoExternalTriggerDelayImpl = class
    class function Create: ICoExternalTriggerDelayImpl;
    class function CreateRemote(const MachineName: string): ICoExternalTriggerDelayImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoExternalTriggerDelayImpl
// Help String      : CoExternalTriggerDelayImpl Class
// Default Interface: ICoExternalTriggerDelayImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoExternalTriggerDelayImplProperties= class;
{$ENDIF}
  TCCoExternalTriggerDelayImpl = class(TOleServer)
  private
    FIntf: ICoExternalTriggerDelayImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoExternalTriggerDelayImplProperties;
    function GetServerProperties: TCCoExternalTriggerDelayImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoExternalTriggerDelayImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoExternalTriggerDelayImpl);
    procedure Disconnect; override;
    procedure CreateExternalTriggerDelayImplB(const COM_usbInt: ICoUSBInterface);
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double;
    function getExternalTriggerDelayIncrement: Integer;
    function getExternalTriggerDelayMaximum: Integer;
    function getExternalTriggerDelayMinimum: Integer;
    procedure setExternalTriggerDelay(COM_value: Integer);
    procedure masterClockChanged(COM_newValue: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoExternalTriggerDelayImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoExternalTriggerDelayImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoExternalTriggerDelayImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoExternalTriggerDelayImplProperties = class(TPersistent)
  private
    FServer:    TCCoExternalTriggerDelayImpl;
    function    GetDefaultInterface: ICoExternalTriggerDelayImpl;
    constructor Create(AServer: TCCoExternalTriggerDelayImpl);
  protected
  public
    property DefaultInterface: ICoExternalTriggerDelayImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoFPGA provides a Create and CreateRemote method to          
// create instances of the default interface ICoFPGA exposed by              
// the CoClass CCoFPGA. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoFPGA = class
    class function Create: ICoFPGA;
    class function CreateRemote(const MachineName: string): ICoFPGA;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoFPGA
// Help String      : CoFPGA Class
// Default Interface: ICoFPGA
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoFPGAProperties= class;
{$ENDIF}
  TCCoFPGA = class(TOleServer)
  private
    FIntf: ICoFPGA;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoFPGAProperties;
    function GetServerProperties: TCCoFPGAProperties;
{$ENDIF}
    function GetDefaultInterface: ICoFPGA;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoFPGA);
    procedure Disconnect; override;
    procedure CreateFPGA;
    function getFPGA(COM_param0: Shortint): Integer;
    function getAllFPGA: OleVariant;
    procedure setFPGA(COM_param0: Shortint; COM_param1: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoFPGA read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoFPGAProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoFPGA
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoFPGAProperties = class(TPersistent)
  private
    FServer:    TCCoFPGA;
    function    GetDefaultInterface: ICoFPGA;
    constructor Create(AServer: TCCoFPGA);
  protected
  public
    property DefaultInterface: ICoFPGA read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoFPGAImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoFPGAImpl exposed by              
// the CoClass CCoFPGAImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoFPGAImpl = class
    class function Create: ICoFPGAImpl;
    class function CreateRemote(const MachineName: string): ICoFPGAImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoFPGAImpl
// Help String      : CoFPGAImpl Class
// Default Interface: ICoFPGAImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoFPGAImplProperties= class;
{$ENDIF}
  TCCoFPGAImpl = class(TOleServer)
  private
    FIntf: ICoFPGAImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoFPGAImplProperties;
    function GetServerProperties: TCCoFPGAImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoFPGAImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoFPGAImpl);
    procedure Disconnect; override;
    procedure CreateFPGAImplB(const COM_usbInt: ICoUSBInterface);
    procedure setFPGA(COM_reg: Shortint; COM_value: Integer);
    function getFPGA(COM_reg: Shortint): Integer;
    function getAllFPGA: OleVariant;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoFPGAImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoFPGAImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoFPGAImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoFPGAImplProperties = class(TPersistent)
  private
    FServer:    TCCoFPGAImpl;
    function    GetDefaultInterface: ICoFPGAImpl;
    constructor Create(AServer: TCCoFPGAImpl);
  protected
  public
    property DefaultInterface: ICoFPGAImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoFPGARegisters provides a Create and CreateRemote method to          
// create instances of the default interface ICoFPGARegisters exposed by              
// the CoClass CCoFPGARegisters. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoFPGARegisters = class
    class function Create: ICoFPGARegisters;
    class function CreateRemote(const MachineName: string): ICoFPGARegisters;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoFPGARegisters
// Help String      : CoFPGARegisters Class
// Default Interface: ICoFPGARegisters
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoFPGARegistersProperties= class;
{$ENDIF}
  TCCoFPGARegisters = class(TOleServer)
  private
    FIntf: ICoFPGARegisters;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoFPGARegistersProperties;
    function GetServerProperties: TCCoFPGARegistersProperties;
{$ENDIF}
    function GetDefaultInterface: ICoFPGARegisters;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoFPGARegisters);
    procedure Disconnect; override;
    procedure CreateFPGARegisters;
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoFPGARegisters read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoFPGARegistersProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoFPGARegisters
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoFPGARegistersProperties = class(TPersistent)
  private
    FServer:    TCCoFPGARegisters;
    function    GetDefaultInterface: ICoFPGARegisters;
    constructor Create(AServer: TCCoFPGARegisters);
  protected
  public
    property DefaultInterface: ICoFPGARegisters read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoFeatureEvent provides a Create and CreateRemote method to          
// create instances of the default interface ICoFeatureEvent exposed by              
// the CoClass CCoFeatureEvent. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoFeatureEvent = class
    class function Create: ICoFeatureEvent;
    class function CreateRemote(const MachineName: string): ICoFeatureEvent;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoFeatureEvent
// Help String      : CoFeatureEvent Class
// Default Interface: ICoFeatureEvent
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoFeatureEventProperties= class;
{$ENDIF}
  TCCoFeatureEvent = class(TOleServer)
  private
    FIntf: ICoFeatureEvent;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoFeatureEventProperties;
    function GetServerProperties: TCCoFeatureEventProperties;
{$ENDIF}
    function GetDefaultInterface: ICoFeatureEvent;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoFeatureEvent);
    procedure Disconnect; override;
    procedure CreateFeatureEvent;
    procedure setLifespan(COM_lifespan: Integer);
    function getLifespan: Integer;
    function getID: Integer;
    procedure setID(COM_id: Integer);
    procedure setFeatureCommand(const COM_command: WideString);
    function getFeatureCommand: WideString;
    function getBirthTime: Integer;
    function getSerialNumber: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoFeatureEvent read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoFeatureEventProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoFeatureEvent
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoFeatureEventProperties = class(TPersistent)
  private
    FServer:    TCCoFeatureEvent;
    function    GetDefaultInterface: ICoFeatureEvent;
    constructor Create(AServer: TCCoFeatureEvent);
  protected
  public
    property DefaultInterface: ICoFeatureEvent read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoFeatureListener provides a Create and CreateRemote method to          
// create instances of the default interface ICoFeatureListener exposed by              
// the CoClass CCoFeatureListener. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoFeatureListener = class
    class function Create: ICoFeatureListener;
    class function CreateRemote(const MachineName: string): ICoFeatureListener;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoFeatureListener
// Help String      : CoFeatureListener Class
// Default Interface: ICoFeatureListener
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoFeatureListenerProperties= class;
{$ENDIF}
  TCCoFeatureListener = class(TOleServer)
  private
    FIntf: ICoFeatureListener;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoFeatureListenerProperties;
    function GetServerProperties: TCCoFeatureListenerProperties;
{$ENDIF}
    function GetDefaultInterface: ICoFeatureListener;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoFeatureListener);
    procedure Disconnect; override;
    procedure CreateFeatureListener;
    procedure addToStatusBar(const COM_param0: ICoFeatureEvent; COM_param1: Integer);
    procedure addToStatusBarB(const COM_param0: ICoFeatureEvent);
    procedure updateStatusText(const COM_param0: ICoFeatureEvent);
    procedure clearStatusBar;
    procedure clearStatusText(const COM_param0: WideString);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoFeatureListener read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoFeatureListenerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoFeatureListener
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoFeatureListenerProperties = class(TPersistent)
  private
    FServer:    TCCoFeatureListener;
    function    GetDefaultInterface: ICoFeatureListener;
    constructor Create(AServer: TCCoFeatureListener);
  protected
  public
    property DefaultInterface: ICoFeatureListener read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoFeature provides a Create and CreateRemote method to          
// create instances of the default interface ICoFeature exposed by              
// the CoClass CCoFeature. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoFeature = class
    class function Create: ICoFeature;
    class function CreateRemote(const MachineName: string): ICoFeature;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoFeature
// Help String      : CoFeature Class
// Default Interface: ICoFeature
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoFeatureProperties= class;
{$ENDIF}
  TCCoFeature = class(TOleServer)
  private
    FIntf: ICoFeature;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoFeatureProperties;
    function GetServerProperties: TCCoFeatureProperties;
{$ENDIF}
    function GetDefaultInterface: ICoFeature;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoFeature);
    procedure Disconnect; override;
    procedure CreateFeature;
    function getFeatureName: WideString;
    procedure addFeatureListener(const COM_param0: ICoFeatureListener);
    procedure removeFeatureListener(const COM_param0: ICoFeatureListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoFeature read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoFeatureProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoFeature
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoFeatureProperties = class(TPersistent)
  private
    FServer:    TCCoFeature;
    function    GetDefaultInterface: ICoFeature;
    constructor Create(AServer: TCCoFeature);
  protected
  public
    property DefaultInterface: ICoFeature read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoFeatureProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoFeatureProvider exposed by              
// the CoClass CCoFeatureProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoFeatureProvider = class
    class function Create: ICoFeatureProvider;
    class function CreateRemote(const MachineName: string): ICoFeatureProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoFeatureProvider
// Help String      : CoFeatureProvider Class
// Default Interface: ICoFeatureProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoFeatureProviderProperties= class;
{$ENDIF}
  TCCoFeatureProvider = class(TOleServer)
  private
    FIntf: ICoFeatureProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoFeatureProviderProperties;
    function GetServerProperties: TCCoFeatureProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoFeatureProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoFeatureProvider);
    procedure Disconnect; override;
    procedure CreateFeatureProvider;
    function getGUIFeatures: ICoGUIProviderCollection;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoFeatureProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoFeatureProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoFeatureProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoFeatureProviderProperties = class(TPersistent)
  private
    FServer:    TCCoFeatureProvider;
    function    GetDefaultInterface: ICoFeatureProvider;
    constructor Create(AServer: TCCoFeatureProvider);
  protected
  public
    property DefaultInterface: ICoFeatureProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrometerReconstruction provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrometerReconstruction exposed by              
// the CoClass CCoSpectrometerReconstruction. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrometerReconstruction = class
    class function Create: ICoSpectrometerReconstruction;
    class function CreateRemote(const MachineName: string): ICoSpectrometerReconstruction;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrometerReconstruction
// Help String      : CoSpectrometerReconstruction Class
// Default Interface: ICoSpectrometerReconstruction
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrometerReconstructionProperties= class;
{$ENDIF}
  TCCoSpectrometerReconstruction = class(TOleServer)
  private
    FIntf: ICoSpectrometerReconstruction;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrometerReconstructionProperties;
    function GetServerProperties: TCCoSpectrometerReconstructionProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrometerReconstruction;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrometerReconstruction);
    procedure Disconnect; override;
    procedure CreateSpectrometerReconstruction;
    function getAlgorithm: Shortint;
    procedure setAlgorithm(COM_algorithm: Shortint);
    function getReconstructionType: Shortint;
    procedure setReconstructionType(COM_reconstructionType: Shortint);
    function isSaturated: WordBool;
    procedure setSaturated(COM_saturated: WordBool);
    function getIntensities: OleVariant;
    procedure setIntensities(COM_intensities: OleVariant);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSpectrometerReconstruction read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrometerReconstructionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrometerReconstruction
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrometerReconstructionProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrometerReconstruction;
    function    GetDefaultInterface: ICoSpectrometerReconstruction;
    constructor Create(AServer: TCCoSpectrometerReconstruction);
  protected
  public
    property DefaultInterface: ICoSpectrometerReconstruction read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoLaserCollection provides a Create and CreateRemote method to          
// create instances of the default interface ICoLaserCollection exposed by              
// the CoClass CCoLaserCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoLaserCollection = class
    class function Create: ICoLaserCollection;
    class function CreateRemote(const MachineName: string): ICoLaserCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoLaserCollection
// Help String      : CoLaserCollection Class
// Default Interface: ICoLaserCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoLaserCollectionProperties= class;
{$ENDIF}
  TCCoLaserCollection = class(TOleServer)
  private
    FIntf: ICoLaserCollection;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoLaserCollectionProperties;
    function GetServerProperties: TCCoLaserCollectionProperties;
{$ENDIF}
    function GetDefaultInterface: ICoLaserCollection;
  protected
    procedure InitServerData; override;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoLaserCollection);
    procedure Disconnect; override;
    function Item(index: OleVariant): OleVariant;
    procedure Add(const pnewLaserCollection: IDispatch);
    procedure Remove(index: Integer);
    property DefaultInterface: ICoLaserCollection read GetDefaultInterface;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoLaserCollectionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoLaserCollection
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoLaserCollectionProperties = class(TPersistent)
  private
    FServer:    TCCoLaserCollection;
    function    GetDefaultInterface: ICoLaserCollection;
    constructor Create(AServer: TCCoLaserCollection);
  protected
    function Get_Count: Integer;
  public
    property DefaultInterface: ICoLaserCollection read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMMSRaman provides a Create and CreateRemote method to          
// create instances of the default interface ICoMMSRaman exposed by              
// the CoClass CCoMMSRaman. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMMSRaman = class
    class function Create: ICoMMSRaman;
    class function CreateRemote(const MachineName: string): ICoMMSRaman;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMMSRaman
// Help String      : CoMMSRaman Class
// Default Interface: ICoMMSRaman
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMMSRamanProperties= class;
{$ENDIF}
  TCCoMMSRaman = class(TOleServer)
  private
    FIntf: ICoMMSRaman;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMMSRamanProperties;
    function GetServerProperties: TCCoMMSRamanProperties;
{$ENDIF}
    function GetDefaultInterface: ICoMMSRaman;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMMSRaman);
    procedure Disconnect; override;
    procedure CreateMMSRaman;
    procedure CreateMMSRamanB(COM_i: Integer);
    procedure openSpectrometer(COM_index: Integer);
    function getGUIFeatures: ICoGUIProviderCollection;
    function getSerialNumber: WideString;
    function getModelNumber: WideString;
    procedure getSpectrometerInfo;
    function getIntegrationTime: Single;
    procedure setIntegrationTime(COM_intTime: Integer);
    function getSpectrometerExposure(COM_shutter: Shortint; COM_type: Shortint): ICoSpectrometerExposure;
    procedure startExposure(COM_shutter: Shortint; COM_type: Shortint);
    function queryExposure: WordBool;
    function getExposure: ICoSpectrometerExposure;
    procedure endExposure;
    procedure endExposureB(COM_shutterState: Shortint);
    function getReconstruction(COM_type: Shortint): ICoSpectrometerReconstruction;
    procedure reset;
    function getReconstructionType: Shortint;
    procedure setReconstructionType(COM_reconstructionType: Shortint);
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
    procedure getDarkExposure;
    procedure getLightExposure;
    function getCcdWidth: Integer;
    function getCcdHeight: Integer;
    function isExposureInProgress: WordBool;
    procedure setStrobeEnable(COM_laserOn: WordBool);
    procedure readCalibrationFromSpectrometer;
    procedure writeCalibrationToSpectrometer(const COM_cal: ICoMMSRamanCalibration);
    function getCalibration: ICoMMSRamanCalibration;
    function getLaser(COM_laserIndex: Integer): ICoLaser;
    function getLasers: ICoLaserCollection;
    function getNumberOfEnabledLasers: Integer;
    procedure setLaserInfo(COM_laserIndex: Integer);
    procedure getLaserInfo(COM_laserIndex: Integer);
    function getNumberOfSupportedLasers: Integer;
    procedure setNumberOfSupportedLasers(COM_numberOfSupportedLasers: Integer);
    procedure setDefaultLaser(COM_laserIndex: Integer);
    function getDefaultLaser: Integer;
    function isLaserTemperatureRegulation: WordBool;
    procedure setLaserTemperatureRegulation(COM_laserTemperatureRegulation: WordBool);
    procedure getLaserTemperatureInfo;
    procedure setLaserTemperatureInfo;
    function getMinimumLaserSetpoint: Integer;
    procedure setMinimumLaserSetpoint(COM_minimumLaserSetpoint: Integer);
    function getMaximumLaserSetpoint: Integer;
    procedure setMaximumLaserSetpoint(COM_maximumLaserSetpoint: Integer);
    procedure setLaserPowerInfo(COM_power: Integer);
    function getLaserPowerInfo: Integer;
    function isLaserPowerRegulation: WordBool;
    procedure setLaserPowerRegulation(COM_laserPowerRegulation: WordBool);
    function getMinimumLaserPowerSetpoint: Integer;
    procedure setMinimumLaserPowerSetpoint(COM_minimumLaserPowerSetpoint: Integer);
    function getMaximumLaserPowerSetpoint: Integer;
    procedure setMaximumLaserPowerSetpoint(COM_maximumLaserPowerSetpoint: Integer);
    procedure getCCDTemperatureInfo;
    procedure setCCDTemperatureInfo(COM_regulation: WordBool; COM_setpoint: Single);
    function isTemperatureRegulation: WordBool;
    procedure setTemperatureRegulation(COM_temperatureRegulation: WordBool);
    function getCCDSetpoint: Single;
    procedure setCCDSetpoint(COM_setpoint: Single);
    function getMinimumCCDSetpoint: Integer;
    procedure setMinimumCCDSetpoint(COM_min: Integer);
    function getMaximumCCDSetpoint: Integer;
    procedure setMaximumCCDSetpoint(COM_max: Integer);
    function getThermistor: Single;
    function isThermFault: WordBool;
    function isTempLock: WordBool;
    function getShutterState: Shortint;
    function isShutterOpen: WordBool;
    procedure openShutter;
    procedure closeShutter;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_index: Integer): OleVariant;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer);
    function getFirmwareVersion: WideString;
    procedure setDSPFirmwareVersion(const COM_dsp: WideString);
    function getDSPFirmwareVersion: WideString;
    procedure setFPGAFirmwareVersion(const COM_fpga: WideString);
    function getFPGAFirmwareVersion: WideString;
    procedure setUSBFirmwareVersion(const COM_usb: WideString);
    function getUSBFirmwareVersion: WideString;
    function getSpectrometer: ICoMMSRaman;
    procedure setMasterClock(COM_rate: Integer);
    function toString: WideString;
    function getConfiguration: ICoConfiguration;
    procedure addExposureListener(const COM_listener: ICoExposureListener);
    procedure removeExposureListener(const COM_listener: ICoExposureListener);
    function getLastExposure: ICoSpectrometerExposure;
    function has1DMode: WordBool;
    procedure set2DMode(COM_channel: Integer);
    procedure set1DMode(COM_channel: Integer);
    function is2DMode: WordBool;
    function is1DMode: WordBool;
    function get2DintegrationTime: Integer;
    procedure addIntegrationTimeChangeListener(const COM_listener: ICoIntegrationTimeChangeListener);
    procedure removeIntegrationTimeChangeListener(const COM_listener: ICoIntegrationTimeChangeListener);
    procedure fireIntegrationTimeChanged(COM_time: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMMSRaman read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMMSRamanProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMMSRaman
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMMSRamanProperties = class(TPersistent)
  private
    FServer:    TCCoMMSRaman;
    function    GetDefaultInterface: ICoMMSRaman;
    constructor Create(AServer: TCCoMMSRaman);
  protected
  public
    property DefaultInterface: ICoMMSRaman read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoFirmware provides a Create and CreateRemote method to          
// create instances of the default interface ICoFirmware exposed by              
// the CoClass CCoFirmware. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoFirmware = class
    class function Create: ICoFirmware;
    class function CreateRemote(const MachineName: string): ICoFirmware;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoFirmware
// Help String      : CoFirmware Class
// Default Interface: ICoFirmware
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoFirmwareProperties= class;
{$ENDIF}
  TCCoFirmware = class(TOleServer)
  private
    FIntf: ICoFirmware;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoFirmwareProperties;
    function GetServerProperties: TCCoFirmwareProperties;
{$ENDIF}
    function GetDefaultInterface: ICoFirmware;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoFirmware);
    procedure Disconnect; override;
    procedure CreateFirmware;
    function getFirmwareVersion: WideString;
    procedure setDSPFirmwareVersion(const COM_param0: WideString);
    function getDSPFirmwareVersion: WideString;
    procedure setFPGAFirmwareVersion(const COM_param0: WideString);
    function getFPGAFirmwareVersion: WideString;
    procedure setUSBFirmwareVersion(const COM_param0: WideString);
    function getUSBFirmwareVersion: WideString;
    function getSpectrometer: ICoMMSRaman;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoFirmware read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoFirmwareProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoFirmware
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoFirmwareProperties = class(TPersistent)
  private
    FServer:    TCCoFirmware;
    function    GetDefaultInterface: ICoFirmware;
    constructor Create(AServer: TCCoFirmware);
  protected
  public
    property DefaultInterface: ICoFirmware read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoFirmwareGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoFirmwareGUIProvider exposed by              
// the CoClass CCoFirmwareGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoFirmwareGUIProvider = class
    class function Create: ICoFirmwareGUIProvider;
    class function CreateRemote(const MachineName: string): ICoFirmwareGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoFirmwareGUIProvider
// Help String      : CoFirmwareGUIProvider Class
// Default Interface: ICoFirmwareGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoFirmwareGUIProviderProperties= class;
{$ENDIF}
  TCCoFirmwareGUIProvider = class(TOleServer)
  private
    FIntf: ICoFirmwareGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoFirmwareGUIProviderProperties;
    function GetServerProperties: TCCoFirmwareGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoFirmwareGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoFirmwareGUIProvider);
    procedure Disconnect; override;
    procedure CreateFirmwareGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoFirmwareGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoFirmwareGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoFirmwareGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoFirmwareGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoFirmwareGUIProvider;
    function    GetDefaultInterface: ICoFirmwareGUIProvider;
    constructor Create(AServer: TCCoFirmwareGUIProvider);
  protected
  public
    property DefaultInterface: ICoFirmwareGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoFirmwareImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoFirmwareImpl exposed by              
// the CoClass CCoFirmwareImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoFirmwareImpl = class
    class function Create: ICoFirmwareImpl;
    class function CreateRemote(const MachineName: string): ICoFirmwareImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoFirmwareImpl
// Help String      : CoFirmwareImpl Class
// Default Interface: ICoFirmwareImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoFirmwareImplProperties= class;
{$ENDIF}
  TCCoFirmwareImpl = class(TOleServer)
  private
    FIntf: ICoFirmwareImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoFirmwareImplProperties;
    function GetServerProperties: TCCoFirmwareImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoFirmwareImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoFirmwareImpl);
    procedure Disconnect; override;
    procedure CreateFirmwareImplB(const COM_usbInt: ICoUSBInterface; const COM_spec: ICoMMSRaman);
    function getFirmwareVersion: WideString;
    procedure setDSPFirmwareVersion(const COM_dsp: WideString);
    function getDSPFirmwareVersion: WideString;
    procedure setFPGAFirmwareVersion(const COM_fpga: WideString);
    function getFPGAFirmwareVersion: WideString;
    procedure setUSBFirmwareVersion(const COM_usb: WideString);
    function getUSBFirmwareVersion: WideString;
    function getSpectrometer: ICoMMSRaman;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoFirmwareImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoFirmwareImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoFirmwareImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoFirmwareImplProperties = class(TPersistent)
  private
    FServer:    TCCoFirmwareImpl;
    function    GetDefaultInterface: ICoFirmwareImpl;
    constructor Create(AServer: TCCoFirmwareImpl);
  protected
  public
    property DefaultInterface: ICoFirmwareImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoGateDelayListener provides a Create and CreateRemote method to          
// create instances of the default interface ICoGateDelayListener exposed by              
// the CoClass CCoGateDelayListener. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoGateDelayListener = class
    class function Create: ICoGateDelayListener;
    class function CreateRemote(const MachineName: string): ICoGateDelayListener;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoGateDelayListener
// Help String      : CoGateDelayListener Class
// Default Interface: ICoGateDelayListener
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoGateDelayListenerProperties= class;
{$ENDIF}
  TCCoGateDelayListener = class(TOleServer)
  private
    FIntf: ICoGateDelayListener;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoGateDelayListenerProperties;
    function GetServerProperties: TCCoGateDelayListenerProperties;
{$ENDIF}
    function GetDefaultInterface: ICoGateDelayListener;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoGateDelayListener);
    procedure Disconnect; override;
    procedure CreateGateDelayListener;
    procedure gateDelayValueChanged(COM_param0: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoGateDelayListener read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoGateDelayListenerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoGateDelayListener
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoGateDelayListenerProperties = class(TPersistent)
  private
    FServer:    TCCoGateDelayListener;
    function    GetDefaultInterface: ICoGateDelayListener;
    constructor Create(AServer: TCCoGateDelayListener);
  protected
  public
    property DefaultInterface: ICoGateDelayListener read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoFlGated provides a Create and CreateRemote method to          
// create instances of the default interface ICoFlGated exposed by              
// the CoClass CCoFlGated. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoFlGated = class
    class function Create: ICoFlGated;
    class function CreateRemote(const MachineName: string): ICoFlGated;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoFlGated
// Help String      : CoFlGated Class
// Default Interface: ICoFlGated
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoFlGatedProperties= class;
{$ENDIF}
  TCCoFlGated = class(TOleServer)
  private
    FIntf: ICoFlGated;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoFlGatedProperties;
    function GetServerProperties: TCCoFlGatedProperties;
{$ENDIF}
    function GetDefaultInterface: ICoFlGated;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoFlGated);
    procedure Disconnect; override;
    procedure CreateFlGated;
    function getGateIncrement: Integer;
    function getGateMaximum: Integer;
    function getGateMinimum: Integer;
    procedure setGateFrequency(COM_param0: Integer);
    function getGateFrequency: Integer;
    procedure addGateDelayListener(const COM_param0: ICoGateDelayListener);
    procedure removeGateDelayListener(const COM_param0: ICoGateDelayListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoFlGated read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoFlGatedProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoFlGated
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoFlGatedProperties = class(TPersistent)
  private
    FServer:    TCCoFlGated;
    function    GetDefaultInterface: ICoFlGated;
    constructor Create(AServer: TCCoFlGated);
  protected
  public
    property DefaultInterface: ICoFlGated read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoFlGatedGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoFlGatedGUIProvider exposed by              
// the CoClass CCoFlGatedGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoFlGatedGUIProvider = class
    class function Create: ICoFlGatedGUIProvider;
    class function CreateRemote(const MachineName: string): ICoFlGatedGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoFlGatedGUIProvider
// Help String      : CoFlGatedGUIProvider Class
// Default Interface: ICoFlGatedGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoFlGatedGUIProviderProperties= class;
{$ENDIF}
  TCCoFlGatedGUIProvider = class(TOleServer)
  private
    FIntf: ICoFlGatedGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoFlGatedGUIProviderProperties;
    function GetServerProperties: TCCoFlGatedGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoFlGatedGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoFlGatedGUIProvider);
    procedure Disconnect; override;
    procedure CreateFlGatedGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoFlGatedGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoFlGatedGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoFlGatedGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoFlGatedGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoFlGatedGUIProvider;
    function    GetDefaultInterface: ICoFlGatedGUIProvider;
    constructor Create(AServer: TCCoFlGatedGUIProvider);
  protected
  public
    property DefaultInterface: ICoFlGatedGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrometerPlugIn provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrometerPlugIn exposed by              
// the CoClass CCoSpectrometerPlugIn. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrometerPlugIn = class
    class function Create: ICoSpectrometerPlugIn;
    class function CreateRemote(const MachineName: string): ICoSpectrometerPlugIn;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrometerPlugIn
// Help String      : CoSpectrometerPlugIn Class
// Default Interface: ICoSpectrometerPlugIn
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrometerPlugInProperties= class;
{$ENDIF}
  TCCoSpectrometerPlugIn = class(TOleServer)
  private
    FIntf: ICoSpectrometerPlugIn;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrometerPlugInProperties;
    function GetServerProperties: TCCoSpectrometerPlugInProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrometerPlugIn;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrometerPlugIn);
    procedure Disconnect; override;
    procedure CreateSpectrometerPlugIn;
    function getName(COM_productID: Integer): WideString;
    function getNameB: WideString;
    function getClassName(COM_productID: Integer): WideString;
    function getClassNameB: WideString;
    function getUSBSpectrometer: ICoUSBSpectrometer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSpectrometerPlugIn read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrometerPlugInProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrometerPlugIn
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrometerPlugInProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrometerPlugIn;
    function    GetDefaultInterface: ICoSpectrometerPlugIn;
    constructor Create(AServer: TCCoSpectrometerPlugIn);
  protected
  public
    property DefaultInterface: ICoSpectrometerPlugIn read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrometerPlugInCollection provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrometerPlugInCollection exposed by              
// the CoClass CCoSpectrometerPlugInCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrometerPlugInCollection = class
    class function Create: ICoSpectrometerPlugInCollection;
    class function CreateRemote(const MachineName: string): ICoSpectrometerPlugInCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrometerPlugInCollection
// Help String      : CoSpectrometerPlugInCollection Class
// Default Interface: ICoSpectrometerPlugInCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrometerPlugInCollectionProperties= class;
{$ENDIF}
  TCCoSpectrometerPlugInCollection = class(TOleServer)
  private
    FIntf: ICoSpectrometerPlugInCollection;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrometerPlugInCollectionProperties;
    function GetServerProperties: TCCoSpectrometerPlugInCollectionProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrometerPlugInCollection;
  protected
    procedure InitServerData; override;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrometerPlugInCollection);
    procedure Disconnect; override;
    function Item(index: OleVariant): OleVariant;
    procedure Add(const pnewSpectrometerPlugInCollection: IDispatch);
    procedure Remove(index: Integer);
    property DefaultInterface: ICoSpectrometerPlugInCollection read GetDefaultInterface;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrometerPlugInCollectionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrometerPlugInCollection
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrometerPlugInCollectionProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrometerPlugInCollection;
    function    GetDefaultInterface: ICoSpectrometerPlugInCollection;
    constructor Create(AServer: TCCoSpectrometerPlugInCollection);
  protected
    function Get_Count: Integer;
  public
    property DefaultInterface: ICoSpectrometerPlugInCollection read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSB2000 provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSB2000 exposed by              
// the CoClass CCoUSB2000. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSB2000 = class
    class function Create: ICoUSB2000;
    class function CreateRemote(const MachineName: string): ICoUSB2000;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSB2000
// Help String      : CoUSB2000 Class
// Default Interface: ICoUSB2000
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSB2000Properties= class;
{$ENDIF}
  TCCoUSB2000 = class(TOleServer)
  private
    FIntf: ICoUSB2000;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSB2000Properties;
    function GetServerProperties: TCCoUSB2000Properties;
{$ENDIF}
    function GetDefaultInterface: ICoUSB2000;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSB2000);
    procedure Disconnect; override;
    procedure CreateUSB2000;
    procedure CreateUSB2000B(COM_i: Integer);
    procedure setEndpoints;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
    procedure openSpectrometer(COM_index: Integer);
    function getUniUsb: ICoUSBInterface;
    function getGUIFeatures: ICoGUIProviderCollection;
    function isFlGated: WordBool;
    function isCurie: WordBool;
    function getStatus: ICoSpectrometerStatus;
    function readIntegrationTime: Integer;
    procedure setMasterClock(COM_freq: Integer);
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant);
    function getActualIntegrationTime: Integer;
    procedure setStrobeDelay(COM_delay: Integer);
    function getStrobeDelay: Integer;
    function getName: WideString;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
    procedure setExternalTriggerMode(COM_mode: Integer);
    function getExternalTriggerModes: ICoExternalTriggerModeCollection;
    function isPlugInDetected(COM_id: Integer): WordBool;
    function getPlugIns: ICoSpectrometerPlugInCollection;
    function getNumberOfPlugIns: Integer;
    function initializePlugIns: OleVariant;
    procedure detectPlugIns;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getNonlinearityCoefficients: ICoCoefficientsCollection;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_index: Integer): OleVariant;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer);
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer);
    function getStrayLight(COM_index: Integer): Double;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
    function isAdvancedVersion: WordBool;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    function getGateIncrement: Integer;
    function getGateMaximum: Integer;
    function getGateMinimum: Integer;
    procedure setGateFrequency(COM_freq: Integer);
    function getGateFrequency: Integer;
    procedure addGateDelayListener(const COM_listener: ICoGateDelayListener);
    procedure removeGateDelayListener(const COM_listener: ICoGateDelayListener);
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSB2000 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSB2000Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSB2000
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSB2000Properties = class(TPersistent)
  private
    FServer:    TCCoUSB2000;
    function    GetDefaultInterface: ICoUSB2000;
    constructor Create(AServer: TCCoUSB2000);
  protected
  public
    property DefaultInterface: ICoUSB2000 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoFlGatedImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoFlGatedImpl exposed by              
// the CoClass CCoFlGatedImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoFlGatedImpl = class
    class function Create: ICoFlGatedImpl;
    class function CreateRemote(const MachineName: string): ICoFlGatedImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoFlGatedImpl
// Help String      : CoFlGatedImpl Class
// Default Interface: ICoFlGatedImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoFlGatedImplProperties= class;
{$ENDIF}
  TCCoFlGatedImpl = class(TOleServer)
  private
    FIntf: ICoFlGatedImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoFlGatedImplProperties;
    function GetServerProperties: TCCoFlGatedImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoFlGatedImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoFlGatedImpl);
    procedure Disconnect; override;
    procedure CreateFlGatedImplB(const COM_usbInt: ICoUSBInterface; 
                                 const COM_spectrometer: ICoUSB2000);
    function getGateIncrement: Integer;
    function getGateMaximum: Integer;
    function getGateMinimum: Integer;
    procedure setGateFrequency(COM_freq: Integer);
    function getGateFrequency: Integer;
    procedure addGateDelayListener(const COM_listener: ICoGateDelayListener);
    procedure removeGateDelayListener(const COM_listener: ICoGateDelayListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoFlGatedImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoFlGatedImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoFlGatedImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoFlGatedImplProperties = class(TPersistent)
  private
    FServer:    TCCoFlGatedImpl;
    function    GetDefaultInterface: ICoFlGatedImpl;
    constructor Create(AServer: TCCoFlGatedImpl);
  protected
  public
    property DefaultInterface: ICoFlGatedImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoGPIO provides a Create and CreateRemote method to          
// create instances of the default interface ICoGPIO exposed by              
// the CoClass CCoGPIO. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoGPIO = class
    class function Create: ICoGPIO;
    class function CreateRemote(const MachineName: string): ICoGPIO;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoGPIO
// Help String      : CoGPIO Class
// Default Interface: ICoGPIO
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoGPIOProperties= class;
{$ENDIF}
  TCCoGPIO = class(TOleServer)
  private
    FIntf: ICoGPIO;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoGPIOProperties;
    function GetServerProperties: TCCoGPIOProperties;
{$ENDIF}
    function GetDefaultInterface: ICoGPIO;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoGPIO);
    procedure Disconnect; override;
    procedure CreateGPIO;
    function getValueBits: ICoBitSet;
    function getValueBit(COM_param0: Integer): Integer;
    procedure setValueAllBits(const COM_param0: ICoBitSet);
    procedure setValueBitmask(COM_param0: Smallint);
    procedure setValueBit(COM_param0: Integer; COM_param1: WordBool);
    function getDirectionBits: ICoBitSet;
    procedure setDirectionAllBits(const COM_param0: ICoBitSet);
    procedure setDirectionBitmask(COM_param0: Smallint);
    procedure setDirectionBit(COM_param0: Integer; COM_param1: WordBool);
    function getMuxBits: ICoBitSet;
    function getNumberOfPins: Integer;
    procedure setMuxAllBits(const COM_param0: ICoBitSet);
    procedure setMuxBitmask(COM_param0: Smallint);
    procedure setMuxBit(COM_param0: Integer; COM_param1: WordBool);
    function getTotalGPIOBits: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoGPIO read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoGPIOProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoGPIO
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoGPIOProperties = class(TPersistent)
  private
    FServer:    TCCoGPIO;
    function    GetDefaultInterface: ICoGPIO;
    constructor Create(AServer: TCCoGPIO);
  protected
  public
    property DefaultInterface: ICoGPIO read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoGPIOGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoGPIOGUIProvider exposed by              
// the CoClass CCoGPIOGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoGPIOGUIProvider = class
    class function Create: ICoGPIOGUIProvider;
    class function CreateRemote(const MachineName: string): ICoGPIOGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoGPIOGUIProvider
// Help String      : CoGPIOGUIProvider Class
// Default Interface: ICoGPIOGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoGPIOGUIProviderProperties= class;
{$ENDIF}
  TCCoGPIOGUIProvider = class(TOleServer)
  private
    FIntf: ICoGPIOGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoGPIOGUIProviderProperties;
    function GetServerProperties: TCCoGPIOGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoGPIOGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoGPIOGUIProvider);
    procedure Disconnect; override;
    procedure CreateGPIOGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoGPIOGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoGPIOGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoGPIOGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoGPIOGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoGPIOGUIProvider;
    function    GetDefaultInterface: ICoGPIOGUIProvider;
    constructor Create(AServer: TCCoGPIOGUIProvider);
  protected
  public
    property DefaultInterface: ICoGPIOGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoGPIOImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoGPIOImpl exposed by              
// the CoClass CCoGPIOImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoGPIOImpl = class
    class function Create: ICoGPIOImpl;
    class function CreateRemote(const MachineName: string): ICoGPIOImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoGPIOImpl
// Help String      : CoGPIOImpl Class
// Default Interface: ICoGPIOImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoGPIOImplProperties= class;
{$ENDIF}
  TCCoGPIOImpl = class(TOleServer)
  private
    FIntf: ICoGPIOImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoGPIOImplProperties;
    function GetServerProperties: TCCoGPIOImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoGPIOImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoGPIOImpl);
    procedure Disconnect; override;
    procedure CreateGPIOImplB(const COM_usbInt: ICoUSBInterface; COM_numPins: Integer);
    function getTotalGPIOBits: Integer;
    function getDirectionBits: ICoBitSet;
    function getMuxBits: ICoBitSet;
    function getValueBits: ICoBitSet;
    function getValueBit(COM_bitNumber: Integer): Integer;
    function getNumberOfPins: Integer;
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet);
    procedure setValueAllBits(const COM_bitSet: ICoBitSet);
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet);
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool);
    procedure setDirectionBitmask(COM_value: Smallint);
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool);
    procedure setMuxBitmask(COM_value: Smallint);
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool);
    procedure setValueBitmask(COM_value: Smallint);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoGPIOImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoGPIOImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoGPIOImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoGPIOImplProperties = class(TPersistent)
  private
    FServer:    TCCoGPIOImpl;
    function    GetDefaultInterface: ICoGPIOImpl;
    constructor Create(AServer: TCCoGPIOImpl);
  protected
  public
    property DefaultInterface: ICoGPIOImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoGatingErrorProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoGatingErrorProvider exposed by              
// the CoClass CCoGatingErrorProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoGatingErrorProvider = class
    class function Create: ICoGatingErrorProvider;
    class function CreateRemote(const MachineName: string): ICoGatingErrorProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoGatingErrorProvider
// Help String      : CoGatingErrorProvider Class
// Default Interface: ICoGatingErrorProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoGatingErrorProviderProperties= class;
{$ENDIF}
  TCCoGatingErrorProvider = class(TOleServer)
  private
    FIntf: ICoGatingErrorProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoGatingErrorProviderProperties;
    function GetServerProperties: TCCoGatingErrorProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoGatingErrorProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoGatingErrorProvider);
    procedure Disconnect; override;
    procedure CreateGatingErrorProvider;
    function getGatingModeIntegrationTime: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoGatingErrorProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoGatingErrorProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoGatingErrorProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoGatingErrorProviderProperties = class(TPersistent)
  private
    FServer:    TCCoGatingErrorProvider;
    function    GetDefaultInterface: ICoGatingErrorProvider;
    constructor Create(AServer: TCCoGatingErrorProvider);
  protected
  public
    property DefaultInterface: ICoGatingErrorProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoGatingErrorProviderImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoGatingErrorProviderImpl exposed by              
// the CoClass CCoGatingErrorProviderImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoGatingErrorProviderImpl = class
    class function Create: ICoGatingErrorProviderImpl;
    class function CreateRemote(const MachineName: string): ICoGatingErrorProviderImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoGatingErrorProviderImpl
// Help String      : CoGatingErrorProviderImpl Class
// Default Interface: ICoGatingErrorProviderImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoGatingErrorProviderImplProperties= class;
{$ENDIF}
  TCCoGatingErrorProviderImpl = class(TOleServer)
  private
    FIntf: ICoGatingErrorProviderImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoGatingErrorProviderImplProperties;
    function GetServerProperties: TCCoGatingErrorProviderImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoGatingErrorProviderImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoGatingErrorProviderImpl);
    procedure Disconnect; override;
    procedure CreateGatingErrorProviderImplB(const COM_usbInt: ICoUSBInterface; 
                                             const COM_spectrometer: ICoSpectrometer);
    procedure checkIntegrationTime(COM_intTime: Integer);
    procedure checkTriggerNotification(COM_mode: Integer);
    function isInGatedMode: WordBool;
    procedure addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
    procedure removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoGatingErrorProviderImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoGatingErrorProviderImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoGatingErrorProviderImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoGatingErrorProviderImplProperties = class(TPersistent)
  private
    FServer:    TCCoGatingErrorProviderImpl;
    function    GetDefaultInterface: ICoGatingErrorProviderImpl;
    constructor Create(AServer: TCCoGatingErrorProviderImpl);
  protected
  public
    property DefaultInterface: ICoGatingErrorProviderImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoHR2000 provides a Create and CreateRemote method to          
// create instances of the default interface ICoHR2000 exposed by              
// the CoClass CCoHR2000. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoHR2000 = class
    class function Create: ICoHR2000;
    class function CreateRemote(const MachineName: string): ICoHR2000;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoHR2000
// Help String      : CoHR2000 Class
// Default Interface: ICoHR2000
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoHR2000Properties= class;
{$ENDIF}
  TCCoHR2000 = class(TOleServer)
  private
    FIntf: ICoHR2000;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoHR2000Properties;
    function GetServerProperties: TCCoHR2000Properties;
{$ENDIF}
    function GetDefaultInterface: ICoHR2000;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoHR2000);
    procedure Disconnect; override;
    procedure CreateHR2000;
    procedure CreateHR2000B(COM_i: Integer);
    procedure setEndpoints;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
    procedure openSpectrometer(COM_index: Integer);
    function getGUIFeatures: ICoGUIProviderCollection;
    function getActualIntegrationTime: Integer;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_message: OleVariant): Integer;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
    function isPlugInDetected(COM_id: Integer): WordBool;
    function getPlugIns: ICoSpectrometerPlugInCollection;
    function getNumberOfPlugIns: Integer;
    function initializePlugIns: OleVariant;
    procedure detectPlugIns;
    procedure setExternalTriggerMode(COM_mode: Integer);
    function getExternalTriggerModes: ICoExternalTriggerModeCollection;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getNonlinearityCoefficients: ICoCoefficientsCollection;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_index: Integer): OleVariant;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer);
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer);
    function getStrayLight(COM_index: Integer): Double;
    function isAdvancedVersion: WordBool;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoHR2000 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoHR2000Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoHR2000
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoHR2000Properties = class(TPersistent)
  private
    FServer:    TCCoHR2000;
    function    GetDefaultInterface: ICoHR2000;
    constructor Create(AServer: TCCoHR2000);
  protected
  public
    property DefaultInterface: ICoHR2000 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoHR2000Plus provides a Create and CreateRemote method to          
// create instances of the default interface ICoHR2000Plus exposed by              
// the CoClass CCoHR2000Plus. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoHR2000Plus = class
    class function Create: ICoHR2000Plus;
    class function CreateRemote(const MachineName: string): ICoHR2000Plus;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoHR2000Plus
// Help String      : CoHR2000Plus Class
// Default Interface: ICoHR2000Plus
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoHR2000PlusProperties= class;
{$ENDIF}
  TCCoHR2000Plus = class(TOleServer)
  private
    FIntf: ICoHR2000Plus;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoHR2000PlusProperties;
    function GetServerProperties: TCCoHR2000PlusProperties;
{$ENDIF}
    function GetDefaultInterface: ICoHR2000Plus;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoHR2000Plus);
    procedure Disconnect; override;
    procedure CreateHR2000Plus;
    procedure CreateHR2000PlusB(COM_i: Integer);
    procedure setEndpoints;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
    procedure openSpectrometer(COM_index: Integer);
    function getGUIFeatures: ICoGUIProviderCollection;
    function getStatus: ICoSpectrometerStatus;
    function readIntegrationTime: Integer;
    procedure setStrobeDelay(COM_delay: Integer);
    function toString: WideString;
    function getPlugIns: ICoSpectrometerPlugInCollection;
    function getNumberOfPlugIns: Integer;
    function isPlugInDetected(COM_id: Integer): WordBool;
    function initializePlugIns: OleVariant;
    procedure detectPlugIns;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
    function getPSOCVersion: WideString;
    function getFPGAFirmwareVersion: WideString;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer);
    function getContinuousStrobeDelayMinimum: Integer;
    function getContinuousStrobeDelayMaximum: Integer;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer);
    function getIntegrationTimeBaseClock: Integer;
    function getIntegrationClockTimer: Integer;
    function getAdvancedIntegrationTimeMinimum: Integer;
    function getAdvancedIntegrationTimeMaximum: Integer;
    function getAdvancedIntegrationTimeIncrement: Integer;
    procedure setExternalTriggerMode(COM_mode: Integer);
    function getExternalTriggerModes: ICoExternalTriggerModeCollection;
    procedure setShutterClock(COM_value: Integer);
    function getShutterClock: Integer;
    procedure setSingleStrobeLow(COM_value: Integer);
    procedure setSingleStrobeHigh(COM_value: Integer);
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double;
    function getSingleStrobeLow: Integer;
    function getSingleStrobeHigh: Integer;
    function getSingleStrobeMinimum: Integer;
    function getSingleStrobeMaximum: Integer;
    function getSingleStrobeIncrement: Integer;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet);
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet);
    procedure setValueAllBits(const COM_bitSet: ICoBitSet);
    procedure setDirectionBitmask(COM_bitmask: Smallint);
    procedure setMuxBitmask(COM_bitmask: Smallint);
    procedure setValueBitmask(COM_bitmask: Smallint);
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool);
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool);
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool);
    function getTotalGPIOBits: Integer;
    function getDirectionBits: ICoBitSet;
    function getMuxBits: ICoBitSet;
    function getValueBit(COM_bitNumber: Integer): Integer;
    function getValueBits: ICoBitSet;
    function getNumberOfPins: Integer;
    function getBoardTemperatureCelsius: Double;
    function getVoltageIn: Double;
    procedure setDACCounts(COM_counts: Integer; COM_channelIndex: Integer);
    function analogOutCountsToVolts(COM_counts: Integer): Double;
    function getDACMinimum: Integer;
    function getDACMaximum: Integer;
    function getDACIncrement: Integer;
    function isDACPresent: WordBool;
    function getDACPins: Integer;
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant);
    procedure setMasterClockDivisor(COM_value: Integer);
    function getMasterClockDivisor: Integer;
    procedure setExternalTriggerDelay(COM_counts: Integer);
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double;
    function getExternalTriggerDelayMinimum: Integer;
    function getExternalTriggerDelayMaximum: Integer;
    function getExternalTriggerDelayIncrement: Integer;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getNonlinearityCoefficients: ICoCoefficientsCollection;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_index: Integer): OleVariant;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer);
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer);
    function getStrayLight(COM_index: Integer): Double;
    function isAdvancedVersion: WordBool;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoHR2000Plus read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoHR2000PlusProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoHR2000Plus
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoHR2000PlusProperties = class(TPersistent)
  private
    FServer:    TCCoHR2000Plus;
    function    GetDefaultInterface: ICoHR2000Plus;
    constructor Create(AServer: TCCoHR2000Plus);
  protected
  public
    property DefaultInterface: ICoHR2000Plus read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoHR2000PlusStatus provides a Create and CreateRemote method to          
// create instances of the default interface ICoHR2000PlusStatus exposed by              
// the CoClass CCoHR2000PlusStatus. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoHR2000PlusStatus = class
    class function Create: ICoHR2000PlusStatus;
    class function CreateRemote(const MachineName: string): ICoHR2000PlusStatus;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoHR2000PlusStatus
// Help String      : CoHR2000PlusStatus Class
// Default Interface: ICoHR2000PlusStatus
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoHR2000PlusStatusProperties= class;
{$ENDIF}
  TCCoHR2000PlusStatus = class(TOleServer)
  private
    FIntf: ICoHR2000PlusStatus;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoHR2000PlusStatusProperties;
    function GetServerProperties: TCCoHR2000PlusStatusProperties;
{$ENDIF}
    function GetDefaultInterface: ICoHR2000PlusStatus;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoHR2000PlusStatus);
    procedure Disconnect; override;
    procedure CreateHR2000PlusStatus;
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoHR2000PlusStatus read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoHR2000PlusStatusProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoHR2000PlusStatus
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoHR2000PlusStatusProperties = class(TPersistent)
  private
    FServer:    TCCoHR2000PlusStatus;
    function    GetDefaultInterface: ICoHR2000PlusStatus;
    constructor Create(AServer: TCCoHR2000PlusStatus);
  protected
  public
    property DefaultInterface: ICoHR2000PlusStatus read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSBFeature provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSBFeature exposed by              
// the CoClass CCoUSBFeature. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSBFeature = class
    class function Create: ICoUSBFeature;
    class function CreateRemote(const MachineName: string): ICoUSBFeature;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSBFeature
// Help String      : CoUSBFeature Class
// Default Interface: ICoUSBFeature
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSBFeatureProperties= class;
{$ENDIF}
  TCCoUSBFeature = class(TOleServer)
  private
    FIntf: ICoUSBFeature;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSBFeatureProperties;
    function GetServerProperties: TCCoUSBFeatureProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSBFeature;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSBFeature);
    procedure Disconnect; override;
    procedure CreateUSBFeatureB(const COM_usbInt: ICoUSBInterface);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSBFeature read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSBFeatureProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSBFeature
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSBFeatureProperties = class(TPersistent)
  private
    FServer:    TCCoUSBFeature;
    function    GetDefaultInterface: ICoUSBFeature;
    constructor Create(AServer: TCCoUSBFeature);
  protected
  public
    property DefaultInterface: ICoUSBFeature read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSHACoefficients provides a Create and CreateRemote method to          
// create instances of the default interface ICoSHACoefficients exposed by              
// the CoClass CCoSHACoefficients. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSHACoefficients = class
    class function Create: ICoSHACoefficients;
    class function CreateRemote(const MachineName: string): ICoSHACoefficients;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSHACoefficients
// Help String      : CoSHACoefficients Class
// Default Interface: ICoSHACoefficients
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSHACoefficientsProperties= class;
{$ENDIF}
  TCCoSHACoefficients = class(TOleServer)
  private
    FIntf: ICoSHACoefficients;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSHACoefficientsProperties;
    function GetServerProperties: TCCoSHACoefficientsProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSHACoefficients;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSHACoefficients);
    procedure Disconnect; override;
    procedure CreateSHACoefficients;
    procedure setLenIntercept(COM_intercept: Double);
    function getLenIntercept: Double;
    procedure setLenFirst(COM_first: Double);
    function getLenFirst: Double;
    procedure setLenSecond(COM_second: Double);
    function getLenSecond: Double;
    procedure setIntercept(COM_intercept: Double);
    function getIntercept: Double;
    procedure setFirst(COM_first: Double);
    function getFirst: Double;
    procedure setSecond(COM_second: Double);
    function getSecond: Double;
    procedure setDefaultIntercept(COM_intercept: Double);
    function getDefaultIntercept: Double;
    procedure setDefaultFirst(COM_first: Double);
    function getDefaultFirst: Double;
    procedure setDefaultSecond(COM_second: Double);
    function getDefaultSecond: Double;
    procedure setPivotWavelength(COM_wl: Double);
    function getPivotWavelength: Double;
    procedure setPhaseIntercept(COM_intercept: Double);
    function getPhaseIntercept: Double;
    procedure setPhaseFirst(COM_first: Double);
    function getPhaseFirst: Double;
    procedure setPhaseSecond(COM_second: Double);
    function getPhaseSecond: Double;
    procedure setPhaseThird(COM_third: Double);
    function getPhaseThird: Double;
    procedure setPhaseRangeStart(COM_start: Double);
    function getPhaseRangeStart: Double;
    procedure setPhaseRangeEnd(COM_end: Double);
    function getPhaseRangeEnd: Double;
    procedure setPhaseInterceptOut(COM_intercept: Double);
    function getPhaseInterceptOut: Double;
    procedure setPhaseFirstOut(COM_first: Double);
    function getPhaseFirstOut: Double;
    procedure setPhaseSecondOut(COM_second: Double);
    function getPhaseSecondOut: Double;
    procedure setPhaseThirdOut(COM_third: Double);
    function getPhaseThirdOut: Double;
    procedure setCalibrateWLStart(COM_start: Double);
    function getCalibrateWLStart: Double;
    procedure setCalibrateWLEnd(COM_end: Double);
    function getCalibrateWLEnd: Double;
    procedure setNumberOfPhasePoints(COM_points: Integer);
    function getNumberOfPhasePoints: Integer;
    procedure setPhaseStart(COM_start: Double);
    function getPhaseStart: Double;
    procedure setPhaseEnd(COM_end: Double);
    function getPhaseEnd: Double;
    procedure setPhaseStep(COM_step: Double);
    function getPhaseStep: Double;
    procedure setPhasePoints(COM_points: OleVariant);
    function getPhasePoints: OleVariant;
    procedure setScanDirection(COM_direction: Integer);
    function getScanDirection: Integer;
    procedure setFinesse(COM_finesse: Double);
    function getFinesse: Double;
    procedure setMirrorWLLow(COM_wl: Double);
    function getMirrorWLLow: Double;
    procedure setMirrorWLHigh(COM_wl: Double);
    function getMirrorWLHigh: Double;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSHACoefficients read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSHACoefficientsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSHACoefficients
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSHACoefficientsProperties = class(TPersistent)
  private
    FServer:    TCCoSHACoefficients;
    function    GetDefaultInterface: ICoSHACoefficients;
    constructor Create(AServer: TCCoSHACoefficients);
  protected
  public
    property DefaultInterface: ICoSHACoefficients read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSHAChannel provides a Create and CreateRemote method to          
// create instances of the default interface ICoSHAChannel exposed by              
// the CoClass CCoSHAChannel. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSHAChannel = class
    class function Create: ICoSHAChannel;
    class function CreateRemote(const MachineName: string): ICoSHAChannel;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSHAChannel
// Help String      : CoSHAChannel Class
// Default Interface: ICoSHAChannel
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSHAChannelProperties= class;
{$ENDIF}
  TCCoSHAChannel = class(TOleServer)
  private
    FIntf: ICoSHAChannel;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSHAChannelProperties;
    function GetServerProperties: TCCoSHAChannelProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSHAChannel;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSHAChannel);
    procedure Disconnect; override;
    procedure CreateSHAChannelB(const COM_spectrometer: ICoSpectrometer; 
                                const COM_coefficients: ICoCoefficients; COM_index: Integer);
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
    function getSpectrumB: ICoSpectrum;
    function findPeak(COM_data: OleVariant; COM_pos: Integer): Double;
    procedure sortPeaks(COM_length: Integer);
    function getLength(COM_voltage: Double): Double;
    function getPhase(COM_wl: Double): Double;
    function getMaxNumberOfCounts: Integer;
    procedure getSHACoefficientsFromDevice;
    function getConstant(COM_slot: Integer): WideString;
    procedure saveSHACoefficients;
    function saveConstant(COM_slot: Integer; const COM_str: WideString): Integer;
    function getPixel(COM_wl: Double): Integer;
    function calcPixel(COM_wl: Double): Integer;
    function getWavelength(COM_pixel: Integer): Double;
    function getWavelengthB(COM_pixel: Double): Double;
    function getAllWavelengths: OleVariant;
    function getSHACoefficients: ICoSHACoefficients;
    function getNumberOfVoltageSteps: Integer;
    function getNumberOfSpectrometerPixels: Integer;
    function getSHASerialNumber: WideString;
    function getSHAFirmwareVersion: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSHAChannel read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSHAChannelProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSHAChannel
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSHAChannelProperties = class(TPersistent)
  private
    FServer:    TCCoSHAChannel;
    function    GetDefaultInterface: ICoSHAChannel;
    constructor Create(AServer: TCCoSHAChannel);
  protected
  public
    property DefaultInterface: ICoSHAChannel read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoHR4000 provides a Create and CreateRemote method to          
// create instances of the default interface ICoHR4000 exposed by              
// the CoClass CCoHR4000. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoHR4000 = class
    class function Create: ICoHR4000;
    class function CreateRemote(const MachineName: string): ICoHR4000;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoHR4000
// Help String      : CoHR4000 Class
// Default Interface: ICoHR4000
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoHR4000Properties= class;
{$ENDIF}
  TCCoHR4000 = class(TOleServer)
  private
    FIntf: ICoHR4000;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoHR4000Properties;
    function GetServerProperties: TCCoHR4000Properties;
{$ENDIF}
    function GetDefaultInterface: ICoHR4000;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoHR4000);
    procedure Disconnect; override;
    procedure CreateHR4000;
    procedure CreateHR4000B(COM_i: Integer);
    procedure setEndpoints;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
    procedure openSpectrometer(COM_index: Integer);
    function getFeatureControllerGPIO: ICoUSBFeature;
    function getGUIFeatures: ICoGUIProviderCollection;
    procedure readSpectrum(COM_data: OleVariant);
    procedure readSpectrumB;
    function readIntegrationTime: Integer;
    procedure setIntegrationTime(COM_intTime: Integer);
    function getGatingModeIntegrationTime: Integer;
    procedure addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
    procedure removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
    function getName: WideString;
    function isSHAEnabled: WordBool;
    procedure enableSHA(COM_enable: WordBool);
    procedure setStrobeDelay(COM_delay: Integer);
    function toString: WideString;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer);
    function getIntegrationTimeBaseClock: Integer;
    function getIntegrationClockTimer: Integer;
    function getAdvancedIntegrationTimeMinimum: Integer;
    function getAdvancedIntegrationTimeMaximum: Integer;
    function getAdvancedIntegrationTimeIncrement: Integer;
    function getPSOCVersion: WideString;
    function getFPGAFirmwareVersion: WideString;
    function getVoltageIn: Double;
    procedure setDACCounts(COM_counts: Integer; COM_index: Integer);
    function analogOutCountsToVolts(COM_counts: Integer): Double;
    function getDACMinimum: Integer;
    function getDACMaximum: Integer;
    function getDACIncrement: Integer;
    function isDACPresent: WordBool;
    function getDACPins: Integer;
    function getBoardTemperatureCelsius: Double;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer);
    function getContinuousStrobeDelayMinimum: Integer;
    function getContinuousStrobeDelayMaximum: Integer;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double;
    procedure setExternalTriggerDelay(COM_counts: Integer);
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double;
    function getExternalTriggerDelayMinimum: Integer;
    function getExternalTriggerDelayMaximum: Integer;
    function getExternalTriggerDelayIncrement: Integer;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet);
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet);
    procedure setValueAllBits(const COM_bitSet: ICoBitSet);
    procedure setDirectionBitmask(COM_bitmask: Smallint);
    procedure setMuxBitmask(COM_bitmask: Smallint);
    procedure setValueBitmask(COM_bitmask: Smallint);
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool);
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool);
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool);
    function getTotalGPIOBits: Integer;
    function getDirectionBits: ICoBitSet;
    function getMuxBits: ICoBitSet;
    function getValueBit(COM_bitNumber: Integer): Integer;
    function getValueBits: ICoBitSet;
    function getNumberOfPins: Integer;
    procedure setExternalTriggerMode(COM_mode: Integer);
    function getExternalTriggerModes: ICoExternalTriggerModeCollection;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
    function setSHAI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer;
    function getSHAI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant);
    procedure setMasterClockDivisor(COM_value: Integer);
    function getMasterClockDivisor: Integer;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getNonlinearityCoefficients: ICoCoefficientsCollection;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
    function getPlugIns: ICoSpectrometerPlugInCollection;
    function getNumberOfPlugIns: Integer;
    function isPlugInDetected(COM_id: Integer): WordBool;
    function initializePlugIns: OleVariant;
    procedure detectPlugIns;
    function isHyperAdapterPresent: WordBool;
    procedure initSHA(const COM_channel: ICoSHAChannel);
    function setHyperAdapterDAC(COM_voltage: Double): Integer;
    function readHyperAdapterEEPROM(COM_data: OleVariant; COM_start: Integer; COM_length: Integer): Integer;
    function writeHyperAdapterEEPROM(COM_data: OleVariant; COM_start: Integer; COM_length: Integer): Integer;
    procedure calibrate;
    function getCalibrationTime: Double;
    procedure restoreCalibration;
    function getSHAChannel: ICoSHAChannel;
    procedure setShutterClock(COM_value: Integer);
    function getShutterClock: Integer;
    procedure setSingleStrobeLow(COM_value: Integer);
    procedure setSingleStrobeHigh(COM_value: Integer);
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double;
    function getSingleStrobeLow: Integer;
    function getSingleStrobeHigh: Integer;
    function getSingleStrobeMinimum: Integer;
    function getSingleStrobeMaximum: Integer;
    function getSingleStrobeIncrement: Integer;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
    function getStatus: ICoSpectrometerStatus;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer);
    function getStrayLight(COM_index: Integer): Double;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_index: Integer): OleVariant;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer);
    function isAdvancedVersion: WordBool;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoHR4000 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoHR4000Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoHR4000
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoHR4000Properties = class(TPersistent)
  private
    FServer:    TCCoHR4000;
    function    GetDefaultInterface: ICoHR4000;
    constructor Create(AServer: TCCoHR4000);
  protected
  public
    property DefaultInterface: ICoHR4000 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoHR4000Status provides a Create and CreateRemote method to          
// create instances of the default interface ICoHR4000Status exposed by              
// the CoClass CCoHR4000Status. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoHR4000Status = class
    class function Create: ICoHR4000Status;
    class function CreateRemote(const MachineName: string): ICoHR4000Status;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoHR4000Status
// Help String      : CoHR4000Status Class
// Default Interface: ICoHR4000Status
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoHR4000StatusProperties= class;
{$ENDIF}
  TCCoHR4000Status = class(TOleServer)
  private
    FIntf: ICoHR4000Status;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoHR4000StatusProperties;
    function GetServerProperties: TCCoHR4000StatusProperties;
{$ENDIF}
    function GetDefaultInterface: ICoHR4000Status;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoHR4000Status);
    procedure Disconnect; override;
    procedure CreateHR4000Status;
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoHR4000Status read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoHR4000StatusProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoHR4000Status
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoHR4000StatusProperties = class(TPersistent)
  private
    FServer:    TCCoHR4000Status;
    function    GetDefaultInterface: ICoHR4000Status;
    constructor Create(AServer: TCCoHR4000Status);
  protected
  public
    property DefaultInterface: ICoHR4000Status read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoHardwareTrigger provides a Create and CreateRemote method to          
// create instances of the default interface ICoHardwareTrigger exposed by              
// the CoClass CCoHardwareTrigger. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoHardwareTrigger = class
    class function Create: ICoHardwareTrigger;
    class function CreateRemote(const MachineName: string): ICoHardwareTrigger;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoHardwareTrigger
// Help String      : CoHardwareTrigger Class
// Default Interface: ICoHardwareTrigger
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoHardwareTriggerProperties= class;
{$ENDIF}
  TCCoHardwareTrigger = class(TOleServer)
  private
    FIntf: ICoHardwareTrigger;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoHardwareTriggerProperties;
    function GetServerProperties: TCCoHardwareTriggerProperties;
{$ENDIF}
    function GetDefaultInterface: ICoHardwareTrigger;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoHardwareTrigger);
    procedure Disconnect; override;
    procedure CreateHardwareTrigger;
    procedure setExternalTriggerMode(COM_param0: Integer);
    function getExternalTriggerModes: ICoExternalTriggerModeCollection;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoHardwareTrigger read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoHardwareTriggerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoHardwareTrigger
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoHardwareTriggerProperties = class(TPersistent)
  private
    FServer:    TCCoHardwareTrigger;
    function    GetDefaultInterface: ICoHardwareTrigger;
    constructor Create(AServer: TCCoHardwareTrigger);
  protected
  public
    property DefaultInterface: ICoHardwareTrigger read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoHardwareTriggerGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoHardwareTriggerGUIProvider exposed by              
// the CoClass CCoHardwareTriggerGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoHardwareTriggerGUIProvider = class
    class function Create: ICoHardwareTriggerGUIProvider;
    class function CreateRemote(const MachineName: string): ICoHardwareTriggerGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoHardwareTriggerGUIProvider
// Help String      : CoHardwareTriggerGUIProvider Class
// Default Interface: ICoHardwareTriggerGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoHardwareTriggerGUIProviderProperties= class;
{$ENDIF}
  TCCoHardwareTriggerGUIProvider = class(TOleServer)
  private
    FIntf: ICoHardwareTriggerGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoHardwareTriggerGUIProviderProperties;
    function GetServerProperties: TCCoHardwareTriggerGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoHardwareTriggerGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoHardwareTriggerGUIProvider);
    procedure Disconnect; override;
    procedure CreateHardwareTriggerGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoHardwareTriggerGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoHardwareTriggerGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoHardwareTriggerGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoHardwareTriggerGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoHardwareTriggerGUIProvider;
    function    GetDefaultInterface: ICoHardwareTriggerGUIProvider;
    constructor Create(AServer: TCCoHardwareTriggerGUIProvider);
  protected
  public
    property DefaultInterface: ICoHardwareTriggerGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoHighGainMode provides a Create and CreateRemote method to          
// create instances of the default interface ICoHighGainMode exposed by              
// the CoClass CCoHighGainMode. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoHighGainMode = class
    class function Create: ICoHighGainMode;
    class function CreateRemote(const MachineName: string): ICoHighGainMode;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoHighGainMode
// Help String      : CoHighGainMode Class
// Default Interface: ICoHighGainMode
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoHighGainModeProperties= class;
{$ENDIF}
  TCCoHighGainMode = class(TOleServer)
  private
    FIntf: ICoHighGainMode;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoHighGainModeProperties;
    function GetServerProperties: TCCoHighGainModeProperties;
{$ENDIF}
    function GetDefaultInterface: ICoHighGainMode;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoHighGainMode);
    procedure Disconnect; override;
    procedure CreateHighGainMode;
    procedure setHighGain(COM_param0: WordBool);
    procedure setHighGainDefault(COM_param0: WordBool);
    function getHighGainDefault: WordBool;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoHighGainMode read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoHighGainModeProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoHighGainMode
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoHighGainModeProperties = class(TPersistent)
  private
    FServer:    TCCoHighGainMode;
    function    GetDefaultInterface: ICoHighGainMode;
    constructor Create(AServer: TCCoHighGainMode);
  protected
  public
    property DefaultInterface: ICoHighGainMode read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoHighGainModeGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoHighGainModeGUIProvider exposed by              
// the CoClass CCoHighGainModeGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoHighGainModeGUIProvider = class
    class function Create: ICoHighGainModeGUIProvider;
    class function CreateRemote(const MachineName: string): ICoHighGainModeGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoHighGainModeGUIProvider
// Help String      : CoHighGainModeGUIProvider Class
// Default Interface: ICoHighGainModeGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoHighGainModeGUIProviderProperties= class;
{$ENDIF}
  TCCoHighGainModeGUIProvider = class(TOleServer)
  private
    FIntf: ICoHighGainModeGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoHighGainModeGUIProviderProperties;
    function GetServerProperties: TCCoHighGainModeGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoHighGainModeGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoHighGainModeGUIProvider);
    procedure Disconnect; override;
    procedure CreateHighGainModeGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoHighGainModeGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoHighGainModeGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoHighGainModeGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoHighGainModeGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoHighGainModeGUIProvider;
    function    GetDefaultInterface: ICoHighGainModeGUIProvider;
    constructor Create(AServer: TCCoHighGainModeGUIProvider);
  protected
  public
    property DefaultInterface: ICoHighGainModeGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoHighGainModeImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoHighGainModeImpl exposed by              
// the CoClass CCoHighGainModeImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoHighGainModeImpl = class
    class function Create: ICoHighGainModeImpl;
    class function CreateRemote(const MachineName: string): ICoHighGainModeImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoHighGainModeImpl
// Help String      : CoHighGainModeImpl Class
// Default Interface: ICoHighGainModeImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoHighGainModeImplProperties= class;
{$ENDIF}
  TCCoHighGainModeImpl = class(TOleServer)
  private
    FIntf: ICoHighGainModeImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoHighGainModeImplProperties;
    function GetServerProperties: TCCoHighGainModeImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoHighGainModeImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoHighGainModeImpl);
    procedure Disconnect; override;
    procedure CreateHighGainModeImplB(const COM_usb: ICoUSBInterface; 
                                      const COM_spec: ICoSpectrometer);
    procedure setHighGain(COM_gain: WordBool);
    procedure setHighGainDefault(COM_gain: WordBool);
    function getHighGainDefault: WordBool;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoHighGainModeImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoHighGainModeImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoHighGainModeImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoHighGainModeImplProperties = class(TPersistent)
  private
    FServer:    TCCoHighGainModeImpl;
    function    GetDefaultInterface: ICoHighGainModeImpl;
    constructor Create(AServer: TCCoHighGainModeImpl);
  protected
  public
    property DefaultInterface: ICoHighGainModeImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoHighResTimeStamp provides a Create and CreateRemote method to          
// create instances of the default interface ICoHighResTimeStamp exposed by              
// the CoClass CCoHighResTimeStamp. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoHighResTimeStamp = class
    class function Create: ICoHighResTimeStamp;
    class function CreateRemote(const MachineName: string): ICoHighResTimeStamp;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoHighResTimeStamp
// Help String      : CoHighResTimeStamp Class
// Default Interface: ICoHighResTimeStamp
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoHighResTimeStampProperties= class;
{$ENDIF}
  TCCoHighResTimeStamp = class(TOleServer)
  private
    FIntf: ICoHighResTimeStamp;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoHighResTimeStampProperties;
    function GetServerProperties: TCCoHighResTimeStampProperties;
{$ENDIF}
    function GetDefaultInterface: ICoHighResTimeStamp;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoHighResTimeStamp);
    procedure Disconnect; override;
    procedure CreateHighResTimeStamp;
    procedure CreateHighResTimeStampB(const COM_that: ICoHighResTimeStamp);
    procedure CreateHighResTimeStampC(COM_millis: Integer; COM_nanos: Double);
    procedure CreateHighResTimeStampD(const COM_that: ICoHighResTimeStamp; 
                                      COM_nanosIntoFuture: Double);
    function getTimeMillis: Integer;
    function getNanoTimeDeltaSince(const COM_then: ICoHighResTimeStamp): Double;
    function getMicroTimeDeltaSince(const COM_then: ICoHighResTimeStamp): Double;
    function getMilliTimeDeltaSince(const COM_then: ICoHighResTimeStamp): Double;
    function getSecondsTimeDeltaSince(const COM_then: ICoHighResTimeStamp): Double;
    function getNanoTimeDelta(const COM_before: ICoHighResTimeStamp; 
                              const COM_after: ICoHighResTimeStamp): Double;
    function getMicroTimeDelta(const COM_before: ICoHighResTimeStamp; 
                               const COM_after: ICoHighResTimeStamp): Double;
    function getMilliTimeDelta(const COM_before: ICoHighResTimeStamp; 
                               const COM_after: ICoHighResTimeStamp): Double;
    function getSecondsTimeDelta(const COM_before: ICoHighResTimeStamp; 
                                 const COM_after: ICoHighResTimeStamp): Double;
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoHighResTimeStamp read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoHighResTimeStampProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoHighResTimeStamp
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoHighResTimeStampProperties = class(TPersistent)
  private
    FServer:    TCCoHighResTimeStamp;
    function    GetDefaultInterface: ICoHighResTimeStamp;
    constructor Create(AServer: TCCoHighResTimeStamp);
  protected
  public
    property DefaultInterface: ICoHighResTimeStamp read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoHighResTiming provides a Create and CreateRemote method to          
// create instances of the default interface ICoHighResTiming exposed by              
// the CoClass CCoHighResTiming. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoHighResTiming = class
    class function Create: ICoHighResTiming;
    class function CreateRemote(const MachineName: string): ICoHighResTiming;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoHighResTiming
// Help String      : CoHighResTiming Class
// Default Interface: ICoHighResTiming
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoHighResTimingProperties= class;
{$ENDIF}
  TCCoHighResTiming = class(TOleServer)
  private
    FIntf: ICoHighResTiming;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoHighResTimingProperties;
    function GetServerProperties: TCCoHighResTimingProperties;
{$ENDIF}
    function GetDefaultInterface: ICoHighResTiming;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoHighResTiming);
    procedure Disconnect; override;
    function getTicksPerSecond: Integer;
    function getTickPeriod: Double;
    procedure setTimeZero;
    function getTicks: Integer;
    function getTimeInSeconds: Double;
    function getTimeInMilliSeconds: Double;
    function getTimeInMicroSeconds: Double;
    function getTimeInNanoSeconds: Double;
    procedure CreateHighResTiming;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoHighResTiming read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoHighResTimingProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoHighResTiming
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoHighResTimingProperties = class(TPersistent)
  private
    FServer:    TCCoHighResTiming;
    function    GetDefaultInterface: ICoHighResTiming;
    constructor Create(AServer: TCCoHighResTiming);
  protected
  public
    property DefaultInterface: ICoHighResTiming read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoI2CBus provides a Create and CreateRemote method to          
// create instances of the default interface ICoI2CBus exposed by              
// the CoClass CCoI2CBus. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoI2CBus = class
    class function Create: ICoI2CBus;
    class function CreateRemote(const MachineName: string): ICoI2CBus;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoI2CBus
// Help String      : CoI2CBus Class
// Default Interface: ICoI2CBus
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoI2CBusProperties= class;
{$ENDIF}
  TCCoI2CBus = class(TOleServer)
  private
    FIntf: ICoI2CBus;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoI2CBusProperties;
    function GetServerProperties: TCCoI2CBusProperties;
{$ENDIF}
    function GetDefaultInterface: ICoI2CBus;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoI2CBus);
    procedure Disconnect; override;
    procedure CreateI2CBus;
    function setI2CBytes(COM_param0: Shortint; COM_param1: Shortint; COM_param2: OleVariant): Integer;
    function getI2CBytes(COM_param0: Shortint; COM_param1: Shortint): OleVariant;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoI2CBus read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoI2CBusProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoI2CBus
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoI2CBusProperties = class(TPersistent)
  private
    FServer:    TCCoI2CBus;
    function    GetDefaultInterface: ICoI2CBus;
    constructor Create(AServer: TCCoI2CBus);
  protected
  public
    property DefaultInterface: ICoI2CBus read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoI2CBusGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoI2CBusGUIProvider exposed by              
// the CoClass CCoI2CBusGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoI2CBusGUIProvider = class
    class function Create: ICoI2CBusGUIProvider;
    class function CreateRemote(const MachineName: string): ICoI2CBusGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoI2CBusGUIProvider
// Help String      : CoI2CBusGUIProvider Class
// Default Interface: ICoI2CBusGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoI2CBusGUIProviderProperties= class;
{$ENDIF}
  TCCoI2CBusGUIProvider = class(TOleServer)
  private
    FIntf: ICoI2CBusGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoI2CBusGUIProviderProperties;
    function GetServerProperties: TCCoI2CBusGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoI2CBusGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoI2CBusGUIProvider);
    procedure Disconnect; override;
    procedure CreateI2CBusGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoI2CBusGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoI2CBusGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoI2CBusGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoI2CBusGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoI2CBusGUIProvider;
    function    GetDefaultInterface: ICoI2CBusGUIProvider;
    constructor Create(AServer: TCCoI2CBusGUIProvider);
  protected
  public
    property DefaultInterface: ICoI2CBusGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoI2CBusImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoI2CBusImpl exposed by              
// the CoClass CCoI2CBusImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoI2CBusImpl = class
    class function Create: ICoI2CBusImpl;
    class function CreateRemote(const MachineName: string): ICoI2CBusImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoI2CBusImpl
// Help String      : CoI2CBusImpl Class
// Default Interface: ICoI2CBusImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoI2CBusImplProperties= class;
{$ENDIF}
  TCCoI2CBusImpl = class(TOleServer)
  private
    FIntf: ICoI2CBusImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoI2CBusImplProperties;
    function GetServerProperties: TCCoI2CBusImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoI2CBusImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoI2CBusImpl);
    procedure Disconnect; override;
    procedure CreateI2CBusImplB(const COM_usbInt: ICoUSBInterface);
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoI2CBusImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoI2CBusImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoI2CBusImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoI2CBusImplProperties = class(TPersistent)
  private
    FServer:    TCCoI2CBusImpl;
    function    GetDefaultInterface: ICoI2CBusImpl;
    constructor Create(AServer: TCCoI2CBusImpl);
  protected
  public
    property DefaultInterface: ICoI2CBusImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoI2CBusImplFPGA provides a Create and CreateRemote method to          
// create instances of the default interface ICoI2CBusImplFPGA exposed by              
// the CoClass CCoI2CBusImplFPGA. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoI2CBusImplFPGA = class
    class function Create: ICoI2CBusImplFPGA;
    class function CreateRemote(const MachineName: string): ICoI2CBusImplFPGA;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoI2CBusImplFPGA
// Help String      : CoI2CBusImplFPGA Class
// Default Interface: ICoI2CBusImplFPGA
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoI2CBusImplFPGAProperties= class;
{$ENDIF}
  TCCoI2CBusImplFPGA = class(TOleServer)
  private
    FIntf: ICoI2CBusImplFPGA;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoI2CBusImplFPGAProperties;
    function GetServerProperties: TCCoI2CBusImplFPGAProperties;
{$ENDIF}
    function GetDefaultInterface: ICoI2CBusImplFPGA;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoI2CBusImplFPGA);
    procedure Disconnect; override;
    procedure CreateI2CBusImplFPGAB(const COM_usb: ICoUSBInterface);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoI2CBusImplFPGA read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoI2CBusImplFPGAProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoI2CBusImplFPGA
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoI2CBusImplFPGAProperties = class(TPersistent)
  private
    FServer:    TCCoI2CBusImplFPGA;
    function    GetDefaultInterface: ICoI2CBusImplFPGA;
    constructor Create(AServer: TCCoI2CBusImplFPGA);
  protected
  public
    property DefaultInterface: ICoI2CBusImplFPGA read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoI2CBusImplNonFPGA provides a Create and CreateRemote method to          
// create instances of the default interface ICoI2CBusImplNonFPGA exposed by              
// the CoClass CCoI2CBusImplNonFPGA. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoI2CBusImplNonFPGA = class
    class function Create: ICoI2CBusImplNonFPGA;
    class function CreateRemote(const MachineName: string): ICoI2CBusImplNonFPGA;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoI2CBusImplNonFPGA
// Help String      : CoI2CBusImplNonFPGA Class
// Default Interface: ICoI2CBusImplNonFPGA
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoI2CBusImplNonFPGAProperties= class;
{$ENDIF}
  TCCoI2CBusImplNonFPGA = class(TOleServer)
  private
    FIntf: ICoI2CBusImplNonFPGA;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoI2CBusImplNonFPGAProperties;
    function GetServerProperties: TCCoI2CBusImplNonFPGAProperties;
{$ENDIF}
    function GetDefaultInterface: ICoI2CBusImplNonFPGA;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoI2CBusImplNonFPGA);
    procedure Disconnect; override;
    procedure CreateI2CBusImplNonFPGAB(const COM_usbInt: ICoUSBInterface);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoI2CBusImplNonFPGA read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoI2CBusImplNonFPGAProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoI2CBusImplNonFPGA
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoI2CBusImplNonFPGAProperties = class(TPersistent)
  private
    FServer:    TCCoI2CBusImplNonFPGA;
    function    GetDefaultInterface: ICoI2CBusImplNonFPGA;
    constructor Create(AServer: TCCoI2CBusImplNonFPGA);
  protected
  public
    property DefaultInterface: ICoI2CBusImplNonFPGA read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoI2CBusImpl_SHA provides a Create and CreateRemote method to          
// create instances of the default interface ICoI2CBusImpl_SHA exposed by              
// the CoClass CCoI2CBusImpl_SHA. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoI2CBusImpl_SHA = class
    class function Create: ICoI2CBusImpl_SHA;
    class function CreateRemote(const MachineName: string): ICoI2CBusImpl_SHA;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoI2CBusImpl_SHA
// Help String      : CoI2CBusImpl_SHA Class
// Default Interface: ICoI2CBusImpl_SHA
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoI2CBusImpl_SHAProperties= class;
{$ENDIF}
  TCCoI2CBusImpl_SHA = class(TOleServer)
  private
    FIntf: ICoI2CBusImpl_SHA;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoI2CBusImpl_SHAProperties;
    function GetServerProperties: TCCoI2CBusImpl_SHAProperties;
{$ENDIF}
    function GetDefaultInterface: ICoI2CBusImpl_SHA;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoI2CBusImpl_SHA);
    procedure Disconnect; override;
    procedure CreateI2CBusImpl_SHAB(const COM_usbInt: ICoUSBInterface; 
                                    const COM_spectrometer: ICoSpectrometer);
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoI2CBusImpl_SHA read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoI2CBusImpl_SHAProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoI2CBusImpl_SHA
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoI2CBusImpl_SHAProperties = class(TPersistent)
  private
    FServer:    TCCoI2CBusImpl_SHA;
    function    GetDefaultInterface: ICoI2CBusImpl_SHA;
    constructor Create(AServer: TCCoI2CBusImpl_SHA);
  protected
  public
    property DefaultInterface: ICoI2CBusImpl_SHA read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoIrradianceCalibrationFactor provides a Create and CreateRemote method to          
// create instances of the default interface ICoIrradianceCalibrationFactor exposed by              
// the CoClass CCoIrradianceCalibrationFactor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoIrradianceCalibrationFactor = class
    class function Create: ICoIrradianceCalibrationFactor;
    class function CreateRemote(const MachineName: string): ICoIrradianceCalibrationFactor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoIrradianceCalibrationFactor
// Help String      : CoIrradianceCalibrationFactor Class
// Default Interface: ICoIrradianceCalibrationFactor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoIrradianceCalibrationFactorProperties= class;
{$ENDIF}
  TCCoIrradianceCalibrationFactor = class(TOleServer)
  private
    FIntf: ICoIrradianceCalibrationFactor;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoIrradianceCalibrationFactorProperties;
    function GetServerProperties: TCCoIrradianceCalibrationFactorProperties;
{$ENDIF}
    function GetDefaultInterface: ICoIrradianceCalibrationFactor;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoIrradianceCalibrationFactor);
    procedure Disconnect; override;
    procedure CreateIrradianceCalibrationFactor;
    function getIrradianceCalibrationFactors(COM_param0: Shortint): OleVariant;
    procedure setIrradianceCalibrationFactors(COM_param0: Shortint; COM_param1: OleVariant);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoIrradianceCalibrationFactor read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoIrradianceCalibrationFactorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoIrradianceCalibrationFactor
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoIrradianceCalibrationFactorProperties = class(TPersistent)
  private
    FServer:    TCCoIrradianceCalibrationFactor;
    function    GetDefaultInterface: ICoIrradianceCalibrationFactor;
    constructor Create(AServer: TCCoIrradianceCalibrationFactor);
  protected
  public
    property DefaultInterface: ICoIrradianceCalibrationFactor read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoIrradianceCalibrationFactorGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoIrradianceCalibrationFactorGUIProvider exposed by              
// the CoClass CCoIrradianceCalibrationFactorGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoIrradianceCalibrationFactorGUIProvider = class
    class function Create: ICoIrradianceCalibrationFactorGUIProvider;
    class function CreateRemote(const MachineName: string): ICoIrradianceCalibrationFactorGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoIrradianceCalibrationFactorGUIProvider
// Help String      : CoIrradianceCalibrationFactorGUIProvider Class
// Default Interface: ICoIrradianceCalibrationFactorGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoIrradianceCalibrationFactorGUIProviderProperties= class;
{$ENDIF}
  TCCoIrradianceCalibrationFactorGUIProvider = class(TOleServer)
  private
    FIntf: ICoIrradianceCalibrationFactorGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoIrradianceCalibrationFactorGUIProviderProperties;
    function GetServerProperties: TCCoIrradianceCalibrationFactorGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoIrradianceCalibrationFactorGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoIrradianceCalibrationFactorGUIProvider);
    procedure Disconnect; override;
    procedure CreateIrradianceCalibrationFactorGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoIrradianceCalibrationFactorGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoIrradianceCalibrationFactorGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoIrradianceCalibrationFactorGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoIrradianceCalibrationFactorGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoIrradianceCalibrationFactorGUIProvider;
    function    GetDefaultInterface: ICoIrradianceCalibrationFactorGUIProvider;
    constructor Create(AServer: TCCoIrradianceCalibrationFactorGUIProvider);
  protected
  public
    property DefaultInterface: ICoIrradianceCalibrationFactorGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoIrradianceCalibrationFactorImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoIrradianceCalibrationFactorImpl exposed by              
// the CoClass CCoIrradianceCalibrationFactorImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoIrradianceCalibrationFactorImpl = class
    class function Create: ICoIrradianceCalibrationFactorImpl;
    class function CreateRemote(const MachineName: string): ICoIrradianceCalibrationFactorImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoIrradianceCalibrationFactorImpl
// Help String      : CoIrradianceCalibrationFactorImpl Class
// Default Interface: ICoIrradianceCalibrationFactorImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoIrradianceCalibrationFactorImplProperties= class;
{$ENDIF}
  TCCoIrradianceCalibrationFactorImpl = class(TOleServer)
  private
    FIntf: ICoIrradianceCalibrationFactorImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoIrradianceCalibrationFactorImplProperties;
    function GetServerProperties: TCCoIrradianceCalibrationFactorImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoIrradianceCalibrationFactorImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoIrradianceCalibrationFactorImpl);
    procedure Disconnect; override;
    procedure CreateIrradianceCalibrationFactorImplB(const COM_usbInt: ICoUSBInterface);
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoIrradianceCalibrationFactorImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoIrradianceCalibrationFactorImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoIrradianceCalibrationFactorImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoIrradianceCalibrationFactorImplProperties = class(TPersistent)
  private
    FServer:    TCCoIrradianceCalibrationFactorImpl;
    function    GetDefaultInterface: ICoIrradianceCalibrationFactorImpl;
    constructor Create(AServer: TCCoIrradianceCalibrationFactorImpl);
  protected
  public
    property DefaultInterface: ICoIrradianceCalibrationFactorImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoIrradianceCalibrationFactorImplFPGA provides a Create and CreateRemote method to          
// create instances of the default interface ICoIrradianceCalibrationFactorImplFPGA exposed by              
// the CoClass CCoIrradianceCalibrationFactorImplFPGA. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoIrradianceCalibrationFactorImplFPGA = class
    class function Create: ICoIrradianceCalibrationFactorImplFPGA;
    class function CreateRemote(const MachineName: string): ICoIrradianceCalibrationFactorImplFPGA;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoIrradianceCalibrationFactorImplFPGA
// Help String      : CoIrradianceCalibrationFactorImplFPGA Class
// Default Interface: ICoIrradianceCalibrationFactorImplFPGA
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoIrradianceCalibrationFactorImplFPGAProperties= class;
{$ENDIF}
  TCCoIrradianceCalibrationFactorImplFPGA = class(TOleServer)
  private
    FIntf: ICoIrradianceCalibrationFactorImplFPGA;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoIrradianceCalibrationFactorImplFPGAProperties;
    function GetServerProperties: TCCoIrradianceCalibrationFactorImplFPGAProperties;
{$ENDIF}
    function GetDefaultInterface: ICoIrradianceCalibrationFactorImplFPGA;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoIrradianceCalibrationFactorImplFPGA);
    procedure Disconnect; override;
    procedure CreateIrradianceCalibrationFactorImplFPGAB(const COM_usb: ICoUSBInterface);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoIrradianceCalibrationFactorImplFPGA read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoIrradianceCalibrationFactorImplFPGAProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoIrradianceCalibrationFactorImplFPGA
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoIrradianceCalibrationFactorImplFPGAProperties = class(TPersistent)
  private
    FServer:    TCCoIrradianceCalibrationFactorImplFPGA;
    function    GetDefaultInterface: ICoIrradianceCalibrationFactorImplFPGA;
    constructor Create(AServer: TCCoIrradianceCalibrationFactorImplFPGA);
  protected
  public
    property DefaultInterface: ICoIrradianceCalibrationFactorImplFPGA read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoIrradianceCalibrationFactorImplNonFPGA provides a Create and CreateRemote method to          
// create instances of the default interface ICoIrradianceCalibrationFactorImplNonFPGA exposed by              
// the CoClass CCoIrradianceCalibrationFactorImplNonFPGA. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoIrradianceCalibrationFactorImplNonFPGA = class
    class function Create: ICoIrradianceCalibrationFactorImplNonFPGA;
    class function CreateRemote(const MachineName: string): ICoIrradianceCalibrationFactorImplNonFPGA;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoIrradianceCalibrationFactorImplNonFPGA
// Help String      : CoIrradianceCalibrationFactorImplNonFPGA Class
// Default Interface: ICoIrradianceCalibrationFactorImplNonFPGA
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoIrradianceCalibrationFactorImplNonFPGAProperties= class;
{$ENDIF}
  TCCoIrradianceCalibrationFactorImplNonFPGA = class(TOleServer)
  private
    FIntf: ICoIrradianceCalibrationFactorImplNonFPGA;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoIrradianceCalibrationFactorImplNonFPGAProperties;
    function GetServerProperties: TCCoIrradianceCalibrationFactorImplNonFPGAProperties;
{$ENDIF}
    function GetDefaultInterface: ICoIrradianceCalibrationFactorImplNonFPGA;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoIrradianceCalibrationFactorImplNonFPGA);
    procedure Disconnect; override;
    procedure CreateIrradianceCalibrationFactorImplNonFPGAB(const COM_usb: ICoUSBInterface);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoIrradianceCalibrationFactorImplNonFPGA read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoIrradianceCalibrationFactorImplNonFPGAProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoIrradianceCalibrationFactorImplNonFPGA
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoIrradianceCalibrationFactorImplNonFPGAProperties = class(TPersistent)
  private
    FServer:    TCCoIrradianceCalibrationFactorImplNonFPGA;
    function    GetDefaultInterface: ICoIrradianceCalibrationFactorImplNonFPGA;
    constructor Create(AServer: TCCoIrradianceCalibrationFactorImplNonFPGA);
  protected
  public
    property DefaultInterface: ICoIrradianceCalibrationFactorImplNonFPGA read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoJSocket provides a Create and CreateRemote method to          
// create instances of the default interface ICoJSocket exposed by              
// the CoClass CCoJSocket. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoJSocket = class
    class function Create: ICoJSocket;
    class function CreateRemote(const MachineName: string): ICoJSocket;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoJSocket
// Help String      : CoJSocket Class
// Default Interface: ICoJSocket
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoJSocketProperties= class;
{$ENDIF}
  TCCoJSocket = class(TOleServer)
  private
    FIntf: ICoJSocket;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoJSocketProperties;
    function GetServerProperties: TCCoJSocketProperties;
{$ENDIF}
    function GetDefaultInterface: ICoJSocket;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoJSocket);
    procedure Disconnect; override;
    procedure CreateJSocketB(const COM_hostName: WideString; COM_portNumber: Integer);
    function isClosed: WordBool;
    function isConnected: WordBool;
    function isBound: WordBool;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoJSocket read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoJSocketProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoJSocket
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoJSocketProperties = class(TPersistent)
  private
    FServer:    TCCoJSocket;
    function    GetDefaultInterface: ICoJSocket;
    constructor Create(AServer: TCCoJSocket);
  protected
  public
    property DefaultInterface: ICoJSocket read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoJazNetwork provides a Create and CreateRemote method to          
// create instances of the default interface ICoJazNetwork exposed by              
// the CoClass CCoJazNetwork. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoJazNetwork = class
    class function Create: ICoJazNetwork;
    class function CreateRemote(const MachineName: string): ICoJazNetwork;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoJazNetwork
// Help String      : CoJazNetwork Class
// Default Interface: ICoJazNetwork
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoJazNetworkProperties= class;
{$ENDIF}
  TCCoJazNetwork = class(TOleServer)
  private
    FIntf: ICoJazNetwork;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoJazNetworkProperties;
    function GetServerProperties: TCCoJazNetworkProperties;
{$ENDIF}
    function GetDefaultInterface: ICoJazNetwork;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoJazNetwork);
    procedure Disconnect; override;
    procedure CreateJazNetworkB(COM_i: Integer);
    procedure CreateJazNetworkD(const COM_jSocket: ICoJSocket);
    procedure openSpectrometer(COM_index: Integer);
    function getGUIFeatures: ICoGUIProviderCollection;
    function getSerialNumber: WideString;
    function getFirmwareVersion: WideString;
    procedure closeSpectrometer;
    function getInfo(COM_slot: Integer): WideString;
    function getInfoBytes(COM_slot: Integer): OleVariant;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_index: Integer): OleVariant;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer);
    procedure connectToSource(const COM_address: WideString; COM_port: Integer);
    function isConnected: WordBool;
    function getName: WideString;
    procedure disconnect1;
    procedure setStrobeEnable(COM_strobe: WordBool);
    procedure setIntegrationTime(COM_intTime: Integer);
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
    procedure reconnect;
    procedure setAutonullingConfiguration(const COM_configuration: ICoAutonullingConfiguration);
    procedure setAutonullingScanValue(COM_value: Integer);
    procedure setAutonullingScanStatus(COM_value: Integer);
    procedure writeAutonullingConfigurationToSpectrometer;
    function readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration;
    function getAutonullingScanValue: Integer;
    function getAutonullingScanStatus: Integer;
    function getAutonullingConfiguration: ICoAutonullingConfiguration;
    function getChannelsPresent: OleVariant;
    function isChannelPresent(COM_index: Integer): WordBool;
    procedure setChannelMux(COM_index: Integer);
    procedure setChannelStatus(COM_index: Integer; COM_status: WordBool);
    procedure setDeepWellStatus(COM_status: WordBool);
    procedure setChannelPresent(COM_index: Integer; COM_present: WordBool);
    function isDeepWell: WordBool;
    function isInterpolationEnabled: WordBool;
    procedure setInterpolationEnabled(COM_enabled: WordBool);
    procedure addChannelListener(const COM_listener: ICoMultiChannelListener);
    procedure removeChannelListener(const COM_listener: ICoMultiChannelListener);
    function readNumberOfChannels: Integer;
    procedure writeChannelMux(COM_channel: Integer);
    procedure setPowerUpPOTValues;
    function getPOTValues: OleVariant;
    procedure setPOTValue(COM_pot: Integer; COM_value: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoJazNetwork read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoJazNetworkProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoJazNetwork
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoJazNetworkProperties = class(TPersistent)
  private
    FServer:    TCCoJazNetwork;
    function    GetDefaultInterface: ICoJazNetwork;
    constructor Create(AServer: TCCoJazNetwork);
  protected
  public
    property DefaultInterface: ICoJazNetwork read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoJazStatus provides a Create and CreateRemote method to          
// create instances of the default interface ICoJazStatus exposed by              
// the CoClass CCoJazStatus. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoJazStatus = class
    class function Create: ICoJazStatus;
    class function CreateRemote(const MachineName: string): ICoJazStatus;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoJazStatus
// Help String      : CoJazStatus Class
// Default Interface: ICoJazStatus
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoJazStatusProperties= class;
{$ENDIF}
  TCCoJazStatus = class(TOleServer)
  private
    FIntf: ICoJazStatus;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoJazStatusProperties;
    function GetServerProperties: TCCoJazStatusProperties;
{$ENDIF}
    function GetDefaultInterface: ICoJazStatus;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoJazStatus);
    procedure Disconnect; override;
    procedure CreateJazStatus;
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoJazStatus read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoJazStatusProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoJazStatus
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoJazStatusProperties = class(TPersistent)
  private
    FServer:    TCCoJazStatus;
    function    GetDefaultInterface: ICoJazStatus;
    constructor Create(AServer: TCCoJazStatus);
  protected
  public
    property DefaultInterface: ICoJazStatus read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoJazUSB provides a Create and CreateRemote method to          
// create instances of the default interface ICoJazUSB exposed by              
// the CoClass CCoJazUSB. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoJazUSB = class
    class function Create: ICoJazUSB;
    class function CreateRemote(const MachineName: string): ICoJazUSB;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoJazUSB
// Help String      : CoJazUSB Class
// Default Interface: ICoJazUSB
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoJazUSBProperties= class;
{$ENDIF}
  TCCoJazUSB = class(TOleServer)
  private
    FIntf: ICoJazUSB;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoJazUSBProperties;
    function GetServerProperties: TCCoJazUSBProperties;
{$ENDIF}
    function GetDefaultInterface: ICoJazUSB;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoJazUSB);
    procedure Disconnect; override;
    procedure CreateJazUSB;
    procedure CreateJazUSBB(COM_i: Integer);
    procedure setEndpoints;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
    function getDataOutEndPoint: ICoUSBEndpointDescriptor;
    function getLowSpeedInEndPoint: ICoUSBEndpointDescriptor;
    procedure openSpectrometer(COM_index: Integer);
    function getGUIFeatures: ICoGUIProviderCollection;
    function getStatus: ICoSpectrometerStatus;
    function readIntegrationTime: Integer;
    function toString: WideString;
    procedure setExternalTriggerMode(COM_mode: Integer);
    function getExternalTriggerModes: ICoExternalTriggerModeCollection;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getNonlinearityCoefficients: ICoCoefficientsCollection;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_index: Integer): OleVariant;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer);
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer);
    function getStrayLight(COM_index: Integer): Double;
    procedure setAutonullingConfiguration(const COM_configuration: ICoAutonullingConfiguration);
    procedure setAutonullingScanValue(COM_value: Integer);
    procedure setAutonullingScanStatus(COM_value: Integer);
    procedure writeAutonullingConfigurationToSpectrometer;
    function readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration;
    function getAutonullingScanValue: Integer;
    function getAutonullingScanStatus: Integer;
    function getAutonullingConfiguration: ICoAutonullingConfiguration;
    function getChannelsPresent: OleVariant;
    function isChannelPresent(COM_index: Integer): WordBool;
    procedure setChannelMux(COM_index: Integer);
    procedure setChannelStatus(COM_index: Integer; COM_status: WordBool);
    procedure setDeepWellStatus(COM_status: WordBool);
    procedure setChannelPresent(COM_index: Integer; COM_present: WordBool);
    function isDeepWell: WordBool;
    function isInterpolationEnabled: WordBool;
    procedure setInterpolationEnabled(COM_enabled: WordBool);
    procedure addChannelListener(const COM_listener: ICoMultiChannelListener);
    procedure removeChannelListener(const COM_listener: ICoMultiChannelListener);
    procedure setPowerUpPOTValues;
    function getPOTValues: OleVariant;
    procedure setPOTValue(COM_pot: Integer; COM_value: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoJazUSB read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoJazUSBProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoJazUSB
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoJazUSBProperties = class(TPersistent)
  private
    FServer:    TCCoJazUSB;
    function    GetDefaultInterface: ICoJazUSB;
    constructor Create(AServer: TCCoJazUSB);
  protected
  public
    property DefaultInterface: ICoJazUSB read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoLS450_FunctionsGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoLS450_FunctionsGUIProvider exposed by              
// the CoClass CCoLS450_FunctionsGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoLS450_FunctionsGUIProvider = class
    class function Create: ICoLS450_FunctionsGUIProvider;
    class function CreateRemote(const MachineName: string): ICoLS450_FunctionsGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoLS450_FunctionsGUIProvider
// Help String      : CoLS450_FunctionsGUIProvider Class
// Default Interface: ICoLS450_FunctionsGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoLS450_FunctionsGUIProviderProperties= class;
{$ENDIF}
  TCCoLS450_FunctionsGUIProvider = class(TOleServer)
  private
    FIntf: ICoLS450_FunctionsGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoLS450_FunctionsGUIProviderProperties;
    function GetServerProperties: TCCoLS450_FunctionsGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoLS450_FunctionsGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoLS450_FunctionsGUIProvider);
    procedure Disconnect; override;
    procedure CreateLS450_FunctionsGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoLS450_FunctionsGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoLS450_FunctionsGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoLS450_FunctionsGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoLS450_FunctionsGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoLS450_FunctionsGUIProvider;
    function    GetDefaultInterface: ICoLS450_FunctionsGUIProvider;
    constructor Create(AServer: TCCoLS450_FunctionsGUIProvider);
  protected
  public
    property DefaultInterface: ICoLS450_FunctionsGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoLS450_FunctionsImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoLS450_FunctionsImpl exposed by              
// the CoClass CCoLS450_FunctionsImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoLS450_FunctionsImpl = class
    class function Create: ICoLS450_FunctionsImpl;
    class function CreateRemote(const MachineName: string): ICoLS450_FunctionsImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoLS450_FunctionsImpl
// Help String      : CoLS450_FunctionsImpl Class
// Default Interface: ICoLS450_FunctionsImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoLS450_FunctionsImplProperties= class;
{$ENDIF}
  TCCoLS450_FunctionsImpl = class(TOleServer)
  private
    FIntf: ICoLS450_FunctionsImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoLS450_FunctionsImplProperties;
    function GetServerProperties: TCCoLS450_FunctionsImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoLS450_FunctionsImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoLS450_FunctionsImpl);
    procedure Disconnect; override;
    procedure CreateLS450_FunctionsImplB(const COM_usbInt: ICoUSBInterface; 
                                         const COM_plugin: ICoSpectrometerPlugIn);
    function getLS450Coefficients: ICoLS450Coefficients;
    procedure setLS450Coefficients(const COM_ls450Coefficients: ICoLS450Coefficients);
    procedure loadInfo;
    procedure saveInfo;
    function getLS450Info(COM_index: Integer): WideString;
    procedure setAllLS450Info(const COM_coef: ICoLS450Coefficients);
    function getAllLS450Info: ICoLS450Coefficients;
    procedure setLS450Info(COM_index: Integer; const COM_str: WideString);
    procedure setLEDMode(COM_pulsed: WordBool);
    procedure loadLS450CoefficientsFromEEPROM;
    function getO2ProbeCalibrationCoefficients: OleVariant;
    procedure setO2ProbeCalibrationCoefficients(COM_coefficients: OleVariant);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoLS450_FunctionsImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoLS450_FunctionsImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoLS450_FunctionsImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoLS450_FunctionsImplProperties = class(TPersistent)
  private
    FServer:    TCCoLS450_FunctionsImpl;
    function    GetDefaultInterface: ICoLS450_FunctionsImpl;
    constructor Create(AServer: TCCoLS450_FunctionsImpl);
  protected
  public
    property DefaultInterface: ICoLS450_FunctionsImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoLS450_FunctionsImpl_2000 provides a Create and CreateRemote method to          
// create instances of the default interface ICoLS450_FunctionsImpl_2000 exposed by              
// the CoClass CCoLS450_FunctionsImpl_2000. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoLS450_FunctionsImpl_2000 = class
    class function Create: ICoLS450_FunctionsImpl_2000;
    class function CreateRemote(const MachineName: string): ICoLS450_FunctionsImpl_2000;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoLS450_FunctionsImpl_2000
// Help String      : CoLS450_FunctionsImpl_2000 Class
// Default Interface: ICoLS450_FunctionsImpl_2000
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoLS450_FunctionsImpl_2000Properties= class;
{$ENDIF}
  TCCoLS450_FunctionsImpl_2000 = class(TOleServer)
  private
    FIntf: ICoLS450_FunctionsImpl_2000;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoLS450_FunctionsImpl_2000Properties;
    function GetServerProperties: TCCoLS450_FunctionsImpl_2000Properties;
{$ENDIF}
    function GetDefaultInterface: ICoLS450_FunctionsImpl_2000;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoLS450_FunctionsImpl_2000);
    procedure Disconnect; override;
    procedure CreateLS450_FunctionsImpl_2000B(const COM_usbInt: ICoUSBInterface; 
                                              const COM_plugin: ICoSpectrometerPlugIn);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoLS450_FunctionsImpl_2000 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoLS450_FunctionsImpl_2000Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoLS450_FunctionsImpl_2000
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoLS450_FunctionsImpl_2000Properties = class(TPersistent)
  private
    FServer:    TCCoLS450_FunctionsImpl_2000;
    function    GetDefaultInterface: ICoLS450_FunctionsImpl_2000;
    constructor Create(AServer: TCCoLS450_FunctionsImpl_2000);
  protected
  public
    property DefaultInterface: ICoLS450_FunctionsImpl_2000 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoLS450_FunctionsImpl_4000 provides a Create and CreateRemote method to          
// create instances of the default interface ICoLS450_FunctionsImpl_4000 exposed by              
// the CoClass CCoLS450_FunctionsImpl_4000. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoLS450_FunctionsImpl_4000 = class
    class function Create: ICoLS450_FunctionsImpl_4000;
    class function CreateRemote(const MachineName: string): ICoLS450_FunctionsImpl_4000;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoLS450_FunctionsImpl_4000
// Help String      : CoLS450_FunctionsImpl_4000 Class
// Default Interface: ICoLS450_FunctionsImpl_4000
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoLS450_FunctionsImpl_4000Properties= class;
{$ENDIF}
  TCCoLS450_FunctionsImpl_4000 = class(TOleServer)
  private
    FIntf: ICoLS450_FunctionsImpl_4000;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoLS450_FunctionsImpl_4000Properties;
    function GetServerProperties: TCCoLS450_FunctionsImpl_4000Properties;
{$ENDIF}
    function GetDefaultInterface: ICoLS450_FunctionsImpl_4000;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoLS450_FunctionsImpl_4000);
    procedure Disconnect; override;
    procedure CreateLS450_FunctionsImpl_4000B(const COM_usbInt: ICoUSBInterface; 
                                              const COM_plugin: ICoSpectrometerPlugIn);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoLS450_FunctionsImpl_4000 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoLS450_FunctionsImpl_4000Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoLS450_FunctionsImpl_4000
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoLS450_FunctionsImpl_4000Properties = class(TPersistent)
  private
    FServer:    TCCoLS450_FunctionsImpl_4000;
    function    GetDefaultInterface: ICoLS450_FunctionsImpl_4000;
    constructor Create(AServer: TCCoLS450_FunctionsImpl_4000);
  protected
  public
    property DefaultInterface: ICoLS450_FunctionsImpl_4000 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoLaserGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoLaserGUIProvider exposed by              
// the CoClass CCoLaserGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoLaserGUIProvider = class
    class function Create: ICoLaserGUIProvider;
    class function CreateRemote(const MachineName: string): ICoLaserGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoLaserGUIProvider
// Help String      : CoLaserGUIProvider Class
// Default Interface: ICoLaserGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoLaserGUIProviderProperties= class;
{$ENDIF}
  TCCoLaserGUIProvider = class(TOleServer)
  private
    FIntf: ICoLaserGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoLaserGUIProviderProperties;
    function GetServerProperties: TCCoLaserGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoLaserGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoLaserGUIProvider);
    procedure Disconnect; override;
    procedure CreateLaserGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoLaserGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoLaserGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoLaserGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoLaserGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoLaserGUIProvider;
    function    GetDefaultInterface: ICoLaserGUIProvider;
    constructor Create(AServer: TCCoLaserGUIProvider);
  protected
  public
    property DefaultInterface: ICoLaserGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoLaserProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoLaserProvider exposed by              
// the CoClass CCoLaserProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoLaserProvider = class
    class function Create: ICoLaserProvider;
    class function CreateRemote(const MachineName: string): ICoLaserProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoLaserProvider
// Help String      : CoLaserProvider Class
// Default Interface: ICoLaserProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoLaserProviderProperties= class;
{$ENDIF}
  TCCoLaserProvider = class(TOleServer)
  private
    FIntf: ICoLaserProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoLaserProviderProperties;
    function GetServerProperties: TCCoLaserProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoLaserProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoLaserProvider);
    procedure Disconnect; override;
    procedure CreateLaserProvider;
    function getLaser(COM_param0: Integer): ICoLaser;
    function getLasers: ICoLaserCollection;
    function getNumberOfEnabledLasers: Integer;
    function getNumberOfSupportedLasers: Integer;
    procedure setNumberOfSupportedLasers(COM_param0: Integer);
    procedure getLaserInfo(COM_param0: Integer);
    procedure setLaserInfo(COM_param0: Integer);
    procedure setDefaultLaser(COM_param0: Integer);
    function getDefaultLaser: Integer;
    function isLaserTemperatureRegulation: WordBool;
    procedure setLaserTemperatureRegulation(COM_param0: WordBool);
    procedure getLaserTemperatureInfo;
    procedure setLaserTemperatureInfo;
    function getMinimumLaserSetpoint: Integer;
    procedure setMinimumLaserSetpoint(COM_param0: Integer);
    function getMaximumLaserSetpoint: Integer;
    procedure setMaximumLaserSetpoint(COM_param0: Integer);
    function getLaserPowerInfo: Integer;
    procedure setLaserPowerInfo(COM_param0: Integer);
    function isLaserPowerRegulation: WordBool;
    procedure setLaserPowerRegulation(COM_param0: WordBool);
    function getMinimumLaserPowerSetpoint: Integer;
    procedure setMinimumLaserPowerSetpoint(COM_param0: Integer);
    function getMaximumLaserPowerSetpoint: Integer;
    procedure setMaximumLaserPowerSetpoint(COM_param0: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoLaserProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoLaserProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoLaserProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoLaserProviderProperties = class(TPersistent)
  private
    FServer:    TCCoLaserProvider;
    function    GetDefaultInterface: ICoLaserProvider;
    constructor Create(AServer: TCCoLaserProvider);
  protected
  public
    property DefaultInterface: ICoLaserProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoLaserProviderImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoLaserProviderImpl exposed by              
// the CoClass CCoLaserProviderImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoLaserProviderImpl = class
    class function Create: ICoLaserProviderImpl;
    class function CreateRemote(const MachineName: string): ICoLaserProviderImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoLaserProviderImpl
// Help String      : CoLaserProviderImpl Class
// Default Interface: ICoLaserProviderImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoLaserProviderImplProperties= class;
{$ENDIF}
  TCCoLaserProviderImpl = class(TOleServer)
  private
    FIntf: ICoLaserProviderImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoLaserProviderImplProperties;
    function GetServerProperties: TCCoLaserProviderImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoLaserProviderImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoLaserProviderImpl);
    procedure Disconnect; override;
    procedure CreateLaserProviderImplB(const COM_usbInt: ICoUSBInterface; 
                                       const COM_spec: ICoMMSRamanSpectrometer);
    function getLaser(COM_laserIndex: Integer): ICoLaser;
    function getLasers: ICoLaserCollection;
    function getNumberOfEnabledLasers: Integer;
    function getNumberOfSupportedLasers: Integer;
    procedure setNumberOfSupportedLasers(COM_numLasers: Integer);
    procedure getLaserInfo(COM_laserIndex: Integer);
    procedure setLaserInfo(COM_laserIndex: Integer);
    function getDefaultLaser: Integer;
    procedure setDefaultLaser(COM_defaultLaser: Integer);
    procedure setLaserTemperatureRegulation(COM_laserTemperatureRegulation: WordBool);
    procedure getLaserTemperatureInfo;
    procedure setLaserTemperatureInfo;
    function isLaserTemperatureRegulation: WordBool;
    function getMinimumLaserSetpoint: Integer;
    procedure setMinimumLaserSetpoint(COM_minimumLaserSetpoint: Integer);
    function getMaximumLaserSetpoint: Integer;
    procedure setMaximumLaserSetpoint(COM_maximumLaserSetpoint: Integer);
    procedure setLaserPowerRegulation(COM_laserPowerRegulation: WordBool);
    function getLaserPowerInfo: Integer;
    procedure setLaserPowerInfo(COM_power: Integer);
    function isLaserPowerRegulation: WordBool;
    function getMinimumLaserPowerSetpoint: Integer;
    procedure setMinimumLaserPowerSetpoint(COM_minimumLaserPowerSetpoint: Integer);
    function getMaximumLaserPowerSetpoint: Integer;
    procedure setMaximumLaserPowerSetpoint(COM_maximumLaserPowerSetpoint: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoLaserProviderImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoLaserProviderImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoLaserProviderImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoLaserProviderImplProperties = class(TPersistent)
  private
    FServer:    TCCoLaserProviderImpl;
    function    GetDefaultInterface: ICoLaserProviderImpl;
    constructor Create(AServer: TCCoLaserProviderImpl);
  protected
  public
    property DefaultInterface: ICoLaserProviderImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoListIterator provides a Create and CreateRemote method to          
// create instances of the default interface ICoListIterator exposed by              
// the CoClass CCoListIterator. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoListIterator = class
    class function Create: ICoListIterator;
    class function CreateRemote(const MachineName: string): ICoListIterator;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoListIterator
// Help String      : CoListIterator Class
// Default Interface: ICoListIterator
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoListIteratorProperties= class;
{$ENDIF}
  TCCoListIterator = class(TOleServer)
  private
    FIntf: ICoListIterator;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoListIteratorProperties;
    function GetServerProperties: TCCoListIteratorProperties;
{$ENDIF}
    function GetDefaultInterface: ICoListIterator;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoListIterator);
    procedure Disconnect; override;
    procedure CreateListIterator;
    function nextIndex: Integer;
    function previousIndex: Integer;
    procedure Remove;
    function hasNext: WordBool;
    function hasPrevious: WordBool;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoListIterator read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoListIteratorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoListIterator
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoListIteratorProperties = class(TPersistent)
  private
    FServer:    TCCoListIterator;
    function    GetDefaultInterface: ICoListIterator;
    constructor Create(AServer: TCCoListIterator);
  protected
  public
    property DefaultInterface: ICoListIterator read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoList provides a Create and CreateRemote method to          
// create instances of the default interface ICoList exposed by              
// the CoClass CCoList. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoList = class
    class function Create: ICoList;
    class function CreateRemote(const MachineName: string): ICoList;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoList
// Help String      : CoList Class
// Default Interface: ICoList
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoListProperties= class;
{$ENDIF}
  TCCoList = class(TOleServer)
  private
    FIntf: ICoList;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoListProperties;
    function GetServerProperties: TCCoListProperties;
{$ENDIF}
    function GetDefaultInterface: ICoList;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoList);
    procedure Disconnect; override;
    procedure CreateList;
    function hashCode: Integer;
    function size: Integer;
    procedure clear;
    function isEmpty: WordBool;
    function addAll(COM_param0: Integer; const COM_param1: ICoCollection): WordBool;
    function addAllB(const COM_param0: ICoCollection): WordBool;
    function containsAll(const COM_param0: ICoCollection): WordBool;
    function removeAll(const COM_param0: ICoCollection): WordBool;
    function retainAll(const COM_param0: ICoCollection): WordBool;
    function iterator: ICoIterator;
    function subList(COM_param0: Integer; COM_param1: Integer): ICoList;
    function listIterator: ICoListIterator;
    function listIteratorB(COM_param0: Integer): ICoListIterator;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoList read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoListProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoList
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoListProperties = class(TPersistent)
  private
    FServer:    TCCoList;
    function    GetDefaultInterface: ICoList;
    constructor Create(AServer: TCCoList);
  protected
  public
    property DefaultInterface: ICoList read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMMSRamanChannel provides a Create and CreateRemote method to          
// create instances of the default interface ICoMMSRamanChannel exposed by              
// the CoClass CCoMMSRamanChannel. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMMSRamanChannel = class
    class function Create: ICoMMSRamanChannel;
    class function CreateRemote(const MachineName: string): ICoMMSRamanChannel;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMMSRamanChannel
// Help String      : CoMMSRamanChannel Class
// Default Interface: ICoMMSRamanChannel
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMMSRamanChannelProperties= class;
{$ENDIF}
  TCCoMMSRamanChannel = class(TOleServer)
  private
    FIntf: ICoMMSRamanChannel;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMMSRamanChannelProperties;
    function GetServerProperties: TCCoMMSRamanChannelProperties;
{$ENDIF}
    function GetDefaultInterface: ICoMMSRamanChannel;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMMSRamanChannel);
    procedure Disconnect; override;
    procedure CreateMMSRamanChannelB(const COM_spectrometer: ICoMMSRaman; 
                                     const COM_coefficients: ICoCoefficients; COM_channel: Integer);
    procedure generateMetadata(const COM_sb: ICoSpectrometerInfo; COM_index: Integer);
    procedure getCoefficientsFromSpectrometer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMMSRamanChannel read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMMSRamanChannelProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMMSRamanChannel
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMMSRamanChannelProperties = class(TPersistent)
  private
    FServer:    TCCoMMSRamanChannel;
    function    GetDefaultInterface: ICoMMSRamanChannel;
    constructor Create(AServer: TCCoMMSRamanChannel);
  protected
  public
    property DefaultInterface: ICoMMSRamanChannel read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMMSRamanConstants provides a Create and CreateRemote method to          
// create instances of the default interface ICoMMSRamanConstants exposed by              
// the CoClass CCoMMSRamanConstants. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMMSRamanConstants = class
    class function Create: ICoMMSRamanConstants;
    class function CreateRemote(const MachineName: string): ICoMMSRamanConstants;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMMSRamanConstants
// Help String      : CoMMSRamanConstants Class
// Default Interface: ICoMMSRamanConstants
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMMSRamanConstantsProperties= class;
{$ENDIF}
  TCCoMMSRamanConstants = class(TOleServer)
  private
    FIntf: ICoMMSRamanConstants;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMMSRamanConstantsProperties;
    function GetServerProperties: TCCoMMSRamanConstantsProperties;
{$ENDIF}
    function GetDefaultInterface: ICoMMSRamanConstants;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMMSRamanConstants);
    procedure Disconnect; override;
    procedure CreateMMSRamanConstants;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMMSRamanConstants read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMMSRamanConstantsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMMSRamanConstants
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMMSRamanConstantsProperties = class(TPersistent)
  private
    FServer:    TCCoMMSRamanConstants;
    function    GetDefaultInterface: ICoMMSRamanConstants;
    constructor Create(AServer: TCCoMMSRamanConstants);
  protected
  public
    property DefaultInterface: ICoMMSRamanConstants read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMasterClockDivisor provides a Create and CreateRemote method to          
// create instances of the default interface ICoMasterClockDivisor exposed by              
// the CoClass CCoMasterClockDivisor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMasterClockDivisor = class
    class function Create: ICoMasterClockDivisor;
    class function CreateRemote(const MachineName: string): ICoMasterClockDivisor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMasterClockDivisor
// Help String      : CoMasterClockDivisor Class
// Default Interface: ICoMasterClockDivisor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMasterClockDivisorProperties= class;
{$ENDIF}
  TCCoMasterClockDivisor = class(TOleServer)
  private
    FIntf: ICoMasterClockDivisor;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMasterClockDivisorProperties;
    function GetServerProperties: TCCoMasterClockDivisorProperties;
{$ENDIF}
    function GetDefaultInterface: ICoMasterClockDivisor;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMasterClockDivisor);
    procedure Disconnect; override;
    procedure CreateMasterClockDivisor;
    function getMasterClockDivisor: Integer;
    procedure setMasterClockDivisor(COM_param0: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMasterClockDivisor read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMasterClockDivisorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMasterClockDivisor
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMasterClockDivisorProperties = class(TPersistent)
  private
    FServer:    TCCoMasterClockDivisor;
    function    GetDefaultInterface: ICoMasterClockDivisor;
    constructor Create(AServer: TCCoMasterClockDivisor);
  protected
  public
    property DefaultInterface: ICoMasterClockDivisor read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMasterClockDivisorImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoMasterClockDivisorImpl exposed by              
// the CoClass CCoMasterClockDivisorImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMasterClockDivisorImpl = class
    class function Create: ICoMasterClockDivisorImpl;
    class function CreateRemote(const MachineName: string): ICoMasterClockDivisorImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMasterClockDivisorImpl
// Help String      : CoMasterClockDivisorImpl Class
// Default Interface: ICoMasterClockDivisorImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMasterClockDivisorImplProperties= class;
{$ENDIF}
  TCCoMasterClockDivisorImpl = class(TOleServer)
  private
    FIntf: ICoMasterClockDivisorImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMasterClockDivisorImplProperties;
    function GetServerProperties: TCCoMasterClockDivisorImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoMasterClockDivisorImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMasterClockDivisorImpl);
    procedure Disconnect; override;
    procedure CreateMasterClockDivisorImplB(const COM_usbInt: ICoUSBInterface);
    function getMasterClockDivisor: Integer;
    procedure setMasterClockDivisor(COM_value: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMasterClockDivisorImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMasterClockDivisorImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMasterClockDivisorImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMasterClockDivisorImplProperties = class(TPersistent)
  private
    FServer:    TCCoMasterClockDivisorImpl;
    function    GetDefaultInterface: ICoMasterClockDivisorImpl;
    constructor Create(AServer: TCCoMasterClockDivisorImpl);
  protected
  public
    property DefaultInterface: ICoMasterClockDivisorImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMasterClockDivisorListener provides a Create and CreateRemote method to          
// create instances of the default interface ICoMasterClockDivisorListener exposed by              
// the CoClass CCoMasterClockDivisorListener. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMasterClockDivisorListener = class
    class function Create: ICoMasterClockDivisorListener;
    class function CreateRemote(const MachineName: string): ICoMasterClockDivisorListener;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMasterClockDivisorListener
// Help String      : CoMasterClockDivisorListener Class
// Default Interface: ICoMasterClockDivisorListener
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMasterClockDivisorListenerProperties= class;
{$ENDIF}
  TCCoMasterClockDivisorListener = class(TOleServer)
  private
    FIntf: ICoMasterClockDivisorListener;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMasterClockDivisorListenerProperties;
    function GetServerProperties: TCCoMasterClockDivisorListenerProperties;
{$ENDIF}
    function GetDefaultInterface: ICoMasterClockDivisorListener;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMasterClockDivisorListener);
    procedure Disconnect; override;
    procedure CreateMasterClockDivisorListener;
    procedure masterClockChanged(COM_param0: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMasterClockDivisorListener read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMasterClockDivisorListenerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMasterClockDivisorListener
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMasterClockDivisorListenerProperties = class(TPersistent)
  private
    FServer:    TCCoMasterClockDivisorListener;
    function    GetDefaultInterface: ICoMasterClockDivisorListener;
    constructor Create(AServer: TCCoMasterClockDivisorListener);
  protected
  public
    property DefaultInterface: ICoMasterClockDivisorListener read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMasterClockRate provides a Create and CreateRemote method to          
// create instances of the default interface ICoMasterClockRate exposed by              
// the CoClass CCoMasterClockRate. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMasterClockRate = class
    class function Create: ICoMasterClockRate;
    class function CreateRemote(const MachineName: string): ICoMasterClockRate;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMasterClockRate
// Help String      : CoMasterClockRate Class
// Default Interface: ICoMasterClockRate
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMasterClockRateProperties= class;
{$ENDIF}
  TCCoMasterClockRate = class(TOleServer)
  private
    FIntf: ICoMasterClockRate;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMasterClockRateProperties;
    function GetServerProperties: TCCoMasterClockRateProperties;
{$ENDIF}
    function GetDefaultInterface: ICoMasterClockRate;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMasterClockRate);
    procedure Disconnect; override;
    procedure CreateMasterClockRate;
    procedure setMasterClock(COM_param0: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMasterClockRate read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMasterClockRateProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMasterClockRate
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMasterClockRateProperties = class(TPersistent)
  private
    FServer:    TCCoMasterClockRate;
    function    GetDefaultInterface: ICoMasterClockRate;
    constructor Create(AServer: TCCoMasterClockRate);
  protected
  public
    property DefaultInterface: ICoMasterClockRate read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMasterClockRateImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoMasterClockRateImpl exposed by              
// the CoClass CCoMasterClockRateImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMasterClockRateImpl = class
    class function Create: ICoMasterClockRateImpl;
    class function CreateRemote(const MachineName: string): ICoMasterClockRateImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMasterClockRateImpl
// Help String      : CoMasterClockRateImpl Class
// Default Interface: ICoMasterClockRateImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMasterClockRateImplProperties= class;
{$ENDIF}
  TCCoMasterClockRateImpl = class(TOleServer)
  private
    FIntf: ICoMasterClockRateImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMasterClockRateImplProperties;
    function GetServerProperties: TCCoMasterClockRateImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoMasterClockRateImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMasterClockRateImpl);
    procedure Disconnect; override;
    procedure CreateMasterClockRateImplB(const COM_usbInt: ICoUSBInterface);
    procedure setMasterClock(COM_param0: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMasterClockRateImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMasterClockRateImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMasterClockRateImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMasterClockRateImplProperties = class(TPersistent)
  private
    FServer:    TCCoMasterClockRateImpl;
    function    GetDefaultInterface: ICoMasterClockRateImpl;
    constructor Create(AServer: TCCoMasterClockRateImpl);
  protected
  public
    property DefaultInterface: ICoMasterClockRateImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMasterClockRateImpl_2000 provides a Create and CreateRemote method to          
// create instances of the default interface ICoMasterClockRateImpl_2000 exposed by              
// the CoClass CCoMasterClockRateImpl_2000. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMasterClockRateImpl_2000 = class
    class function Create: ICoMasterClockRateImpl_2000;
    class function CreateRemote(const MachineName: string): ICoMasterClockRateImpl_2000;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMasterClockRateImpl_2000
// Help String      : CoMasterClockRateImpl_2000 Class
// Default Interface: ICoMasterClockRateImpl_2000
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMasterClockRateImpl_2000Properties= class;
{$ENDIF}
  TCCoMasterClockRateImpl_2000 = class(TOleServer)
  private
    FIntf: ICoMasterClockRateImpl_2000;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMasterClockRateImpl_2000Properties;
    function GetServerProperties: TCCoMasterClockRateImpl_2000Properties;
{$ENDIF}
    function GetDefaultInterface: ICoMasterClockRateImpl_2000;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMasterClockRateImpl_2000);
    procedure Disconnect; override;
    procedure CreateMasterClockRateImpl_2000B(const COM_usbInt: ICoUSBInterface);
    procedure setMasterClock(COM_rate: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMasterClockRateImpl_2000 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMasterClockRateImpl_2000Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMasterClockRateImpl_2000
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMasterClockRateImpl_2000Properties = class(TPersistent)
  private
    FServer:    TCCoMasterClockRateImpl_2000;
    function    GetDefaultInterface: ICoMasterClockRateImpl_2000;
    constructor Create(AServer: TCCoMasterClockRateImpl_2000);
  protected
  public
    property DefaultInterface: ICoMasterClockRateImpl_2000 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMasterClockRateImpl_ADC provides a Create and CreateRemote method to          
// create instances of the default interface ICoMasterClockRateImpl_ADC exposed by              
// the CoClass CCoMasterClockRateImpl_ADC. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMasterClockRateImpl_ADC = class
    class function Create: ICoMasterClockRateImpl_ADC;
    class function CreateRemote(const MachineName: string): ICoMasterClockRateImpl_ADC;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMasterClockRateImpl_ADC
// Help String      : CoMasterClockRateImpl_ADC Class
// Default Interface: ICoMasterClockRateImpl_ADC
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMasterClockRateImpl_ADCProperties= class;
{$ENDIF}
  TCCoMasterClockRateImpl_ADC = class(TOleServer)
  private
    FIntf: ICoMasterClockRateImpl_ADC;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMasterClockRateImpl_ADCProperties;
    function GetServerProperties: TCCoMasterClockRateImpl_ADCProperties;
{$ENDIF}
    function GetDefaultInterface: ICoMasterClockRateImpl_ADC;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMasterClockRateImpl_ADC);
    procedure Disconnect; override;
    procedure CreateMasterClockRateImpl_ADCB(const COM_usbInt: ICoUSBInterface);
    procedure setMasterClock(COM_rate: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMasterClockRateImpl_ADC read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMasterClockRateImpl_ADCProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMasterClockRateImpl_ADC
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMasterClockRateImpl_ADCProperties = class(TPersistent)
  private
    FServer:    TCCoMasterClockRateImpl_ADC;
    function    GetDefaultInterface: ICoMasterClockRateImpl_ADC;
    constructor Create(AServer: TCCoMasterClockRateImpl_ADC);
  protected
  public
    property DefaultInterface: ICoMasterClockRateImpl_ADC read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMasterClockRateImpl_MMSRaman provides a Create and CreateRemote method to          
// create instances of the default interface ICoMasterClockRateImpl_MMSRaman exposed by              
// the CoClass CCoMasterClockRateImpl_MMSRaman. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMasterClockRateImpl_MMSRaman = class
    class function Create: ICoMasterClockRateImpl_MMSRaman;
    class function CreateRemote(const MachineName: string): ICoMasterClockRateImpl_MMSRaman;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMasterClockRateImpl_MMSRaman
// Help String      : CoMasterClockRateImpl_MMSRaman Class
// Default Interface: ICoMasterClockRateImpl_MMSRaman
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMasterClockRateImpl_MMSRamanProperties= class;
{$ENDIF}
  TCCoMasterClockRateImpl_MMSRaman = class(TOleServer)
  private
    FIntf: ICoMasterClockRateImpl_MMSRaman;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMasterClockRateImpl_MMSRamanProperties;
    function GetServerProperties: TCCoMasterClockRateImpl_MMSRamanProperties;
{$ENDIF}
    function GetDefaultInterface: ICoMasterClockRateImpl_MMSRaman;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMasterClockRateImpl_MMSRaman);
    procedure Disconnect; override;
    procedure CreateMasterClockRateImpl_MMSRamanB(const COM_usbInt: ICoUSBInterface; 
                                                  const COM_spec: ICoMMSRaman);
    procedure setMasterClock(COM_rate: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMasterClockRateImpl_MMSRaman read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMasterClockRateImpl_MMSRamanProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMasterClockRateImpl_MMSRaman
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMasterClockRateImpl_MMSRamanProperties = class(TPersistent)
  private
    FServer:    TCCoMasterClockRateImpl_MMSRaman;
    function    GetDefaultInterface: ICoMasterClockRateImpl_MMSRaman;
    constructor Create(AServer: TCCoMasterClockRateImpl_MMSRaman);
  protected
  public
    property DefaultInterface: ICoMasterClockRateImpl_MMSRaman read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMaya2000 provides a Create and CreateRemote method to          
// create instances of the default interface ICoMaya2000 exposed by              
// the CoClass CCoMaya2000. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMaya2000 = class
    class function Create: ICoMaya2000;
    class function CreateRemote(const MachineName: string): ICoMaya2000;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMaya2000
// Help String      : CoMaya2000 Class
// Default Interface: ICoMaya2000
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMaya2000Properties= class;
{$ENDIF}
  TCCoMaya2000 = class(TOleServer)
  private
    FIntf: ICoMaya2000;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMaya2000Properties;
    function GetServerProperties: TCCoMaya2000Properties;
{$ENDIF}
    function GetDefaultInterface: ICoMaya2000;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMaya2000);
    procedure Disconnect; override;
    procedure CreateMaya2000;
    procedure CreateMaya2000B(COM_i: Integer);
    procedure setEndpoints;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
    procedure openSpectrometer(COM_index: Integer);
    function getGUIFeatures: ICoGUIProviderCollection;
    procedure setStrobeDelay(COM_delay: Integer);
    function getActualIntegrationTime: Integer;
    function getPlugIns: ICoSpectrometerPlugInCollection;
    function getNumberOfPlugIns: Integer;
    function isPlugInDetected(COM_id: Integer): WordBool;
    function initializePlugIns: OleVariant;
    procedure detectPlugIns;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
    function getPSOCVersion: WideString;
    function getFPGAFirmwareVersion: WideString;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer);
    function getContinuousStrobeDelayMinimum: Integer;
    function getContinuousStrobeDelayMaximum: Integer;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer);
    function getIntegrationTimeBaseClock: Integer;
    function getIntegrationClockTimer: Integer;
    function getAdvancedIntegrationTimeMinimum: Integer;
    function getAdvancedIntegrationTimeMaximum: Integer;
    function getAdvancedIntegrationTimeIncrement: Integer;
    procedure setExternalTriggerMode(COM_mode: Integer);
    function getExternalTriggerModes: ICoExternalTriggerModeCollection;
    procedure setShutterClock(COM_value: Integer);
    function getShutterClock: Integer;
    procedure setSingleStrobeLow(COM_value: Integer);
    procedure setSingleStrobeHigh(COM_value: Integer);
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double;
    function getSingleStrobeLow: Integer;
    function getSingleStrobeHigh: Integer;
    function getSingleStrobeMinimum: Integer;
    function getSingleStrobeMaximum: Integer;
    function getSingleStrobeIncrement: Integer;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet);
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet);
    procedure setValueAllBits(const COM_bitSet: ICoBitSet);
    procedure setDirectionBitmask(COM_bitmask: Smallint);
    procedure setMuxBitmask(COM_bitmask: Smallint);
    procedure setValueBitmask(COM_bitmask: Smallint);
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool);
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool);
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool);
    function getTotalGPIOBits: Integer;
    function getDirectionBits: ICoBitSet;
    function getMuxBits: ICoBitSet;
    function getValueBits: ICoBitSet;
    function getValueBit(COM_bitNumber: Integer): Integer;
    function getNumberOfPins: Integer;
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant);
    procedure setMasterClockDivisor(COM_value: Integer);
    function getMasterClockDivisor: Integer;
    procedure setExternalTriggerDelay(COM_counts: Integer);
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double;
    function getExternalTriggerDelayMinimum: Integer;
    function getExternalTriggerDelayMaximum: Integer;
    function getExternalTriggerDelayIncrement: Integer;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getNonlinearityCoefficients: ICoCoefficientsCollection;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_index: Integer): OleVariant;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer);
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer);
    function getStrayLight(COM_index: Integer): Double;
    function isAdvancedVersion: WordBool;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMaya2000 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMaya2000Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMaya2000
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMaya2000Properties = class(TPersistent)
  private
    FServer:    TCCoMaya2000;
    function    GetDefaultInterface: ICoMaya2000;
    constructor Create(AServer: TCCoMaya2000);
  protected
  public
    property DefaultInterface: ICoMaya2000 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMayaPro2000 provides a Create and CreateRemote method to          
// create instances of the default interface ICoMayaPro2000 exposed by              
// the CoClass CCoMayaPro2000. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMayaPro2000 = class
    class function Create: ICoMayaPro2000;
    class function CreateRemote(const MachineName: string): ICoMayaPro2000;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMayaPro2000
// Help String      : CoMayaPro2000 Class
// Default Interface: ICoMayaPro2000
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMayaPro2000Properties= class;
{$ENDIF}
  TCCoMayaPro2000 = class(TOleServer)
  private
    FIntf: ICoMayaPro2000;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMayaPro2000Properties;
    function GetServerProperties: TCCoMayaPro2000Properties;
{$ENDIF}
    function GetDefaultInterface: ICoMayaPro2000;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMayaPro2000);
    procedure Disconnect; override;
    procedure CreateMayaPro2000;
    procedure CreateMayaPro2000B(COM_i: Integer);
    procedure setEndpoints;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
    procedure openSpectrometer(COM_index: Integer);
    function getGUIFeatures: ICoGUIProviderCollection;
    procedure setStrobeDelay(COM_delay: Integer);
    function getActualIntegrationTime: Integer;
    function getPlugIns: ICoSpectrometerPlugInCollection;
    function getNumberOfPlugIns: Integer;
    function isPlugInDetected(COM_id: Integer): WordBool;
    function initializePlugIns: OleVariant;
    procedure detectPlugIns;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
    function getPSOCVersion: WideString;
    function getFPGAFirmwareVersion: WideString;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer);
    function getContinuousStrobeDelayMinimum: Integer;
    function getContinuousStrobeDelayMaximum: Integer;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer);
    function getIntegrationTimeBaseClock: Integer;
    function getIntegrationClockTimer: Integer;
    function getAdvancedIntegrationTimeMinimum: Integer;
    function getAdvancedIntegrationTimeMaximum: Integer;
    function getAdvancedIntegrationTimeIncrement: Integer;
    procedure setExternalTriggerMode(COM_mode: Integer);
    function getExternalTriggerModes: ICoExternalTriggerModeCollection;
    procedure setShutterClock(COM_value: Integer);
    function getShutterClock: Integer;
    procedure setSingleStrobeLow(COM_value: Integer);
    procedure setSingleStrobeHigh(COM_value: Integer);
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double;
    function getSingleStrobeLow: Integer;
    function getSingleStrobeHigh: Integer;
    function getSingleStrobeMinimum: Integer;
    function getSingleStrobeMaximum: Integer;
    function getSingleStrobeIncrement: Integer;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet);
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet);
    procedure setValueAllBits(const COM_bitSet: ICoBitSet);
    procedure setDirectionBitmask(COM_bitmask: Smallint);
    procedure setMuxBitmask(COM_bitmask: Smallint);
    procedure setValueBitmask(COM_bitmask: Smallint);
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool);
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool);
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool);
    function getTotalGPIOBits: Integer;
    function getDirectionBits: ICoBitSet;
    function getMuxBits: ICoBitSet;
    function getValueBits: ICoBitSet;
    function getValueBit(COM_bitNumber: Integer): Integer;
    function getNumberOfPins: Integer;
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant);
    procedure setMasterClockDivisor(COM_value: Integer);
    function getMasterClockDivisor: Integer;
    procedure setExternalTriggerDelay(COM_counts: Integer);
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double;
    function getExternalTriggerDelayMinimum: Integer;
    function getExternalTriggerDelayMaximum: Integer;
    function getExternalTriggerDelayIncrement: Integer;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getNonlinearityCoefficients: ICoCoefficientsCollection;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_index: Integer): OleVariant;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer);
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer);
    function getStrayLight(COM_index: Integer): Double;
    function isAdvancedVersion: WordBool;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMayaPro2000 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMayaPro2000Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMayaPro2000
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMayaPro2000Properties = class(TPersistent)
  private
    FServer:    TCCoMayaPro2000;
    function    GetDefaultInterface: ICoMayaPro2000;
    constructor Create(AServer: TCCoMayaPro2000);
  protected
  public
    property DefaultInterface: ICoMayaPro2000 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMethodDescriptorCollection provides a Create and CreateRemote method to          
// create instances of the default interface ICoMethodDescriptorCollection exposed by              
// the CoClass CCoMethodDescriptorCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMethodDescriptorCollection = class
    class function Create: ICoMethodDescriptorCollection;
    class function CreateRemote(const MachineName: string): ICoMethodDescriptorCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMethodDescriptorCollection
// Help String      : CoMethodDescriptorCollection Class
// Default Interface: ICoMethodDescriptorCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMethodDescriptorCollectionProperties= class;
{$ENDIF}
  TCCoMethodDescriptorCollection = class(TOleServer)
  private
    FIntf: ICoMethodDescriptorCollection;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMethodDescriptorCollectionProperties;
    function GetServerProperties: TCCoMethodDescriptorCollectionProperties;
{$ENDIF}
    function GetDefaultInterface: ICoMethodDescriptorCollection;
  protected
    procedure InitServerData; override;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMethodDescriptorCollection);
    procedure Disconnect; override;
    function Item(index: OleVariant): OleVariant;
    procedure Add(const pnewMethodDescriptorCollection: IDispatch);
    procedure Remove(index: Integer);
    property DefaultInterface: ICoMethodDescriptorCollection read GetDefaultInterface;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMethodDescriptorCollectionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMethodDescriptorCollection
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMethodDescriptorCollectionProperties = class(TPersistent)
  private
    FServer:    TCCoMethodDescriptorCollection;
    function    GetDefaultInterface: ICoMethodDescriptorCollection;
    constructor Create(AServer: TCCoMethodDescriptorCollection);
  protected
    function Get_Count: Integer;
  public
    property DefaultInterface: ICoMethodDescriptorCollection read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMultiChannelGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoMultiChannelGUIProvider exposed by              
// the CoClass CCoMultiChannelGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMultiChannelGUIProvider = class
    class function Create: ICoMultiChannelGUIProvider;
    class function CreateRemote(const MachineName: string): ICoMultiChannelGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMultiChannelGUIProvider
// Help String      : CoMultiChannelGUIProvider Class
// Default Interface: ICoMultiChannelGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMultiChannelGUIProviderProperties= class;
{$ENDIF}
  TCCoMultiChannelGUIProvider = class(TOleServer)
  private
    FIntf: ICoMultiChannelGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMultiChannelGUIProviderProperties;
    function GetServerProperties: TCCoMultiChannelGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoMultiChannelGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMultiChannelGUIProvider);
    procedure Disconnect; override;
    procedure CreateMultiChannelGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMultiChannelGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMultiChannelGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMultiChannelGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMultiChannelGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoMultiChannelGUIProvider;
    function    GetDefaultInterface: ICoMultiChannelGUIProvider;
    constructor Create(AServer: TCCoMultiChannelGUIProvider);
  protected
  public
    property DefaultInterface: ICoMultiChannelGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMultiChannelImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoMultiChannelImpl exposed by              
// the CoClass CCoMultiChannelImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMultiChannelImpl = class
    class function Create: ICoMultiChannelImpl;
    class function CreateRemote(const MachineName: string): ICoMultiChannelImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMultiChannelImpl
// Help String      : CoMultiChannelImpl Class
// Default Interface: ICoMultiChannelImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMultiChannelImplProperties= class;
{$ENDIF}
  TCCoMultiChannelImpl = class(TOleServer)
  private
    FIntf: ICoMultiChannelImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMultiChannelImplProperties;
    function GetServerProperties: TCCoMultiChannelImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoMultiChannelImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMultiChannelImpl);
    procedure Disconnect; override;
    procedure CreateMultiChannelImplB(const COM_usbInt: ICoUSBInterface; 
                                      const COM_s: ICoADC1000USB; COM_numChans: Integer);
    function getNumberOfChannels: Integer;
    function getChannelsPresent: OleVariant;
    procedure setChannelStatus(COM_index: Integer; COM_status: WordBool);
    function isChannelPresent(COM_index: Integer): WordBool;
    function getNumberOfEnabledChannels: Integer;
    procedure setChannelMux(COM_index: Integer);
    procedure setChannelPresent(COM_index: Integer; COM_present: WordBool);
    procedure setDeepWellStatus(COM_present: WordBool);
    function getChannelIndices: OleVariant;
    function isDeepWell: WordBool;
    function isRotatorEnabled: WordBool;
    procedure setRotatorEnabled(COM_rotatorEnabled: WordBool);
    function isInterpolationEnabled: WordBool;
    procedure setInterpolationEnabled(COM_interpolationEnabled: WordBool);
    procedure addChannelListener(const COM_listener: ICoMultiChannelListener);
    procedure removeChannelListener(const COM_listener: ICoMultiChannelListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMultiChannelImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMultiChannelImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMultiChannelImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMultiChannelImplProperties = class(TPersistent)
  private
    FServer:    TCCoMultiChannelImpl;
    function    GetDefaultInterface: ICoMultiChannelImpl;
    constructor Create(AServer: TCCoMultiChannelImpl);
  protected
  public
    property DefaultInterface: ICoMultiChannelImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMultiChannelImpl_JazNetwork provides a Create and CreateRemote method to          
// create instances of the default interface ICoMultiChannelImpl_JazNetwork exposed by              
// the CoClass CCoMultiChannelImpl_JazNetwork. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMultiChannelImpl_JazNetwork = class
    class function Create: ICoMultiChannelImpl_JazNetwork;
    class function CreateRemote(const MachineName: string): ICoMultiChannelImpl_JazNetwork;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMultiChannelImpl_JazNetwork
// Help String      : CoMultiChannelImpl_JazNetwork Class
// Default Interface: ICoMultiChannelImpl_JazNetwork
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMultiChannelImpl_JazNetworkProperties= class;
{$ENDIF}
  TCCoMultiChannelImpl_JazNetwork = class(TOleServer)
  private
    FIntf: ICoMultiChannelImpl_JazNetwork;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMultiChannelImpl_JazNetworkProperties;
    function GetServerProperties: TCCoMultiChannelImpl_JazNetworkProperties;
{$ENDIF}
    function GetDefaultInterface: ICoMultiChannelImpl_JazNetwork;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMultiChannelImpl_JazNetwork);
    procedure Disconnect; override;
    procedure CreateMultiChannelImpl_JazNetworkB(const COM_jaz: ICoJazNetwork);
    function getNumberOfChannels: Integer;
    function getChannelsPresent: OleVariant;
    function isChannelPresent(COM_index: Integer): WordBool;
    function getNumberOfEnabledChannels: Integer;
    function getChannelIndices: OleVariant;
    procedure setChannelMux(COM_index: Integer);
    procedure setChannelStatus(COM_index: Integer; COM_status: WordBool);
    procedure setDeepWellStatus(COM_status: WordBool);
    procedure setChannelPresent(COM_index: Integer; COM_present: WordBool);
    function isRotatorEnabled: WordBool;
    function isDeepWell: WordBool;
    procedure setRotatorEnabled(COM_enabled: WordBool);
    function isInterpolationEnabled: WordBool;
    procedure setInterpolationEnabled(COM_enabled: WordBool);
    procedure addChannelListener(const COM_listener: ICoMultiChannelListener);
    procedure removeChannelListener(const COM_listener: ICoMultiChannelListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMultiChannelImpl_JazNetwork read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMultiChannelImpl_JazNetworkProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMultiChannelImpl_JazNetwork
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMultiChannelImpl_JazNetworkProperties = class(TPersistent)
  private
    FServer:    TCCoMultiChannelImpl_JazNetwork;
    function    GetDefaultInterface: ICoMultiChannelImpl_JazNetwork;
    constructor Create(AServer: TCCoMultiChannelImpl_JazNetwork);
  protected
  public
    property DefaultInterface: ICoMultiChannelImpl_JazNetwork read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMultiChannelImpl_JazUSB provides a Create and CreateRemote method to          
// create instances of the default interface ICoMultiChannelImpl_JazUSB exposed by              
// the CoClass CCoMultiChannelImpl_JazUSB. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMultiChannelImpl_JazUSB = class
    class function Create: ICoMultiChannelImpl_JazUSB;
    class function CreateRemote(const MachineName: string): ICoMultiChannelImpl_JazUSB;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMultiChannelImpl_JazUSB
// Help String      : CoMultiChannelImpl_JazUSB Class
// Default Interface: ICoMultiChannelImpl_JazUSB
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMultiChannelImpl_JazUSBProperties= class;
{$ENDIF}
  TCCoMultiChannelImpl_JazUSB = class(TOleServer)
  private
    FIntf: ICoMultiChannelImpl_JazUSB;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMultiChannelImpl_JazUSBProperties;
    function GetServerProperties: TCCoMultiChannelImpl_JazUSBProperties;
{$ENDIF}
    function GetDefaultInterface: ICoMultiChannelImpl_JazUSB;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMultiChannelImpl_JazUSB);
    procedure Disconnect; override;
    procedure CreateMultiChannelImpl_JazUSBB(const COM_usbInterface: ICoUSBInterface; 
                                             const COM_jaz: ICoJazUSB);
    function getNumberOfChannels: Integer;
    function getChannelsPresent: OleVariant;
    function isChannelPresent(COM_index: Integer): WordBool;
    function getNumberOfEnabledChannels: Integer;
    function getChannelIndices: OleVariant;
    procedure setChannelMux(COM_index: Integer);
    procedure setChannelStatus(COM_index: Integer; COM_status: WordBool);
    procedure setDeepWellStatus(COM_status: WordBool);
    procedure setChannelPresent(COM_index: Integer; COM_present: WordBool);
    function isRotatorEnabled: WordBool;
    function isDeepWell: WordBool;
    procedure setRotatorEnabled(COM_enabled: WordBool);
    function isInterpolationEnabled: WordBool;
    procedure setInterpolationEnabled(COM_enabled: WordBool);
    procedure addChannelListener(const COM_listener: ICoMultiChannelListener);
    procedure removeChannelListener(const COM_listener: ICoMultiChannelListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMultiChannelImpl_JazUSB read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMultiChannelImpl_JazUSBProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMultiChannelImpl_JazUSB
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMultiChannelImpl_JazUSBProperties = class(TPersistent)
  private
    FServer:    TCCoMultiChannelImpl_JazUSB;
    function    GetDefaultInterface: ICoMultiChannelImpl_JazUSB;
    constructor Create(AServer: TCCoMultiChannelImpl_JazUSB);
  protected
  public
    property DefaultInterface: ICoMultiChannelImpl_JazUSB read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoMultiChannelProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoMultiChannelProvider exposed by              
// the CoClass CCoMultiChannelProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoMultiChannelProvider = class
    class function Create: ICoMultiChannelProvider;
    class function CreateRemote(const MachineName: string): ICoMultiChannelProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoMultiChannelProvider
// Help String      : CoMultiChannelProvider Class
// Default Interface: ICoMultiChannelProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoMultiChannelProviderProperties= class;
{$ENDIF}
  TCCoMultiChannelProvider = class(TOleServer)
  private
    FIntf: ICoMultiChannelProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoMultiChannelProviderProperties;
    function GetServerProperties: TCCoMultiChannelProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoMultiChannelProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoMultiChannelProvider);
    procedure Disconnect; override;
    procedure CreateMultiChannelProvider;
    function getNumberOfChannels: Integer;
    function getChannelsPresent: OleVariant;
    function isChannelPresent(COM_param0: Integer): WordBool;
    function getNumberOfEnabledChannels: Integer;
    function getChannelIndices: OleVariant;
    procedure setChannelMux(COM_param0: Integer);
    procedure setChannelStatus(COM_param0: Integer; COM_param1: WordBool);
    procedure setDeepWellStatus(COM_param0: WordBool);
    procedure setChannelPresent(COM_param0: Integer; COM_param1: WordBool);
    function isRotatorEnabled: WordBool;
    function isDeepWell: WordBool;
    procedure setRotatorEnabled(COM_param0: WordBool);
    function isInterpolationEnabled: WordBool;
    procedure setInterpolationEnabled(COM_param0: WordBool);
    procedure addChannelListener(const COM_param0: ICoMultiChannelListener);
    procedure removeChannelListener(const COM_param0: ICoMultiChannelListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoMultiChannelProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoMultiChannelProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoMultiChannelProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoMultiChannelProviderProperties = class(TPersistent)
  private
    FServer:    TCCoMultiChannelProvider;
    function    GetDefaultInterface: ICoMultiChannelProvider;
    constructor Create(AServer: TCCoMultiChannelProvider);
  protected
  public
    property DefaultInterface: ICoMultiChannelProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoNIR provides a Create and CreateRemote method to          
// create instances of the default interface ICoNIR exposed by              
// the CoClass CCoNIR. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoNIR = class
    class function Create: ICoNIR;
    class function CreateRemote(const MachineName: string): ICoNIR;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoNIR
// Help String      : CoNIR Class
// Default Interface: ICoNIR
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoNIRProperties= class;
{$ENDIF}
  TCCoNIR = class(TOleServer)
  private
    FIntf: ICoNIR;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoNIRProperties;
    function GetServerProperties: TCCoNIRProperties;
{$ENDIF}
    function GetDefaultInterface: ICoNIR;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoNIR);
    procedure Disconnect; override;
    procedure setEndpoints;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
    procedure CreateNIR;
    function getGUIFeatures: ICoGUIProviderCollection;
    function readStatus: ICoSpectrometerStatus;
    function readIntegrationTime: Integer;
    procedure setIntegrationTime(COM_intTime: Integer);
    function toString: WideString;
    procedure setHighGain(COM_gain: WordBool);
    procedure setHighGainDefault(COM_gain: WordBool);
    function getHighGainDefault: WordBool;
    procedure setExternalTriggerMode(COM_mode: Integer);
    function getExternalTriggerModes: ICoExternalTriggerModeCollection;
    procedure setTECEnable(COM_enable: WordBool);
    procedure setFanEnable(COM_enable: WordBool);
    function getDetectorTemperatureCelsius: Double;
    function getDetectorTemperatureSetPointCelsius: Double;
    procedure setDetectorSetPointCelsius(COM_point: Double);
    function getSetPointMinimumCelsius: Double;
    function getSetPointMaximumCelsius: Double;
    function getSetPointIncrementCelsius: Double;
    function isSaveTECStateEnabled: WordBool;
    procedure saveTECState;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getNonlinearityCoefficients: ICoCoefficientsCollection;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_index: Integer): OleVariant;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer);
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer);
    function getStrayLight(COM_index: Integer): Double;
    function getBadPixels: OleVariant;
    procedure setBadPixels(COM_pixels: OleVariant);
    function removeBadPixels(const COM_spectrum: ICoSpectrum): ICoSpectrum;
    function getNumberOfBadPixels: Integer;
    function getAllPixels: OleVariant;
    procedure setBadPixelsToSpectrometer;
    function getBadPixelsFromSpectrometer: OleVariant;
    function isAdvancedVersion: WordBool;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoNIR read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoNIRProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoNIR
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoNIRProperties = class(TPersistent)
  private
    FServer:    TCCoNIR;
    function    GetDefaultInterface: ICoNIR;
    constructor Create(AServer: TCCoNIR);
  protected
  public
    property DefaultInterface: ICoNIR read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoNIR256 provides a Create and CreateRemote method to          
// create instances of the default interface ICoNIR256 exposed by              
// the CoClass CCoNIR256. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoNIR256 = class
    class function Create: ICoNIR256;
    class function CreateRemote(const MachineName: string): ICoNIR256;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoNIR256
// Help String      : CoNIR256 Class
// Default Interface: ICoNIR256
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoNIR256Properties= class;
{$ENDIF}
  TCCoNIR256 = class(TOleServer)
  private
    FIntf: ICoNIR256;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoNIR256Properties;
    function GetServerProperties: TCCoNIR256Properties;
{$ENDIF}
    function GetDefaultInterface: ICoNIR256;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoNIR256);
    procedure Disconnect; override;
    procedure CreateNIR256;
    procedure CreateNIR256B(COM_i: Integer);
    procedure openSpectrometer(COM_index: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoNIR256 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoNIR256Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoNIR256
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoNIR256Properties = class(TPersistent)
  private
    FServer:    TCCoNIR256;
    function    GetDefaultInterface: ICoNIR256;
    constructor Create(AServer: TCCoNIR256);
  protected
  public
    property DefaultInterface: ICoNIR256 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoNIR512 provides a Create and CreateRemote method to          
// create instances of the default interface ICoNIR512 exposed by              
// the CoClass CCoNIR512. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoNIR512 = class
    class function Create: ICoNIR512;
    class function CreateRemote(const MachineName: string): ICoNIR512;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoNIR512
// Help String      : CoNIR512 Class
// Default Interface: ICoNIR512
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoNIR512Properties= class;
{$ENDIF}
  TCCoNIR512 = class(TOleServer)
  private
    FIntf: ICoNIR512;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoNIR512Properties;
    function GetServerProperties: TCCoNIR512Properties;
{$ENDIF}
    function GetDefaultInterface: ICoNIR512;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoNIR512);
    procedure Disconnect; override;
    procedure CreateNIR512;
    procedure CreateNIR512B(COM_i: Integer);
    procedure openSpectrometer(COM_index: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoNIR512 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoNIR512Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoNIR512
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoNIR512Properties = class(TPersistent)
  private
    FServer:    TCCoNIR512;
    function    GetDefaultInterface: ICoNIR512;
    constructor Create(AServer: TCCoNIR512);
  protected
  public
    property DefaultInterface: ICoNIR512 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoNIRStatus provides a Create and CreateRemote method to          
// create instances of the default interface ICoNIRStatus exposed by              
// the CoClass CCoNIRStatus. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoNIRStatus = class
    class function Create: ICoNIRStatus;
    class function CreateRemote(const MachineName: string): ICoNIRStatus;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoNIRStatus
// Help String      : CoNIRStatus Class
// Default Interface: ICoNIRStatus
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoNIRStatusProperties= class;
{$ENDIF}
  TCCoNIRStatus = class(TOleServer)
  private
    FIntf: ICoNIRStatus;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoNIRStatusProperties;
    function GetServerProperties: TCCoNIRStatusProperties;
{$ENDIF}
    function GetDefaultInterface: ICoNIRStatus;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoNIRStatus);
    procedure Disconnect; override;
    procedure CreateNIRStatus;
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoNIRStatus read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoNIRStatusProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoNIRStatus
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoNIRStatusProperties = class(TPersistent)
  private
    FServer:    TCCoNIRStatus;
    function    GetDefaultInterface: ICoNIRStatus;
    constructor Create(AServer: TCCoNIRStatus);
  protected
  public
    property DefaultInterface: ICoNIRStatus read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoNetworkSource provides a Create and CreateRemote method to          
// create instances of the default interface ICoNetworkSource exposed by              
// the CoClass CCoNetworkSource. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoNetworkSource = class
    class function Create: ICoNetworkSource;
    class function CreateRemote(const MachineName: string): ICoNetworkSource;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoNetworkSource
// Help String      : CoNetworkSource Class
// Default Interface: ICoNetworkSource
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoNetworkSourceProperties= class;
{$ENDIF}
  TCCoNetworkSource = class(TOleServer)
  private
    FIntf: ICoNetworkSource;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoNetworkSourceProperties;
    function GetServerProperties: TCCoNetworkSourceProperties;
{$ENDIF}
    function GetDefaultInterface: ICoNetworkSource;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoNetworkSource);
    procedure Disconnect; override;
    procedure CreateNetworkSource;
    procedure connectToSource(const COM_param0: WideString; COM_param1: Integer);
    function isConnected: WordBool;
    procedure disconnect1;
    procedure reconnect;
    function getAddress: WideString;
    function getPort: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoNetworkSource read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoNetworkSourceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoNetworkSource
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoNetworkSourceProperties = class(TPersistent)
  private
    FServer:    TCCoNetworkSource;
    function    GetDefaultInterface: ICoNetworkSource;
    constructor Create(AServer: TCCoNetworkSource);
  protected
  public
    property DefaultInterface: ICoNetworkSource read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoNetworkSourceGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoNetworkSourceGUIProvider exposed by              
// the CoClass CCoNetworkSourceGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoNetworkSourceGUIProvider = class
    class function Create: ICoNetworkSourceGUIProvider;
    class function CreateRemote(const MachineName: string): ICoNetworkSourceGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoNetworkSourceGUIProvider
// Help String      : CoNetworkSourceGUIProvider Class
// Default Interface: ICoNetworkSourceGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoNetworkSourceGUIProviderProperties= class;
{$ENDIF}
  TCCoNetworkSourceGUIProvider = class(TOleServer)
  private
    FIntf: ICoNetworkSourceGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoNetworkSourceGUIProviderProperties;
    function GetServerProperties: TCCoNetworkSourceGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoNetworkSourceGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoNetworkSourceGUIProvider);
    procedure Disconnect; override;
    procedure CreateNetworkSourceGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoNetworkSourceGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoNetworkSourceGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoNetworkSourceGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoNetworkSourceGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoNetworkSourceGUIProvider;
    function    GetDefaultInterface: ICoNetworkSourceGUIProvider;
    constructor Create(AServer: TCCoNetworkSourceGUIProvider);
  protected
  public
    property DefaultInterface: ICoNetworkSourceGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoNetworkSpectrometer provides a Create and CreateRemote method to          
// create instances of the default interface ICoNetworkSpectrometer exposed by              
// the CoClass CCoNetworkSpectrometer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoNetworkSpectrometer = class
    class function Create: ICoNetworkSpectrometer;
    class function CreateRemote(const MachineName: string): ICoNetworkSpectrometer;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoNetworkSpectrometer
// Help String      : CoNetworkSpectrometer Class
// Default Interface: ICoNetworkSpectrometer
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoNetworkSpectrometerProperties= class;
{$ENDIF}
  TCCoNetworkSpectrometer = class(TOleServer)
  private
    FIntf: ICoNetworkSpectrometer;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoNetworkSpectrometerProperties;
    function GetServerProperties: TCCoNetworkSpectrometerProperties;
{$ENDIF}
    function GetDefaultInterface: ICoNetworkSpectrometer;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoNetworkSpectrometer);
    procedure Disconnect; override;
    procedure CreateNetworkSpectrometer;
    function getAddress: WideString;
    function getPort: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoNetworkSpectrometer read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoNetworkSpectrometerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoNetworkSpectrometer
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoNetworkSpectrometerProperties = class(TPersistent)
  private
    FServer:    TCCoNetworkSpectrometer;
    function    GetDefaultInterface: ICoNetworkSpectrometer;
    constructor Create(AServer: TCCoNetworkSpectrometer);
  protected
  public
    property DefaultInterface: ICoNetworkSpectrometer read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoNetworkSourceImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoNetworkSourceImpl exposed by              
// the CoClass CCoNetworkSourceImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoNetworkSourceImpl = class
    class function Create: ICoNetworkSourceImpl;
    class function CreateRemote(const MachineName: string): ICoNetworkSourceImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoNetworkSourceImpl
// Help String      : CoNetworkSourceImpl Class
// Default Interface: ICoNetworkSourceImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoNetworkSourceImplProperties= class;
{$ENDIF}
  TCCoNetworkSourceImpl = class(TOleServer)
  private
    FIntf: ICoNetworkSourceImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoNetworkSourceImplProperties;
    function GetServerProperties: TCCoNetworkSourceImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoNetworkSourceImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoNetworkSourceImpl);
    procedure Disconnect; override;
    procedure CreateNetworkSourceImplB(const COM_usb: ICoUSBInterface; 
                                       const COM_spec: ICoNetworkSpectrometer);
    procedure connectToSource(const COM_address: WideString; COM_port: Integer);
    function isConnected: WordBool;
    procedure disconnect1;
    procedure reconnect;
    function getAddress: WideString;
    function getPort: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoNetworkSourceImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoNetworkSourceImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoNetworkSourceImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoNetworkSourceImplProperties = class(TPersistent)
  private
    FServer:    TCCoNetworkSourceImpl;
    function    GetDefaultInterface: ICoNetworkSourceImpl;
    constructor Create(AServer: TCCoNetworkSourceImpl);
  protected
  public
    property DefaultInterface: ICoNetworkSourceImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoNodeGraphCertificate provides a Create and CreateRemote method to          
// create instances of the default interface ICoNodeGraphCertificate exposed by              
// the CoClass CCoNodeGraphCertificate. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoNodeGraphCertificate = class
    class function Create: ICoNodeGraphCertificate;
    class function CreateRemote(const MachineName: string): ICoNodeGraphCertificate;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoNodeGraphCertificate
// Help String      : CoNodeGraphCertificate Class
// Default Interface: ICoNodeGraphCertificate
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoNodeGraphCertificateProperties= class;
{$ENDIF}
  TCCoNodeGraphCertificate = class(TOleServer)
  private
    FIntf: ICoNodeGraphCertificate;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoNodeGraphCertificateProperties;
    function GetServerProperties: TCCoNodeGraphCertificateProperties;
{$ENDIF}
    function GetDefaultInterface: ICoNodeGraphCertificate;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoNodeGraphCertificate);
    procedure Disconnect; override;
    procedure CreateNodeGraphCertificateB(COM_isTransient: WordBool);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoNodeGraphCertificate read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoNodeGraphCertificateProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoNodeGraphCertificate
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoNodeGraphCertificateProperties = class(TPersistent)
  private
    FServer:    TCCoNodeGraphCertificate;
    function    GetDefaultInterface: ICoNodeGraphCertificate;
    constructor Create(AServer: TCCoNodeGraphCertificate);
  protected
  public
    property DefaultInterface: ICoNodeGraphCertificate read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoNonlinearityCorrectionGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoNonlinearityCorrectionGUIProvider exposed by              
// the CoClass CCoNonlinearityCorrectionGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoNonlinearityCorrectionGUIProvider = class
    class function Create: ICoNonlinearityCorrectionGUIProvider;
    class function CreateRemote(const MachineName: string): ICoNonlinearityCorrectionGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoNonlinearityCorrectionGUIProvider
// Help String      : CoNonlinearityCorrectionGUIProvider Class
// Default Interface: ICoNonlinearityCorrectionGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoNonlinearityCorrectionGUIProviderProperties= class;
{$ENDIF}
  TCCoNonlinearityCorrectionGUIProvider = class(TOleServer)
  private
    FIntf: ICoNonlinearityCorrectionGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoNonlinearityCorrectionGUIProviderProperties;
    function GetServerProperties: TCCoNonlinearityCorrectionGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoNonlinearityCorrectionGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoNonlinearityCorrectionGUIProvider);
    procedure Disconnect; override;
    procedure CreateNonlinearityCorrectionGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoNonlinearityCorrectionGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoNonlinearityCorrectionGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoNonlinearityCorrectionGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoNonlinearityCorrectionGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoNonlinearityCorrectionGUIProvider;
    function    GetDefaultInterface: ICoNonlinearityCorrectionGUIProvider;
    constructor Create(AServer: TCCoNonlinearityCorrectionGUIProvider);
  protected
  public
    property DefaultInterface: ICoNonlinearityCorrectionGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoNonlinearityCorrectionImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoNonlinearityCorrectionImpl exposed by              
// the CoClass CCoNonlinearityCorrectionImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoNonlinearityCorrectionImpl = class
    class function Create: ICoNonlinearityCorrectionImpl;
    class function CreateRemote(const MachineName: string): ICoNonlinearityCorrectionImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoNonlinearityCorrectionImpl
// Help String      : CoNonlinearityCorrectionImpl Class
// Default Interface: ICoNonlinearityCorrectionImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoNonlinearityCorrectionImplProperties= class;
{$ENDIF}
  TCCoNonlinearityCorrectionImpl = class(TOleServer)
  private
    FIntf: ICoNonlinearityCorrectionImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoNonlinearityCorrectionImplProperties;
    function GetServerProperties: TCCoNonlinearityCorrectionImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoNonlinearityCorrectionImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoNonlinearityCorrectionImpl);
    procedure Disconnect; override;
    procedure CreateNonlinearityCorrectionImplB(const COM_usbInt: ICoUSBInterface; 
                                                const COM_s: ICoSpectrometer);
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getNonlinearityCoefficients: ICoCoefficientsCollection;
    function getNonlinearityCoefficientsSingleChannel(COM_channelIndex: Integer): OleVariant;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_channelIndex: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoNonlinearityCorrectionImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoNonlinearityCorrectionImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoNonlinearityCorrectionImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoNonlinearityCorrectionImplProperties = class(TPersistent)
  private
    FServer:    TCCoNonlinearityCorrectionImpl;
    function    GetDefaultInterface: ICoNonlinearityCorrectionImpl;
    constructor Create(AServer: TCCoNonlinearityCorrectionImpl);
  protected
  public
    property DefaultInterface: ICoNonlinearityCorrectionImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoNonlinearityCorrectionProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoNonlinearityCorrectionProvider exposed by              
// the CoClass CCoNonlinearityCorrectionProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoNonlinearityCorrectionProvider = class
    class function Create: ICoNonlinearityCorrectionProvider;
    class function CreateRemote(const MachineName: string): ICoNonlinearityCorrectionProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoNonlinearityCorrectionProvider
// Help String      : CoNonlinearityCorrectionProvider Class
// Default Interface: ICoNonlinearityCorrectionProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoNonlinearityCorrectionProviderProperties= class;
{$ENDIF}
  TCCoNonlinearityCorrectionProvider = class(TOleServer)
  private
    FIntf: ICoNonlinearityCorrectionProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoNonlinearityCorrectionProviderProperties;
    function GetServerProperties: TCCoNonlinearityCorrectionProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoNonlinearityCorrectionProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoNonlinearityCorrectionProvider);
    procedure Disconnect; override;
    procedure CreateNonlinearityCorrectionProvider;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getNonlinearityCoefficients: ICoCoefficientsCollection;
    function getNonlinearityCoefficientsSingleChannel(COM_param0: Integer): OleVariant;
    procedure setNonlinearityCoefficientsSingleChannel(COM_param0: OleVariant; COM_param1: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoNonlinearityCorrectionProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoNonlinearityCorrectionProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoNonlinearityCorrectionProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoNonlinearityCorrectionProviderProperties = class(TPersistent)
  private
    FServer:    TCCoNonlinearityCorrectionProvider;
    function    GetDefaultInterface: ICoNonlinearityCorrectionProvider;
    constructor Create(AServer: TCCoNonlinearityCorrectionProvider);
  protected
  public
    property DefaultInterface: ICoNonlinearityCorrectionProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoVector provides a Create and CreateRemote method to          
// create instances of the default interface ICoVector exposed by              
// the CoClass CCoVector. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoVector = class
    class function Create: ICoVector;
    class function CreateRemote(const MachineName: string): ICoVector;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoVector
// Help String      : CoVector Class
// Default Interface: ICoVector
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoVectorProperties= class;
{$ENDIF}
  TCCoVector = class(TOleServer)
  private
    FIntf: ICoVector;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoVectorProperties;
    function GetServerProperties: TCCoVectorProperties;
{$ENDIF}
    function GetDefaultInterface: ICoVector;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoVector);
    procedure Disconnect; override;
    function capacity: Integer;
    function hashCode: Integer;
    function size: Integer;
    procedure CreateVector;
    procedure clear;
    procedure removeAllElements;
    procedure trimToSize;
    function isEmpty: WordBool;
    procedure CreateVectorB(COM_param0: Integer);
    procedure ensureCapacity(COM_param0: Integer);
    procedure removeElementAt(COM_param0: Integer);
    procedure setSize(COM_param0: Integer);
    procedure CreateVectorC(COM_param0: Integer; COM_param1: Integer);
    function toString: WideString;
    function addAll(COM_param0: Integer; const COM_param1: ICoCollection): WordBool;
    procedure CreateVectorD(const COM_param0: ICoCollection);
    function addAllB(const COM_param0: ICoCollection): WordBool;
    function containsAll(const COM_param0: ICoCollection): WordBool;
    function removeAll(const COM_param0: ICoCollection): WordBool;
    function retainAll(const COM_param0: ICoCollection): WordBool;
    function elements: ICoEnumeration;
    function subList(COM_param0: Integer; COM_param1: Integer): ICoList;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoVector read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoVectorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoVector
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoVectorProperties = class(TPersistent)
  private
    FServer:    TCCoVector;
    function    GetDefaultInterface: ICoVector;
    constructor Create(AServer: TCCoVector);
  protected
  public
    property DefaultInterface: ICoVector read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrumCertificate provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrumCertificate exposed by              
// the CoClass CCoSpectrumCertificate. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrumCertificate = class
    class function Create: ICoSpectrumCertificate;
    class function CreateRemote(const MachineName: string): ICoSpectrumCertificate;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrumCertificate
// Help String      : CoSpectrumCertificate Class
// Default Interface: ICoSpectrumCertificate
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrumCertificateProperties= class;
{$ENDIF}
  TCCoSpectrumCertificate = class(TOleServer)
  private
    FIntf: ICoSpectrumCertificate;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrumCertificateProperties;
    function GetServerProperties: TCCoSpectrumCertificateProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrumCertificate;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrumCertificate);
    procedure Disconnect; override;
    procedure CreateSpectrumCertificateC(const COM_that: ICoSpectrumCertificate);
    function getSourceID: Integer;
    function getTimestamp: ICoHighResTimeStamp;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSpectrumCertificate read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrumCertificateProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrumCertificate
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrumCertificateProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrumCertificate;
    function    GetDefaultInterface: ICoSpectrumCertificate;
    constructor Create(AServer: TCCoSpectrumCertificate);
  protected
  public
    property DefaultInterface: ICoSpectrumCertificate read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoOmniSpectrum provides a Create and CreateRemote method to          
// create instances of the default interface ICoOmniSpectrum exposed by              
// the CoClass CCoOmniSpectrum. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoOmniSpectrum = class
    class function Create: ICoOmniSpectrum;
    class function CreateRemote(const MachineName: string): ICoOmniSpectrum;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoOmniSpectrum
// Help String      : CoOmniSpectrum Class
// Default Interface: ICoOmniSpectrum
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoOmniSpectrumProperties= class;
{$ENDIF}
  TCCoOmniSpectrum = class(TOleServer)
  private
    FIntf: ICoOmniSpectrum;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoOmniSpectrumProperties;
    function GetServerProperties: TCCoOmniSpectrumProperties;
{$ENDIF}
    function GetDefaultInterface: ICoOmniSpectrum;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoOmniSpectrum);
    procedure Disconnect; override;
    procedure CreateOmniSpectrumB(const COM_omniSpectrum: ICoOmniSpectrum);
    procedure CreateOmniSpectrumC(const COM_spectrometerChannelInfo: ICoSpectrometerChannelInfo);
    procedure CreateOmniSpectrumD(const COM_spectrometerChannelInfo: ICoSpectrometerChannelInfo; 
                                  COM_spectrum: OleVariant; COM_saturated: WordBool; 
                                  COM_integrationTime: Integer; 
                                  const COM_acquisitionTime: ICoHighResTimeStamp; 
                                  COM_boxcarWidth: Integer; COM_scansToAverage: Integer; 
                                  COM_correctForElectricalDark: WordBool; 
                                  COM_correctForNonLinearity: WordBool; 
                                  COM_correctForStrayLight: WordBool; COM_strobeEnabled: WordBool; 
                                  COM_strobeDelay: Integer; COM_rotationEnabled: WordBool; 
                                  const COM_userName: WideString);
    function getCopyWithUniqueCertificates: ICoOmniSpectrum;
    function isSaturated: WordBool;
    procedure setSaturated(COM_saturated: WordBool);
    function getIntegrationTime: Integer;
    procedure setIntegrationTime(COM_integrationTime: Integer);
    function isStrobeEnabled: WordBool;
    procedure setStrobeEnabled(COM_strobeEnabled: WordBool);
    function getStrobeDelay: Integer;
    procedure setStrobeDelay(COM_strobeDelay: Integer);
    function getPixelValues: OleVariant;
    procedure setPixelValues(COM_pixelValues: OleVariant);
    function getAcquisitionTime: ICoHighResTimeStamp;
    procedure setAcquisitionTime(const COM_acquisitionTime: ICoHighResTimeStamp);
    function getBoxcarWidth: Integer;
    procedure setBoxcarWidth(COM_boxcarWidth: Integer);
    function getScansToAverage: Integer;
    procedure setScanToAverage(COM_scansToAverage: Integer);
    function isCorrectForElectricalDark: WordBool;
    procedure setCorrectForElectricalDark(COM_correctForElectricalDark: WordBool);
    function isCorrectForNonLinearity: WordBool;
    procedure setCorrectForNonLinearity(COM_correctForNonLinearity: WordBool);
    function isCorrectForStrayLight: WordBool;
    procedure setCorrectForStrayLight(COM_correctForStrayLight: WordBool);
    function isRotationEnabled: WordBool;
    procedure setRotationEnabled(COM_rotationEnabled: WordBool);
    function getUserName: WideString;
    procedure setUserName(const COM_userName: WideString);
    function getCertificates: ICoVector;
    procedure addCertificate(const COM_certificate: ICoSpectrumCertificate);
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoOmniSpectrum read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoOmniSpectrumProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoOmniSpectrum
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoOmniSpectrumProperties = class(TPersistent)
  private
    FServer:    TCCoOmniSpectrum;
    function    GetDefaultInterface: ICoOmniSpectrum;
    constructor Create(AServer: TCCoOmniSpectrum);
  protected
  public
    property DefaultInterface: ICoOmniSpectrum read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoOpCodes provides a Create and CreateRemote method to          
// create instances of the default interface ICoOpCodes exposed by              
// the CoClass CCoOpCodes. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoOpCodes = class
    class function Create: ICoOpCodes;
    class function CreateRemote(const MachineName: string): ICoOpCodes;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoOpCodes
// Help String      : CoOpCodes Class
// Default Interface: ICoOpCodes
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoOpCodesProperties= class;
{$ENDIF}
  TCCoOpCodes = class(TOleServer)
  private
    FIntf: ICoOpCodes;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoOpCodesProperties;
    function GetServerProperties: TCCoOpCodesProperties;
{$ENDIF}
    function GetDefaultInterface: ICoOpCodes;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoOpCodes);
    procedure Disconnect; override;
    procedure CreateOpCodes;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoOpCodes read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoOpCodesProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoOpCodes
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoOpCodesProperties = class(TPersistent)
  private
    FServer:    TCCoOpCodes;
    function    GetDefaultInterface: ICoOpCodes;
    constructor Create(AServer: TCCoOpCodes);
  protected
  public
    property DefaultInterface: ICoOpCodes read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoPlugInProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoPlugInProvider exposed by              
// the CoClass CCoPlugInProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoPlugInProvider = class
    class function Create: ICoPlugInProvider;
    class function CreateRemote(const MachineName: string): ICoPlugInProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoPlugInProvider
// Help String      : CoPlugInProvider Class
// Default Interface: ICoPlugInProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoPlugInProviderProperties= class;
{$ENDIF}
  TCCoPlugInProvider = class(TOleServer)
  private
    FIntf: ICoPlugInProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoPlugInProviderProperties;
    function GetServerProperties: TCCoPlugInProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoPlugInProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoPlugInProvider);
    procedure Disconnect; override;
    procedure CreatePlugInProvider;
    function getPlugIns: ICoSpectrometerPlugInCollection;
    function initializePlugIns: OleVariant;
    procedure detectPlugIns;
    function isPlugInDetected(COM_param0: Integer): WordBool;
    function getNumberOfPlugIns: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoPlugInProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoPlugInProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoPlugInProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoPlugInProviderProperties = class(TPersistent)
  private
    FServer:    TCCoPlugInProvider;
    function    GetDefaultInterface: ICoPlugInProvider;
    constructor Create(AServer: TCCoPlugInProvider);
  protected
  public
    property DefaultInterface: ICoPlugInProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoPlugInProviderImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoPlugInProviderImpl exposed by              
// the CoClass CCoPlugInProviderImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoPlugInProviderImpl = class
    class function Create: ICoPlugInProviderImpl;
    class function CreateRemote(const MachineName: string): ICoPlugInProviderImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoPlugInProviderImpl
// Help String      : CoPlugInProviderImpl Class
// Default Interface: ICoPlugInProviderImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoPlugInProviderImplProperties= class;
{$ENDIF}
  TCCoPlugInProviderImpl = class(TOleServer)
  private
    FIntf: ICoPlugInProviderImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoPlugInProviderImplProperties;
    function GetServerProperties: TCCoPlugInProviderImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoPlugInProviderImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoPlugInProviderImpl);
    procedure Disconnect; override;
    procedure CreatePlugInProviderImplB(const COM_usbInt: ICoUSBInterface; 
                                        const COM_spec: ICoSpectrometer);
    procedure detectPlugIns;
    function getNumberOfPlugIns: Integer;
    function initializePlugIns: OleVariant;
    function isPlugInDetected(COM_id: Integer): WordBool;
    function getPlugIns: ICoSpectrometerPlugInCollection;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoPlugInProviderImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoPlugInProviderImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoPlugInProviderImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoPlugInProviderImplProperties = class(TPersistent)
  private
    FServer:    TCCoPlugInProviderImpl;
    function    GetDefaultInterface: ICoPlugInProviderImpl;
    constructor Create(AServer: TCCoPlugInProviderImpl);
  protected
  public
    property DefaultInterface: ICoPlugInProviderImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoPlugInProviderImplFPGA provides a Create and CreateRemote method to          
// create instances of the default interface ICoPlugInProviderImplFPGA exposed by              
// the CoClass CCoPlugInProviderImplFPGA. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoPlugInProviderImplFPGA = class
    class function Create: ICoPlugInProviderImplFPGA;
    class function CreateRemote(const MachineName: string): ICoPlugInProviderImplFPGA;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoPlugInProviderImplFPGA
// Help String      : CoPlugInProviderImplFPGA Class
// Default Interface: ICoPlugInProviderImplFPGA
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoPlugInProviderImplFPGAProperties= class;
{$ENDIF}
  TCCoPlugInProviderImplFPGA = class(TOleServer)
  private
    FIntf: ICoPlugInProviderImplFPGA;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoPlugInProviderImplFPGAProperties;
    function GetServerProperties: TCCoPlugInProviderImplFPGAProperties;
{$ENDIF}
    function GetDefaultInterface: ICoPlugInProviderImplFPGA;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoPlugInProviderImplFPGA);
    procedure Disconnect; override;
    procedure CreatePlugInProviderImplFPGAB(const COM_usbInt: ICoUSBInterface; 
                                            const COM_spec: ICoSpectrometer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoPlugInProviderImplFPGA read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoPlugInProviderImplFPGAProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoPlugInProviderImplFPGA
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoPlugInProviderImplFPGAProperties = class(TPersistent)
  private
    FServer:    TCCoPlugInProviderImplFPGA;
    function    GetDefaultInterface: ICoPlugInProviderImplFPGA;
    constructor Create(AServer: TCCoPlugInProviderImplFPGA);
  protected
  public
    property DefaultInterface: ICoPlugInProviderImplFPGA read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoPlugInProviderImplNonFPGA provides a Create and CreateRemote method to          
// create instances of the default interface ICoPlugInProviderImplNonFPGA exposed by              
// the CoClass CCoPlugInProviderImplNonFPGA. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoPlugInProviderImplNonFPGA = class
    class function Create: ICoPlugInProviderImplNonFPGA;
    class function CreateRemote(const MachineName: string): ICoPlugInProviderImplNonFPGA;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoPlugInProviderImplNonFPGA
// Help String      : CoPlugInProviderImplNonFPGA Class
// Default Interface: ICoPlugInProviderImplNonFPGA
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoPlugInProviderImplNonFPGAProperties= class;
{$ENDIF}
  TCCoPlugInProviderImplNonFPGA = class(TOleServer)
  private
    FIntf: ICoPlugInProviderImplNonFPGA;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoPlugInProviderImplNonFPGAProperties;
    function GetServerProperties: TCCoPlugInProviderImplNonFPGAProperties;
{$ENDIF}
    function GetDefaultInterface: ICoPlugInProviderImplNonFPGA;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoPlugInProviderImplNonFPGA);
    procedure Disconnect; override;
    procedure CreatePlugInProviderImplNonFPGAB(const COM_usbInt: ICoUSBInterface; 
                                               const COM_spec: ICoSpectrometer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoPlugInProviderImplNonFPGA read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoPlugInProviderImplNonFPGAProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoPlugInProviderImplNonFPGA
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoPlugInProviderImplNonFPGAProperties = class(TPersistent)
  private
    FServer:    TCCoPlugInProviderImplNonFPGA;
    function    GetDefaultInterface: ICoPlugInProviderImplNonFPGA;
    constructor Create(AServer: TCCoPlugInProviderImplNonFPGA);
  protected
  public
    property DefaultInterface: ICoPlugInProviderImplNonFPGA read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoPollingTest provides a Create and CreateRemote method to          
// create instances of the default interface ICoPollingTest exposed by              
// the CoClass CCoPollingTest. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoPollingTest = class
    class function Create: ICoPollingTest;
    class function CreateRemote(const MachineName: string): ICoPollingTest;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoPollingTest
// Help String      : CoPollingTest Class
// Default Interface: ICoPollingTest
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoPollingTestProperties= class;
{$ENDIF}
  TCCoPollingTest = class(TOleServer)
  private
    FIntf: ICoPollingTest;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoPollingTestProperties;
    function GetServerProperties: TCCoPollingTestProperties;
{$ENDIF}
    function GetDefaultInterface: ICoPollingTest;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoPollingTest);
    procedure Disconnect; override;
    procedure CreatePollingTest;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoPollingTest read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoPollingTestProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoPollingTest
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoPollingTestProperties = class(TPersistent)
  private
    FServer:    TCCoPollingTest;
    function    GetDefaultInterface: ICoPollingTest;
    constructor Create(AServer: TCCoPollingTest);
  protected
  public
    property DefaultInterface: ICoPollingTest read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoQE65000 provides a Create and CreateRemote method to          
// create instances of the default interface ICoQE65000 exposed by              
// the CoClass CCoQE65000. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoQE65000 = class
    class function Create: ICoQE65000;
    class function CreateRemote(const MachineName: string): ICoQE65000;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoQE65000
// Help String      : CoQE65000 Class
// Default Interface: ICoQE65000
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoQE65000Properties= class;
{$ENDIF}
  TCCoQE65000 = class(TOleServer)
  private
    FIntf: ICoQE65000;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoQE65000Properties;
    function GetServerProperties: TCCoQE65000Properties;
{$ENDIF}
    function GetDefaultInterface: ICoQE65000;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoQE65000);
    procedure Disconnect; override;
    procedure CreateQE65000;
    procedure CreateQE65000B(COM_i: Integer);
    procedure setEndpoints;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
    procedure openSpectrometer(COM_index: Integer);
    function getGUIFeatures: ICoGUIProviderCollection;
    procedure setStrobeDelay(COM_delay: Integer);
    function getActualIntegrationTime: Integer;
    function getPlugIns: ICoSpectrometerPlugInCollection;
    function getNumberOfPlugIns: Integer;
    function isPlugInDetected(COM_id: Integer): WordBool;
    function initializePlugIns: OleVariant;
    procedure detectPlugIns;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
    function getPSOCVersion: WideString;
    function getFPGAFirmwareVersion: WideString;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer);
    function getContinuousStrobeDelayMinimum: Integer;
    function getContinuousStrobeDelayMaximum: Integer;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer);
    function getIntegrationTimeBaseClock: Integer;
    function getIntegrationClockTimer: Integer;
    function getAdvancedIntegrationTimeMinimum: Integer;
    function getAdvancedIntegrationTimeMaximum: Integer;
    function getAdvancedIntegrationTimeIncrement: Integer;
    procedure setExternalTriggerMode(COM_mode: Integer);
    function getExternalTriggerModes: ICoExternalTriggerModeCollection;
    procedure setShutterClock(COM_value: Integer);
    function getShutterClock: Integer;
    procedure setSingleStrobeLow(COM_value: Integer);
    procedure setSingleStrobeHigh(COM_value: Integer);
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double;
    function getSingleStrobeLow: Integer;
    function getSingleStrobeHigh: Integer;
    function getSingleStrobeMinimum: Integer;
    function getSingleStrobeMaximum: Integer;
    function getSingleStrobeIncrement: Integer;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet);
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet);
    procedure setValueAllBits(const COM_bitSet: ICoBitSet);
    procedure setDirectionBitmask(COM_bitmask: Smallint);
    procedure setMuxBitmask(COM_bitmask: Smallint);
    procedure setValueBitmask(COM_bitmask: Smallint);
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool);
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool);
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool);
    function getTotalGPIOBits: Integer;
    function getDirectionBits: ICoBitSet;
    function getMuxBits: ICoBitSet;
    function getValueBits: ICoBitSet;
    function getValueBit(COM_bitNumber: Integer): Integer;
    function getNumberOfPins: Integer;
    function getBoardTemperatureCelsius: Double;
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant);
    procedure setMasterClockDivisor(COM_value: Integer);
    function getMasterClockDivisor: Integer;
    procedure setExternalTriggerDelay(COM_counts: Integer);
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double;
    function getExternalTriggerDelayMinimum: Integer;
    function getExternalTriggerDelayMaximum: Integer;
    function getExternalTriggerDelayIncrement: Integer;
    procedure setTECEnable(COM_enable: WordBool);
    procedure setFanEnable(COM_enable: WordBool);
    function getDetectorTemperatureCelsius: Double;
    function getDetectorTemperatureSetPointCelsius: Double;
    procedure setDetectorSetPointCelsius(COM_point: Double);
    function getSetPointMinimumCelsius: Double;
    function getSetPointMaximumCelsius: Double;
    function getSetPointIncrementCelsius: Double;
    function isSaveTECStateEnabled: WordBool;
    procedure saveTECState;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getNonlinearityCoefficients: ICoCoefficientsCollection;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_index: Integer): OleVariant;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer);
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer);
    function getStrayLight(COM_index: Integer): Double;
    function isAdvancedVersion: WordBool;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    function getSpectrometer: ICoQE65000;
    procedure addExposureListener(const COM_listener: ICoExposureListener);
    function getCcdWidth: Integer;
    function getCcdHeight: Integer;
    function getLastExposure: ICoSpectrometerExposure;
    procedure removeExposureListener(const COM_listener: ICoExposureListener);
    function getQE65000Exposure(const COM_spectrum: ICoSpectrum): ICoSpectrometerExposure;
    procedure set2DMode(COM_channelIndex: Integer);
    procedure set1DMode(COM_channelIndex: Integer);
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
    function has1DMode: WordBool;
    function is1DMode: WordBool;
    function is2DMode: WordBool;
    function get2DintegrationTime: Integer;
    procedure addIntegrationTimeChangeListener(const COM_listener: ICoIntegrationTimeChangeListener);
    procedure removeIntegrationTimeChangeListener(const COM_listener: ICoIntegrationTimeChangeListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoQE65000 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoQE65000Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoQE65000
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoQE65000Properties = class(TPersistent)
  private
    FServer:    TCCoQE65000;
    function    GetDefaultInterface: ICoQE65000;
    constructor Create(AServer: TCCoQE65000);
  protected
  public
    property DefaultInterface: ICoQE65000 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoRamanExposure provides a Create and CreateRemote method to          
// create instances of the default interface ICoRamanExposure exposed by              
// the CoClass CCoRamanExposure. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoRamanExposure = class
    class function Create: ICoRamanExposure;
    class function CreateRemote(const MachineName: string): ICoRamanExposure;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoRamanExposure
// Help String      : CoRamanExposure Class
// Default Interface: ICoRamanExposure
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoRamanExposureProperties= class;
{$ENDIF}
  TCCoRamanExposure = class(TOleServer)
  private
    FIntf: ICoRamanExposure;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoRamanExposureProperties;
    function GetServerProperties: TCCoRamanExposureProperties;
{$ENDIF}
    function GetDefaultInterface: ICoRamanExposure;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoRamanExposure);
    procedure Disconnect; override;
    procedure CreateRamanExposureB(const COM_source: ICoMMSRaman);
    function getShutterState: Shortint;
    procedure setShutterState(COM_shutterState: Shortint);
    function getExposureType: Shortint;
    procedure setExposureType(COM_exposureType: Shortint);
    function getExposuresToAverage: Smallint;
    procedure setExposuresToAverage(COM_exposuresToAverage: Smallint);
    function getStrExposureType: WideString;
    function getBitsPerPixel: Integer;
    procedure setBitsPerPixel(COM_bitsPerPixel: Integer);
    function getExposureTime: Integer;
    procedure setExposureTime(COM_exposureTime: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoRamanExposure read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoRamanExposureProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoRamanExposure
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoRamanExposureProperties = class(TPersistent)
  private
    FServer:    TCCoRamanExposure;
    function    GetDefaultInterface: ICoRamanExposure;
    constructor Create(AServer: TCCoRamanExposure);
  protected
  public
    property DefaultInterface: ICoRamanExposure read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoRamanReconstruction provides a Create and CreateRemote method to          
// create instances of the default interface ICoRamanReconstruction exposed by              
// the CoClass CCoRamanReconstruction. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoRamanReconstruction = class
    class function Create: ICoRamanReconstruction;
    class function CreateRemote(const MachineName: string): ICoRamanReconstruction;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoRamanReconstruction
// Help String      : CoRamanReconstruction Class
// Default Interface: ICoRamanReconstruction
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoRamanReconstructionProperties= class;
{$ENDIF}
  TCCoRamanReconstruction = class(TOleServer)
  private
    FIntf: ICoRamanReconstruction;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoRamanReconstructionProperties;
    function GetServerProperties: TCCoRamanReconstructionProperties;
{$ENDIF}
    function GetDefaultInterface: ICoRamanReconstruction;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoRamanReconstruction);
    procedure Disconnect; override;
    procedure CreateRamanReconstruction;
    function getAlgorithm: Shortint;
    procedure setAlgorithm(COM_algorithm: Shortint);
    function getReconstructionType: Shortint;
    procedure setReconstructionType(COM_reconstructionType: Shortint);
    function isSaturated: WordBool;
    procedure setSaturated(COM_saturated: WordBool);
    function getIntensities: OleVariant;
    procedure setIntensities(COM_intensities: OleVariant);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoRamanReconstruction read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoRamanReconstructionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoRamanReconstruction
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoRamanReconstructionProperties = class(TPersistent)
  private
    FServer:    TCCoRamanReconstruction;
    function    GetDefaultInterface: ICoRamanReconstruction;
    constructor Create(AServer: TCCoRamanReconstruction);
  protected
  public
    property DefaultInterface: ICoRamanReconstruction read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoRawData provides a Create and CreateRemote method to          
// create instances of the default interface ICoRawData exposed by              
// the CoClass CCoRawData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoRawData = class
    class function Create: ICoRawData;
    class function CreateRemote(const MachineName: string): ICoRawData;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoRawData
// Help String      : CoRawData Class
// Default Interface: ICoRawData
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoRawDataProperties= class;
{$ENDIF}
  TCCoRawData = class(TOleServer)
  private
    FIntf: ICoRawData;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoRawDataProperties;
    function GetServerProperties: TCCoRawDataProperties;
{$ENDIF}
    function GetDefaultInterface: ICoRawData;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoRawData);
    procedure Disconnect; override;
    procedure CreateRawDataB(COM_numBytes: Integer);
    function getData: OleVariant;
    procedure setData(COM_data: OleVariant);
    function getStartTime: Integer;
    procedure setStartTime(COM_startTime: Integer);
    function getEndTime: Integer;
    procedure setEndTime(COM_endTime: Integer);
    function getRequestingChannel: Integer;
    procedure setRequestingChannel(COM_requestingChannel: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoRawData read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoRawDataProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoRawData
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoRawDataProperties = class(TPersistent)
  private
    FServer:    TCCoRawData;
    function    GetDefaultInterface: ICoRawData;
    constructor Create(AServer: TCCoRawData);
  protected
  public
    property DefaultInterface: ICoRawData read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSAS provides a Create and CreateRemote method to          
// create instances of the default interface ICoSAS exposed by              
// the CoClass CCoSAS. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSAS = class
    class function Create: ICoSAS;
    class function CreateRemote(const MachineName: string): ICoSAS;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSAS
// Help String      : CoSAS Class
// Default Interface: ICoSAS
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSASProperties= class;
{$ENDIF}
  TCCoSAS = class(TOleServer)
  private
    FIntf: ICoSAS;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSASProperties;
    function GetServerProperties: TCCoSASProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSAS;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSAS);
    procedure Disconnect; override;
    procedure CreateSAS;
    procedure CreateSASB(COM_i: Integer);
    procedure setEndpoints;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
    procedure openSpectrometer(COM_index: Integer);
    function getGUIFeatures: ICoGUIProviderCollection;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
    function getSpectrumB: ICoSpectrum;
    function getStatus: ICoSpectrometerStatus;
    function readIntegrationTime: Integer;
    function toString: WideString;
    procedure setExternalTriggerMode(COM_mode: Integer);
    function getExternalTriggerModes: ICoExternalTriggerModeCollection;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getNonlinearityCoefficients: ICoCoefficientsCollection;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_index: Integer): OleVariant;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer);
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer);
    function getStrayLight(COM_index: Integer): Double;
    function isAdvancedVersion: WordBool;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSAS read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSASProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSAS
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSASProperties = class(TPersistent)
  private
    FServer:    TCCoSAS;
    function    GetDefaultInterface: ICoSAS;
    constructor Create(AServer: TCCoSAS);
  protected
  public
    property DefaultInterface: ICoSAS read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSASChannel provides a Create and CreateRemote method to          
// create instances of the default interface ICoSASChannel exposed by              
// the CoClass CCoSASChannel. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSASChannel = class
    class function Create: ICoSASChannel;
    class function CreateRemote(const MachineName: string): ICoSASChannel;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSASChannel
// Help String      : CoSASChannel Class
// Default Interface: ICoSASChannel
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSASChannelProperties= class;
{$ENDIF}
  TCCoSASChannel = class(TOleServer)
  private
    FIntf: ICoSASChannel;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSASChannelProperties;
    function GetServerProperties: TCCoSASChannelProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSASChannel;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSASChannel);
    procedure Disconnect; override;
    procedure CreateSASChannelB(const COM_spectrometer: ICoSpectrometer; 
                                const COM_coefficients: ICoCoefficients; COM_channel: Integer);
    procedure getCoefficientsFromSpectrometer;
    procedure setCoefficients;
    procedure setWavelengthCalibration;
    function getEndingWavelength: Double;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSASChannel read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSASChannelProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSASChannel
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSASChannelProperties = class(TPersistent)
  private
    FServer:    TCCoSASChannel;
    function    GetDefaultInterface: ICoSASChannel;
    constructor Create(AServer: TCCoSASChannel);
  protected
  public
    property DefaultInterface: ICoSASChannel read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSHA provides a Create and CreateRemote method to          
// create instances of the default interface ICoSHA exposed by              
// the CoClass CCoSHA. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSHA = class
    class function Create: ICoSHA;
    class function CreateRemote(const MachineName: string): ICoSHA;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSHA
// Help String      : CoSHA Class
// Default Interface: ICoSHA
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSHAProperties= class;
{$ENDIF}
  TCCoSHA = class(TOleServer)
  private
    FIntf: ICoSHA;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSHAProperties;
    function GetServerProperties: TCCoSHAProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSHA;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSHA);
    procedure Disconnect; override;
    procedure CreateSHA;
    function isHyperAdapterPresent: WordBool;
    function setHyperAdapterDAC(COM_param0: Double): Integer;
    function readHyperAdapterEEPROM(COM_param0: OleVariant; COM_param1: Integer; COM_param2: Integer): Integer;
    function writeHyperAdapterEEPROM(COM_param0: OleVariant; COM_param1: Integer; 
                                     COM_param2: Integer): Integer;
    procedure initSHA(const COM_param0: ICoSHAChannel);
    procedure calibrate;
    function getCalibrationTime: Double;
    procedure restoreCalibration;
    function getSHAChannel: ICoSHAChannel;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSHA read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSHAProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSHA
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSHAProperties = class(TPersistent)
  private
    FServer:    TCCoSHA;
    function    GetDefaultInterface: ICoSHA;
    constructor Create(AServer: TCCoSHA);
  protected
  public
    property DefaultInterface: ICoSHA read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSHAConstants provides a Create and CreateRemote method to          
// create instances of the default interface ICoSHAConstants exposed by              
// the CoClass CCoSHAConstants. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSHAConstants = class
    class function Create: ICoSHAConstants;
    class function CreateRemote(const MachineName: string): ICoSHAConstants;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSHAConstants
// Help String      : CoSHAConstants Class
// Default Interface: ICoSHAConstants
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSHAConstantsProperties= class;
{$ENDIF}
  TCCoSHAConstants = class(TOleServer)
  private
    FIntf: ICoSHAConstants;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSHAConstantsProperties;
    function GetServerProperties: TCCoSHAConstantsProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSHAConstants;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSHAConstants);
    procedure Disconnect; override;
    procedure CreateSHAConstants;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSHAConstants read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSHAConstantsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSHAConstants
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSHAConstantsProperties = class(TPersistent)
  private
    FServer:    TCCoSHAConstants;
    function    GetDefaultInterface: ICoSHAConstants;
    constructor Create(AServer: TCCoSHAConstants);
  protected
  public
    property DefaultInterface: ICoSHAConstants read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSHAGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoSHAGUIProvider exposed by              
// the CoClass CCoSHAGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSHAGUIProvider = class
    class function Create: ICoSHAGUIProvider;
    class function CreateRemote(const MachineName: string): ICoSHAGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSHAGUIProvider
// Help String      : CoSHAGUIProvider Class
// Default Interface: ICoSHAGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSHAGUIProviderProperties= class;
{$ENDIF}
  TCCoSHAGUIProvider = class(TOleServer)
  private
    FIntf: ICoSHAGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSHAGUIProviderProperties;
    function GetServerProperties: TCCoSHAGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSHAGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSHAGUIProvider);
    procedure Disconnect; override;
    procedure CreateSHAGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSHAGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSHAGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSHAGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSHAGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoSHAGUIProvider;
    function    GetDefaultInterface: ICoSHAGUIProvider;
    constructor Create(AServer: TCCoSHAGUIProvider);
  protected
  public
    property DefaultInterface: ICoSHAGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSHAImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoSHAImpl exposed by              
// the CoClass CCoSHAImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSHAImpl = class
    class function Create: ICoSHAImpl;
    class function CreateRemote(const MachineName: string): ICoSHAImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSHAImpl
// Help String      : CoSHAImpl Class
// Default Interface: ICoSHAImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSHAImplProperties= class;
{$ENDIF}
  TCCoSHAImpl = class(TOleServer)
  private
    FIntf: ICoSHAImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSHAImplProperties;
    function GetServerProperties: TCCoSHAImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSHAImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSHAImpl);
    procedure Disconnect; override;
    procedure CreateSHAImplB(const COM_usbInt: ICoUSBInterface; 
                             const COM_spectrometer: ICoSpectrometer);
    function isHyperAdapterPresent: WordBool;
    procedure initSHA(const COM_channel: ICoSHAChannel);
    function setHyperAdapterDAC(COM_voltage: Double): Integer;
    function readHyperAdapterEEPROM(COM_data: OleVariant; COM_start: Integer; COM_length: Integer): Integer;
    function writeHyperAdapterEEPROM(COM_data: OleVariant; COM_start: Integer; COM_length: Integer): Integer;
    procedure calibrate;
    procedure restoreCalibration;
    function getCalibrationTime: Double;
    function getSHAChannel: ICoSHAChannel;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSHAImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSHAImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSHAImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSHAImplProperties = class(TPersistent)
  private
    FServer:    TCCoSHAImpl;
    function    GetDefaultInterface: ICoSHAImpl;
    constructor Create(AServer: TCCoSHAImpl);
  protected
  public
    property DefaultInterface: ICoSHAImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSPIBus provides a Create and CreateRemote method to          
// create instances of the default interface ICoSPIBus exposed by              
// the CoClass CCoSPIBus. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSPIBus = class
    class function Create: ICoSPIBus;
    class function CreateRemote(const MachineName: string): ICoSPIBus;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSPIBus
// Help String      : CoSPIBus Class
// Default Interface: ICoSPIBus
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSPIBusProperties= class;
{$ENDIF}
  TCCoSPIBus = class(TOleServer)
  private
    FIntf: ICoSPIBus;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSPIBusProperties;
    function GetServerProperties: TCCoSPIBusProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSPIBus;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSPIBus);
    procedure Disconnect; override;
    procedure CreateSPIBus;
    function getSPIBytes(COM_param0: OleVariant; COM_param1: Integer): OleVariant;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSPIBus read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSPIBusProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSPIBus
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSPIBusProperties = class(TPersistent)
  private
    FServer:    TCCoSPIBus;
    function    GetDefaultInterface: ICoSPIBus;
    constructor Create(AServer: TCCoSPIBus);
  protected
  public
    property DefaultInterface: ICoSPIBus read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSPIBusGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoSPIBusGUIProvider exposed by              
// the CoClass CCoSPIBusGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSPIBusGUIProvider = class
    class function Create: ICoSPIBusGUIProvider;
    class function CreateRemote(const MachineName: string): ICoSPIBusGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSPIBusGUIProvider
// Help String      : CoSPIBusGUIProvider Class
// Default Interface: ICoSPIBusGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSPIBusGUIProviderProperties= class;
{$ENDIF}
  TCCoSPIBusGUIProvider = class(TOleServer)
  private
    FIntf: ICoSPIBusGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSPIBusGUIProviderProperties;
    function GetServerProperties: TCCoSPIBusGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSPIBusGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSPIBusGUIProvider);
    procedure Disconnect; override;
    procedure CreateSPIBusGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSPIBusGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSPIBusGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSPIBusGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSPIBusGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoSPIBusGUIProvider;
    function    GetDefaultInterface: ICoSPIBusGUIProvider;
    constructor Create(AServer: TCCoSPIBusGUIProvider);
  protected
  public
    property DefaultInterface: ICoSPIBusGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSPIBusImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoSPIBusImpl exposed by              
// the CoClass CCoSPIBusImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSPIBusImpl = class
    class function Create: ICoSPIBusImpl;
    class function CreateRemote(const MachineName: string): ICoSPIBusImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSPIBusImpl
// Help String      : CoSPIBusImpl Class
// Default Interface: ICoSPIBusImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSPIBusImplProperties= class;
{$ENDIF}
  TCCoSPIBusImpl = class(TOleServer)
  private
    FIntf: ICoSPIBusImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSPIBusImplProperties;
    function GetServerProperties: TCCoSPIBusImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSPIBusImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSPIBusImpl);
    procedure Disconnect; override;
    procedure CreateSPIBusImplB(const COM_usbInt: ICoUSBInterface);
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSPIBusImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSPIBusImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSPIBusImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSPIBusImplProperties = class(TPersistent)
  private
    FServer:    TCCoSPIBusImpl;
    function    GetDefaultInterface: ICoSPIBusImpl;
    constructor Create(AServer: TCCoSPIBusImpl);
  protected
  public
    property DefaultInterface: ICoSPIBusImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSPIBusImplFPGA provides a Create and CreateRemote method to          
// create instances of the default interface ICoSPIBusImplFPGA exposed by              
// the CoClass CCoSPIBusImplFPGA. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSPIBusImplFPGA = class
    class function Create: ICoSPIBusImplFPGA;
    class function CreateRemote(const MachineName: string): ICoSPIBusImplFPGA;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSPIBusImplFPGA
// Help String      : CoSPIBusImplFPGA Class
// Default Interface: ICoSPIBusImplFPGA
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSPIBusImplFPGAProperties= class;
{$ENDIF}
  TCCoSPIBusImplFPGA = class(TOleServer)
  private
    FIntf: ICoSPIBusImplFPGA;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSPIBusImplFPGAProperties;
    function GetServerProperties: TCCoSPIBusImplFPGAProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSPIBusImplFPGA;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSPIBusImplFPGA);
    procedure Disconnect; override;
    procedure CreateSPIBusImplFPGAB(const COM_usb: ICoUSBInterface);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSPIBusImplFPGA read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSPIBusImplFPGAProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSPIBusImplFPGA
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSPIBusImplFPGAProperties = class(TPersistent)
  private
    FServer:    TCCoSPIBusImplFPGA;
    function    GetDefaultInterface: ICoSPIBusImplFPGA;
    constructor Create(AServer: TCCoSPIBusImplFPGA);
  protected
  public
    property DefaultInterface: ICoSPIBusImplFPGA read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSPIBusImplNonFPGA provides a Create and CreateRemote method to          
// create instances of the default interface ICoSPIBusImplNonFPGA exposed by              
// the CoClass CCoSPIBusImplNonFPGA. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSPIBusImplNonFPGA = class
    class function Create: ICoSPIBusImplNonFPGA;
    class function CreateRemote(const MachineName: string): ICoSPIBusImplNonFPGA;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSPIBusImplNonFPGA
// Help String      : CoSPIBusImplNonFPGA Class
// Default Interface: ICoSPIBusImplNonFPGA
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSPIBusImplNonFPGAProperties= class;
{$ENDIF}
  TCCoSPIBusImplNonFPGA = class(TOleServer)
  private
    FIntf: ICoSPIBusImplNonFPGA;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSPIBusImplNonFPGAProperties;
    function GetServerProperties: TCCoSPIBusImplNonFPGAProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSPIBusImplNonFPGA;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSPIBusImplNonFPGA);
    procedure Disconnect; override;
    procedure CreateSPIBusImplNonFPGAB(const COM_usb: ICoUSBInterface);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSPIBusImplNonFPGA read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSPIBusImplNonFPGAProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSPIBusImplNonFPGA
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSPIBusImplNonFPGAProperties = class(TPersistent)
  private
    FServer:    TCCoSPIBusImplNonFPGA;
    function    GetDefaultInterface: ICoSPIBusImplNonFPGA;
    constructor Create(AServer: TCCoSPIBusImplNonFPGA);
  protected
  public
    property DefaultInterface: ICoSPIBusImplNonFPGA read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoShutterClock provides a Create and CreateRemote method to          
// create instances of the default interface ICoShutterClock exposed by              
// the CoClass CCoShutterClock. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoShutterClock = class
    class function Create: ICoShutterClock;
    class function CreateRemote(const MachineName: string): ICoShutterClock;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoShutterClock
// Help String      : CoShutterClock Class
// Default Interface: ICoShutterClock
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoShutterClockProperties= class;
{$ENDIF}
  TCCoShutterClock = class(TOleServer)
  private
    FIntf: ICoShutterClock;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoShutterClockProperties;
    function GetServerProperties: TCCoShutterClockProperties;
{$ENDIF}
    function GetDefaultInterface: ICoShutterClock;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoShutterClock);
    procedure Disconnect; override;
    procedure CreateShutterClock;
    function getShutterClock: Integer;
    procedure setShutterClock(COM_param0: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoShutterClock read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoShutterClockProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoShutterClock
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoShutterClockProperties = class(TPersistent)
  private
    FServer:    TCCoShutterClock;
    function    GetDefaultInterface: ICoShutterClock;
    constructor Create(AServer: TCCoShutterClock);
  protected
  public
    property DefaultInterface: ICoShutterClock read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoShutterClockImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoShutterClockImpl exposed by              
// the CoClass CCoShutterClockImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoShutterClockImpl = class
    class function Create: ICoShutterClockImpl;
    class function CreateRemote(const MachineName: string): ICoShutterClockImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoShutterClockImpl
// Help String      : CoShutterClockImpl Class
// Default Interface: ICoShutterClockImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoShutterClockImplProperties= class;
{$ENDIF}
  TCCoShutterClockImpl = class(TOleServer)
  private
    FIntf: ICoShutterClockImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoShutterClockImplProperties;
    function GetServerProperties: TCCoShutterClockImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoShutterClockImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoShutterClockImpl);
    procedure Disconnect; override;
    procedure CreateShutterClockImplB(const COM_usbInt: ICoUSBInterface);
    function getShutterClock: Integer;
    procedure setShutterClock(COM_value: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoShutterClockImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoShutterClockImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoShutterClockImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoShutterClockImplProperties = class(TPersistent)
  private
    FServer:    TCCoShutterClockImpl;
    function    GetDefaultInterface: ICoShutterClockImpl;
    constructor Create(AServer: TCCoShutterClockImpl);
  protected
  public
    property DefaultInterface: ICoShutterClockImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSimulation provides a Create and CreateRemote method to          
// create instances of the default interface ICoSimulation exposed by              
// the CoClass CCoSimulation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSimulation = class
    class function Create: ICoSimulation;
    class function CreateRemote(const MachineName: string): ICoSimulation;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSimulation
// Help String      : CoSimulation Class
// Default Interface: ICoSimulation
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSimulationProperties= class;
{$ENDIF}
  TCCoSimulation = class(TOleServer)
  private
    FIntf: ICoSimulation;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSimulationProperties;
    function GetServerProperties: TCCoSimulationProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSimulation;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSimulation);
    procedure Disconnect; override;
    procedure CreateSimulationB(COM_i: Integer);
    procedure openSpectrometer(COM_index: Integer);
    function getGUIFeatures: ICoGUIProviderCollection;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
    procedure setNumberOfPixels(COM_pixels: Integer; COM_dark: Integer);
    procedure setSpectrumType(COM_type: Integer);
    function getTest(const COM_test: WideString): WideString;
    function getSerialNumber: WideString;
    function getFirmwareVersion: WideString;
    procedure setStrobeEnable(COM_strobe: WordBool);
    procedure setIntegrationTime(COM_intTime: Integer);
    procedure closeSpectrometer;
    function getInfo(COM_slot: Integer): WideString;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_index: Integer): OleVariant;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSimulation read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSimulationProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSimulation
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSimulationProperties = class(TPersistent)
  private
    FServer:    TCCoSimulation;
    function    GetDefaultInterface: ICoSimulation;
    constructor Create(AServer: TCCoSimulation);
  protected
  public
    property DefaultInterface: ICoSimulation read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSimulationChannel provides a Create and CreateRemote method to          
// create instances of the default interface ICoSimulationChannel exposed by              
// the CoClass CCoSimulationChannel. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSimulationChannel = class
    class function Create: ICoSimulationChannel;
    class function CreateRemote(const MachineName: string): ICoSimulationChannel;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSimulationChannel
// Help String      : CoSimulationChannel Class
// Default Interface: ICoSimulationChannel
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSimulationChannelProperties= class;
{$ENDIF}
  TCCoSimulationChannel = class(TOleServer)
  private
    FIntf: ICoSimulationChannel;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSimulationChannelProperties;
    function GetServerProperties: TCCoSimulationChannelProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSimulationChannel;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSimulationChannel);
    procedure Disconnect; override;
    procedure CreateSimulationChannelB(const COM_s: ICoSpectrometer; const COM_c: ICoCoefficients; 
                                       COM_i: Integer);
    procedure getCoefficientsFromSpectrometer;
    procedure fixNumberOfPixels;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSimulationChannel read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSimulationChannelProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSimulationChannel
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSimulationChannelProperties = class(TPersistent)
  private
    FServer:    TCCoSimulationChannel;
    function    GetDefaultInterface: ICoSimulationChannel;
    constructor Create(AServer: TCCoSimulationChannel);
  protected
  public
    property DefaultInterface: ICoSimulationChannel read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSimulationGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoSimulationGUIProvider exposed by              
// the CoClass CCoSimulationGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSimulationGUIProvider = class
    class function Create: ICoSimulationGUIProvider;
    class function CreateRemote(const MachineName: string): ICoSimulationGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSimulationGUIProvider
// Help String      : CoSimulationGUIProvider Class
// Default Interface: ICoSimulationGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSimulationGUIProviderProperties= class;
{$ENDIF}
  TCCoSimulationGUIProvider = class(TOleServer)
  private
    FIntf: ICoSimulationGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSimulationGUIProviderProperties;
    function GetServerProperties: TCCoSimulationGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSimulationGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSimulationGUIProvider);
    procedure Disconnect; override;
    procedure CreateSimulationGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSimulationGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSimulationGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSimulationGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSimulationGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoSimulationGUIProvider;
    function    GetDefaultInterface: ICoSimulationGUIProvider;
    constructor Create(AServer: TCCoSimulationGUIProvider);
  protected
  public
    property DefaultInterface: ICoSimulationGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSimulationImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoSimulationImpl exposed by              
// the CoClass CCoSimulationImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSimulationImpl = class
    class function Create: ICoSimulationImpl;
    class function CreateRemote(const MachineName: string): ICoSimulationImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSimulationImpl
// Help String      : CoSimulationImpl Class
// Default Interface: ICoSimulationImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSimulationImplProperties= class;
{$ENDIF}
  TCCoSimulationImpl = class(TOleServer)
  private
    FIntf: ICoSimulationImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSimulationImplProperties;
    function GetServerProperties: TCCoSimulationImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSimulationImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSimulationImpl);
    procedure Disconnect; override;
    procedure CreateSimulationImplB(const COM_s: ICoSimulation);
    procedure setNumberOfPixels(COM_pixels: Integer; COM_dark: Integer);
    procedure setSpectrumType(COM_type: Integer);
    function getNumberOfPixels: Integer;
    function getNumberOfDarkPixels: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSimulationImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSimulationImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSimulationImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSimulationImplProperties = class(TPersistent)
  private
    FServer:    TCCoSimulationImpl;
    function    GetDefaultInterface: ICoSimulationImpl;
    constructor Create(AServer: TCCoSimulationImpl);
  protected
  public
    property DefaultInterface: ICoSimulationImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSimulationProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoSimulationProvider exposed by              
// the CoClass CCoSimulationProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSimulationProvider = class
    class function Create: ICoSimulationProvider;
    class function CreateRemote(const MachineName: string): ICoSimulationProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSimulationProvider
// Help String      : CoSimulationProvider Class
// Default Interface: ICoSimulationProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSimulationProviderProperties= class;
{$ENDIF}
  TCCoSimulationProvider = class(TOleServer)
  private
    FIntf: ICoSimulationProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSimulationProviderProperties;
    function GetServerProperties: TCCoSimulationProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSimulationProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSimulationProvider);
    procedure Disconnect; override;
    procedure CreateSimulationProvider;
    procedure setNumberOfPixels(COM_param0: Integer; COM_param1: Integer);
    procedure setSpectrumType(COM_param0: Integer);
    function getNumberOfPixels: Integer;
    function getNumberOfDarkPixels: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSimulationProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSimulationProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSimulationProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSimulationProviderProperties = class(TPersistent)
  private
    FServer:    TCCoSimulationProvider;
    function    GetDefaultInterface: ICoSimulationProvider;
    constructor Create(AServer: TCCoSimulationProvider);
  protected
  public
    property DefaultInterface: ICoSimulationProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSingleStrobe provides a Create and CreateRemote method to          
// create instances of the default interface ICoSingleStrobe exposed by              
// the CoClass CCoSingleStrobe. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSingleStrobe = class
    class function Create: ICoSingleStrobe;
    class function CreateRemote(const MachineName: string): ICoSingleStrobe;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSingleStrobe
// Help String      : CoSingleStrobe Class
// Default Interface: ICoSingleStrobe
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSingleStrobeProperties= class;
{$ENDIF}
  TCCoSingleStrobe = class(TOleServer)
  private
    FIntf: ICoSingleStrobe;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSingleStrobeProperties;
    function GetServerProperties: TCCoSingleStrobeProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSingleStrobe;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSingleStrobe);
    procedure Disconnect; override;
    procedure CreateSingleStrobe;
    function getSingleStrobeHigh: Integer;
    procedure setSingleStrobeHigh(COM_param0: Integer);
    function getSingleStrobeLow: Integer;
    procedure setSingleStrobeLow(COM_param0: Integer);
    function getSingleStrobeMinimum: Integer;
    function getSingleStrobeMaximum: Integer;
    function getSingleStrobeIncrement: Integer;
    function getSingleStrobeCountsToMicros(COM_param0: Integer): Double;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSingleStrobe read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSingleStrobeProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSingleStrobe
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSingleStrobeProperties = class(TPersistent)
  private
    FServer:    TCCoSingleStrobe;
    function    GetDefaultInterface: ICoSingleStrobe;
    constructor Create(AServer: TCCoSingleStrobe);
  protected
  public
    property DefaultInterface: ICoSingleStrobe read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSingleStrobeGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoSingleStrobeGUIProvider exposed by              
// the CoClass CCoSingleStrobeGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSingleStrobeGUIProvider = class
    class function Create: ICoSingleStrobeGUIProvider;
    class function CreateRemote(const MachineName: string): ICoSingleStrobeGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSingleStrobeGUIProvider
// Help String      : CoSingleStrobeGUIProvider Class
// Default Interface: ICoSingleStrobeGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSingleStrobeGUIProviderProperties= class;
{$ENDIF}
  TCCoSingleStrobeGUIProvider = class(TOleServer)
  private
    FIntf: ICoSingleStrobeGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSingleStrobeGUIProviderProperties;
    function GetServerProperties: TCCoSingleStrobeGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSingleStrobeGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSingleStrobeGUIProvider);
    procedure Disconnect; override;
    procedure CreateSingleStrobeGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSingleStrobeGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSingleStrobeGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSingleStrobeGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSingleStrobeGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoSingleStrobeGUIProvider;
    function    GetDefaultInterface: ICoSingleStrobeGUIProvider;
    constructor Create(AServer: TCCoSingleStrobeGUIProvider);
  protected
  public
    property DefaultInterface: ICoSingleStrobeGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSingleStrobeImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoSingleStrobeImpl exposed by              
// the CoClass CCoSingleStrobeImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSingleStrobeImpl = class
    class function Create: ICoSingleStrobeImpl;
    class function CreateRemote(const MachineName: string): ICoSingleStrobeImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSingleStrobeImpl
// Help String      : CoSingleStrobeImpl Class
// Default Interface: ICoSingleStrobeImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSingleStrobeImplProperties= class;
{$ENDIF}
  TCCoSingleStrobeImpl = class(TOleServer)
  private
    FIntf: ICoSingleStrobeImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSingleStrobeImplProperties;
    function GetServerProperties: TCCoSingleStrobeImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSingleStrobeImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSingleStrobeImpl);
    procedure Disconnect; override;
    procedure CreateSingleStrobeImplB(const COM_usbInt: ICoUSBInterface);
    function getSingleStrobeHigh: Integer;
    function getSingleStrobeLow: Integer;
    procedure setSingleStrobeHigh(COM_value: Integer);
    procedure setSingleStrobeLow(COM_value: Integer);
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double;
    function getSingleStrobeIncrement: Integer;
    function getSingleStrobeMaximum: Integer;
    function getSingleStrobeMinimum: Integer;
    procedure masterClockChanged(COM_newValue: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSingleStrobeImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSingleStrobeImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSingleStrobeImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSingleStrobeImplProperties = class(TPersistent)
  private
    FServer:    TCCoSingleStrobeImpl;
    function    GetDefaultInterface: ICoSingleStrobeImpl;
    constructor Create(AServer: TCCoSingleStrobeImpl);
  protected
  public
    property DefaultInterface: ICoSingleStrobeImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrumListener provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrumListener exposed by              
// the CoClass CCoSpectrumListener. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrumListener = class
    class function Create: ICoSpectrumListener;
    class function CreateRemote(const MachineName: string): ICoSpectrumListener;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrumListener
// Help String      : CoSpectrumListener Class
// Default Interface: ICoSpectrumListener
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrumListenerProperties= class;
{$ENDIF}
  TCCoSpectrumListener = class(TOleServer)
  private
    FIntf: ICoSpectrumListener;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrumListenerProperties;
    function GetServerProperties: TCCoSpectrumListenerProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrumListener;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrumListener);
    procedure Disconnect; override;
    procedure CreateSpectrumListener;
    procedure newSpectrum(const COM_param0: ICoSpectrum);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSpectrumListener read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrumListenerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrumListener
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrumListenerProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrumListener;
    function    GetDefaultInterface: ICoSpectrumListener;
    constructor Create(AServer: TCCoSpectrumListener);
  protected
  public
    property DefaultInterface: ICoSpectrumListener read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrumProducer provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrumProducer exposed by              
// the CoClass CCoSpectrumProducer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrumProducer = class
    class function Create: ICoSpectrumProducer;
    class function CreateRemote(const MachineName: string): ICoSpectrumProducer;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrumProducer
// Help String      : CoSpectrumProducer Class
// Default Interface: ICoSpectrumProducer
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrumProducerProperties= class;
{$ENDIF}
  TCCoSpectrumProducer = class(TOleServer)
  private
    FIntf: ICoSpectrumProducer;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrumProducerProperties;
    function GetServerProperties: TCCoSpectrumProducerProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrumProducer;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrumProducer);
    procedure Disconnect; override;
    procedure CreateSpectrumProducer;
    procedure addSpectrumListener(const COM_param0: ICoSpectrumListener);
    procedure removeSpectrumListener(const COM_param0: ICoSpectrumListener);
    function getSpectrum(const COM_param0: ICoSpectrum): ICoSpectrum;
    function getNumberOfPixels: Integer;
    function getNumberOfDarkPixels: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSpectrumProducer read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrumProducerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrumProducer
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrumProducerProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrumProducer;
    function    GetDefaultInterface: ICoSpectrumProducer;
    constructor Create(AServer: TCCoSpectrumProducer);
  protected
  public
    property DefaultInterface: ICoSpectrumProducer read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrumHandler provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrumHandler exposed by              
// the CoClass CCoSpectrumHandler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrumHandler = class
    class function Create: ICoSpectrumHandler;
    class function CreateRemote(const MachineName: string): ICoSpectrumHandler;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrumHandler
// Help String      : CoSpectrumHandler Class
// Default Interface: ICoSpectrumHandler
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrumHandlerProperties= class;
{$ENDIF}
  TCCoSpectrumHandler = class(TOleServer)
  private
    FIntf: ICoSpectrumHandler;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrumHandlerProperties;
    function GetServerProperties: TCCoSpectrumHandlerProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrumHandler;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrumHandler);
    procedure Disconnect; override;
    procedure CreateSpectrumHandler;
    procedure CreateSpectrumHandlerB(COM_numLightPixels: Integer; COM_numDarkPixels: Integer);
    function getMaximumQueueSize: Integer;
    procedure setMaximumQueueSize(COM_maximumQueueSize: Integer);
    function getProcessingMode: Integer;
    procedure setProcessingMode(COM_processingMode: Integer);
    procedure newSpectrum(const COM_spectrum: ICoSpectrum);
    procedure setSource(const COM_producer: ICoSpectrumProducer);
    procedure removeSource(const COM_producer: ICoSpectrumProducer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSpectrumHandler read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrumHandlerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrumHandler
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrumHandlerProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrumHandler;
    function    GetDefaultInterface: ICoSpectrumHandler;
    constructor Create(AServer: TCCoSpectrumHandler);
  protected
  public
    property DefaultInterface: ICoSpectrumHandler read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectralProcessor provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectralProcessor exposed by              
// the CoClass CCoSpectralProcessor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectralProcessor = class
    class function Create: ICoSpectralProcessor;
    class function CreateRemote(const MachineName: string): ICoSpectralProcessor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectralProcessor
// Help String      : CoSpectralProcessor Class
// Default Interface: ICoSpectralProcessor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectralProcessorProperties= class;
{$ENDIF}
  TCCoSpectralProcessor = class(TOleServer)
  private
    FIntf: ICoSpectralProcessor;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectralProcessorProperties;
    function GetServerProperties: TCCoSpectralProcessorProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectralProcessor;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectralProcessor);
    procedure Disconnect; override;
    procedure CreateSpectralProcessorB(const COM_channel: ICoSpectrometerChannel; 
                                       COM_daemon: WordBool);
    procedure destroyProcessor;
    function getOmniSpectrum: ICoOmniSpectrum;
    function getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
    procedure processSpectrum(const COM_spectrum: ICoSpectrum);
    procedure stopAveraging;
    procedure boxcarAverage(const COM_spectrum: ICoSpectrum);
    procedure correctForStrayLight(const COM_spectrum: ICoSpectrum);
    procedure correctForElectricalDarkSignal(const COM_spectrum: ICoSpectrum);
    procedure correctForDetectorNonlinearity(const COM_spectrum: ICoSpectrum);
    function getScansToAverage: Integer;
    procedure setScansToAverage(COM_scansToAverage: Integer);
    function isCorrectForDetectorNonlinearity: WordBool;
    procedure setCorrectForDetectorNonlinearity(COM_correctForDetectorNonlinearity: WordBool);
    function getSmoothingWindowSize: Integer;
    procedure setSmoothingWindowSize(COM_newSmoothingWindowSize: Integer);
    function isCorrectForElectricalDark: WordBool;
    procedure setCorrectForElectricalDark(COM_correctForElectricalDark: WordBool);
    function isCorrectForStrayLight: WordBool;
    procedure setCorrectForStrayLight(COM_correctForStrayLight: WordBool);
    function getSmoothingWindowWeights: OleVariant;
    procedure setSmoothingWindowWeights(COM_smoothingWindowWeights: OleVariant);
    procedure setDarkSpectrum(const COM_dark: ICoOmniSpectrum);
    function getExternalTriggerMode: Integer;
    procedure setExternalTriggerMode(COM_mode: Integer);
    function getIntegrationTime: Integer;
    procedure setIntegrationTime(COM_newIntegrationTime: Integer);
    function getStrobeEnable: WordBool;
    function getAutoToggleStrobeLampEnable: WordBool;
    procedure setStrobeEnable(COM_enable: WordBool);
    procedure setAutoToggleStrobeLampEnable(COM_enable: WordBool);
    function getStrobeDelay: Integer;
    procedure setStrobeDelay(COM_newDelay: Integer);
    procedure setParameters(COM_sta: Integer; COM_ced: WordBool; COM_cnl: WordBool; 
                            COM_csl: WordBool; COM_bcw: Integer; COM_it: Integer; COM_se: WordBool; 
                            COM_sd: Integer; COM_etm: Integer; COM_atl: WordBool);
    function getSpectrometerChannel: ICoSpectrometerChannel;
    procedure attachSource(const COM_source: ICoSpectrumHandler);
    procedure detachSource;
    procedure stop;
    procedure finalize;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSpectralProcessor read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectralProcessorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectralProcessor
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectralProcessorProperties = class(TPersistent)
  private
    FServer:    TCCoSpectralProcessor;
    function    GetDefaultInterface: ICoSpectralProcessor;
    constructor Create(AServer: TCCoSpectralProcessor);
  protected
  public
    property DefaultInterface: ICoSpectralProcessor read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrometerAssembly provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrometerAssembly exposed by              
// the CoClass CCoSpectrometerAssembly. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrometerAssembly = class
    class function Create: ICoSpectrometerAssembly;
    class function CreateRemote(const MachineName: string): ICoSpectrometerAssembly;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrometerAssembly
// Help String      : CoSpectrometerAssembly Class
// Default Interface: ICoSpectrometerAssembly
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrometerAssemblyProperties= class;
{$ENDIF}
  TCCoSpectrometerAssembly = class(TOleServer)
  private
    FIntf: ICoSpectrometerAssembly;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrometerAssemblyProperties;
    function GetServerProperties: TCCoSpectrometerAssemblyProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrometerAssembly;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrometerAssembly);
    procedure Disconnect; override;
    procedure CreateSpectrometerAssemblyB(const COM_spectrometerObject: ICoSpectrometer);
    procedure closeSpectrometer;
    function getChannel(COM_channelIndex: Integer): ICoSpectrometerChannel;
    function getSpectralProcessor(COM_channelIndex: Integer): ICoSpectralProcessor;
    function getSpectrometer: ICoSpectrometer;
    procedure setSaturationState(COM_channelIndex: Integer; COM_saturationFlag: WordBool);
    function getSaturationState(COM_channelIndex: Integer): WordBool;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSpectrometerAssembly read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrometerAssemblyProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrometerAssembly
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrometerAssemblyProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrometerAssembly;
    function    GetDefaultInterface: ICoSpectrometerAssembly;
    constructor Create(AServer: TCCoSpectrometerAssembly);
  protected
  public
    property DefaultInterface: ICoSpectrometerAssembly read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrometerCollection provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrometerCollection exposed by              
// the CoClass CCoSpectrometerCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrometerCollection = class
    class function Create: ICoSpectrometerCollection;
    class function CreateRemote(const MachineName: string): ICoSpectrometerCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrometerCollection
// Help String      : CoSpectrometerCollection Class
// Default Interface: ICoSpectrometerCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrometerCollectionProperties= class;
{$ENDIF}
  TCCoSpectrometerCollection = class(TOleServer)
  private
    FIntf: ICoSpectrometerCollection;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrometerCollectionProperties;
    function GetServerProperties: TCCoSpectrometerCollectionProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrometerCollection;
  protected
    procedure InitServerData; override;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrometerCollection);
    procedure Disconnect; override;
    function Item(index: OleVariant): OleVariant;
    procedure Add(const pnewSpectrometerCollection: IDispatch);
    procedure Remove(index: Integer);
    property DefaultInterface: ICoSpectrometerCollection read GetDefaultInterface;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrometerCollectionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrometerCollection
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrometerCollectionProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrometerCollection;
    function    GetDefaultInterface: ICoSpectrometerCollection;
    constructor Create(AServer: TCCoSpectrometerCollection);
  protected
    function Get_Count: Integer;
  public
    property DefaultInterface: ICoSpectrometerCollection read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrometerFactory provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrometerFactory exposed by              
// the CoClass CCoSpectrometerFactory. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrometerFactory = class
    class function Create: ICoSpectrometerFactory;
    class function CreateRemote(const MachineName: string): ICoSpectrometerFactory;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrometerFactory
// Help String      : CoSpectrometerFactory Class
// Default Interface: ICoSpectrometerFactory
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrometerFactoryProperties= class;
{$ENDIF}
  TCCoSpectrometerFactory = class(TOleServer)
  private
    FIntf: ICoSpectrometerFactory;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrometerFactoryProperties;
    function GetServerProperties: TCCoSpectrometerFactoryProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrometerFactory;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrometerFactory);
    procedure Disconnect; override;
    procedure CreateSpectrometerFactory;
    procedure closeSpectrometer(const COM_spectrometer: ICoSpectrometer);
    procedure closeSpectrometer_NOT_USED_YET(const COM_spectrometer: ICoSpectrometer);
    function getAllAttachedSpectrometers_NOT_USED_YET: ICoSpectrometerCollection;
    function getAllSpectrometers: ICoSpectrometerCollection;
    function getAllUnclaimedSpectrometers: ICoSpectrometerCollection;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSpectrometerFactory read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrometerFactoryProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrometerFactory
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrometerFactoryProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrometerFactory;
    function    GetDefaultInterface: ICoSpectrometerFactory;
    constructor Create(AServer: TCCoSpectrometerFactory);
  protected
  public
    property DefaultInterface: ICoSpectrometerFactory read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrometerPlugInInfo provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrometerPlugInInfo exposed by              
// the CoClass CCoSpectrometerPlugInInfo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrometerPlugInInfo = class
    class function Create: ICoSpectrometerPlugInInfo;
    class function CreateRemote(const MachineName: string): ICoSpectrometerPlugInInfo;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrometerPlugInInfo
// Help String      : CoSpectrometerPlugInInfo Class
// Default Interface: ICoSpectrometerPlugInInfo
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrometerPlugInInfoProperties= class;
{$ENDIF}
  TCCoSpectrometerPlugInInfo = class(TOleServer)
  private
    FIntf: ICoSpectrometerPlugInInfo;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrometerPlugInInfoProperties;
    function GetServerProperties: TCCoSpectrometerPlugInInfoProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrometerPlugInInfo;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrometerPlugInInfo);
    procedure Disconnect; override;
    procedure CreateSpectrometerPlugInInfo;
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSpectrometerPlugInInfo read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrometerPlugInInfoProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrometerPlugInInfo
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrometerPlugInInfoProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrometerPlugInInfo;
    function    GetDefaultInterface: ICoSpectrometerPlugInInfo;
    constructor Create(AServer: TCCoSpectrometerPlugInInfo);
  protected
  public
    property DefaultInterface: ICoSpectrometerPlugInInfo read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrumConsumer provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrumConsumer exposed by              
// the CoClass CCoSpectrumConsumer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrumConsumer = class
    class function Create: ICoSpectrumConsumer;
    class function CreateRemote(const MachineName: string): ICoSpectrumConsumer;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrumConsumer
// Help String      : CoSpectrumConsumer Class
// Default Interface: ICoSpectrumConsumer
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrumConsumerProperties= class;
{$ENDIF}
  TCCoSpectrumConsumer = class(TOleServer)
  private
    FIntf: ICoSpectrumConsumer;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrumConsumerProperties;
    function GetServerProperties: TCCoSpectrumConsumerProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrumConsumer;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrumConsumer);
    procedure Disconnect; override;
    procedure CreateSpectrumConsumer;
    procedure setSource(const COM_param0: ICoSpectrumProducer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSpectrumConsumer read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrumConsumerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrumConsumer
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrumConsumerProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrumConsumer;
    function    GetDefaultInterface: ICoSpectrumConsumer;
    constructor Create(AServer: TCCoSpectrumConsumer);
  protected
  public
    property DefaultInterface: ICoSpectrumConsumer read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSpectrumProducerBase provides a Create and CreateRemote method to          
// create instances of the default interface ICoSpectrumProducerBase exposed by              
// the CoClass CCoSpectrumProducerBase. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSpectrumProducerBase = class
    class function Create: ICoSpectrumProducerBase;
    class function CreateRemote(const MachineName: string): ICoSpectrumProducerBase;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSpectrumProducerBase
// Help String      : CoSpectrumProducerBase Class
// Default Interface: ICoSpectrumProducerBase
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSpectrumProducerBaseProperties= class;
{$ENDIF}
  TCCoSpectrumProducerBase = class(TOleServer)
  private
    FIntf: ICoSpectrumProducerBase;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSpectrumProducerBaseProperties;
    function GetServerProperties: TCCoSpectrumProducerBaseProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSpectrumProducerBase;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSpectrumProducerBase);
    procedure Disconnect; override;
    procedure CreateSpectrumProducerBase;
    procedure CreateSpectrumProducerBaseB(COM_numPixels: Integer; COM_numDarkPixels: Integer);
    procedure addSpectrumListener(const COM_listener: ICoSpectrumListener);
    procedure removeSpectrumListener(const COM_listener: ICoSpectrumListener);
    function getUnfilledSpectrum: ICoSpectrum;
    function getUnfilledSpectrumB(COM_pixels: Integer; COM_dark: Integer): ICoSpectrum;
    function getNumberOfPixels: Integer;
    function getNumberOfDarkPixels: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSpectrumProducerBase read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSpectrumProducerBaseProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSpectrumProducerBase
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSpectrumProducerBaseProperties = class(TPersistent)
  private
    FServer:    TCCoSpectrumProducerBase;
    function    GetDefaultInterface: ICoSpectrumProducerBase;
    constructor Create(AServer: TCCoSpectrumProducerBase);
  protected
  public
    property DefaultInterface: ICoSpectrumProducerBase read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoStatus provides a Create and CreateRemote method to          
// create instances of the default interface ICoStatus exposed by              
// the CoClass CCoStatus. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoStatus = class
    class function Create: ICoStatus;
    class function CreateRemote(const MachineName: string): ICoStatus;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoStatus
// Help String      : CoStatus Class
// Default Interface: ICoStatus
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoStatusProperties= class;
{$ENDIF}
  TCCoStatus = class(TOleServer)
  private
    FIntf: ICoStatus;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoStatusProperties;
    function GetServerProperties: TCCoStatusProperties;
{$ENDIF}
    function GetDefaultInterface: ICoStatus;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoStatus);
    procedure Disconnect; override;
    procedure CreateStatus;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoStatus read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoStatusProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoStatus
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoStatusProperties = class(TPersistent)
  private
    FServer:    TCCoStatus;
    function    GetDefaultInterface: ICoStatus;
    constructor Create(AServer: TCCoStatus);
  protected
  public
    property DefaultInterface: ICoStatus read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoStatusGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoStatusGUIProvider exposed by              
// the CoClass CCoStatusGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoStatusGUIProvider = class
    class function Create: ICoStatusGUIProvider;
    class function CreateRemote(const MachineName: string): ICoStatusGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoStatusGUIProvider
// Help String      : CoStatusGUIProvider Class
// Default Interface: ICoStatusGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoStatusGUIProviderProperties= class;
{$ENDIF}
  TCCoStatusGUIProvider = class(TOleServer)
  private
    FIntf: ICoStatusGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoStatusGUIProviderProperties;
    function GetServerProperties: TCCoStatusGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoStatusGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoStatusGUIProvider);
    procedure Disconnect; override;
    procedure CreateStatusGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoStatusGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoStatusGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoStatusGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoStatusGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoStatusGUIProvider;
    function    GetDefaultInterface: ICoStatusGUIProvider;
    constructor Create(AServer: TCCoStatusGUIProvider);
  protected
  public
    property DefaultInterface: ICoStatusGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoStatusImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoStatusImpl exposed by              
// the CoClass CCoStatusImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoStatusImpl = class
    class function Create: ICoStatusImpl;
    class function CreateRemote(const MachineName: string): ICoStatusImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoStatusImpl
// Help String      : CoStatusImpl Class
// Default Interface: ICoStatusImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoStatusImplProperties= class;
{$ENDIF}
  TCCoStatusImpl = class(TOleServer)
  private
    FIntf: ICoStatusImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoStatusImplProperties;
    function GetServerProperties: TCCoStatusImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoStatusImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoStatusImpl);
    procedure Disconnect; override;
    procedure CreateStatusImpl;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoStatusImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoStatusImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoStatusImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoStatusImplProperties = class(TPersistent)
  private
    FServer:    TCCoStatusImpl;
    function    GetDefaultInterface: ICoStatusImpl;
    constructor Create(AServer: TCCoStatusImpl);
  protected
  public
    property DefaultInterface: ICoStatusImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoStatusProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoStatusProvider exposed by              
// the CoClass CCoStatusProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoStatusProvider = class
    class function Create: ICoStatusProvider;
    class function CreateRemote(const MachineName: string): ICoStatusProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoStatusProvider
// Help String      : CoStatusProvider Class
// Default Interface: ICoStatusProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoStatusProviderProperties= class;
{$ENDIF}
  TCCoStatusProvider = class(TOleServer)
  private
    FIntf: ICoStatusProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoStatusProviderProperties;
    function GetServerProperties: TCCoStatusProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoStatusProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoStatusProvider);
    procedure Disconnect; override;
    procedure CreateStatusProvider;
    function getStatus: ICoSpectrometerStatus;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoStatusProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoStatusProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoStatusProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoStatusProviderProperties = class(TPersistent)
  private
    FServer:    TCCoStatusProvider;
    function    GetDefaultInterface: ICoStatusProvider;
    constructor Create(AServer: TCCoStatusProvider);
  protected
  public
    property DefaultInterface: ICoStatusProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoStopSpectrum provides a Create and CreateRemote method to          
// create instances of the default interface ICoStopSpectrum exposed by              
// the CoClass CCoStopSpectrum. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoStopSpectrum = class
    class function Create: ICoStopSpectrum;
    class function CreateRemote(const MachineName: string): ICoStopSpectrum;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoStopSpectrum
// Help String      : CoStopSpectrum Class
// Default Interface: ICoStopSpectrum
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoStopSpectrumProperties= class;
{$ENDIF}
  TCCoStopSpectrum = class(TOleServer)
  private
    FIntf: ICoStopSpectrum;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoStopSpectrumProperties;
    function GetServerProperties: TCCoStopSpectrumProperties;
{$ENDIF}
    function GetDefaultInterface: ICoStopSpectrum;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoStopSpectrum);
    procedure Disconnect; override;
    procedure CreateStopSpectrum;
    procedure stopSpectralAcquisition;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoStopSpectrum read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoStopSpectrumProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoStopSpectrum
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoStopSpectrumProperties = class(TPersistent)
  private
    FServer:    TCCoStopSpectrum;
    function    GetDefaultInterface: ICoStopSpectrum;
    constructor Create(AServer: TCCoStopSpectrum);
  protected
  public
    property DefaultInterface: ICoStopSpectrum read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoStopSpectrumGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoStopSpectrumGUIProvider exposed by              
// the CoClass CCoStopSpectrumGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoStopSpectrumGUIProvider = class
    class function Create: ICoStopSpectrumGUIProvider;
    class function CreateRemote(const MachineName: string): ICoStopSpectrumGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoStopSpectrumGUIProvider
// Help String      : CoStopSpectrumGUIProvider Class
// Default Interface: ICoStopSpectrumGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoStopSpectrumGUIProviderProperties= class;
{$ENDIF}
  TCCoStopSpectrumGUIProvider = class(TOleServer)
  private
    FIntf: ICoStopSpectrumGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoStopSpectrumGUIProviderProperties;
    function GetServerProperties: TCCoStopSpectrumGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoStopSpectrumGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoStopSpectrumGUIProvider);
    procedure Disconnect; override;
    procedure CreateStopSpectrumGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoStopSpectrumGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoStopSpectrumGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoStopSpectrumGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoStopSpectrumGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoStopSpectrumGUIProvider;
    function    GetDefaultInterface: ICoStopSpectrumGUIProvider;
    constructor Create(AServer: TCCoStopSpectrumGUIProvider);
  protected
  public
    property DefaultInterface: ICoStopSpectrumGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoStopSpectrumImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoStopSpectrumImpl exposed by              
// the CoClass CCoStopSpectrumImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoStopSpectrumImpl = class
    class function Create: ICoStopSpectrumImpl;
    class function CreateRemote(const MachineName: string): ICoStopSpectrumImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoStopSpectrumImpl
// Help String      : CoStopSpectrumImpl Class
// Default Interface: ICoStopSpectrumImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoStopSpectrumImplProperties= class;
{$ENDIF}
  TCCoStopSpectrumImpl = class(TOleServer)
  private
    FIntf: ICoStopSpectrumImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoStopSpectrumImplProperties;
    function GetServerProperties: TCCoStopSpectrumImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoStopSpectrumImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoStopSpectrumImpl);
    procedure Disconnect; override;
    procedure CreateStopSpectrumImplB(const COM_usbInt: ICoUSBInterface);
    procedure stopSpectralAcquisition;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoStopSpectrumImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoStopSpectrumImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoStopSpectrumImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoStopSpectrumImplProperties = class(TPersistent)
  private
    FServer:    TCCoStopSpectrumImpl;
    function    GetDefaultInterface: ICoStopSpectrumImpl;
    constructor Create(AServer: TCCoStopSpectrumImpl);
  protected
  public
    property DefaultInterface: ICoStopSpectrumImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoStrayLightCorrection provides a Create and CreateRemote method to          
// create instances of the default interface ICoStrayLightCorrection exposed by              
// the CoClass CCoStrayLightCorrection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoStrayLightCorrection = class
    class function Create: ICoStrayLightCorrection;
    class function CreateRemote(const MachineName: string): ICoStrayLightCorrection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoStrayLightCorrection
// Help String      : CoStrayLightCorrection Class
// Default Interface: ICoStrayLightCorrection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoStrayLightCorrectionProperties= class;
{$ENDIF}
  TCCoStrayLightCorrection = class(TOleServer)
  private
    FIntf: ICoStrayLightCorrection;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoStrayLightCorrectionProperties;
    function GetServerProperties: TCCoStrayLightCorrectionProperties;
{$ENDIF}
    function GetDefaultInterface: ICoStrayLightCorrection;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoStrayLightCorrection);
    procedure Disconnect; override;
    procedure CreateStrayLightCorrection;
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
    function getStrayLight(COM_param0: Integer): Double;
    procedure setStrayLight(COM_param0: Double; COM_param1: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoStrayLightCorrection read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoStrayLightCorrectionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoStrayLightCorrection
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoStrayLightCorrectionProperties = class(TPersistent)
  private
    FServer:    TCCoStrayLightCorrection;
    function    GetDefaultInterface: ICoStrayLightCorrection;
    constructor Create(AServer: TCCoStrayLightCorrection);
  protected
  public
    property DefaultInterface: ICoStrayLightCorrection read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoStrayLightCorrectionGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoStrayLightCorrectionGUIProvider exposed by              
// the CoClass CCoStrayLightCorrectionGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoStrayLightCorrectionGUIProvider = class
    class function Create: ICoStrayLightCorrectionGUIProvider;
    class function CreateRemote(const MachineName: string): ICoStrayLightCorrectionGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoStrayLightCorrectionGUIProvider
// Help String      : CoStrayLightCorrectionGUIProvider Class
// Default Interface: ICoStrayLightCorrectionGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoStrayLightCorrectionGUIProviderProperties= class;
{$ENDIF}
  TCCoStrayLightCorrectionGUIProvider = class(TOleServer)
  private
    FIntf: ICoStrayLightCorrectionGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoStrayLightCorrectionGUIProviderProperties;
    function GetServerProperties: TCCoStrayLightCorrectionGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoStrayLightCorrectionGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoStrayLightCorrectionGUIProvider);
    procedure Disconnect; override;
    procedure CreateStrayLightCorrectionGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoStrayLightCorrectionGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoStrayLightCorrectionGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoStrayLightCorrectionGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoStrayLightCorrectionGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoStrayLightCorrectionGUIProvider;
    function    GetDefaultInterface: ICoStrayLightCorrectionGUIProvider;
    constructor Create(AServer: TCCoStrayLightCorrectionGUIProvider);
  protected
  public
    property DefaultInterface: ICoStrayLightCorrectionGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoStrayLightCorrectionImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoStrayLightCorrectionImpl exposed by              
// the CoClass CCoStrayLightCorrectionImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoStrayLightCorrectionImpl = class
    class function Create: ICoStrayLightCorrectionImpl;
    class function CreateRemote(const MachineName: string): ICoStrayLightCorrectionImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoStrayLightCorrectionImpl
// Help String      : CoStrayLightCorrectionImpl Class
// Default Interface: ICoStrayLightCorrectionImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoStrayLightCorrectionImplProperties= class;
{$ENDIF}
  TCCoStrayLightCorrectionImpl = class(TOleServer)
  private
    FIntf: ICoStrayLightCorrectionImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoStrayLightCorrectionImplProperties;
    function GetServerProperties: TCCoStrayLightCorrectionImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoStrayLightCorrectionImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoStrayLightCorrectionImpl);
    procedure Disconnect; override;
    procedure CreateStrayLightCorrectionImplB(const COM_usbInt: ICoUSBInterface; 
                                              const COM_s: ICoSpectrometer);
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
    function getStrayLight(COM_channel: Integer): Double;
    function getStrayLightSlope(COM_channel: Integer): Double;
    procedure setStrayLight(COM_sl: Double; COM_channel: Integer);
    procedure setStrayLightB(COM_intercept: Double; COM_slope: Double; COM_channel: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoStrayLightCorrectionImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoStrayLightCorrectionImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoStrayLightCorrectionImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoStrayLightCorrectionImplProperties = class(TPersistent)
  private
    FServer:    TCCoStrayLightCorrectionImpl;
    function    GetDefaultInterface: ICoStrayLightCorrectionImpl;
    constructor Create(AServer: TCCoStrayLightCorrectionImpl);
  protected
  public
    property DefaultInterface: ICoStrayLightCorrectionImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoStringCollection provides a Create and CreateRemote method to          
// create instances of the default interface ICoStringCollection exposed by              
// the CoClass CCoStringCollection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoStringCollection = class
    class function Create: ICoStringCollection;
    class function CreateRemote(const MachineName: string): ICoStringCollection;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoStringCollection
// Help String      : CoStringCollection Class
// Default Interface: ICoStringCollection
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoStringCollectionProperties= class;
{$ENDIF}
  TCCoStringCollection = class(TOleServer)
  private
    FIntf: ICoStringCollection;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoStringCollectionProperties;
    function GetServerProperties: TCCoStringCollectionProperties;
{$ENDIF}
    function GetDefaultInterface: ICoStringCollection;
  protected
    procedure InitServerData; override;
    function Get_Count: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoStringCollection);
    procedure Disconnect; override;
    function Item(index: OleVariant): OleVariant;
    procedure Add(const pnewStringCollection: IDispatch);
    procedure Remove(index: Integer);
    property DefaultInterface: ICoStringCollection read GetDefaultInterface;
    property Count: Integer read Get_Count;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoStringCollectionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoStringCollection
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoStringCollectionProperties = class(TPersistent)
  private
    FServer:    TCCoStringCollection;
    function    GetDefaultInterface: ICoStringCollection;
    constructor Create(AServer: TCCoStringCollection);
  protected
    function Get_Count: Integer;
  public
    property DefaultInterface: ICoStringCollection read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoSupportStatus provides a Create and CreateRemote method to          
// create instances of the default interface ICoSupportStatus exposed by              
// the CoClass CCoSupportStatus. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoSupportStatus = class
    class function Create: ICoSupportStatus;
    class function CreateRemote(const MachineName: string): ICoSupportStatus;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoSupportStatus
// Help String      : CoSupportStatus Class
// Default Interface: ICoSupportStatus
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoSupportStatusProperties= class;
{$ENDIF}
  TCCoSupportStatus = class(TOleServer)
  private
    FIntf: ICoSupportStatus;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoSupportStatusProperties;
    function GetServerProperties: TCCoSupportStatusProperties;
{$ENDIF}
    function GetDefaultInterface: ICoSupportStatus;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoSupportStatus);
    procedure Disconnect; override;
    procedure CreateSupportStatus;
    function isSupported: WordBool;
    procedure setSupportedStatus(COM_supportedStatus: WordBool);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoSupportStatus read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoSupportStatusProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoSupportStatus
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoSupportStatusProperties = class(TPersistent)
  private
    FServer:    TCCoSupportStatus;
    function    GetDefaultInterface: ICoSupportStatus;
    constructor Create(AServer: TCCoSupportStatus);
  protected
  public
    property DefaultInterface: ICoSupportStatus read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoThermoElectric provides a Create and CreateRemote method to          
// create instances of the default interface ICoThermoElectric exposed by              
// the CoClass CCoThermoElectric. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoThermoElectric = class
    class function Create: ICoThermoElectric;
    class function CreateRemote(const MachineName: string): ICoThermoElectric;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoThermoElectric
// Help String      : CoThermoElectric Class
// Default Interface: ICoThermoElectric
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoThermoElectricProperties= class;
{$ENDIF}
  TCCoThermoElectric = class(TOleServer)
  private
    FIntf: ICoThermoElectric;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoThermoElectricProperties;
    function GetServerProperties: TCCoThermoElectricProperties;
{$ENDIF}
    function GetDefaultInterface: ICoThermoElectric;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoThermoElectric);
    procedure Disconnect; override;
    procedure CreateThermoElectric;
    procedure setTECEnable(COM_param0: WordBool);
    procedure setFanEnable(COM_param0: WordBool);
    function getDetectorTemperatureCelsius: Double;
    function getDetectorTemperatureSetPointCelsius: Double;
    procedure setDetectorSetPointCelsius(COM_param0: Double);
    function getSetPointMinimumCelsius: Double;
    function getSetPointMaximumCelsius: Double;
    function getSetPointIncrementCelsius: Double;
    function isSaveTECStateEnabled: WordBool;
    procedure saveTECState;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoThermoElectric read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoThermoElectricProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoThermoElectric
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoThermoElectricProperties = class(TPersistent)
  private
    FServer:    TCCoThermoElectric;
    function    GetDefaultInterface: ICoThermoElectric;
    constructor Create(AServer: TCCoThermoElectric);
  protected
  public
    property DefaultInterface: ICoThermoElectric read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoThermoElectricGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoThermoElectricGUIProvider exposed by              
// the CoClass CCoThermoElectricGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoThermoElectricGUIProvider = class
    class function Create: ICoThermoElectricGUIProvider;
    class function CreateRemote(const MachineName: string): ICoThermoElectricGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoThermoElectricGUIProvider
// Help String      : CoThermoElectricGUIProvider Class
// Default Interface: ICoThermoElectricGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoThermoElectricGUIProviderProperties= class;
{$ENDIF}
  TCCoThermoElectricGUIProvider = class(TOleServer)
  private
    FIntf: ICoThermoElectricGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoThermoElectricGUIProviderProperties;
    function GetServerProperties: TCCoThermoElectricGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoThermoElectricGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoThermoElectricGUIProvider);
    procedure Disconnect; override;
    procedure CreateThermoElectricGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoThermoElectricGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoThermoElectricGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoThermoElectricGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoThermoElectricGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoThermoElectricGUIProvider;
    function    GetDefaultInterface: ICoThermoElectricGUIProvider;
    constructor Create(AServer: TCCoThermoElectricGUIProvider);
  protected
  public
    property DefaultInterface: ICoThermoElectricGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoThermoElectricImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoThermoElectricImpl exposed by              
// the CoClass CCoThermoElectricImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoThermoElectricImpl = class
    class function Create: ICoThermoElectricImpl;
    class function CreateRemote(const MachineName: string): ICoThermoElectricImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoThermoElectricImpl
// Help String      : CoThermoElectricImpl Class
// Default Interface: ICoThermoElectricImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoThermoElectricImplProperties= class;
{$ENDIF}
  TCCoThermoElectricImpl = class(TOleServer)
  private
    FIntf: ICoThermoElectricImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoThermoElectricImplProperties;
    function GetServerProperties: TCCoThermoElectricImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoThermoElectricImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoThermoElectricImpl);
    procedure Disconnect; override;
    procedure CreateThermoElectricImplB(const COM_usbInt: ICoUSBInterface);
    procedure setTECEnable(COM_param0: WordBool);
    procedure setFanEnable(COM_param0: WordBool);
    function getDetectorTemperatureCelsius: Double;
    function getDetectorTemperatureSetPointCelsius: Double;
    procedure setDetectorSetPointCelsius(COM_param0: Double);
    function getSetPointMinimumCelsius: Double;
    function getSetPointMaximumCelsius: Double;
    function getSetPointIncrementCelsius: Double;
    function isSaveTECStateEnabled: WordBool;
    procedure saveTECState;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoThermoElectricImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoThermoElectricImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoThermoElectricImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoThermoElectricImplProperties = class(TPersistent)
  private
    FServer:    TCCoThermoElectricImpl;
    function    GetDefaultInterface: ICoThermoElectricImpl;
    constructor Create(AServer: TCCoThermoElectricImpl);
  protected
  public
    property DefaultInterface: ICoThermoElectricImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoThermoElectricImpl_NIR provides a Create and CreateRemote method to          
// create instances of the default interface ICoThermoElectricImpl_NIR exposed by              
// the CoClass CCoThermoElectricImpl_NIR. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoThermoElectricImpl_NIR = class
    class function Create: ICoThermoElectricImpl_NIR;
    class function CreateRemote(const MachineName: string): ICoThermoElectricImpl_NIR;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoThermoElectricImpl_NIR
// Help String      : CoThermoElectricImpl_NIR Class
// Default Interface: ICoThermoElectricImpl_NIR
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoThermoElectricImpl_NIRProperties= class;
{$ENDIF}
  TCCoThermoElectricImpl_NIR = class(TOleServer)
  private
    FIntf: ICoThermoElectricImpl_NIR;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoThermoElectricImpl_NIRProperties;
    function GetServerProperties: TCCoThermoElectricImpl_NIRProperties;
{$ENDIF}
    function GetDefaultInterface: ICoThermoElectricImpl_NIR;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoThermoElectricImpl_NIR);
    procedure Disconnect; override;
    procedure CreateThermoElectricImpl_NIRB(const COM_usbInt: ICoUSBInterface);
    procedure setFanEnable(COM_enable: WordBool);
    procedure setTECEnable(COM_enable: WordBool);
    function getDetectorTemperatureCelsius: Double;
    function getDetectorTemperatureSetPointCelsius: Double;
    procedure setDetectorSetPointCelsius(COM_tempCelsius: Double);
    function getSetPointMinimumCelsius: Double;
    function getSetPointMaximumCelsius: Double;
    function getSetPointIncrementCelsius: Double;
    function isSaveTECStateEnabled: WordBool;
    procedure saveTECState;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoThermoElectricImpl_NIR read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoThermoElectricImpl_NIRProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoThermoElectricImpl_NIR
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoThermoElectricImpl_NIRProperties = class(TPersistent)
  private
    FServer:    TCCoThermoElectricImpl_NIR;
    function    GetDefaultInterface: ICoThermoElectricImpl_NIR;
    constructor Create(AServer: TCCoThermoElectricImpl_NIR);
  protected
  public
    property DefaultInterface: ICoThermoElectricImpl_NIR read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoThermoElectricImpl_QE65000 provides a Create and CreateRemote method to          
// create instances of the default interface ICoThermoElectricImpl_QE65000 exposed by              
// the CoClass CCoThermoElectricImpl_QE65000. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoThermoElectricImpl_QE65000 = class
    class function Create: ICoThermoElectricImpl_QE65000;
    class function CreateRemote(const MachineName: string): ICoThermoElectricImpl_QE65000;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoThermoElectricImpl_QE65000
// Help String      : CoThermoElectricImpl_QE65000 Class
// Default Interface: ICoThermoElectricImpl_QE65000
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoThermoElectricImpl_QE65000Properties= class;
{$ENDIF}
  TCCoThermoElectricImpl_QE65000 = class(TOleServer)
  private
    FIntf: ICoThermoElectricImpl_QE65000;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoThermoElectricImpl_QE65000Properties;
    function GetServerProperties: TCCoThermoElectricImpl_QE65000Properties;
{$ENDIF}
    function GetDefaultInterface: ICoThermoElectricImpl_QE65000;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoThermoElectricImpl_QE65000);
    procedure Disconnect; override;
    procedure CreateThermoElectricImpl_QE65000B(const COM_usbInt: ICoUSBInterface);
    procedure setTECEnable(COM_enable: WordBool);
    procedure setFanEnable(COM_enable: WordBool);
    function getDetectorTemperatureCelsius: Double;
    function getDetectorTemperatureSetPointCelsius: Double;
    procedure setDetectorSetPointCelsius(COM_tempCelsius: Double);
    function getSetPointMinimumCelsius: Double;
    function getSetPointMaximumCelsius: Double;
    function getSetPointIncrementCelsius: Double;
    function isSaveTECStateEnabled: WordBool;
    procedure saveTECState;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoThermoElectricImpl_QE65000 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoThermoElectricImpl_QE65000Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoThermoElectricImpl_QE65000
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoThermoElectricImpl_QE65000Properties = class(TPersistent)
  private
    FServer:    TCCoThermoElectricImpl_QE65000;
    function    GetDefaultInterface: ICoThermoElectricImpl_QE65000;
    constructor Create(AServer: TCCoThermoElectricImpl_QE65000);
  protected
  public
    property DefaultInterface: ICoThermoElectricImpl_QE65000 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoThermoElectricShowFanControl provides a Create and CreateRemote method to          
// create instances of the default interface ICoThermoElectricShowFanControl exposed by              
// the CoClass CCoThermoElectricShowFanControl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoThermoElectricShowFanControl = class
    class function Create: ICoThermoElectricShowFanControl;
    class function CreateRemote(const MachineName: string): ICoThermoElectricShowFanControl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoThermoElectricShowFanControl
// Help String      : CoThermoElectricShowFanControl Class
// Default Interface: ICoThermoElectricShowFanControl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoThermoElectricShowFanControlProperties= class;
{$ENDIF}
  TCCoThermoElectricShowFanControl = class(TOleServer)
  private
    FIntf: ICoThermoElectricShowFanControl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoThermoElectricShowFanControlProperties;
    function GetServerProperties: TCCoThermoElectricShowFanControlProperties;
{$ENDIF}
    function GetDefaultInterface: ICoThermoElectricShowFanControl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoThermoElectricShowFanControl);
    procedure Disconnect; override;
    procedure CreateThermoElectricShowFanControl;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoThermoElectricShowFanControl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoThermoElectricShowFanControlProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoThermoElectricShowFanControl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoThermoElectricShowFanControlProperties = class(TPersistent)
  private
    FServer:    TCCoThermoElectricShowFanControl;
    function    GetDefaultInterface: ICoThermoElectricShowFanControl;
    constructor Create(AServer: TCCoThermoElectricShowFanControl);
  protected
  public
    property DefaultInterface: ICoThermoElectricShowFanControl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSB2000Plus provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSB2000Plus exposed by              
// the CoClass CCoUSB2000Plus. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSB2000Plus = class
    class function Create: ICoUSB2000Plus;
    class function CreateRemote(const MachineName: string): ICoUSB2000Plus;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSB2000Plus
// Help String      : CoUSB2000Plus Class
// Default Interface: ICoUSB2000Plus
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSB2000PlusProperties= class;
{$ENDIF}
  TCCoUSB2000Plus = class(TOleServer)
  private
    FIntf: ICoUSB2000Plus;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSB2000PlusProperties;
    function GetServerProperties: TCCoUSB2000PlusProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSB2000Plus;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSB2000Plus);
    procedure Disconnect; override;
    procedure CreateUSB2000Plus;
    procedure CreateUSB2000PlusB(COM_i: Integer);
    procedure setEndpoints;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
    procedure openSpectrometer(COM_index: Integer);
    function getGUIFeatures: ICoGUIProviderCollection;
    function getStatus: ICoSpectrometerStatus;
    function readIntegrationTime: Integer;
    procedure setStrobeDelay(COM_delay: Integer);
    function toString: WideString;
    function getPlugIns: ICoSpectrometerPlugInCollection;
    function getNumberOfPlugIns: Integer;
    function isPlugInDetected(COM_id: Integer): WordBool;
    function initializePlugIns: OleVariant;
    procedure detectPlugIns;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
    function getPSOCVersion: WideString;
    function getFPGAFirmwareVersion: WideString;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer);
    function getContinuousStrobeDelayMinimum: Integer;
    function getContinuousStrobeDelayMaximum: Integer;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer);
    function getIntegrationTimeBaseClock: Integer;
    function getIntegrationClockTimer: Integer;
    function getAdvancedIntegrationTimeMinimum: Integer;
    function getAdvancedIntegrationTimeMaximum: Integer;
    function getAdvancedIntegrationTimeIncrement: Integer;
    procedure setExternalTriggerMode(COM_mode: Integer);
    function getExternalTriggerModes: ICoExternalTriggerModeCollection;
    procedure setShutterClock(COM_value: Integer);
    function getShutterClock: Integer;
    procedure setSingleStrobeLow(COM_value: Integer);
    procedure setSingleStrobeHigh(COM_value: Integer);
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double;
    function getSingleStrobeLow: Integer;
    function getSingleStrobeHigh: Integer;
    function getSingleStrobeMinimum: Integer;
    function getSingleStrobeMaximum: Integer;
    function getSingleStrobeIncrement: Integer;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet);
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet);
    procedure setValueAllBits(const COM_bitSet: ICoBitSet);
    procedure setDirectionBitmask(COM_bitmask: Smallint);
    procedure setMuxBitmask(COM_bitmask: Smallint);
    procedure setValueBitmask(COM_bitmask: Smallint);
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool);
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool);
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool);
    function getTotalGPIOBits: Integer;
    function getDirectionBits: ICoBitSet;
    function getMuxBits: ICoBitSet;
    function getValueBit(COM_bitNumber: Integer): Integer;
    function getValueBits: ICoBitSet;
    function getNumberOfPins: Integer;
    function getBoardTemperatureCelsius: Double;
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant);
    procedure setMasterClockDivisor(COM_value: Integer);
    function getMasterClockDivisor: Integer;
    procedure setExternalTriggerDelay(COM_counts: Integer);
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double;
    function getExternalTriggerDelayMinimum: Integer;
    function getExternalTriggerDelayMaximum: Integer;
    function getExternalTriggerDelayIncrement: Integer;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getNonlinearityCoefficients: ICoCoefficientsCollection;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_index: Integer): OleVariant;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer);
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer);
    function getStrayLight(COM_index: Integer): Double;
    function getAutonullingScanStatus: Integer;
    function getAutonullingScanValue: Integer;
    procedure setAutonullingScanStatus(COM_value: Integer);
    procedure setAutonullingScanValue(COM_value: Integer);
    function getAutonullingConfiguration: ICoAutonullingConfiguration;
    procedure setAutonullingConfiguration(const COM_cfg: ICoAutonullingConfiguration);
    procedure writeAutonullingConfigurationToSpectrometer;
    function readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration;
    function isAdvancedVersion: WordBool;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSB2000Plus read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSB2000PlusProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSB2000Plus
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSB2000PlusProperties = class(TPersistent)
  private
    FServer:    TCCoUSB2000Plus;
    function    GetDefaultInterface: ICoUSB2000Plus;
    constructor Create(AServer: TCCoUSB2000Plus);
  protected
  public
    property DefaultInterface: ICoUSB2000Plus read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSB2000PlusStatus provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSB2000PlusStatus exposed by              
// the CoClass CCoUSB2000PlusStatus. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSB2000PlusStatus = class
    class function Create: ICoUSB2000PlusStatus;
    class function CreateRemote(const MachineName: string): ICoUSB2000PlusStatus;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSB2000PlusStatus
// Help String      : CoUSB2000PlusStatus Class
// Default Interface: ICoUSB2000PlusStatus
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSB2000PlusStatusProperties= class;
{$ENDIF}
  TCCoUSB2000PlusStatus = class(TOleServer)
  private
    FIntf: ICoUSB2000PlusStatus;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSB2000PlusStatusProperties;
    function GetServerProperties: TCCoUSB2000PlusStatusProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSB2000PlusStatus;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSB2000PlusStatus);
    procedure Disconnect; override;
    procedure CreateUSB2000PlusStatus;
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSB2000PlusStatus read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSB2000PlusStatusProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSB2000PlusStatus
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSB2000PlusStatusProperties = class(TPersistent)
  private
    FServer:    TCCoUSB2000PlusStatus;
    function    GetDefaultInterface: ICoUSB2000PlusStatus;
    constructor Create(AServer: TCCoUSB2000PlusStatus);
  protected
  public
    property DefaultInterface: ICoUSB2000PlusStatus read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSB325 provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSB325 exposed by              
// the CoClass CCoUSB325. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSB325 = class
    class function Create: ICoUSB325;
    class function CreateRemote(const MachineName: string): ICoUSB325;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSB325
// Help String      : CoUSB325 Class
// Default Interface: ICoUSB325
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSB325Properties= class;
{$ENDIF}
  TCCoUSB325 = class(TOleServer)
  private
    FIntf: ICoUSB325;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSB325Properties;
    function GetServerProperties: TCCoUSB325Properties;
{$ENDIF}
    function GetDefaultInterface: ICoUSB325;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSB325);
    procedure Disconnect; override;
    procedure CreateUSB325;
    procedure CreateUSB325B(COM_i: Integer);
    function getNumberOfPixels: Integer;
    function getNumberOfDarkPixels: Integer;
    procedure setEndpoints;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
    procedure openSpectrometer(COM_index: Integer);
    function getChannels: ICoSpectrometerChannelCollection;
    function getGUIFeatures: ICoGUIProviderCollection;
    function getStatus: ICoSpectrometerStatus;
    function readIntegrationTime: Integer;
    procedure setMasterClock(COM_freq: Integer);
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant);
    function toString: WideString;
    function getActualIntegrationTime: Integer;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
    procedure setExternalTriggerMode(COM_mode: Integer);
    function getExternalTriggerModes: ICoExternalTriggerModeCollection;
    function isPlugInDetected(COM_id: Integer): WordBool;
    function getPlugIns: ICoSpectrometerPlugInCollection;
    function getNumberOfPlugIns: Integer;
    function initializePlugIns: OleVariant;
    procedure detectPlugIns;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getNonlinearityCoefficients: ICoCoefficientsCollection;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_index: Integer): OleVariant;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer);
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer);
    function getStrayLight(COM_index: Integer): Double;
    function isAdvancedVersion: WordBool;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSB325 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSB325Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSB325
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSB325Properties = class(TPersistent)
  private
    FServer:    TCCoUSB325;
    function    GetDefaultInterface: ICoUSB325;
    constructor Create(AServer: TCCoUSB325);
  protected
  public
    property DefaultInterface: ICoUSB325 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSB4000 provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSB4000 exposed by              
// the CoClass CCoUSB4000. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSB4000 = class
    class function Create: ICoUSB4000;
    class function CreateRemote(const MachineName: string): ICoUSB4000;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSB4000
// Help String      : CoUSB4000 Class
// Default Interface: ICoUSB4000
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSB4000Properties= class;
{$ENDIF}
  TCCoUSB4000 = class(TOleServer)
  private
    FIntf: ICoUSB4000;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSB4000Properties;
    function GetServerProperties: TCCoUSB4000Properties;
{$ENDIF}
    function GetDefaultInterface: ICoUSB4000;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSB4000);
    procedure Disconnect; override;
    procedure CreateUSB4000;
    procedure CreateUSB4000B(COM_i: Integer);
    procedure setEndpoints;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
    procedure openSpectrometer(COM_index: Integer);
    function getGUIFeatures: ICoGUIProviderCollection;
    procedure readSpectrum(COM_data: OleVariant);
    procedure readSpectrumB;
    function getStatus: ICoSpectrometerStatus;
    function readIntegrationTime: Integer;
    procedure setIntegrationTime(COM_intTime: Integer);
    function getGatingModeIntegrationTime: Integer;
    procedure addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
    procedure removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
    procedure setStrobeDelay(COM_delay: Integer);
    function toString: WideString;
    function getPlugIns: ICoSpectrometerPlugInCollection;
    function getNumberOfPlugIns: Integer;
    function isPlugInDetected(COM_id: Integer): WordBool;
    function initializePlugIns: OleVariant;
    procedure detectPlugIns;
    function setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer;
    function getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
    function getPSOCVersion: WideString;
    function getFPGAFirmwareVersion: WideString;
    function continuousStrobeCountsToMicros(COM_counts: Integer): Double;
    procedure setContinuousStrobeDelay(COM_delayMicros: Integer);
    function getContinuousStrobeDelayMinimum: Integer;
    function getContinuousStrobeDelayMaximum: Integer;
    function getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
    procedure setAdvancedIntegrationTime(COM_delayMicros: Integer);
    function getIntegrationTimeBaseClock: Integer;
    function getIntegrationClockTimer: Integer;
    function getAdvancedIntegrationTimeMinimum: Integer;
    function getAdvancedIntegrationTimeMaximum: Integer;
    function getAdvancedIntegrationTimeIncrement: Integer;
    procedure setExternalTriggerMode(COM_mode: Integer);
    function getExternalTriggerModes: ICoExternalTriggerModeCollection;
    procedure setShutterClock(COM_value: Integer);
    function getShutterClock: Integer;
    procedure setSingleStrobeLow(COM_value: Integer);
    procedure setSingleStrobeHigh(COM_value: Integer);
    function getSingleStrobeCountsToMicros(COM_counts: Integer): Double;
    function getSingleStrobeLow: Integer;
    function getSingleStrobeHigh: Integer;
    function getSingleStrobeMinimum: Integer;
    function getSingleStrobeMaximum: Integer;
    function getSingleStrobeIncrement: Integer;
    procedure setDirectionAllBits(const COM_bitSet: ICoBitSet);
    procedure setMuxAllBits(const COM_bitSet: ICoBitSet);
    procedure setValueAllBits(const COM_bitSet: ICoBitSet);
    procedure setDirectionBitmask(COM_bitmask: Smallint);
    procedure setMuxBitmask(COM_bitmask: Smallint);
    procedure setValueBitmask(COM_bitmask: Smallint);
    procedure setDirectionBit(COM_bit: Integer; COM_value: WordBool);
    procedure setMuxBit(COM_bit: Integer; COM_value: WordBool);
    procedure setValueBit(COM_bit: Integer; COM_value: WordBool);
    function getTotalGPIOBits: Integer;
    function getDirectionBits: ICoBitSet;
    function getMuxBits: ICoBitSet;
    function getValueBit(COM_bitNumber: Integer): Integer;
    function getValueBits: ICoBitSet;
    function getNumberOfPins: Integer;
    function getBoardTemperatureCelsius: Double;
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant);
    procedure setMasterClockDivisor(COM_value: Integer);
    function getMasterClockDivisor: Integer;
    procedure setExternalTriggerDelay(COM_counts: Integer);
    function triggerDelayCountsToMicroseconds(COM_counts: Integer): Double;
    function getExternalTriggerDelayMinimum: Integer;
    function getExternalTriggerDelayMaximum: Integer;
    function getExternalTriggerDelayIncrement: Integer;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getNonlinearityCoefficients: ICoCoefficientsCollection;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_index: Integer): OleVariant;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer);
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer);
    function getStrayLight(COM_index: Integer): Double;
    function getAutonullingScanStatus: Integer;
    function getAutonullingScanValue: Integer;
    procedure setAutonullingScanStatus(COM_value: Integer);
    procedure setAutonullingScanValue(COM_value: Integer);
    function getAutonullingConfiguration: ICoAutonullingConfiguration;
    procedure setAutonullingConfiguration(const COM_cfg: ICoAutonullingConfiguration);
    procedure writeAutonullingConfigurationToSpectrometer;
    function readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration;
    function isAdvancedVersion: WordBool;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSB4000 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSB4000Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSB4000
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSB4000Properties = class(TPersistent)
  private
    FServer:    TCCoUSB4000;
    function    GetDefaultInterface: ICoUSB4000;
    constructor Create(AServer: TCCoUSB4000);
  protected
  public
    property DefaultInterface: ICoUSB4000 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSB4000Status provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSB4000Status exposed by              
// the CoClass CCoUSB4000Status. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSB4000Status = class
    class function Create: ICoUSB4000Status;
    class function CreateRemote(const MachineName: string): ICoUSB4000Status;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSB4000Status
// Help String      : CoUSB4000Status Class
// Default Interface: ICoUSB4000Status
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSB4000StatusProperties= class;
{$ENDIF}
  TCCoUSB4000Status = class(TOleServer)
  private
    FIntf: ICoUSB4000Status;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSB4000StatusProperties;
    function GetServerProperties: TCCoUSB4000StatusProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSB4000Status;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSB4000Status);
    procedure Disconnect; override;
    procedure CreateUSB4000Status;
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSB4000Status read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSB4000StatusProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSB4000Status
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSB4000StatusProperties = class(TPersistent)
  private
    FServer:    TCCoUSB4000Status;
    function    GetDefaultInterface: ICoUSB4000Status;
    constructor Create(AServer: TCCoUSB4000Status);
  protected
  public
    property DefaultInterface: ICoUSB4000Status read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSB650 provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSB650 exposed by              
// the CoClass CCoUSB650. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSB650 = class
    class function Create: ICoUSB650;
    class function CreateRemote(const MachineName: string): ICoUSB650;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSB650
// Help String      : CoUSB650 Class
// Default Interface: ICoUSB650
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSB650Properties= class;
{$ENDIF}
  TCCoUSB650 = class(TOleServer)
  private
    FIntf: ICoUSB650;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSB650Properties;
    function GetServerProperties: TCCoUSB650Properties;
{$ENDIF}
    function GetDefaultInterface: ICoUSB650;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSB650);
    procedure Disconnect; override;
    procedure CreateUSB650;
    procedure CreateUSB650B(COM_i: Integer);
    function getNumberOfPixels: Integer;
    function getNumberOfDarkPixels: Integer;
    procedure setEndpoints;
    function getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
    procedure openSpectrometer(COM_index: Integer);
    function getChannels: ICoSpectrometerChannelCollection;
    function getGUIFeatures: ICoGUIProviderCollection;
    function getStatus: ICoSpectrometerStatus;
    function readIntegrationTime: Integer;
    procedure setMasterClock(COM_freq: Integer);
    function getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
    procedure setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant);
    function getActualIntegrationTime: Integer;
    function getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
    procedure setExternalTriggerMode(COM_mode: Integer);
    function getExternalTriggerModes: ICoExternalTriggerModeCollection;
    function isPlugInDetected(COM_id: Integer): WordBool;
    function getPlugIns: ICoSpectrometerPlugInCollection;
    function getNumberOfPlugIns: Integer;
    function initializePlugIns: OleVariant;
    procedure detectPlugIns;
    function readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getNonlinearityCoefficients: ICoCoefficientsCollection;
    function getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
    procedure setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_index: Integer): OleVariant;
    procedure setWavelengths(COM_wl: OleVariant; COM_index: Integer);
    function readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
    function getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
    procedure setStrayLight(COM_strayLight: Double; COM_index: Integer);
    function getStrayLight(COM_index: Integer): Double;
    function isAdvancedVersion: WordBool;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSB650 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSB650Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSB650
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSB650Properties = class(TPersistent)
  private
    FServer:    TCCoUSB650;
    function    GetDefaultInterface: ICoUSB650;
    constructor Create(AServer: TCCoUSB650);
  protected
  public
    property DefaultInterface: ICoUSB650 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSBCommonDescriptor provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSBCommonDescriptor exposed by              
// the CoClass CCoUSBCommonDescriptor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSBCommonDescriptor = class
    class function Create: ICoUSBCommonDescriptor;
    class function CreateRemote(const MachineName: string): ICoUSBCommonDescriptor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSBCommonDescriptor
// Help String      : CoUSBCommonDescriptor Class
// Default Interface: ICoUSBCommonDescriptor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSBCommonDescriptorProperties= class;
{$ENDIF}
  TCCoUSBCommonDescriptor = class(TOleServer)
  private
    FIntf: ICoUSBCommonDescriptor;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSBCommonDescriptorProperties;
    function GetServerProperties: TCCoUSBCommonDescriptorProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSBCommonDescriptor;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSBCommonDescriptor);
    procedure Disconnect; override;
    procedure CreateUSBCommonDescriptor;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSBCommonDescriptor read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSBCommonDescriptorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSBCommonDescriptor
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSBCommonDescriptorProperties = class(TPersistent)
  private
    FServer:    TCCoUSBCommonDescriptor;
    function    GetDefaultInterface: ICoUSBCommonDescriptor;
    constructor Create(AServer: TCCoUSBCommonDescriptor);
  protected
  public
    property DefaultInterface: ICoUSBCommonDescriptor read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSBConfigurationDescriptor provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSBConfigurationDescriptor exposed by              
// the CoClass CCoUSBConfigurationDescriptor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSBConfigurationDescriptor = class
    class function Create: ICoUSBConfigurationDescriptor;
    class function CreateRemote(const MachineName: string): ICoUSBConfigurationDescriptor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSBConfigurationDescriptor
// Help String      : CoUSBConfigurationDescriptor Class
// Default Interface: ICoUSBConfigurationDescriptor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSBConfigurationDescriptorProperties= class;
{$ENDIF}
  TCCoUSBConfigurationDescriptor = class(TOleServer)
  private
    FIntf: ICoUSBConfigurationDescriptor;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSBConfigurationDescriptorProperties;
    function GetServerProperties: TCCoUSBConfigurationDescriptorProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSBConfigurationDescriptor;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSBConfigurationDescriptor);
    procedure Disconnect; override;
    procedure CreateUSBConfigurationDescriptor;
    function toString: WideString;
    function getLength: Shortint;
    function getDescriptorType: Shortint;
    function getTotalLength: Smallint;
    function getNumInterfaces: Shortint;
    function getConfigurationValue: Shortint;
    function getConfiguration: Shortint;
    function getAttributes: Shortint;
    function getMaxPower: Shortint;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSBConfigurationDescriptor read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSBConfigurationDescriptorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSBConfigurationDescriptor
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSBConfigurationDescriptorProperties = class(TPersistent)
  private
    FServer:    TCCoUSBConfigurationDescriptor;
    function    GetDefaultInterface: ICoUSBConfigurationDescriptor;
    constructor Create(AServer: TCCoUSBConfigurationDescriptor);
  protected
  public
    property DefaultInterface: ICoUSBConfigurationDescriptor read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSBConstants provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSBConstants exposed by              
// the CoClass CCoUSBConstants. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSBConstants = class
    class function Create: ICoUSBConstants;
    class function CreateRemote(const MachineName: string): ICoUSBConstants;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSBConstants
// Help String      : CoUSBConstants Class
// Default Interface: ICoUSBConstants
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSBConstantsProperties= class;
{$ENDIF}
  TCCoUSBConstants = class(TOleServer)
  private
    FIntf: ICoUSBConstants;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSBConstantsProperties;
    function GetServerProperties: TCCoUSBConstantsProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSBConstants;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSBConstants);
    procedure Disconnect; override;
    procedure CreateUSBConstants;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSBConstants read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSBConstantsProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSBConstants
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSBConstantsProperties = class(TPersistent)
  private
    FServer:    TCCoUSBConstants;
    function    GetDefaultInterface: ICoUSBConstants;
    constructor Create(AServer: TCCoUSBConstants);
  protected
  public
    property DefaultInterface: ICoUSBConstants read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSBDeviceDescriptor provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSBDeviceDescriptor exposed by              
// the CoClass CCoUSBDeviceDescriptor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSBDeviceDescriptor = class
    class function Create: ICoUSBDeviceDescriptor;
    class function CreateRemote(const MachineName: string): ICoUSBDeviceDescriptor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSBDeviceDescriptor
// Help String      : CoUSBDeviceDescriptor Class
// Default Interface: ICoUSBDeviceDescriptor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSBDeviceDescriptorProperties= class;
{$ENDIF}
  TCCoUSBDeviceDescriptor = class(TOleServer)
  private
    FIntf: ICoUSBDeviceDescriptor;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSBDeviceDescriptorProperties;
    function GetServerProperties: TCCoUSBDeviceDescriptorProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSBDeviceDescriptor;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSBDeviceDescriptor);
    procedure Disconnect; override;
    procedure CreateUSBDeviceDescriptor;
    function toString: WideString;
    function getLength: Shortint;
    function getDescriptorType: Shortint;
    function getbcdUSB: Smallint;
    function getDeviceClass: Shortint;
    function getDeviceSubClass: Shortint;
    function getDeviceProtocol: Shortint;
    function getMaxPacketSize0: Smallint;
    function getVendorID: Smallint;
    function getProductID: Smallint;
    function getbcdDevice: Smallint;
    function getManufacturer: Shortint;
    function getProduct: Shortint;
    function getSerialNumber: Shortint;
    function getNumConfigurations: Shortint;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSBDeviceDescriptor read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSBDeviceDescriptorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSBDeviceDescriptor
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSBDeviceDescriptorProperties = class(TPersistent)
  private
    FServer:    TCCoUSBDeviceDescriptor;
    function    GetDefaultInterface: ICoUSBDeviceDescriptor;
    constructor Create(AServer: TCCoUSBDeviceDescriptor);
  protected
  public
    property DefaultInterface: ICoUSBDeviceDescriptor read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSBEndpointDevice provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSBEndpointDevice exposed by              
// the CoClass CCoUSBEndpointDevice. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSBEndpointDevice = class
    class function Create: ICoUSBEndpointDevice;
    class function CreateRemote(const MachineName: string): ICoUSBEndpointDevice;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSBEndpointDevice
// Help String      : CoUSBEndpointDevice Class
// Default Interface: ICoUSBEndpointDevice
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSBEndpointDeviceProperties= class;
{$ENDIF}
  TCCoUSBEndpointDevice = class(TOleServer)
  private
    FIntf: ICoUSBEndpointDevice;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSBEndpointDeviceProperties;
    function GetServerProperties: TCCoUSBEndpointDeviceProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSBEndpointDevice;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSBEndpointDevice);
    procedure Disconnect; override;
    procedure CreateUSBEndpointDevice;
    function getEndpoint(COM_param0: Integer): ICoUSBEndpointDescriptor;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSBEndpointDevice read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSBEndpointDeviceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSBEndpointDevice
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSBEndpointDeviceProperties = class(TPersistent)
  private
    FServer:    TCCoUSBEndpointDevice;
    function    GetDefaultInterface: ICoUSBEndpointDevice;
    constructor Create(AServer: TCCoUSBEndpointDevice);
  protected
  public
    property DefaultInterface: ICoUSBEndpointDevice read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSBImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSBImpl exposed by              
// the CoClass CCoUSBImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSBImpl = class
    class function Create: ICoUSBImpl;
    class function CreateRemote(const MachineName: string): ICoUSBImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSBImpl
// Help String      : CoUSBImpl Class
// Default Interface: ICoUSBImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSBImplProperties= class;
{$ENDIF}
  TCCoUSBImpl = class(TOleServer)
  private
    FIntf: ICoUSBImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSBImplProperties;
    function GetServerProperties: TCCoUSBImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSBImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSBImpl);
    procedure Disconnect; override;
    procedure CreateUSBImpl;
    function getInputBuffer: OleVariant;
    function getOutputBuffer: OleVariant;
    procedure increaseInputBufferSize(COM_size: Integer);
    procedure increaseOutputBufferSize(COM_size: Integer);
    procedure bulkIn(const COM_endPointDescriptor: ICoUSBEndpointDescriptor; COM_data: OleVariant; 
                     COM_length: Integer);
    procedure bulkOut(const COM_endPointDescriptor: ICoUSBEndpointDescriptor; COM_data: OleVariant; 
                      COM_length: Integer);
    function readUSBStringDescriptor(COM_num: Integer): WideString;
    procedure openDevice(COM_vendorID: Integer; COM_prodID: Integer; COM_index: Integer);
    procedure closeDevice;
    function toString: WideString;
    function getUSBStringDescriptor(COM_index: Integer): WideString;
    function isUSB2Mode: WordBool;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSBImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSBImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSBImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSBImplProperties = class(TPersistent)
  private
    FServer:    TCCoUSBImpl;
    function    GetDefaultInterface: ICoUSBImpl;
    constructor Create(AServer: TCCoUSBImpl);
  protected
  public
    property DefaultInterface: ICoUSBImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSBInterfaceDescriptor provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSBInterfaceDescriptor exposed by              
// the CoClass CCoUSBInterfaceDescriptor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSBInterfaceDescriptor = class
    class function Create: ICoUSBInterfaceDescriptor;
    class function CreateRemote(const MachineName: string): ICoUSBInterfaceDescriptor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSBInterfaceDescriptor
// Help String      : CoUSBInterfaceDescriptor Class
// Default Interface: ICoUSBInterfaceDescriptor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSBInterfaceDescriptorProperties= class;
{$ENDIF}
  TCCoUSBInterfaceDescriptor = class(TOleServer)
  private
    FIntf: ICoUSBInterfaceDescriptor;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSBInterfaceDescriptorProperties;
    function GetServerProperties: TCCoUSBInterfaceDescriptorProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSBInterfaceDescriptor;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSBInterfaceDescriptor);
    procedure Disconnect; override;
    procedure CreateUSBInterfaceDescriptor;
    function toString: WideString;
    function getLength: Shortint;
    function getDescriptorType: Shortint;
    function getInterfaceNumber: Shortint;
    function getAlternateSetting: Shortint;
    function getNumEndpoints: Shortint;
    function getInterfaceClass: Shortint;
    function getInterfaceSubClass: Shortint;
    function getInterfaceProtocol: Shortint;
    function getInterface: Shortint;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSBInterfaceDescriptor read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSBInterfaceDescriptorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSBInterfaceDescriptor
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSBInterfaceDescriptorProperties = class(TPersistent)
  private
    FServer:    TCCoUSBInterfaceDescriptor;
    function    GetDefaultInterface: ICoUSBInterfaceDescriptor;
    constructor Create(AServer: TCCoUSBInterfaceDescriptor);
  protected
  public
    property DefaultInterface: ICoUSBInterfaceDescriptor read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSBLogicalPortStatus provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSBLogicalPortStatus exposed by              
// the CoClass CCoUSBLogicalPortStatus. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSBLogicalPortStatus = class
    class function Create: ICoUSBLogicalPortStatus;
    class function CreateRemote(const MachineName: string): ICoUSBLogicalPortStatus;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSBLogicalPortStatus
// Help String      : CoUSBLogicalPortStatus Class
// Default Interface: ICoUSBLogicalPortStatus
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSBLogicalPortStatusProperties= class;
{$ENDIF}
  TCCoUSBLogicalPortStatus = class(TOleServer)
  private
    FIntf: ICoUSBLogicalPortStatus;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSBLogicalPortStatusProperties;
    function GetServerProperties: TCCoUSBLogicalPortStatusProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSBLogicalPortStatus;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSBLogicalPortStatus);
    procedure Disconnect; override;
    procedure CreateUSBLogicalPortStatus;
    function getSpectrometer: ICoSpectrometer;
    function isDevicePresent: WordBool;
    procedure setDeviceNotPresent;
    procedure setDevicePresent(const COM_spectrometer: ICoSpectrometer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSBLogicalPortStatus read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSBLogicalPortStatusProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSBLogicalPortStatus
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSBLogicalPortStatusProperties = class(TPersistent)
  private
    FServer:    TCCoUSBLogicalPortStatus;
    function    GetDefaultInterface: ICoUSBLogicalPortStatus;
    constructor Create(AServer: TCCoUSBLogicalPortStatus);
  protected
  public
    property DefaultInterface: ICoUSBLogicalPortStatus read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSBProductInfo provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSBProductInfo exposed by              
// the CoClass CCoUSBProductInfo. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSBProductInfo = class
    class function Create: ICoUSBProductInfo;
    class function CreateRemote(const MachineName: string): ICoUSBProductInfo;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSBProductInfo
// Help String      : CoUSBProductInfo Class
// Default Interface: ICoUSBProductInfo
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSBProductInfoProperties= class;
{$ENDIF}
  TCCoUSBProductInfo = class(TOleServer)
  private
    FIntf: ICoUSBProductInfo;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSBProductInfoProperties;
    function GetServerProperties: TCCoUSBProductInfoProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSBProductInfo;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSBProductInfo);
    procedure Disconnect; override;
    procedure CreateUSBProductInfoB(const COM_name: WideString; const COM_className: WideString; 
                                    COM_vendorID: Integer; COM_productID: Integer);
    function getProductInfo(COM_vendorID: Integer; COM_productID: Integer): ICoUSBProductInfo;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSBProductInfo read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSBProductInfoProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSBProductInfo
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSBProductInfoProperties = class(TPersistent)
  private
    FServer:    TCCoUSBProductInfo;
    function    GetDefaultInterface: ICoUSBProductInfo;
    constructor Create(AServer: TCCoUSBProductInfo);
  protected
  public
    property DefaultInterface: ICoUSBProductInfo read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSBStringDescriptor provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSBStringDescriptor exposed by              
// the CoClass CCoUSBStringDescriptor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSBStringDescriptor = class
    class function Create: ICoUSBStringDescriptor;
    class function CreateRemote(const MachineName: string): ICoUSBStringDescriptor;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSBStringDescriptor
// Help String      : CoUSBStringDescriptor Class
// Default Interface: ICoUSBStringDescriptor
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSBStringDescriptorProperties= class;
{$ENDIF}
  TCCoUSBStringDescriptor = class(TOleServer)
  private
    FIntf: ICoUSBStringDescriptor;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSBStringDescriptorProperties;
    function GetServerProperties: TCCoUSBStringDescriptorProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSBStringDescriptor;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSBStringDescriptor);
    procedure Disconnect; override;
    procedure CreateUSBStringDescriptor;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSBStringDescriptor read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSBStringDescriptorProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSBStringDescriptor
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSBStringDescriptorProperties = class(TPersistent)
  private
    FServer:    TCCoUSBStringDescriptor;
    function    GetDefaultInterface: ICoUSBStringDescriptor;
    constructor Create(AServer: TCCoUSBStringDescriptor);
  protected
  public
    property DefaultInterface: ICoUSBStringDescriptor read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSB_ISS provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSB_ISS exposed by              
// the CoClass CCoUSB_ISS. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSB_ISS = class
    class function Create: ICoUSB_ISS;
    class function CreateRemote(const MachineName: string): ICoUSB_ISS;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSB_ISS
// Help String      : CoUSB_ISS Class
// Default Interface: ICoUSB_ISS
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSB_ISSProperties= class;
{$ENDIF}
  TCCoUSB_ISS = class(TOleServer)
  private
    FIntf: ICoUSB_ISS;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSB_ISSProperties;
    function GetServerProperties: TCCoUSB_ISSProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSB_ISS;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSB_ISS);
    procedure Disconnect; override;
    procedure CreateUSB_ISSB(const COM_spectrometer: ICoUSBSpectrometer; 
                             const COM_usb: ICoUSBInterface);
    function getGUIFeatures: ICoGUIProviderCollection;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSB_ISS read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSB_ISSProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSB_ISS
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSB_ISSProperties = class(TPersistent)
  private
    FServer:    TCCoUSB_ISS;
    function    GetDefaultInterface: ICoUSB_ISS;
    constructor Create(AServer: TCCoUSB_ISS);
  protected
  public
    property DefaultInterface: ICoUSB_ISS read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSB_ISS_UV provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSB_ISS_UV exposed by              
// the CoClass CCoUSB_ISS_UV. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSB_ISS_UV = class
    class function Create: ICoUSB_ISS_UV;
    class function CreateRemote(const MachineName: string): ICoUSB_ISS_UV;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSB_ISS_UV
// Help String      : CoUSB_ISS_UV Class
// Default Interface: ICoUSB_ISS_UV
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSB_ISS_UVProperties= class;
{$ENDIF}
  TCCoUSB_ISS_UV = class(TOleServer)
  private
    FIntf: ICoUSB_ISS_UV;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSB_ISS_UVProperties;
    function GetServerProperties: TCCoUSB_ISS_UVProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUSB_ISS_UV;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSB_ISS_UV);
    procedure Disconnect; override;
    procedure CreateUSB_ISS_UVB(const COM_spectrometer: ICoUSBSpectrometer; 
                                const COM_usb: ICoUSBInterface);
    function getGUIFeatures: ICoGUIProviderCollection;
    procedure setPowerUpPOTValues;
    procedure setPOTValue(COM_pot: Integer; COM_value: Integer);
    function getPOTValues: OleVariant;
    procedure setLampOn(COM_lampOn: WordBool);
    function isLampOn: WordBool;
    procedure setVisLampOn(COM_lampOn: WordBool);
    function isVisLampOn: WordBool;
    procedure setVisLampIntensity(COM_intens: Smallint);
    function getVisLampIntensity: Smallint;
    procedure setUVLampIntensity(COM_intens: Smallint);
    function getUVLampIntensity: Smallint;
    function getLampIntensityMinimum: Integer;
    function getLampIntensityMaximum: Integer;
    function getLampIntensityIncrement: Integer;
    function toString: WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSB_ISS_UV read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSB_ISS_UVProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSB_ISS_UV
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSB_ISS_UVProperties = class(TPersistent)
  private
    FServer:    TCCoUSB_ISS_UV;
    function    GetDefaultInterface: ICoUSB_ISS_UV;
    constructor Create(AServer: TCCoUSB_ISS_UV);
  protected
  public
    property DefaultInterface: ICoUSB_ISS_UV read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUSB_LS450 provides a Create and CreateRemote method to          
// create instances of the default interface ICoUSB_LS450 exposed by              
// the CoClass CCoUSB_LS450. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUSB_LS450 = class
    class function Create: ICoUSB_LS450;
    class function CreateRemote(const MachineName: string): ICoUSB_LS450;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUSB_LS450
// Help String      : CoUSB_LS450 Class
// Default Interface: ICoUSB_LS450
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUSB_LS450Properties= class;
{$ENDIF}
  TCCoUSB_LS450 = class(TOleServer)
  private
    FIntf: ICoUSB_LS450;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUSB_LS450Properties;
    function GetServerProperties: TCCoUSB_LS450Properties;
{$ENDIF}
    function GetDefaultInterface: ICoUSB_LS450;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUSB_LS450);
    procedure Disconnect; override;
    procedure CreateUSB_LS450B(const COM_spectrometer: ICoUSBSpectrometer; 
                               const COM_usbInt: ICoUSBInterface);
    function getGUIFeatures: ICoGUIProviderCollection;
    function toString: WideString;
    procedure setLEDMode(COM_pulsed: WordBool);
    function getLS450Coefficients: ICoLS450Coefficients;
    procedure setLS450Coefficients(const COM_coeffs: ICoLS450Coefficients);
    procedure setLS450Info(COM_index: Integer; const COM_str: WideString);
    function getLS450Info(COM_index: Integer): WideString;
    procedure saveInfo;
    procedure loadInfo;
    procedure setAllLS450Info(const COM_ls450Coefficients: ICoLS450Coefficients);
    function getAllLS450Info: ICoLS450Coefficients;
    procedure loadLS450CoefficientsFromEEPROM;
    function getO2ProbeCalibrationCoefficients: OleVariant;
    procedure setO2ProbeCalibrationCoefficients(COM_coefficients: OleVariant);
    procedure setDACCounts(COM_counts: Integer);
    function analogOutCountsToMilliamps(COM_counts: Integer): Double;
    function getDACMinimum: Integer;
    function getDACMaximum: Integer;
    function getDACIncrement: Integer;
    function getExternalTemperatureCelsius: Double;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUSB_LS450 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUSB_LS450Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUSB_LS450
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUSB_LS450Properties = class(TPersistent)
  private
    FServer:    TCCoUSB_LS450;
    function    GetDefaultInterface: ICoUSB_LS450;
    constructor Create(AServer: TCCoUSB_LS450);
  protected
  public
    property DefaultInterface: ICoUSB_LS450 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUV_VIS_LightSource provides a Create and CreateRemote method to          
// create instances of the default interface ICoUV_VIS_LightSource exposed by              
// the CoClass CCoUV_VIS_LightSource. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUV_VIS_LightSource = class
    class function Create: ICoUV_VIS_LightSource;
    class function CreateRemote(const MachineName: string): ICoUV_VIS_LightSource;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUV_VIS_LightSource
// Help String      : CoUV_VIS_LightSource Class
// Default Interface: ICoUV_VIS_LightSource
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUV_VIS_LightSourceProperties= class;
{$ENDIF}
  TCCoUV_VIS_LightSource = class(TOleServer)
  private
    FIntf: ICoUV_VIS_LightSource;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUV_VIS_LightSourceProperties;
    function GetServerProperties: TCCoUV_VIS_LightSourceProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUV_VIS_LightSource;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUV_VIS_LightSource);
    procedure Disconnect; override;
    procedure CreateUV_VIS_LightSource;
    procedure setPowerUpPOTValues;
    procedure setPOTValue(COM_param0: Integer; COM_param1: Integer);
    function getPOTValues: OleVariant;
    procedure setLampOn(COM_param0: WordBool);
    function isLampOn: WordBool;
    procedure setVisLampOn(COM_param0: WordBool);
    function isVisLampOn: WordBool;
    procedure setVisLampIntensity(COM_param0: Smallint);
    function getVisLampIntensity: Smallint;
    procedure setUVLampIntensity(COM_param0: Smallint);
    function getUVLampIntensity: Smallint;
    function getLampIntensityMinimum: Integer;
    function getLampIntensityMaximum: Integer;
    function getLampIntensityIncrement: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUV_VIS_LightSource read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUV_VIS_LightSourceProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUV_VIS_LightSource
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUV_VIS_LightSourceProperties = class(TPersistent)
  private
    FServer:    TCCoUV_VIS_LightSource;
    function    GetDefaultInterface: ICoUV_VIS_LightSource;
    constructor Create(AServer: TCCoUV_VIS_LightSource);
  protected
  public
    property DefaultInterface: ICoUV_VIS_LightSource read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUV_VIS_LightSourceGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoUV_VIS_LightSourceGUIProvider exposed by              
// the CoClass CCoUV_VIS_LightSourceGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUV_VIS_LightSourceGUIProvider = class
    class function Create: ICoUV_VIS_LightSourceGUIProvider;
    class function CreateRemote(const MachineName: string): ICoUV_VIS_LightSourceGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUV_VIS_LightSourceGUIProvider
// Help String      : CoUV_VIS_LightSourceGUIProvider Class
// Default Interface: ICoUV_VIS_LightSourceGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUV_VIS_LightSourceGUIProviderProperties= class;
{$ENDIF}
  TCCoUV_VIS_LightSourceGUIProvider = class(TOleServer)
  private
    FIntf: ICoUV_VIS_LightSourceGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUV_VIS_LightSourceGUIProviderProperties;
    function GetServerProperties: TCCoUV_VIS_LightSourceGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUV_VIS_LightSourceGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUV_VIS_LightSourceGUIProvider);
    procedure Disconnect; override;
    procedure CreateUV_VIS_LightSourceGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUV_VIS_LightSourceGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUV_VIS_LightSourceGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUV_VIS_LightSourceGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUV_VIS_LightSourceGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoUV_VIS_LightSourceGUIProvider;
    function    GetDefaultInterface: ICoUV_VIS_LightSourceGUIProvider;
    constructor Create(AServer: TCCoUV_VIS_LightSourceGUIProvider);
  protected
  public
    property DefaultInterface: ICoUV_VIS_LightSourceGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUV_VIS_LightSourceImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoUV_VIS_LightSourceImpl exposed by              
// the CoClass CCoUV_VIS_LightSourceImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUV_VIS_LightSourceImpl = class
    class function Create: ICoUV_VIS_LightSourceImpl;
    class function CreateRemote(const MachineName: string): ICoUV_VIS_LightSourceImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUV_VIS_LightSourceImpl
// Help String      : CoUV_VIS_LightSourceImpl Class
// Default Interface: ICoUV_VIS_LightSourceImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUV_VIS_LightSourceImplProperties= class;
{$ENDIF}
  TCCoUV_VIS_LightSourceImpl = class(TOleServer)
  private
    FIntf: ICoUV_VIS_LightSourceImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUV_VIS_LightSourceImplProperties;
    function GetServerProperties: TCCoUV_VIS_LightSourceImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUV_VIS_LightSourceImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUV_VIS_LightSourceImpl);
    procedure Disconnect; override;
    procedure CreateUV_VIS_LightSourceImplB(const COM_usbInt: ICoUSBInterface);
    procedure setLampOn(COM_lampOn: WordBool);
    function isLampOn: WordBool;
    function isVisLampOn: WordBool;
    procedure setVisLampOn(COM_lampOn: WordBool);
    function getVisLampIntensity: Smallint;
    procedure setVisLampIntensity(COM_intens: Smallint);
    procedure setUVLampIntensity(COM_intens: Smallint);
    function getUVLampIntensity: Smallint;
    procedure setPowerUpPOTValues;
    function getPOTValues: OleVariant;
    procedure setPOTValue(COM_pot: Integer; COM_value: Integer);
    function getLampIntensityMinimum: Integer;
    function getLampIntensityMaximum: Integer;
    function getLampIntensityIncrement: Integer;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUV_VIS_LightSourceImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUV_VIS_LightSourceImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUV_VIS_LightSourceImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUV_VIS_LightSourceImplProperties = class(TPersistent)
  private
    FServer:    TCCoUV_VIS_LightSourceImpl;
    function    GetDefaultInterface: ICoUV_VIS_LightSourceImpl;
    constructor Create(AServer: TCCoUV_VIS_LightSourceImpl);
  protected
  public
    property DefaultInterface: ICoUV_VIS_LightSourceImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUV_VIS_LightSourceImpl_2000 provides a Create and CreateRemote method to          
// create instances of the default interface ICoUV_VIS_LightSourceImpl_2000 exposed by              
// the CoClass CCoUV_VIS_LightSourceImpl_2000. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUV_VIS_LightSourceImpl_2000 = class
    class function Create: ICoUV_VIS_LightSourceImpl_2000;
    class function CreateRemote(const MachineName: string): ICoUV_VIS_LightSourceImpl_2000;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUV_VIS_LightSourceImpl_2000
// Help String      : CoUV_VIS_LightSourceImpl_2000 Class
// Default Interface: ICoUV_VIS_LightSourceImpl_2000
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUV_VIS_LightSourceImpl_2000Properties= class;
{$ENDIF}
  TCCoUV_VIS_LightSourceImpl_2000 = class(TOleServer)
  private
    FIntf: ICoUV_VIS_LightSourceImpl_2000;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUV_VIS_LightSourceImpl_2000Properties;
    function GetServerProperties: TCCoUV_VIS_LightSourceImpl_2000Properties;
{$ENDIF}
    function GetDefaultInterface: ICoUV_VIS_LightSourceImpl_2000;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUV_VIS_LightSourceImpl_2000);
    procedure Disconnect; override;
    procedure CreateUV_VIS_LightSourceImpl_2000B(const COM_usbInt: ICoUSBInterface);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUV_VIS_LightSourceImpl_2000 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUV_VIS_LightSourceImpl_2000Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUV_VIS_LightSourceImpl_2000
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUV_VIS_LightSourceImpl_2000Properties = class(TPersistent)
  private
    FServer:    TCCoUV_VIS_LightSourceImpl_2000;
    function    GetDefaultInterface: ICoUV_VIS_LightSourceImpl_2000;
    constructor Create(AServer: TCCoUV_VIS_LightSourceImpl_2000);
  protected
  public
    property DefaultInterface: ICoUV_VIS_LightSourceImpl_2000 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUV_VIS_LightSourceImpl_4000 provides a Create and CreateRemote method to          
// create instances of the default interface ICoUV_VIS_LightSourceImpl_4000 exposed by              
// the CoClass CCoUV_VIS_LightSourceImpl_4000. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUV_VIS_LightSourceImpl_4000 = class
    class function Create: ICoUV_VIS_LightSourceImpl_4000;
    class function CreateRemote(const MachineName: string): ICoUV_VIS_LightSourceImpl_4000;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUV_VIS_LightSourceImpl_4000
// Help String      : CoUV_VIS_LightSourceImpl_4000 Class
// Default Interface: ICoUV_VIS_LightSourceImpl_4000
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUV_VIS_LightSourceImpl_4000Properties= class;
{$ENDIF}
  TCCoUV_VIS_LightSourceImpl_4000 = class(TOleServer)
  private
    FIntf: ICoUV_VIS_LightSourceImpl_4000;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUV_VIS_LightSourceImpl_4000Properties;
    function GetServerProperties: TCCoUV_VIS_LightSourceImpl_4000Properties;
{$ENDIF}
    function GetDefaultInterface: ICoUV_VIS_LightSourceImpl_4000;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUV_VIS_LightSourceImpl_4000);
    procedure Disconnect; override;
    procedure CreateUV_VIS_LightSourceImpl_4000B(const COM_usbInt: ICoUSBInterface);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUV_VIS_LightSourceImpl_4000 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUV_VIS_LightSourceImpl_4000Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUV_VIS_LightSourceImpl_4000
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUV_VIS_LightSourceImpl_4000Properties = class(TPersistent)
  private
    FServer:    TCCoUV_VIS_LightSourceImpl_4000;
    function    GetDefaultInterface: ICoUV_VIS_LightSourceImpl_4000;
    constructor Create(AServer: TCCoUV_VIS_LightSourceImpl_4000);
  protected
  public
    property DefaultInterface: ICoUV_VIS_LightSourceImpl_4000 read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUV_VIS_LightSourceJAZCompatible provides a Create and CreateRemote method to          
// create instances of the default interface ICoUV_VIS_LightSourceJAZCompatible exposed by              
// the CoClass CCoUV_VIS_LightSourceJAZCompatible. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUV_VIS_LightSourceJAZCompatible = class
    class function Create: ICoUV_VIS_LightSourceJAZCompatible;
    class function CreateRemote(const MachineName: string): ICoUV_VIS_LightSourceJAZCompatible;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUV_VIS_LightSourceJAZCompatible
// Help String      : CoUV_VIS_LightSourceJAZCompatible Class
// Default Interface: ICoUV_VIS_LightSourceJAZCompatible
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUV_VIS_LightSourceJAZCompatibleProperties= class;
{$ENDIF}
  TCCoUV_VIS_LightSourceJAZCompatible = class(TOleServer)
  private
    FIntf: ICoUV_VIS_LightSourceJAZCompatible;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUV_VIS_LightSourceJAZCompatibleProperties;
    function GetServerProperties: TCCoUV_VIS_LightSourceJAZCompatibleProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUV_VIS_LightSourceJAZCompatible;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUV_VIS_LightSourceJAZCompatible);
    procedure Disconnect; override;
    procedure CreateUV_VIS_LightSourceJAZCompatible;
    procedure setPowerUpPOTValues;
    function getPOTValues: OleVariant;
    procedure setPOTValue(COM_param0: Integer; COM_param1: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUV_VIS_LightSourceJAZCompatible read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUV_VIS_LightSourceJAZCompatibleProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUV_VIS_LightSourceJAZCompatible
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUV_VIS_LightSourceJAZCompatibleProperties = class(TPersistent)
  private
    FServer:    TCCoUV_VIS_LightSourceJAZCompatible;
    function    GetDefaultInterface: ICoUV_VIS_LightSourceJAZCompatible;
    constructor Create(AServer: TCCoUV_VIS_LightSourceJAZCompatible);
  protected
  public
    property DefaultInterface: ICoUV_VIS_LightSourceJAZCompatible read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUV_VIS_LightSourceImpl_JAZ provides a Create and CreateRemote method to          
// create instances of the default interface ICoUV_VIS_LightSourceImpl_JAZ exposed by              
// the CoClass CCoUV_VIS_LightSourceImpl_JAZ. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUV_VIS_LightSourceImpl_JAZ = class
    class function Create: ICoUV_VIS_LightSourceImpl_JAZ;
    class function CreateRemote(const MachineName: string): ICoUV_VIS_LightSourceImpl_JAZ;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUV_VIS_LightSourceImpl_JAZ
// Help String      : CoUV_VIS_LightSourceImpl_JAZ Class
// Default Interface: ICoUV_VIS_LightSourceImpl_JAZ
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUV_VIS_LightSourceImpl_JAZProperties= class;
{$ENDIF}
  TCCoUV_VIS_LightSourceImpl_JAZ = class(TOleServer)
  private
    FIntf: ICoUV_VIS_LightSourceImpl_JAZ;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUV_VIS_LightSourceImpl_JAZProperties;
    function GetServerProperties: TCCoUV_VIS_LightSourceImpl_JAZProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUV_VIS_LightSourceImpl_JAZ;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUV_VIS_LightSourceImpl_JAZ);
    procedure Disconnect; override;
    procedure CreateUV_VIS_LightSourceImpl_JAZB(const COM_usbInt: ICoUSBInterface; 
                                                const COM_spec: ICoUV_VIS_LightSourceJAZCompatible);
    procedure setPowerUpPOTValues;
    function getJAZPOTValues: OleVariant;
    procedure setPOTValue(COM_pot: Integer; COM_value: Integer);
    function getLampIntensityMaximum: Integer;
    procedure setVisLampIntensity(COM_intens: Smallint);
    procedure setUVLampIntensity(COM_intens: Smallint);
    function getUVLampIntensity: Smallint;
    function getVisLampIntensity: Smallint;
    function isLampOn: WordBool;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUV_VIS_LightSourceImpl_JAZ read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUV_VIS_LightSourceImpl_JAZProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUV_VIS_LightSourceImpl_JAZ
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUV_VIS_LightSourceImpl_JAZProperties = class(TPersistent)
  private
    FServer:    TCCoUV_VIS_LightSourceImpl_JAZ;
    function    GetDefaultInterface: ICoUV_VIS_LightSourceImpl_JAZ;
    constructor Create(AServer: TCCoUV_VIS_LightSourceImpl_JAZ);
  protected
  public
    property DefaultInterface: ICoUV_VIS_LightSourceImpl_JAZ read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUniUSB provides a Create and CreateRemote method to          
// create instances of the default interface ICoUniUSB exposed by              
// the CoClass CCoUniUSB. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUniUSB = class
    class function Create: ICoUniUSB;
    class function CreateRemote(const MachineName: string): ICoUniUSB;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUniUSB
// Help String      : CoUniUSB Class
// Default Interface: ICoUniUSB
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUniUSBProperties= class;
{$ENDIF}
  TCCoUniUSB = class(TOleServer)
  private
    FIntf: ICoUniUSB;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUniUSBProperties;
    function GetServerProperties: TCCoUniUSBProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUniUSB;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUniUSB);
    procedure Disconnect; override;
    procedure CreateUniUSB;
    function isUSB2Mode: WordBool;
    function openDevice(COM_vendID: Integer; COM_prodID: Integer; COM_number: Integer): Integer;
    procedure closeDevice(COM_devID: Integer);
    function bulkIn(COM_devID: Integer; const COM_endPointDescriptor: ICoUSBEndpointDescriptor; 
                    COM_data: OleVariant; COM_size: Integer): Integer;
    function bulkOut(COM_devID: Integer; const COM_endPointDescriptor: ICoUSBEndpointDescriptor; 
                     COM_data: OleVariant; COM_size: Integer): Integer;
    procedure resetPipe(COM_devID: Integer; const COM_endPointDescriptor: ICoUSBEndpointDescriptor);
    procedure abortPipe(COM_devID: Integer; const COM_endPointDescriptor: ICoUSBEndpointDescriptor);
    function getUSBConfigurationDescriptor(COM_devID: Integer; COM_configNum: Integer): ICoUSBConfigurationDescriptor;
    function getUSBDeviceDescriptor(COM_devID: Integer): ICoUSBDeviceDescriptor;
    function getUSBInterfaceDescriptor(COM_devID: Integer): ICoUSBInterfaceDescriptor;
    function getUSBStringDescriptor(COM_devID: Integer; COM_index: Integer): WideString;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUniUSB read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUniUSBProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUniUSB
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUniUSBProperties = class(TPersistent)
  private
    FServer:    TCCoUniUSB;
    function    GetDefaultInterface: ICoUniUSB;
    constructor Create(AServer: TCCoUniUSB);
  protected
  public
    property DefaultInterface: ICoUniUSB read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoUniUSBPipeManager provides a Create and CreateRemote method to          
// create instances of the default interface ICoUniUSBPipeManager exposed by              
// the CoClass CCoUniUSBPipeManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoUniUSBPipeManager = class
    class function Create: ICoUniUSBPipeManager;
    class function CreateRemote(const MachineName: string): ICoUniUSBPipeManager;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoUniUSBPipeManager
// Help String      : CoUniUSBPipeManager Class
// Default Interface: ICoUniUSBPipeManager
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoUniUSBPipeManagerProperties= class;
{$ENDIF}
  TCCoUniUSBPipeManager = class(TOleServer)
  private
    FIntf: ICoUniUSBPipeManager;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoUniUSBPipeManagerProperties;
    function GetServerProperties: TCCoUniUSBPipeManagerProperties;
{$ENDIF}
    function GetDefaultInterface: ICoUniUSBPipeManager;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoUniUSBPipeManager);
    procedure Disconnect; override;
    procedure CreateUniUSBPipeManager;
    procedure addDeviceMapping(COM_devID: Integer; const COM_mapping: ICoEndpointToPipeMapping);
    function getPipe(COM_devID: Integer; COM_endPoint: Smallint): Integer;
    procedure removeDeviceMapping(COM_devID: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoUniUSBPipeManager read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoUniUSBPipeManagerProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoUniUSBPipeManager
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoUniUSBPipeManagerProperties = class(TPersistent)
  private
    FServer:    TCCoUniUSBPipeManager;
    function    GetDefaultInterface: ICoUniUSBPipeManager;
    constructor Create(AServer: TCCoUniUSBPipeManager);
  protected
  public
    property DefaultInterface: ICoUniUSBPipeManager read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoVersion provides a Create and CreateRemote method to          
// create instances of the default interface ICoVersion exposed by              
// the CoClass CCoVersion. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoVersion = class
    class function Create: ICoVersion;
    class function CreateRemote(const MachineName: string): ICoVersion;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoVersion
// Help String      : CoVersion Class
// Default Interface: ICoVersion
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoVersionProperties= class;
{$ENDIF}
  TCCoVersion = class(TOleServer)
  private
    FIntf: ICoVersion;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoVersionProperties;
    function GetServerProperties: TCCoVersionProperties;
{$ENDIF}
    function GetDefaultInterface: ICoVersion;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoVersion);
    procedure Disconnect; override;
    procedure CreateVersion;
    function isAdvancedVersion: WordBool;
    function getFirmwareVersion: WideString;
    procedure addAcquisitionListener(const COM_param0: ICoAcquisitionListener);
    procedure removeAcquisitionListener(const COM_param0: ICoAcquisitionListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoVersion read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoVersionProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoVersion
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoVersionProperties = class(TPersistent)
  private
    FServer:    TCCoVersion;
    function    GetDefaultInterface: ICoVersion;
    constructor Create(AServer: TCCoVersion);
  protected
  public
    property DefaultInterface: ICoVersion read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoVersionGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoVersionGUIProvider exposed by              
// the CoClass CCoVersionGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoVersionGUIProvider = class
    class function Create: ICoVersionGUIProvider;
    class function CreateRemote(const MachineName: string): ICoVersionGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoVersionGUIProvider
// Help String      : CoVersionGUIProvider Class
// Default Interface: ICoVersionGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoVersionGUIProviderProperties= class;
{$ENDIF}
  TCCoVersionGUIProvider = class(TOleServer)
  private
    FIntf: ICoVersionGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoVersionGUIProviderProperties;
    function GetServerProperties: TCCoVersionGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoVersionGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoVersionGUIProvider);
    procedure Disconnect; override;
    procedure CreateVersionGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoVersionGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoVersionGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoVersionGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoVersionGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoVersionGUIProvider;
    function    GetDefaultInterface: ICoVersionGUIProvider;
    constructor Create(AServer: TCCoVersionGUIProvider);
  protected
  public
    property DefaultInterface: ICoVersionGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoVersionImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoVersionImpl exposed by              
// the CoClass CCoVersionImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoVersionImpl = class
    class function Create: ICoVersionImpl;
    class function CreateRemote(const MachineName: string): ICoVersionImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoVersionImpl
// Help String      : CoVersionImpl Class
// Default Interface: ICoVersionImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoVersionImplProperties= class;
{$ENDIF}
  TCCoVersionImpl = class(TOleServer)
  private
    FIntf: ICoVersionImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoVersionImplProperties;
    function GetServerProperties: TCCoVersionImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoVersionImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoVersionImpl);
    procedure Disconnect; override;
    procedure CreateVersionImplB(const COM_usbInt: ICoUSBInterface; 
                                 const COM_spectrometer: ICoSpectrometer);
    function isAdvancedVersion: WordBool;
    function getFirmwareVersion: WideString;
    procedure addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    procedure removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoVersionImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoVersionImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoVersionImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoVersionImplProperties = class(TPersistent)
  private
    FServer:    TCCoVersionImpl;
    function    GetDefaultInterface: ICoVersionImpl;
    constructor Create(AServer: TCCoVersionImpl);
  protected
  public
    property DefaultInterface: ICoVersionImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoWavelengthCalibrationGUIProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoWavelengthCalibrationGUIProvider exposed by              
// the CoClass CCoWavelengthCalibrationGUIProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoWavelengthCalibrationGUIProvider = class
    class function Create: ICoWavelengthCalibrationGUIProvider;
    class function CreateRemote(const MachineName: string): ICoWavelengthCalibrationGUIProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoWavelengthCalibrationGUIProvider
// Help String      : CoWavelengthCalibrationGUIProvider Class
// Default Interface: ICoWavelengthCalibrationGUIProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoWavelengthCalibrationGUIProviderProperties= class;
{$ENDIF}
  TCCoWavelengthCalibrationGUIProvider = class(TOleServer)
  private
    FIntf: ICoWavelengthCalibrationGUIProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoWavelengthCalibrationGUIProviderProperties;
    function GetServerProperties: TCCoWavelengthCalibrationGUIProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoWavelengthCalibrationGUIProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoWavelengthCalibrationGUIProvider);
    procedure Disconnect; override;
    procedure CreateWavelengthCalibrationGUIProvider;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoWavelengthCalibrationGUIProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoWavelengthCalibrationGUIProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoWavelengthCalibrationGUIProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoWavelengthCalibrationGUIProviderProperties = class(TPersistent)
  private
    FServer:    TCCoWavelengthCalibrationGUIProvider;
    function    GetDefaultInterface: ICoWavelengthCalibrationGUIProvider;
    constructor Create(AServer: TCCoWavelengthCalibrationGUIProvider);
  protected
  public
    property DefaultInterface: ICoWavelengthCalibrationGUIProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoWavelengthCalibrationImpl provides a Create and CreateRemote method to          
// create instances of the default interface ICoWavelengthCalibrationImpl exposed by              
// the CoClass CCoWavelengthCalibrationImpl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoWavelengthCalibrationImpl = class
    class function Create: ICoWavelengthCalibrationImpl;
    class function CreateRemote(const MachineName: string): ICoWavelengthCalibrationImpl;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoWavelengthCalibrationImpl
// Help String      : CoWavelengthCalibrationImpl Class
// Default Interface: ICoWavelengthCalibrationImpl
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoWavelengthCalibrationImplProperties= class;
{$ENDIF}
  TCCoWavelengthCalibrationImpl = class(TOleServer)
  private
    FIntf: ICoWavelengthCalibrationImpl;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoWavelengthCalibrationImplProperties;
    function GetServerProperties: TCCoWavelengthCalibrationImplProperties;
{$ENDIF}
    function GetDefaultInterface: ICoWavelengthCalibrationImpl;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoWavelengthCalibrationImpl);
    procedure Disconnect; override;
    procedure CreateWavelengthCalibrationImplB(const COM_usbInt: ICoUSBInterface; 
                                               const COM_s: ICoSpectrometer);
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_channel: Integer): OleVariant;
    procedure setWavelengths(COM_wl: OleVariant; COM_channel: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoWavelengthCalibrationImpl read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoWavelengthCalibrationImplProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoWavelengthCalibrationImpl
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoWavelengthCalibrationImplProperties = class(TPersistent)
  private
    FServer:    TCCoWavelengthCalibrationImpl;
    function    GetDefaultInterface: ICoWavelengthCalibrationImpl;
    constructor Create(AServer: TCCoWavelengthCalibrationImpl);
  protected
  public
    property DefaultInterface: ICoWavelengthCalibrationImpl read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoWavelengthCalibrationImpl_MMSRaman provides a Create and CreateRemote method to          
// create instances of the default interface ICoWavelengthCalibrationImpl_MMSRaman exposed by              
// the CoClass CCoWavelengthCalibrationImpl_MMSRaman. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoWavelengthCalibrationImpl_MMSRaman = class
    class function Create: ICoWavelengthCalibrationImpl_MMSRaman;
    class function CreateRemote(const MachineName: string): ICoWavelengthCalibrationImpl_MMSRaman;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoWavelengthCalibrationImpl_MMSRaman
// Help String      : CoWavelengthCalibrationImpl_MMSRaman Class
// Default Interface: ICoWavelengthCalibrationImpl_MMSRaman
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoWavelengthCalibrationImpl_MMSRamanProperties= class;
{$ENDIF}
  TCCoWavelengthCalibrationImpl_MMSRaman = class(TOleServer)
  private
    FIntf: ICoWavelengthCalibrationImpl_MMSRaman;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoWavelengthCalibrationImpl_MMSRamanProperties;
    function GetServerProperties: TCCoWavelengthCalibrationImpl_MMSRamanProperties;
{$ENDIF}
    function GetDefaultInterface: ICoWavelengthCalibrationImpl_MMSRaman;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoWavelengthCalibrationImpl_MMSRaman);
    procedure Disconnect; override;
    procedure CreateWavelengthCalibrationImpl_MMSRamanB(const COM_usb: ICoUSBInterface; 
                                                        const COM_s: ICoMMSRamanSpectrometer);
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_index: Integer): OleVariant;
    procedure setWavelengths(COM_wavelengths: OleVariant; COM_index: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoWavelengthCalibrationImpl_MMSRaman read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoWavelengthCalibrationImpl_MMSRamanProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoWavelengthCalibrationImpl_MMSRaman
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoWavelengthCalibrationImpl_MMSRamanProperties = class(TPersistent)
  private
    FServer:    TCCoWavelengthCalibrationImpl_MMSRaman;
    function    GetDefaultInterface: ICoWavelengthCalibrationImpl_MMSRaman;
    constructor Create(AServer: TCCoWavelengthCalibrationImpl_MMSRaman);
  protected
  public
    property DefaultInterface: ICoWavelengthCalibrationImpl_MMSRaman read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoWavelengthCalibrationProvider provides a Create and CreateRemote method to          
// create instances of the default interface ICoWavelengthCalibrationProvider exposed by              
// the CoClass CCoWavelengthCalibrationProvider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoWavelengthCalibrationProvider = class
    class function Create: ICoWavelengthCalibrationProvider;
    class function CreateRemote(const MachineName: string): ICoWavelengthCalibrationProvider;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoWavelengthCalibrationProvider
// Help String      : CoWavelengthCalibrationProvider Class
// Default Interface: ICoWavelengthCalibrationProvider
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoWavelengthCalibrationProviderProperties= class;
{$ENDIF}
  TCCoWavelengthCalibrationProvider = class(TOleServer)
  private
    FIntf: ICoWavelengthCalibrationProvider;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoWavelengthCalibrationProviderProperties;
    function GetServerProperties: TCCoWavelengthCalibrationProviderProperties;
{$ENDIF}
    function GetDefaultInterface: ICoWavelengthCalibrationProvider;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoWavelengthCalibrationProvider);
    procedure Disconnect; override;
    procedure CreateWavelengthCalibrationProvider;
    function readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
    function getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
    function getWavelengths(COM_param0: Integer): OleVariant;
    procedure setWavelengths(COM_param0: OleVariant; COM_param1: Integer);
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoWavelengthCalibrationProvider read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoWavelengthCalibrationProviderProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoWavelengthCalibrationProvider
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoWavelengthCalibrationProviderProperties = class(TPersistent)
  private
    FServer:    TCCoWavelengthCalibrationProvider;
    function    GetDefaultInterface: ICoWavelengthCalibrationProvider;
    constructor Create(AServer: TCCoWavelengthCalibrationProvider);
  protected
  public
    property DefaultInterface: ICoWavelengthCalibrationProvider read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoWavelengthCalibrationTableModel provides a Create and CreateRemote method to          
// create instances of the default interface ICoWavelengthCalibrationTableModel exposed by              
// the CoClass CCoWavelengthCalibrationTableModel. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoWavelengthCalibrationTableModel = class
    class function Create: ICoWavelengthCalibrationTableModel;
    class function CreateRemote(const MachineName: string): ICoWavelengthCalibrationTableModel;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoWavelengthCalibrationTableModel
// Help String      : CoWavelengthCalibrationTableModel Class
// Default Interface: ICoWavelengthCalibrationTableModel
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoWavelengthCalibrationTableModelProperties= class;
{$ENDIF}
  TCCoWavelengthCalibrationTableModel = class(TOleServer)
  private
    FIntf: ICoWavelengthCalibrationTableModel;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoWavelengthCalibrationTableModelProperties;
    function GetServerProperties: TCCoWavelengthCalibrationTableModelProperties;
{$ENDIF}
    function GetDefaultInterface: ICoWavelengthCalibrationTableModel;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoWavelengthCalibrationTableModel);
    procedure Disconnect; override;
    procedure CreateWavelengthCalibrationTableModel;
    procedure setCoefficients(COM_coefficients: OleVariant);
    function getCoefficient(COM_row: Integer): Double;
    function isCellEditable(COM_rowIndex: Integer; COM_columnIndex: Integer): WordBool;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoWavelengthCalibrationTableModel read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoWavelengthCalibrationTableModelProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoWavelengthCalibrationTableModel
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoWavelengthCalibrationTableModelProperties = class(TPersistent)
  private
    FServer:    TCCoWavelengthCalibrationTableModel;
    function    GetDefaultInterface: ICoWavelengthCalibrationTableModel;
    constructor Create(AServer: TCCoWavelengthCalibrationTableModel);
  protected
  public
    property DefaultInterface: ICoWavelengthCalibrationTableModel read GetDefaultInterface;
  published
  end;
{$ENDIF}


// *********************************************************************//
// The Class CoCCoWrapper provides a Create and CreateRemote method to          
// create instances of the default interface ICoWrapper exposed by              
// the CoClass CCoWrapper. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCCoWrapper = class
    class function Create: ICoWrapper;
    class function CreateRemote(const MachineName: string): ICoWrapper;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCCoWrapper
// Help String      : CoWrapper Class
// Default Interface: ICoWrapper
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (1026) CanCreate Aggregatable
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TCCoWrapperProperties= class;
{$ENDIF}
  TCCoWrapper = class(TOleServer)
  private
    FIntf: ICoWrapper;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TCCoWrapperProperties;
    function GetServerProperties: TCCoWrapperProperties;
{$ENDIF}
    function GetDefaultInterface: ICoWrapper;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICoWrapper);
    procedure Disconnect; override;
    procedure CreateWrapper;
    function getApiVersion: WideString;
    function getBuildNumber: Integer;
    function getLastException: WideString;
    function getLastExceptionStackTrace: WideString;
    function openAllSpectrometers: Integer;
    function getName(COM_spectrometerIndex: Integer): WideString;
    function getMaximumIntegrationTime(COM_spectrometerIndex: Integer): Integer;
    function getMinimumIntegrationTime(COM_spectrometerIndex: Integer): Integer;
    function getMaximumIntensity(COM_spectrometerIndex: Integer): Integer;
    function getNumberOfSpectrometersFound: Integer;
    function getFirmwareVersion(COM_spectrometerIndex: Integer): WideString;
    function getSerialNumber(COM_spectrometerIndex: Integer): WideString;
    function getNumberOfPixels(COM_spectrometerIndex: Integer): Integer;
    function getNumberOfDarkPixels(COM_spectrometerIndex: Integer): Integer;
    function getNumberOfEnabledChannels(COM_spectrometerIndex: Integer): Integer;
    procedure setIntegrationTime(COM_spectrometerIndex: Integer; COM_usec: Integer);
    procedure setIntegrationTimeB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer; 
                                  COM_usec: Integer);
    function getIntegrationTime(COM_spectrometerIndex: Integer): Integer;
    function getIntegrationTimeB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Integer;
    procedure setScansToAverage(COM_spectrometerIndex: Integer; COM_numberOfScansToAverage: Integer);
    procedure setScansToAverageB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer; 
                                 COM_numberOfScansToAverage: Integer);
    function getScansToAverage(COM_spectrometerIndex: Integer): Integer;
    function getScansToAverageB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Integer;
    function getBench(COM_spectrometerIndex: Integer): ICoBench;
    procedure setBoxcarWidth(COM_spectrometerIndex: Integer; 
                             COM_numberOfPixelsOnEitherSideOfCenter: Integer);
    procedure setBoxcarWidthB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer; 
                              COM_numberOfPixelsOnEitherSideOfCenter: Integer);
    function getBoxcarWidth(COM_spectrometerIndex: Integer): Integer;
    function getBoxcarWidthB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Integer;
    procedure setExternalTriggerMode(COM_spectrometerIndex: Integer; COM_mode: Integer);
    procedure setExternalTriggerModeB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer; 
                                      COM_mode: Integer);
    function getExternalTriggerMode(COM_spectrometerIndex: Integer): Integer;
    function getExternalTriggerModeB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Integer;
    procedure setCorrectForElectricalDark(COM_spectrometerIndex: Integer; COM_enable: Integer);
    procedure setCorrectForElectricalDarkB(COM_spectrometerIndex: Integer; 
                                           COM_channelIndex: Integer; COM_enable: Integer);
    procedure setCorrectForDetectorNonlinearity(COM_spectrometerIndex: Integer; COM_enable: Integer);
    procedure setCorrectForDetectorNonlinearityB(COM_spectrometerIndex: Integer; 
                                                 COM_channelIndex: Integer; COM_enable: Integer);
    procedure setStrobeEnable(COM_spectrometerIndex: Integer; COM_lampOn: Integer);
    procedure setStrobeEnableB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer; 
                               COM_lampOn: Integer);
    function getStrobeEnable(COM_spectrometerIndex: Integer): Integer;
    function getStrobeEnableB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Integer;
    function getWavelengths(COM_spectrometerIndex: Integer): OleVariant;
    function getWavelengthsB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): OleVariant;
    function getWavelengthIntercept(COM_spectrometerIndex: Integer): Double;
    function getWavelengthInterceptB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Double;
    function getWavelengthFirst(COM_spectrometerIndex: Integer): Double;
    function getWavelengthFirstB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Double;
    function getWavelengthSecond(COM_spectrometerIndex: Integer): Double;
    function getWavelengthSecondB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Double;
    function getWavelengthThird(COM_spectrometerIndex: Integer): Double;
    function getWavelengthThirdB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Double;
    function getSpectrum(COM_spectrometerIndex: Integer): OleVariant;
    function getSpectrumB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): OleVariant;
    function isSaturated(COM_spectrometerIndex: Integer): WordBool;
    function isSaturatedB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): WordBool;
    procedure closeAllSpectrometers;
    procedure closeSpectrometer(COM_spectrometerIndex: Integer);
    function getFeatureControllerGPIO(COM_spectrometerIndex: Integer): ICoGPIO;
    function isFeatureSupportedGPIO(COM_spectrometerIndex: Integer): WordBool;
    function getFeatureControllerSPIBus(COM_spectrometerIndex: Integer): ICoSPIBus;
    function isFeatureSupportedSPIBus(COM_spectrometerIndex: Integer): WordBool;
    function getFeatureControllerSingleStrobe(COM_spectrometerIndex: Integer): ICoSingleStrobe;
    function isFeatureSupportedSingleStrobe(COM_spectrometerIndex: Integer): WordBool;
    function getFeatureControllerContinuousStrobe(COM_spectrometerIndex: Integer): ICoContinuousStrobe;
    function isFeatureSupportedContinuousStrobe(COM_spectrometerIndex: Integer): WordBool;
    function getFeatureControllerBoardTemperature(COM_spectrometerIndex: Integer): ICoBoardTemperature;
    function isFeatureSupportedBoardTemperature(COM_spectrometerIndex: Integer): WordBool;
    function getFeatureControllerAnalogIn(COM_spectrometerIndex: Integer): ICoAnalogIn;
    function isFeatureSupportedAnalogIn(COM_spectrometerIndex: Integer): WordBool;
    function getFeatureControllerAnalogOut(COM_spectrometerIndex: Integer): ICoAnalogOut;
    function isFeatureSupportedAnalogOut(COM_spectrometerIndex: Integer): WordBool;
    function getFeatureControllerExternalTriggerDelay(COM_spectrometerIndex: Integer): ICoExternalTriggerDelay;
    function isFeatureSupportedExternalTriggerDelay(COM_spectrometerIndex: Integer): WordBool;
    function getFeatureControllerIrradianceCalibrationFactor(COM_spectrometerIndex: Integer): ICoIrradianceCalibrationFactor;
    function isFeatureSupportedIrradianceCalibrationFactor(COM_spectrometerIndex: Integer): WordBool;
    function getFeatureControllerNonlinearityCorrectionProvider(COM_spectrometerIndex: Integer): ICoNonlinearityCorrectionProvider;
    function isFeatureSupportedNonlinearityCorrectionProvider(COM_spectrometerIndex: Integer): WordBool;
    function getFeatureControllerStrayLightCorrection(COM_spectrometerIndex: Integer): ICoStrayLightCorrection;
    function isFeatureSupportedStrayLightCorrection(COM_spectrometerIndex: Integer): WordBool;
    function getFeatureControllerVersion(COM_spectrometerIndex: Integer): ICoVersion;
    function isFeatureSupportedVersion(COM_spectrometerIndex: Integer): WordBool;
    function getFeatureControllerWavelengthCalibrationProvider(COM_spectrometerIndex: Integer): ICoWavelengthCalibrationProvider;
    function isFeatureSupportedWavelengthCalibrationProvider(COM_spectrometerIndex: Integer): WordBool;
    function getFeatureControllerThermoElectric(COM_spectrometerIndex: Integer): ICoThermoElectric;
    function isFeatureSupportedThermoElectric(COM_spectrometerIndex: Integer): WordBool;
    procedure setAutoToggleStrobeLampEnable(COM_spectrometerIndex: Integer; COM_enable: WordBool);
    procedure setAutoToggleStrobeLampEnableB(COM_spectrometerIndex: Integer; 
                                             COM_channelIndex: Integer; COM_enable: WordBool);
    procedure highSpdAcq_AllocateBuffer(COM_spectrometerIndex: Integer; COM_numberOfSpectra: Integer);
    procedure highSpdAcq_StartAcquisition(COM_spectrometerIndex: Integer);
    procedure highSpdAcq_StartAcquisitionB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer);
    procedure highSpdAcq_StopAcquisition;
    function highSpdAcq_GetNumberOfSpectraAcquired: Integer;
    function highSpdAcq_GetSpectrum(COM_spectrumNumber: Integer): OleVariant;
    function highSpdAcq_IsSaturated(COM_spectrumNumber: Integer): WordBool;
    function highSpdAcq_GetTimeStamp(COM_spectrumNumber: Integer): ICoHighResTimeStamp;
    function GetOwnedClass: Largeuint;
    property DefaultInterface: ICoWrapper read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TCCoWrapperProperties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TCCoWrapper
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TCCoWrapperProperties = class(TPersistent)
  private
    FServer:    TCCoWrapper;
    function    GetDefaultInterface: ICoWrapper;
    constructor Create(AServer: TCCoWrapper);
  protected
  public
    property DefaultInterface: ICoWrapper read GetDefaultInterface;
  published
  end;
{$ENDIF}


procedure Register;

resourcestring
  dtlServerPage = 'ActiveX';

  dtlOcxPage = 'ActiveX';

implementation

uses ComObj;

class function CoCCoSpectrometerInfo.Create: ICoSpectrometerInfo;
begin
  Result := CreateComObject(CLASS_CCoSpectrometerInfo) as ICoSpectrometerInfo;
end;

class function CoCCoSpectrometerInfo.CreateRemote(const MachineName: string): ICoSpectrometerInfo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrometerInfo) as ICoSpectrometerInfo;
end;

procedure TCCoSpectrometerInfo.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8F037AD6-F324-5706-80FB-5FD9163CE7B3}';
    IntfIID:   '{D92AA44D-595C-5E63-90E7-4BFEF74DE381}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrometerInfo.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrometerInfo;
  end;
end;

procedure TCCoSpectrometerInfo.ConnectTo(svrIntf: ICoSpectrometerInfo);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrometerInfo.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrometerInfo.GetDefaultInterface: ICoSpectrometerInfo;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrometerInfo.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrometerInfoProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrometerInfo.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrometerInfo.GetServerProperties: TCCoSpectrometerInfoProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSpectrometerInfo.CreateSpectrometerInfoB(const COM_spectrometerInfo: ICoSpectrometerInfo);
begin
  DefaultInterface.CreateSpectrometerInfoB(COM_spectrometerInfo);
end;

function TCCoSpectrometerInfo.getSpectrometerFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getSpectrometerFirmwareVersion;
end;

function TCCoSpectrometerInfo.getSpectrometerNumberOfChannels: Integer;
begin
  Result := DefaultInterface.getSpectrometerNumberOfChannels;
end;

function TCCoSpectrometerInfo.getSpectrometerSerialNumber: WideString;
begin
  Result := DefaultInterface.getSpectrometerSerialNumber;
end;

function TCCoSpectrometerInfo.getSpectrometerMaximumIntensity: Double;
begin
  Result := DefaultInterface.getSpectrometerMaximumIntensity;
end;

function TCCoSpectrometerInfo.getSpectrometerMinimumIntegrationTime: Integer;
begin
  Result := DefaultInterface.getSpectrometerMinimumIntegrationTime;
end;

function TCCoSpectrometerInfo.getSpectrometerMaximumIntegrationTime: Integer;
begin
  Result := DefaultInterface.getSpectrometerMaximumIntegrationTime;
end;

function TCCoSpectrometerInfo.getSpectrometerIntegrationTimeStep: Integer;
begin
  Result := DefaultInterface.getSpectrometerIntegrationTimeStep;
end;

function TCCoSpectrometerInfo.getSpectrometerIntegrationTimeBase: Integer;
begin
  Result := DefaultInterface.getSpectrometerIntegrationTimeBase;
end;

function TCCoSpectrometerInfo.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrometerInfoProperties.Create(AServer: TCCoSpectrometerInfo);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrometerInfoProperties.GetDefaultInterface: ICoSpectrometerInfo;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoCoefficients.Create: ICoCoefficients;
begin
  Result := CreateComObject(CLASS_CCoCoefficients) as ICoCoefficients;
end;

class function CoCCoCoefficients.CreateRemote(const MachineName: string): ICoCoefficients;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoCoefficients) as ICoCoefficients;
end;

procedure TCCoCoefficients.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E2F04302-02FE-59C1-8174-826F23BF39D1}';
    IntfIID:   '{48B07BC8-2430-506B-811C-629FD4764280}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoCoefficients.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoCoefficients;
  end;
end;

procedure TCCoCoefficients.ConnectTo(svrIntf: ICoCoefficients);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoCoefficients.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoCoefficients.GetDefaultInterface: ICoCoefficients;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoCoefficients.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoCoefficientsProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoCoefficients.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoCoefficients.GetServerProperties: TCCoCoefficientsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoCoefficients.CreateCoefficients;
begin
  DefaultInterface.CreateCoefficients;
end;

procedure TCCoCoefficients.CreateCoefficientsB(const COM_c: ICoCoefficients);
begin
  DefaultInterface.CreateCoefficientsB(COM_c);
end;

function TCCoCoefficients.getWlIntercept: Double;
begin
  Result := DefaultInterface.getWlIntercept;
end;

procedure TCCoCoefficients.setWlIntercept(COM_value: Double);
begin
  DefaultInterface.setWlIntercept(COM_value);
end;

function TCCoCoefficients.getWlFirst: Double;
begin
  Result := DefaultInterface.getWlFirst;
end;

procedure TCCoCoefficients.setWlFirst(COM_value: Double);
begin
  DefaultInterface.setWlFirst(COM_value);
end;

function TCCoCoefficients.getWlSecond: Double;
begin
  Result := DefaultInterface.getWlSecond;
end;

procedure TCCoCoefficients.setWlSecond(COM_value: Double);
begin
  DefaultInterface.setWlSecond(COM_value);
end;

function TCCoCoefficients.getWlThird: Double;
begin
  Result := DefaultInterface.getWlThird;
end;

procedure TCCoCoefficients.setWlThird(COM_value: Double);
begin
  DefaultInterface.setWlThird(COM_value);
end;

function TCCoCoefficients.getWlCoefficients: OleVariant;
begin
  Result := DefaultInterface.getWlCoefficients;
end;

procedure TCCoCoefficients.setWlCoefficients(COM_wl: OleVariant);
begin
  DefaultInterface.setWlCoefficients(COM_wl);
end;

function TCCoCoefficients.getNlCoef0: Double;
begin
  Result := DefaultInterface.getNlCoef0;
end;

procedure TCCoCoefficients.setNlCoef0(COM_value: Double);
begin
  DefaultInterface.setNlCoef0(COM_value);
end;

function TCCoCoefficients.getNlCoef1: Double;
begin
  Result := DefaultInterface.getNlCoef1;
end;

procedure TCCoCoefficients.setNlCoef1(COM_value: Double);
begin
  DefaultInterface.setNlCoef1(COM_value);
end;

function TCCoCoefficients.getNlCoef2: Double;
begin
  Result := DefaultInterface.getNlCoef2;
end;

procedure TCCoCoefficients.setNlCoef2(COM_value: Double);
begin
  DefaultInterface.setNlCoef2(COM_value);
end;

function TCCoCoefficients.getNlCoef3: Double;
begin
  Result := DefaultInterface.getNlCoef3;
end;

procedure TCCoCoefficients.setNlCoef3(COM_value: Double);
begin
  DefaultInterface.setNlCoef3(COM_value);
end;

function TCCoCoefficients.getNlCoef4: Double;
begin
  Result := DefaultInterface.getNlCoef4;
end;

procedure TCCoCoefficients.setNlCoef4(COM_value: Double);
begin
  DefaultInterface.setNlCoef4(COM_value);
end;

function TCCoCoefficients.getNlCoef5: Double;
begin
  Result := DefaultInterface.getNlCoef5;
end;

procedure TCCoCoefficients.setNlCoef5(COM_value: Double);
begin
  DefaultInterface.setNlCoef5(COM_value);
end;

function TCCoCoefficients.getNlCoef6: Double;
begin
  Result := DefaultInterface.getNlCoef6;
end;

procedure TCCoCoefficients.setNlCoef6(COM_value: Double);
begin
  DefaultInterface.setNlCoef6(COM_value);
end;

function TCCoCoefficients.getNlCoef7: Double;
begin
  Result := DefaultInterface.getNlCoef7;
end;

procedure TCCoCoefficients.setNlCoef7(COM_value: Double);
begin
  DefaultInterface.setNlCoef7(COM_value);
end;

function TCCoCoefficients.getNlOrder: Integer;
begin
  Result := DefaultInterface.getNlOrder;
end;

procedure TCCoCoefficients.setNlOrder(COM_value: Integer);
begin
  DefaultInterface.setNlOrder(COM_value);
end;

function TCCoCoefficients.getNlCoefficients: OleVariant;
begin
  Result := DefaultInterface.getNlCoefficients;
end;

procedure TCCoCoefficients.setNlCoefficients(COM_nl: OleVariant);
begin
  DefaultInterface.setNlCoefficients(COM_nl);
end;

function TCCoCoefficients.getStrayLight: Double;
begin
  Result := DefaultInterface.getStrayLight;
end;

function TCCoCoefficients.getStrayLightSlope: Double;
begin
  Result := DefaultInterface.getStrayLightSlope;
end;

procedure TCCoCoefficients.setStrayLight(COM_value: Double);
begin
  DefaultInterface.setStrayLight(COM_value);
end;

procedure TCCoCoefficients.setStrayLightB(COM_intercept: Double; COM_slope: Double);
begin
  DefaultInterface.setStrayLightB(COM_intercept, COM_slope);
end;

function TCCoCoefficients.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoCoefficients.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoCoefficientsProperties.Create(AServer: TCCoCoefficients);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoCoefficientsProperties.GetDefaultInterface: ICoCoefficients;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectrum.Create: ICoSpectrum;
begin
  Result := CreateComObject(CLASS_CCoSpectrum) as ICoSpectrum;
end;

class function CoCCoSpectrum.CreateRemote(const MachineName: string): ICoSpectrum;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrum) as ICoSpectrum;
end;

procedure TCCoSpectrum.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8A02E1D5-B0DC-546C-91C9-B5945D8A99C6}';
    IntfIID:   '{BCD265BE-A8F5-56BD-91BD-FCA5C1C5C249}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrum.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrum;
  end;
end;

procedure TCCoSpectrum.ConnectTo(svrIntf: ICoSpectrum);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrum.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrum.GetDefaultInterface: ICoSpectrum;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrum.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrumProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrum.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrum.GetServerProperties: TCCoSpectrumProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSpectrum.CreateSpectrumB(COM_totalpixels: Integer; COM_darkPixels: Integer);
begin
  DefaultInterface.CreateSpectrumB(COM_totalpixels, COM_darkPixels);
end;

procedure TCCoSpectrum.CreateSpectrumC(COM_spectrum: OleVariant; COM_darkPixels: OleVariant);
begin
  DefaultInterface.CreateSpectrumC(COM_spectrum, COM_darkPixels);
end;

function TCCoSpectrum.getSpectrum: OleVariant;
begin
  Result := DefaultInterface.getSpectrum;
end;

procedure TCCoSpectrum.setSpectrum(COM_spectrum: OleVariant);
begin
  DefaultInterface.setSpectrum(COM_spectrum);
end;

function TCCoSpectrum.isOfSize(COM_numberOfPixels: Integer; COM_numberOfDarkPixels: Integer): WordBool;
begin
  Result := DefaultInterface.isOfSize(COM_numberOfPixels, COM_numberOfDarkPixels);
end;

function TCCoSpectrum.getNumberOfDarkPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfDarkPixels;
end;

function TCCoSpectrum.getDarkPixels: OleVariant;
begin
  Result := DefaultInterface.getDarkPixels;
end;

function TCCoSpectrum.isSameSizeAs(const COM_other: ICoSpectrum): WordBool;
begin
  Result := DefaultInterface.isSameSizeAs(COM_other);
end;

function TCCoSpectrum.isSaturated: WordBool;
begin
  Result := DefaultInterface.isSaturated;
end;

procedure TCCoSpectrum.setSaturated(COM_saturated: WordBool);
begin
  DefaultInterface.setSaturated(COM_saturated);
end;

function TCCoSpectrum.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrumProperties.Create(AServer: TCCoSpectrum);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrumProperties.GetDefaultInterface: ICoSpectrum;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectrometerChannelInfo.Create: ICoSpectrometerChannelInfo;
begin
  Result := CreateComObject(CLASS_CCoSpectrometerChannelInfo) as ICoSpectrometerChannelInfo;
end;

class function CoCCoSpectrometerChannelInfo.CreateRemote(const MachineName: string): ICoSpectrometerChannelInfo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrometerChannelInfo) as ICoSpectrometerChannelInfo;
end;

procedure TCCoSpectrometerChannelInfo.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4155A47E-D192-58C4-90F6-BC9C9477003C}';
    IntfIID:   '{A09D2102-D4D6-5B61-9182-1D21A1D6C1C6}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrometerChannelInfo.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrometerChannelInfo;
  end;
end;

procedure TCCoSpectrometerChannelInfo.ConnectTo(svrIntf: ICoSpectrometerChannelInfo);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrometerChannelInfo.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrometerChannelInfo.GetDefaultInterface: ICoSpectrometerChannelInfo;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrometerChannelInfo.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrometerChannelInfoProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrometerChannelInfo.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrometerChannelInfo.GetServerProperties: TCCoSpectrometerChannelInfoProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSpectrometerChannelInfo.CreateSpectrometerChannelInfoB(const COM_spectrometerChannelInfo: ICoSpectrometerChannelInfo);
begin
  DefaultInterface.CreateSpectrometerChannelInfoB(COM_spectrometerChannelInfo);
end;

procedure TCCoSpectrometerChannelInfo.CreateSpectrometerChannelInfoC(const COM_spectrometerInfo: ICoSpectrometerInfo);
begin
  DefaultInterface.CreateSpectrometerChannelInfoC(COM_spectrometerInfo);
end;

procedure TCCoSpectrometerChannelInfo.CreateSpectrometerChannelInfoD(const COM_spectrometerInfo: ICoSpectrometerInfo; 
                                                                     COM_wavelengths: OleVariant; 
                                                                     COM_channel: Integer; 
                                                                     COM_triggerEnabled: WordBool; 
                                                                     const COM_coefficients: ICoCoefficients; 
                                                                     COM_laserWavelength: Double; 
                                                                     COM_interlock: WordBool; 
                                                                     COM_numberOfPixels: Integer; 
                                                                     COM_numberOfDarkPixels: Integer);
begin
  DefaultInterface.CreateSpectrometerChannelInfoD(COM_spectrometerInfo, COM_wavelengths, 
                                                  COM_channel, COM_triggerEnabled, 
                                                  COM_coefficients, COM_laserWavelength, 
                                                  COM_interlock, COM_numberOfPixels, 
                                                  COM_numberOfDarkPixels);
end;

function TCCoSpectrometerChannelInfo.getChannelWavelengths: OleVariant;
begin
  Result := DefaultInterface.getChannelWavelengths;
end;

procedure TCCoSpectrometerChannelInfo.setChannelWavelengths(COM_wavelengths: OleVariant);
begin
  DefaultInterface.setChannelWavelengths(COM_wavelengths);
end;

function TCCoSpectrometerChannelInfo.getChannelNumber: Integer;
begin
  Result := DefaultInterface.getChannelNumber;
end;

procedure TCCoSpectrometerChannelInfo.setChannelNumber(COM_channel: Integer);
begin
  DefaultInterface.setChannelNumber(COM_channel);
end;

function TCCoSpectrometerChannelInfo.isChannelStabilityScanEnabled: WordBool;
begin
  Result := DefaultInterface.isChannelStabilityScanEnabled;
end;

procedure TCCoSpectrometerChannelInfo.setChannelStabilityScanEnabled(COM_stabilityScanEnabled: WordBool);
begin
  DefaultInterface.setChannelStabilityScanEnabled(COM_stabilityScanEnabled);
end;

function TCCoSpectrometerChannelInfo.isChannelExternalTriggerEnabled: WordBool;
begin
  Result := DefaultInterface.isChannelExternalTriggerEnabled;
end;

procedure TCCoSpectrometerChannelInfo.setChannelExternalTriggerEnabled(COM_externalTriggerEnabled: WordBool);
begin
  DefaultInterface.setChannelExternalTriggerEnabled(COM_externalTriggerEnabled);
end;

function TCCoSpectrometerChannelInfo.getChannelCoefficients: ICoCoefficients;
begin
  Result := DefaultInterface.getChannelCoefficients;
end;

procedure TCCoSpectrometerChannelInfo.setChannelCoefficients(const COM_coefficients: ICoCoefficients);
begin
  DefaultInterface.setChannelCoefficients(COM_coefficients);
end;

function TCCoSpectrometerChannelInfo.getLaserWavelength: Double;
begin
  Result := DefaultInterface.getLaserWavelength;
end;

procedure TCCoSpectrometerChannelInfo.setLaserWavelength(COM_laserWavelength: Double);
begin
  DefaultInterface.setLaserWavelength(COM_laserWavelength);
end;

function TCCoSpectrometerChannelInfo.isInterlock: WordBool;
begin
  Result := DefaultInterface.isInterlock;
end;

procedure TCCoSpectrometerChannelInfo.setInterlock(COM_interlock: WordBool);
begin
  DefaultInterface.setInterlock(COM_interlock);
end;

function TCCoSpectrometerChannelInfo.getNumberOfPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfPixels;
end;

function TCCoSpectrometerChannelInfo.getNumberOfDarkPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfDarkPixels;
end;

function TCCoSpectrometerChannelInfo.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrometerChannelInfoProperties.Create(AServer: TCCoSpectrometerChannelInfo);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrometerChannelInfoProperties.GetDefaultInterface: ICoSpectrometerChannelInfo;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectrometerChannel.Create: ICoSpectrometerChannel;
begin
  Result := CreateComObject(CLASS_CCoSpectrometerChannel) as ICoSpectrometerChannel;
end;

class function CoCCoSpectrometerChannel.CreateRemote(const MachineName: string): ICoSpectrometerChannel;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrometerChannel) as ICoSpectrometerChannel;
end;

procedure TCCoSpectrometerChannel.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4B5F22B3-B0DE-57F8-800D-79799CE502CE}';
    IntfIID:   '{503D6F06-0A2F-5F7B-81E6-3264F46EF276}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrometerChannel.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrometerChannel;
  end;
end;

procedure TCCoSpectrometerChannel.ConnectTo(svrIntf: ICoSpectrometerChannel);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrometerChannel.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrometerChannel.GetDefaultInterface: ICoSpectrometerChannel;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrometerChannel.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrometerChannelProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrometerChannel.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrometerChannel.GetServerProperties: TCCoSpectrometerChannelProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSpectrometerChannel.generateMetadata(const COM_sb: ICoSpectrometerInfo; 
                                                   COM_index: Integer);
begin
  DefaultInterface.generateMetadata(COM_sb, COM_index);
end;

function TCCoSpectrometerChannel.getCoefficients: ICoCoefficients;
begin
  Result := DefaultInterface.getCoefficients;
end;

procedure TCCoSpectrometerChannel.setCoefficients(const COM_c: ICoCoefficients);
begin
  DefaultInterface.setCoefficients(COM_c);
end;

function TCCoSpectrometerChannel.getChannelIndex: Integer;
begin
  Result := DefaultInterface.getChannelIndex;
end;

procedure TCCoSpectrometerChannel.getCoefficientsFromSpectrometer;
begin
  DefaultInterface.getCoefficientsFromSpectrometer;
end;

procedure TCCoSpectrometerChannel.setCoefficientsB;
begin
  DefaultInterface.setCoefficientsB;
end;

procedure TCCoSpectrometerChannel.setWavelengthCalibration;
begin
  DefaultInterface.setWavelengthCalibration;
end;

procedure TCCoSpectrometerChannel.setStrayLightCorrection;
begin
  DefaultInterface.setStrayLightCorrection;
end;

function TCCoSpectrometerChannel.getWavelength(COM_pixel: Integer): Double;
begin
  Result := DefaultInterface.getWavelength(COM_pixel);
end;

function TCCoSpectrometerChannel.getAllWavelengths: OleVariant;
begin
  Result := DefaultInterface.getAllWavelengths;
end;

function TCCoSpectrometerChannel.getAllStoredWavelengths: OleVariant;
begin
  Result := DefaultInterface.getAllStoredWavelengths;
end;

function TCCoSpectrometerChannel.getPixel(COM_wl: Double): Integer;
begin
  Result := DefaultInterface.getPixel(COM_wl);
end;

function TCCoSpectrometerChannel.getStartingWavelength: Double;
begin
  Result := DefaultInterface.getStartingWavelength;
end;

function TCCoSpectrometerChannel.getEndingWavelength: Double;
begin
  Result := DefaultInterface.getEndingWavelength;
end;

function TCCoSpectrometerChannel.getSpectrum: ICoSpectrum;
begin
  Result := DefaultInterface.getSpectrum;
end;

function TCCoSpectrometerChannel.getSpectrumB(const COM_spectrum: ICoSpectrum): ICoSpectrum;
begin
  Result := DefaultInterface.getSpectrumB(COM_spectrum);
end;

function TCCoSpectrometerChannel.getMaxIntensity: Integer;
begin
  Result := DefaultInterface.getMaxIntensity;
end;

function TCCoSpectrometerChannel.getLaserWavelength: Double;
begin
  Result := DefaultInterface.getLaserWavelength;
end;

procedure TCCoSpectrometerChannel.setLaserWavelength(COM_laserWavelength: Double);
begin
  DefaultInterface.setLaserWavelength(COM_laserWavelength);
end;

function TCCoSpectrometerChannel.isInterlock: WordBool;
begin
  Result := DefaultInterface.isInterlock;
end;

procedure TCCoSpectrometerChannel.setInterlock(COM_interlock: WordBool);
begin
  DefaultInterface.setInterlock(COM_interlock);
end;

procedure TCCoSpectrometerChannel.newSpectrum(const COM_spectrum: ICoSpectrum);
begin
  DefaultInterface.newSpectrum(COM_spectrum);
end;

function TCCoSpectrometerChannel.getSpectrometerChannelInfo: ICoSpectrometerChannelInfo;
begin
  Result := DefaultInterface.getSpectrometerChannelInfo;
end;

procedure TCCoSpectrometerChannel.setSpectrometerChannelInfoCoefficients(const COM_coefficients: ICoCoefficients);
begin
  DefaultInterface.setSpectrometerChannelInfoCoefficients(COM_coefficients);
end;

function TCCoSpectrometerChannel.getPollingInterval: Integer;
begin
  Result := DefaultInterface.getPollingInterval;
end;

procedure TCCoSpectrometerChannel.setPollingInterval(COM_pollingInterval: Integer);
begin
  DefaultInterface.setPollingInterval(COM_pollingInterval);
end;

function TCCoSpectrometerChannel.isPolling: WordBool;
begin
  Result := DefaultInterface.isPolling;
end;

procedure TCCoSpectrometerChannel.setPolling(COM_polling: WordBool);
begin
  DefaultInterface.setPolling(COM_polling);
end;

function TCCoSpectrometerChannel.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrometerChannelProperties.Create(AServer: TCCoSpectrometerChannel);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrometerChannelProperties.GetDefaultInterface: ICoSpectrometerChannel;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectrometerChannelCollection.Create: ICoSpectrometerChannelCollection;
begin
  Result := CreateComObject(CLASS_CCoSpectrometerChannelCollection) as ICoSpectrometerChannelCollection;
end;

class function CoCCoSpectrometerChannelCollection.CreateRemote(const MachineName: string): ICoSpectrometerChannelCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrometerChannelCollection) as ICoSpectrometerChannelCollection;
end;

procedure TCCoSpectrometerChannelCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E3D962D4-BACA-58F1-81BA-EBF406FB33D2}';
    IntfIID:   '{6544CB7F-07FA-5089-81D9-10BC2D108991}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrometerChannelCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrometerChannelCollection;
  end;
end;

procedure TCCoSpectrometerChannelCollection.ConnectTo(svrIntf: ICoSpectrometerChannelCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrometerChannelCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrometerChannelCollection.GetDefaultInterface: ICoSpectrometerChannelCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrometerChannelCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrometerChannelCollectionProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrometerChannelCollection.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrometerChannelCollection.GetServerProperties: TCCoSpectrometerChannelCollectionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCCoSpectrometerChannelCollection.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TCCoSpectrometerChannelCollection.Item(index: OleVariant): OleVariant;
begin
  Result := DefaultInterface.Item(index);
end;

procedure TCCoSpectrometerChannelCollection.Add(const pnewSpectrometerChannelCollection: IDispatch);
begin
  DefaultInterface.Add(pnewSpectrometerChannelCollection);
end;

procedure TCCoSpectrometerChannelCollection.Remove(index: Integer);
begin
  DefaultInterface.Remove(index);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrometerChannelCollectionProperties.Create(AServer: TCCoSpectrometerChannelCollection);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrometerChannelCollectionProperties.GetDefaultInterface: ICoSpectrometerChannelCollection;
begin
  Result := FServer.DefaultInterface;
end;

function TCCoSpectrometerChannelCollectionProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoCCoBench.Create: ICoBench;
begin
  Result := CreateComObject(CLASS_CCoBench) as ICoBench;
end;

class function CoCCoBench.CreateRemote(const MachineName: string): ICoBench;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoBench) as ICoBench;
end;

procedure TCCoBench.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EA87E2F1-7E31-599E-811C-1ED9F7B09B79}';
    IntfIID:   '{83CB4594-770C-57E2-90AD-4B762A88F987}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoBench.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoBench;
  end;
end;

procedure TCCoBench.ConnectTo(svrIntf: ICoBench);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoBench.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoBench.GetDefaultInterface: ICoBench;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoBench.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoBenchProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoBench.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoBench.GetServerProperties: TCCoBenchProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoBench.CreateBench;
begin
  DefaultInterface.CreateBench;
end;

function TCCoBench.getFilterWavelength: WideString;
begin
  Result := DefaultInterface.getFilterWavelength;
end;

procedure TCCoBench.setFilterWavelength(const COM_value: WideString);
begin
  DefaultInterface.setFilterWavelength(COM_value);
end;

function TCCoBench.getSlitSize: WideString;
begin
  Result := DefaultInterface.getSlitSize;
end;

procedure TCCoBench.setSlitSize(const COM_value: WideString);
begin
  DefaultInterface.setSlitSize(COM_value);
end;

function TCCoBench.getGrating: WideString;
begin
  Result := DefaultInterface.getGrating;
end;

procedure TCCoBench.setGrating(const COM_value: WideString);
begin
  DefaultInterface.setGrating(COM_value);
end;

function TCCoBench.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoBenchProperties.Create(AServer: TCCoBench);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoBenchProperties.GetDefaultInterface: ICoBench;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoDetector.Create: ICoDetector;
begin
  Result := CreateComObject(CLASS_CCoDetector) as ICoDetector;
end;

class function CoCCoDetector.CreateRemote(const MachineName: string): ICoDetector;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoDetector) as ICoDetector;
end;

procedure TCCoDetector.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DEB04AB5-B0EA-5FA6-917C-2B2705D6C6CA}';
    IntfIID:   '{F7582140-874D-55CE-907D-C950A9A3F2E3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoDetector.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoDetector;
  end;
end;

procedure TCCoDetector.ConnectTo(svrIntf: ICoDetector);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoDetector.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoDetector.GetDefaultInterface: ICoDetector;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoDetector.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoDetectorProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoDetector.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoDetector.GetServerProperties: TCCoDetectorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoDetector.CreateDetector;
begin
  DefaultInterface.CreateDetector;
end;

function TCCoDetector.getSerialNumber: WideString;
begin
  Result := DefaultInterface.getSerialNumber;
end;

procedure TCCoDetector.setSerialNumber(const COM_value: WideString);
begin
  DefaultInterface.setSerialNumber(COM_value);
end;

function TCCoDetector.getArrayCoatingMfg: WideString;
begin
  Result := DefaultInterface.getArrayCoatingMfg;
end;

procedure TCCoDetector.setArrayCoatingMfg(const COM_value: WideString);
begin
  DefaultInterface.setArrayCoatingMfg(COM_value);
end;

function TCCoDetector.isLensInstalled: WordBool;
begin
  Result := DefaultInterface.isLensInstalled;
end;

procedure TCCoDetector.setLensInstalled(COM_value: WordBool);
begin
  DefaultInterface.setLensInstalled(COM_value);
end;

function TCCoDetector.getArrayWavelength: WideString;
begin
  Result := DefaultInterface.getArrayWavelength;
end;

procedure TCCoDetector.setArrayWavelength(const COM_value: WideString);
begin
  DefaultInterface.setArrayWavelength(COM_value);
end;

function TCCoDetector.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoDetectorProperties.Create(AServer: TCCoDetector);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoDetectorProperties.GetDefaultInterface: ICoDetector;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoConfiguration.Create: ICoConfiguration;
begin
  Result := CreateComObject(CLASS_CCoConfiguration) as ICoConfiguration;
end;

class function CoCCoConfiguration.CreateRemote(const MachineName: string): ICoConfiguration;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoConfiguration) as ICoConfiguration;
end;

procedure TCCoConfiguration.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E3EE39A4-481F-5683-90D6-AC9E438D7343}';
    IntfIID:   '{3066048B-A1BE-5D68-9089-2DE7AC5E6E35}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoConfiguration.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoConfiguration;
  end;
end;

procedure TCCoConfiguration.ConnectTo(svrIntf: ICoConfiguration);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoConfiguration.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoConfiguration.GetDefaultInterface: ICoConfiguration;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoConfiguration.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoConfigurationProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoConfiguration.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoConfiguration.GetServerProperties: TCCoConfigurationProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoConfiguration.getConfigurationFromSpectrometer;
begin
  DefaultInterface.getConfigurationFromSpectrometer;
end;

procedure TCCoConfiguration.setConfigurationToSpectrometer;
begin
  DefaultInterface.setConfigurationToSpectrometer;
end;

function TCCoConfiguration.getBench: ICoBench;
begin
  Result := DefaultInterface.getBench;
end;

procedure TCCoConfiguration.setBench(const COM_value: ICoBench);
begin
  DefaultInterface.setBench(COM_value);
end;

function TCCoConfiguration.getDetector: ICoDetector;
begin
  Result := DefaultInterface.getDetector;
end;

procedure TCCoConfiguration.setDetector(const COM_value: ICoDetector);
begin
  DefaultInterface.setDetector(COM_value);
end;

function TCCoConfiguration.getCpldVersion: WideString;
begin
  Result := DefaultInterface.getCpldVersion;
end;

procedure TCCoConfiguration.setCpldVersion(const COM_value: WideString);
begin
  DefaultInterface.setCpldVersion(COM_value);
end;

function TCCoConfiguration.isBenchDefined: WordBool;
begin
  Result := DefaultInterface.isBenchDefined;
end;

function TCCoConfiguration.isSpectrometerConfigurationDefined: WordBool;
begin
  Result := DefaultInterface.isSpectrometerConfigurationDefined;
end;

function TCCoConfiguration.isDetectorSerialNumberDefined: WordBool;
begin
  Result := DefaultInterface.isDetectorSerialNumberDefined;
end;

function TCCoConfiguration.isCPLDVersionDefined: WordBool;
begin
  Result := DefaultInterface.isCPLDVersionDefined;
end;

function TCCoConfiguration.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoConfiguration.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoConfigurationProperties.Create(AServer: TCCoConfiguration);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoConfigurationProperties.GetDefaultInterface: ICoConfiguration;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectrometer.Create: ICoSpectrometer;
begin
  Result := CreateComObject(CLASS_CCoSpectrometer) as ICoSpectrometer;
end;

class function CoCCoSpectrometer.CreateRemote(const MachineName: string): ICoSpectrometer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrometer) as ICoSpectrometer;
end;

procedure TCCoSpectrometer.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F4D84025-E097-5CEA-91B3-CD598DBFB457}';
    IntfIID:   '{EB26BF16-4631-568E-9181-FBEA90C6CC75}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrometer.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrometer;
  end;
end;

procedure TCCoSpectrometer.ConnectTo(svrIntf: ICoSpectrometer);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrometer.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrometer.GetDefaultInterface: ICoSpectrometer;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrometer.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrometerProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrometer.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrometer.GetServerProperties: TCCoSpectrometerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSpectrometer.openSpectrometer(COM_param0: Integer);
begin
  DefaultInterface.openSpectrometer(COM_param0);
end;

procedure TCCoSpectrometer.CreateSpectrometer;
begin
  DefaultInterface.CreateSpectrometer;
end;

function TCCoSpectrometer.getSpectrumBase: ICoSpectrometerInfo;
begin
  Result := DefaultInterface.getSpectrumBase;
end;

procedure TCCoSpectrometer.setStabilityScan(COM_on: WordBool);
begin
  DefaultInterface.setStabilityScan(COM_on);
end;

function TCCoSpectrometer.isStabilityScan: WordBool;
begin
  Result := DefaultInterface.isStabilityScan;
end;

function TCCoSpectrometer.getIntegrationTimeMinimum: Integer;
begin
  Result := DefaultInterface.getIntegrationTimeMinimum;
end;

function TCCoSpectrometer.getIntegrationTimeMaximum: Integer;
begin
  Result := DefaultInterface.getIntegrationTimeMaximum;
end;

function TCCoSpectrometer.getIntegrationTimeIncrement: Integer;
begin
  Result := DefaultInterface.getIntegrationTimeIncrement;
end;

function TCCoSpectrometer.getIntegrationTimeBase: Integer;
begin
  Result := DefaultInterface.getIntegrationTimeBase;
end;

function TCCoSpectrometer.getActualIntegrationTime: Integer;
begin
  Result := DefaultInterface.getActualIntegrationTime;
end;

function TCCoSpectrometer.getChannels: ICoSpectrometerChannelCollection;
begin
  Result := DefaultInterface.getChannels;
end;

function TCCoSpectrometer.getNumberOfChannels: Integer;
begin
  Result := DefaultInterface.getNumberOfChannels;
end;

function TCCoSpectrometer.getNumberOfEnabledChannels: Integer;
begin
  Result := DefaultInterface.getNumberOfEnabledChannels;
end;

function TCCoSpectrometer.getChannelIndices: OleVariant;
begin
  Result := DefaultInterface.getChannelIndices;
end;

function TCCoSpectrometer.isRotatorEnabled: WordBool;
begin
  Result := DefaultInterface.isRotatorEnabled;
end;

procedure TCCoSpectrometer.setRotatorEnabled(COM_rotator: WordBool);
begin
  DefaultInterface.setRotatorEnabled(COM_rotator);
end;

function TCCoSpectrometer.getBenchSlot: Integer;
begin
  Result := DefaultInterface.getBenchSlot;
end;

function TCCoSpectrometer.getSpectrometerConfigSlot: Integer;
begin
  Result := DefaultInterface.getSpectrometerConfigSlot;
end;

function TCCoSpectrometer.getDetectorSerialNumberSlot: Integer;
begin
  Result := DefaultInterface.getDetectorSerialNumberSlot;
end;

function TCCoSpectrometer.getCPLDVersionSlot: Integer;
begin
  Result := DefaultInterface.getCPLDVersionSlot;
end;

procedure TCCoSpectrometer.getConfigurationFromSpectrometer;
begin
  DefaultInterface.getConfigurationFromSpectrometer;
end;

procedure TCCoSpectrometer.setConfiguration;
begin
  DefaultInterface.setConfiguration;
end;

function TCCoSpectrometer.getNewCoefficients(COM_index: Integer): ICoCoefficients;
begin
  Result := DefaultInterface.getNewCoefficients(COM_index);
end;

procedure TCCoSpectrometer.getCoefficientsFromSpectrometer;
begin
  DefaultInterface.getCoefficientsFromSpectrometer;
end;

procedure TCCoSpectrometer.setCoefficients;
begin
  DefaultInterface.setCoefficients;
end;

function TCCoSpectrometer.getFirmwareVersionNumber: Integer;
begin
  Result := DefaultInterface.getFirmwareVersionNumber;
end;

function TCCoSpectrometer.getCodeVersion(const COM_fileName: WideString): WideString;
begin
  Result := DefaultInterface.getCodeVersion(COM_fileName);
end;

function TCCoSpectrometer.getMaxIntensity: Integer;
begin
  Result := DefaultInterface.getMaxIntensity;
end;

function TCCoSpectrometer.isStrobeDelayEnabled: WordBool;
begin
  Result := DefaultInterface.isStrobeDelayEnabled;
end;

procedure TCCoSpectrometer.close;
begin
  DefaultInterface.close;
end;

function TCCoSpectrometer.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrometerProperties.Create(AServer: TCCoSpectrometer);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrometerProperties.GetDefaultInterface: ICoSpectrometer;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoADC1000Channel.Create: ICoADC1000Channel;
begin
  Result := CreateComObject(CLASS_CCoADC1000Channel) as ICoADC1000Channel;
end;

class function CoCCoADC1000Channel.CreateRemote(const MachineName: string): ICoADC1000Channel;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoADC1000Channel) as ICoADC1000Channel;
end;

procedure TCCoADC1000Channel.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A23310C7-A616-5875-90BC-0CA7CD4665E3}';
    IntfIID:   '{EEC82062-DD25-5401-8015-C9CCEB653D23}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoADC1000Channel.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoADC1000Channel;
  end;
end;

procedure TCCoADC1000Channel.ConnectTo(svrIntf: ICoADC1000Channel);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoADC1000Channel.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoADC1000Channel.GetDefaultInterface: ICoADC1000Channel;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoADC1000Channel.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoADC1000ChannelProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoADC1000Channel.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoADC1000Channel.GetServerProperties: TCCoADC1000ChannelProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoADC1000Channel.CreateADC1000ChannelB(const COM_spectrometer: ICoSpectrometer; 
                                                   const COM_coefficients: ICoCoefficients; 
                                                   COM_channel: Integer);
begin
  DefaultInterface.CreateADC1000ChannelB(COM_spectrometer, COM_coefficients, COM_channel);
end;

procedure TCCoADC1000Channel.getCoefficientsFromSpectrometer;
begin
  DefaultInterface.getCoefficientsFromSpectrometer;
end;

procedure TCCoADC1000Channel.setCoefficients;
begin
  DefaultInterface.setCoefficients;
end;

procedure TCCoADC1000Channel.setWavelengthCalibration;
begin
  DefaultInterface.setWavelengthCalibration;
end;

function TCCoADC1000Channel.getAllWavelengths: OleVariant;
begin
  Result := DefaultInterface.getAllWavelengths;
end;

function TCCoADC1000Channel.getWavelength(COM_pixel: Integer): Double;
begin
  Result := DefaultInterface.getWavelength(COM_pixel);
end;

function TCCoADC1000Channel.getDeepWellWavelength(COM_pixel: Integer): Double;
begin
  Result := DefaultInterface.getDeepWellWavelength(COM_pixel);
end;

function TCCoADC1000Channel.getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
begin
  Result := DefaultInterface.getSpectrum(COM_spectrum);
end;

function TCCoADC1000Channel.getSpectrumB: ICoSpectrum;
begin
  Result := DefaultInterface.getSpectrumB;
end;

procedure TCCoADC1000Channel.fixNumberOfPixels;
begin
  DefaultInterface.fixNumberOfPixels;
end;

function TCCoADC1000Channel.isMaster: WordBool;
begin
  Result := DefaultInterface.isMaster;
end;

function TCCoADC1000Channel.isEnabled: WordBool;
begin
  Result := DefaultInterface.isEnabled;
end;

procedure TCCoADC1000Channel.setEnabled(COM_enabled: WordBool);
begin
  DefaultInterface.setEnabled(COM_enabled);
end;

function TCCoADC1000Channel.isInterpolated: WordBool;
begin
  Result := DefaultInterface.isInterpolated;
end;

procedure TCCoADC1000Channel.setInterpolated(COM_interpolated: WordBool);
begin
  DefaultInterface.setInterpolated(COM_interpolated);
end;

function TCCoADC1000Channel.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoADC1000ChannelProperties.Create(AServer: TCCoADC1000Channel);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoADC1000ChannelProperties.GetDefaultInterface: ICoADC1000Channel;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSBEndpointDescriptor.Create: ICoUSBEndpointDescriptor;
begin
  Result := CreateComObject(CLASS_CCoUSBEndpointDescriptor) as ICoUSBEndpointDescriptor;
end;

class function CoCCoUSBEndpointDescriptor.CreateRemote(const MachineName: string): ICoUSBEndpointDescriptor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSBEndpointDescriptor) as ICoUSBEndpointDescriptor;
end;

procedure TCCoUSBEndpointDescriptor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{16FEAA6C-DD56-500D-8188-107FF131F8FB}';
    IntfIID:   '{36C4B9EC-2C72-5C22-814E-9861195C160A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSBEndpointDescriptor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSBEndpointDescriptor;
  end;
end;

procedure TCCoUSBEndpointDescriptor.ConnectTo(svrIntf: ICoUSBEndpointDescriptor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSBEndpointDescriptor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSBEndpointDescriptor.GetDefaultInterface: ICoUSBEndpointDescriptor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSBEndpointDescriptor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSBEndpointDescriptorProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSBEndpointDescriptor.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSBEndpointDescriptor.GetServerProperties: TCCoUSBEndpointDescriptorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSBEndpointDescriptor.CreateUSBEndpointDescriptor;
begin
  DefaultInterface.CreateUSBEndpointDescriptor;
end;

procedure TCCoUSBEndpointDescriptor.CreateUSBEndpointDescriptorB(COM_bLength: Shortint; 
                                                                 COM_bDescriptorType: Shortint; 
                                                                 COM_bEndpointAddress: Smallint; 
                                                                 COM_bmAttributes: Shortint; 
                                                                 COM_wMaxPacketSize: Smallint; 
                                                                 COM_bInterval: Shortint);
begin
  DefaultInterface.CreateUSBEndpointDescriptorB(COM_bLength, COM_bDescriptorType, 
                                                COM_bEndpointAddress, COM_bmAttributes, 
                                                COM_wMaxPacketSize, COM_bInterval);
end;

function TCCoUSBEndpointDescriptor.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoUSBEndpointDescriptor.getLength: Shortint;
begin
  Result := DefaultInterface.getLength;
end;

function TCCoUSBEndpointDescriptor.getDescriptorType: Shortint;
begin
  Result := DefaultInterface.getDescriptorType;
end;

function TCCoUSBEndpointDescriptor.getEndpointAddress: Smallint;
begin
  Result := DefaultInterface.getEndpointAddress;
end;

function TCCoUSBEndpointDescriptor.getAttributes: Shortint;
begin
  Result := DefaultInterface.getAttributes;
end;

function TCCoUSBEndpointDescriptor.getMaxPacketSize: Smallint;
begin
  Result := DefaultInterface.getMaxPacketSize;
end;

function TCCoUSBEndpointDescriptor.getInterval: Shortint;
begin
  Result := DefaultInterface.getInterval;
end;

procedure TCCoUSBEndpointDescriptor.setLength(COM_bLength: Shortint);
begin
  DefaultInterface.setLength(COM_bLength);
end;

procedure TCCoUSBEndpointDescriptor.setDescriptorType(COM_bDescriptorType: Shortint);
begin
  DefaultInterface.setDescriptorType(COM_bDescriptorType);
end;

procedure TCCoUSBEndpointDescriptor.setEndpointAddress(COM_bEndpointAddress: Smallint);
begin
  DefaultInterface.setEndpointAddress(COM_bEndpointAddress);
end;

procedure TCCoUSBEndpointDescriptor.setAttributes(COM_bmAttributes: Shortint);
begin
  DefaultInterface.setAttributes(COM_bmAttributes);
end;

procedure TCCoUSBEndpointDescriptor.setMaxPacketSize(COM_wMaxPacketSize: Smallint);
begin
  DefaultInterface.setMaxPacketSize(COM_wMaxPacketSize);
end;

procedure TCCoUSBEndpointDescriptor.setInterval(COM_bInterval: Shortint);
begin
  DefaultInterface.setInterval(COM_bInterval);
end;

function TCCoUSBEndpointDescriptor.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSBEndpointDescriptorProperties.Create(AServer: TCCoUSBEndpointDescriptor);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSBEndpointDescriptorProperties.GetDefaultInterface: ICoUSBEndpointDescriptor;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoGUIProvider.Create: ICoGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoGUIProvider) as ICoGUIProvider;
end;

class function CoCCoGUIProvider.CreateRemote(const MachineName: string): ICoGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoGUIProvider) as ICoGUIProvider;
end;

procedure TCCoGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A6670159-A855-5131-919D-04C2FA80F71C}';
    IntfIID:   '{7258FBE5-C3C6-5E6E-80C8-E80060E6BEAB}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoGUIProvider;
  end;
end;

procedure TCCoGUIProvider.ConnectTo(svrIntf: ICoGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoGUIProvider.GetDefaultInterface: ICoGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoGUIProvider.GetServerProperties: TCCoGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoGUIProvider.CreateGUIProvider;
begin
  DefaultInterface.CreateGUIProvider;
end;

function TCCoGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoGUIProviderProperties.Create(AServer: TCCoGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoGUIProviderProperties.GetDefaultInterface: ICoGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoGUIProviderCollection.Create: ICoGUIProviderCollection;
begin
  Result := CreateComObject(CLASS_CCoGUIProviderCollection) as ICoGUIProviderCollection;
end;

class function CoCCoGUIProviderCollection.CreateRemote(const MachineName: string): ICoGUIProviderCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoGUIProviderCollection) as ICoGUIProviderCollection;
end;

procedure TCCoGUIProviderCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4F468387-BC0F-5A2C-800E-588A1FE30A4E}';
    IntfIID:   '{E1041F85-EF75-5D08-9002-4012E7853ADC}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoGUIProviderCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoGUIProviderCollection;
  end;
end;

procedure TCCoGUIProviderCollection.ConnectTo(svrIntf: ICoGUIProviderCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoGUIProviderCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoGUIProviderCollection.GetDefaultInterface: ICoGUIProviderCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoGUIProviderCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoGUIProviderCollectionProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoGUIProviderCollection.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoGUIProviderCollection.GetServerProperties: TCCoGUIProviderCollectionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCCoGUIProviderCollection.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TCCoGUIProviderCollection.Item(index: OleVariant): OleVariant;
begin
  Result := DefaultInterface.Item(index);
end;

procedure TCCoGUIProviderCollection.Add(const pnewGUIProviderCollection: IDispatch);
begin
  DefaultInterface.Add(pnewGUIProviderCollection);
end;

procedure TCCoGUIProviderCollection.Remove(index: Integer);
begin
  DefaultInterface.Remove(index);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoGUIProviderCollectionProperties.Create(AServer: TCCoGUIProviderCollection);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoGUIProviderCollectionProperties.GetDefaultInterface: ICoGUIProviderCollection;
begin
  Result := FServer.DefaultInterface;
end;

function TCCoGUIProviderCollectionProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoCCoErrorCode.Create: ICoErrorCode;
begin
  Result := CreateComObject(CLASS_CCoErrorCode) as ICoErrorCode;
end;

class function CoCCoErrorCode.CreateRemote(const MachineName: string): ICoErrorCode;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoErrorCode) as ICoErrorCode;
end;

procedure TCCoErrorCode.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C8FC180B-FAC7-5B81-80D3-A9997F7721AC}';
    IntfIID:   '{D7F6044C-D539-5EAF-91BC-A8BD9B3AF1B4}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoErrorCode.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoErrorCode;
  end;
end;

procedure TCCoErrorCode.ConnectTo(svrIntf: ICoErrorCode);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoErrorCode.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoErrorCode.GetDefaultInterface: ICoErrorCode;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoErrorCode.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoErrorCodeProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoErrorCode.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoErrorCode.GetServerProperties: TCCoErrorCodeProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoErrorCode.CreateErrorCodeB(COM_newCode: Integer);
begin
  DefaultInterface.CreateErrorCodeB(COM_newCode);
end;

procedure TCCoErrorCode.setErrorCode(COM_code: Integer; COM_on: WordBool);
begin
  DefaultInterface.setErrorCode(COM_code, COM_on);
end;

function TCCoErrorCode.getErrorCodes: Integer;
begin
  Result := DefaultInterface.getErrorCodes;
end;

function TCCoErrorCode.isCodeIgnored(COM_code: Integer): WordBool;
begin
  Result := DefaultInterface.isCodeIgnored(COM_code);
end;

procedure TCCoErrorCode.setCodeIgnored(COM_code: Integer; COM_ignore: WordBool);
begin
  DefaultInterface.setCodeIgnored(COM_code, COM_ignore);
end;

function TCCoErrorCode.isErrorCodeSet(COM_code: Integer): WordBool;
begin
  Result := DefaultInterface.isErrorCodeSet(COM_code);
end;

function TCCoErrorCode.getErrorResponse(COM_code: Integer): WideString;
begin
  Result := DefaultInterface.getErrorResponse(COM_code);
end;

function TCCoErrorCode.getIngoreResponse: WideString;
begin
  Result := DefaultInterface.getIngoreResponse;
end;

function TCCoErrorCode.getErrorCount: Integer;
begin
  Result := DefaultInterface.getErrorCount;
end;

function TCCoErrorCode.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoErrorCodeProperties.Create(AServer: TCCoErrorCode);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoErrorCodeProperties.GetDefaultInterface: ICoErrorCode;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoOmniDriverDispatchListener.Create: ICoOmniDriverDispatchListener;
begin
  Result := CreateComObject(CLASS_CCoOmniDriverDispatchListener) as ICoOmniDriverDispatchListener;
end;

class function CoCCoOmniDriverDispatchListener.CreateRemote(const MachineName: string): ICoOmniDriverDispatchListener;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoOmniDriverDispatchListener) as ICoOmniDriverDispatchListener;
end;

procedure TCCoOmniDriverDispatchListener.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3D8B532A-8BCD-5EBE-9181-F54A34DCC2AD}';
    IntfIID:   '{6C9CBA55-7631-519F-817F-F03FB3E01B31}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoOmniDriverDispatchListener.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoOmniDriverDispatchListener;
  end;
end;

procedure TCCoOmniDriverDispatchListener.ConnectTo(svrIntf: ICoOmniDriverDispatchListener);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoOmniDriverDispatchListener.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoOmniDriverDispatchListener.GetDefaultInterface: ICoOmniDriverDispatchListener;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoOmniDriverDispatchListener.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoOmniDriverDispatchListenerProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoOmniDriverDispatchListener.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoOmniDriverDispatchListener.GetServerProperties: TCCoOmniDriverDispatchListenerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoOmniDriverDispatchListener.CreateOmniDriverDispatchListener;
begin
  DefaultInterface.CreateOmniDriverDispatchListener;
end;

procedure TCCoOmniDriverDispatchListener.dispatchError(const COM_param0: ICoErrorCode; 
                                                       COM_param1: Integer);
begin
  DefaultInterface.dispatchError(COM_param0, COM_param1);
end;

function TCCoOmniDriverDispatchListener.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoOmniDriverDispatchListenerProperties.Create(AServer: TCCoOmniDriverDispatchListener);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoOmniDriverDispatchListenerProperties.GetDefaultInterface: ICoOmniDriverDispatchListener;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoAcquisitionPropertiesListener.Create: ICoAcquisitionPropertiesListener;
begin
  Result := CreateComObject(CLASS_CCoAcquisitionPropertiesListener) as ICoAcquisitionPropertiesListener;
end;

class function CoCCoAcquisitionPropertiesListener.CreateRemote(const MachineName: string): ICoAcquisitionPropertiesListener;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoAcquisitionPropertiesListener) as ICoAcquisitionPropertiesListener;
end;

procedure TCCoAcquisitionPropertiesListener.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8A549572-3AB3-546C-81F7-47C90BEC8285}';
    IntfIID:   '{F87D11C6-BD2A-56CD-81DB-764C19AAC6DD}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoAcquisitionPropertiesListener.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoAcquisitionPropertiesListener;
  end;
end;

procedure TCCoAcquisitionPropertiesListener.ConnectTo(svrIntf: ICoAcquisitionPropertiesListener);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoAcquisitionPropertiesListener.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoAcquisitionPropertiesListener.GetDefaultInterface: ICoAcquisitionPropertiesListener;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoAcquisitionPropertiesListener.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoAcquisitionPropertiesListenerProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoAcquisitionPropertiesListener.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoAcquisitionPropertiesListener.GetServerProperties: TCCoAcquisitionPropertiesListenerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoAcquisitionPropertiesListener.CreateAcquisitionPropertiesListener;
begin
  DefaultInterface.CreateAcquisitionPropertiesListener;
end;

procedure TCCoAcquisitionPropertiesListener.acquisitionPropertiesChange;
begin
  DefaultInterface.acquisitionPropertiesChange;
end;

function TCCoAcquisitionPropertiesListener.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoAcquisitionPropertiesListenerProperties.Create(AServer: TCCoAcquisitionPropertiesListener);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoAcquisitionPropertiesListenerProperties.GetDefaultInterface: ICoAcquisitionPropertiesListener;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectrometerStatus.Create: ICoSpectrometerStatus;
begin
  Result := CreateComObject(CLASS_CCoSpectrometerStatus) as ICoSpectrometerStatus;
end;

class function CoCCoSpectrometerStatus.CreateRemote(const MachineName: string): ICoSpectrometerStatus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrometerStatus) as ICoSpectrometerStatus;
end;

procedure TCCoSpectrometerStatus.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A3E13E77-BEAD-5642-90C8-1ED18E823656}';
    IntfIID:   '{245C8F47-A690-50C4-9139-D2B9DEBC84A4}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrometerStatus.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrometerStatus;
  end;
end;

procedure TCCoSpectrometerStatus.ConnectTo(svrIntf: ICoSpectrometerStatus);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrometerStatus.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrometerStatus.GetDefaultInterface: ICoSpectrometerStatus;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrometerStatus.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrometerStatusProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrometerStatus.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrometerStatus.GetServerProperties: TCCoSpectrometerStatusProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSpectrometerStatus.CreateSpectrometerStatus;
begin
  DefaultInterface.CreateSpectrometerStatus;
end;

function TCCoSpectrometerStatus.isLampEnabled: WordBool;
begin
  Result := DefaultInterface.isLampEnabled;
end;

function TCCoSpectrometerStatus.isTakingScan: WordBool;
begin
  Result := DefaultInterface.isTakingScan;
end;

function TCCoSpectrometerStatus.isDataReady: WordBool;
begin
  Result := DefaultInterface.isDataReady;
end;

function TCCoSpectrometerStatus.isFailed: WordBool;
begin
  Result := DefaultInterface.isFailed;
end;

function TCCoSpectrometerStatus.getNumPixels: Integer;
begin
  Result := DefaultInterface.getNumPixels;
end;

function TCCoSpectrometerStatus.getIntegrationTime: Integer;
begin
  Result := DefaultInterface.getIntegrationTime;
end;

function TCCoSpectrometerStatus.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoSpectrometerStatus.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrometerStatusProperties.Create(AServer: TCCoSpectrometerStatus);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrometerStatusProperties.GetDefaultInterface: ICoSpectrometerStatus;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMultiChannelListener.Create: ICoMultiChannelListener;
begin
  Result := CreateComObject(CLASS_CCoMultiChannelListener) as ICoMultiChannelListener;
end;

class function CoCCoMultiChannelListener.CreateRemote(const MachineName: string): ICoMultiChannelListener;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMultiChannelListener) as ICoMultiChannelListener;
end;

procedure TCCoMultiChannelListener.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CBA8EA39-C5CD-5C5A-9037-64E3FF222286}';
    IntfIID:   '{1C9F29E4-B0E5-5197-818C-C5838396F5CC}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMultiChannelListener.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMultiChannelListener;
  end;
end;

procedure TCCoMultiChannelListener.ConnectTo(svrIntf: ICoMultiChannelListener);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMultiChannelListener.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMultiChannelListener.GetDefaultInterface: ICoMultiChannelListener;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMultiChannelListener.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMultiChannelListenerProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoMultiChannelListener.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMultiChannelListener.GetServerProperties: TCCoMultiChannelListenerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMultiChannelListener.CreateMultiChannelListener;
begin
  DefaultInterface.CreateMultiChannelListener;
end;

procedure TCCoMultiChannelListener.addChannel(COM_param0: Integer);
begin
  DefaultInterface.addChannel(COM_param0);
end;

procedure TCCoMultiChannelListener.removeChannel(COM_param0: Integer);
begin
  DefaultInterface.removeChannel(COM_param0);
end;

function TCCoMultiChannelListener.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMultiChannelListenerProperties.Create(AServer: TCCoMultiChannelListener);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMultiChannelListenerProperties.GetDefaultInterface: ICoMultiChannelListener;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoExternalTriggerMode.Create: ICoExternalTriggerMode;
begin
  Result := CreateComObject(CLASS_CCoExternalTriggerMode) as ICoExternalTriggerMode;
end;

class function CoCCoExternalTriggerMode.CreateRemote(const MachineName: string): ICoExternalTriggerMode;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoExternalTriggerMode) as ICoExternalTriggerMode;
end;

procedure TCCoExternalTriggerMode.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EBB06B07-E07F-5A2C-9004-2FE193D45310}';
    IntfIID:   '{06392415-C401-58DF-810A-BBBBE4160DDE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoExternalTriggerMode.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoExternalTriggerMode;
  end;
end;

procedure TCCoExternalTriggerMode.ConnectTo(svrIntf: ICoExternalTriggerMode);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoExternalTriggerMode.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoExternalTriggerMode.GetDefaultInterface: ICoExternalTriggerMode;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoExternalTriggerMode.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoExternalTriggerModeProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoExternalTriggerMode.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoExternalTriggerMode.GetServerProperties: TCCoExternalTriggerModeProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoExternalTriggerMode.CreateExternalTriggerModeB(COM_mode: Integer);
begin
  DefaultInterface.CreateExternalTriggerModeB(COM_mode);
end;

function TCCoExternalTriggerMode.getExternalTriggerMode: Integer;
begin
  Result := DefaultInterface.getExternalTriggerMode;
end;

function TCCoExternalTriggerMode.getExternalTriggerNormal: Integer;
begin
  Result := DefaultInterface.getExternalTriggerNormal;
end;

function TCCoExternalTriggerMode.getExternalTriggerSoftware: Integer;
begin
  Result := DefaultInterface.getExternalTriggerSoftware;
end;

function TCCoExternalTriggerMode.getExternalTriggerSynchronization: Integer;
begin
  Result := DefaultInterface.getExternalTriggerSynchronization;
end;

function TCCoExternalTriggerMode.getExternalTriggerHardware: Integer;
begin
  Result := DefaultInterface.getExternalTriggerHardware;
end;

function TCCoExternalTriggerMode.getTriggerInternalSingleShot: Integer;
begin
  Result := DefaultInterface.getTriggerInternalSingleShot;
end;

function TCCoExternalTriggerMode.getSelfTriggerNormal: Integer;
begin
  Result := DefaultInterface.getSelfTriggerNormal;
end;

function TCCoExternalTriggerMode.getSelfTriggerSoftware: Integer;
begin
  Result := DefaultInterface.getSelfTriggerSoftware;
end;

function TCCoExternalTriggerMode.getSelfTriggerSynchronization: Integer;
begin
  Result := DefaultInterface.getSelfTriggerSynchronization;
end;

function TCCoExternalTriggerMode.getSelfTriggerHardware: Integer;
begin
  Result := DefaultInterface.getSelfTriggerHardware;
end;

function TCCoExternalTriggerMode.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoExternalTriggerMode.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoExternalTriggerModeProperties.Create(AServer: TCCoExternalTriggerMode);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoExternalTriggerModeProperties.GetDefaultInterface: ICoExternalTriggerMode;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoExternalTriggerModeCollection.Create: ICoExternalTriggerModeCollection;
begin
  Result := CreateComObject(CLASS_CCoExternalTriggerModeCollection) as ICoExternalTriggerModeCollection;
end;

class function CoCCoExternalTriggerModeCollection.CreateRemote(const MachineName: string): ICoExternalTriggerModeCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoExternalTriggerModeCollection) as ICoExternalTriggerModeCollection;
end;

procedure TCCoExternalTriggerModeCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C732C6DB-EFDA-5B3B-807C-F29ACEA1AF32}';
    IntfIID:   '{AB6BB888-50F6-5C75-903F-F5FC959879E9}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoExternalTriggerModeCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoExternalTriggerModeCollection;
  end;
end;

procedure TCCoExternalTriggerModeCollection.ConnectTo(svrIntf: ICoExternalTriggerModeCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoExternalTriggerModeCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoExternalTriggerModeCollection.GetDefaultInterface: ICoExternalTriggerModeCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoExternalTriggerModeCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoExternalTriggerModeCollectionProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoExternalTriggerModeCollection.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoExternalTriggerModeCollection.GetServerProperties: TCCoExternalTriggerModeCollectionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCCoExternalTriggerModeCollection.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TCCoExternalTriggerModeCollection.Item(index: OleVariant): OleVariant;
begin
  Result := DefaultInterface.Item(index);
end;

procedure TCCoExternalTriggerModeCollection.Add(const pnewExternalTriggerModeCollection: IDispatch);
begin
  DefaultInterface.Add(pnewExternalTriggerModeCollection);
end;

procedure TCCoExternalTriggerModeCollection.Remove(index: Integer);
begin
  DefaultInterface.Remove(index);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoExternalTriggerModeCollectionProperties.Create(AServer: TCCoExternalTriggerModeCollection);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoExternalTriggerModeCollectionProperties.GetDefaultInterface: ICoExternalTriggerModeCollection;
begin
  Result := FServer.DefaultInterface;
end;

function TCCoExternalTriggerModeCollectionProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoCCoCoefficientsCollection.Create: ICoCoefficientsCollection;
begin
  Result := CreateComObject(CLASS_CCoCoefficientsCollection) as ICoCoefficientsCollection;
end;

class function CoCCoCoefficientsCollection.CreateRemote(const MachineName: string): ICoCoefficientsCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoCoefficientsCollection) as ICoCoefficientsCollection;
end;

procedure TCCoCoefficientsCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2A21A2DF-AB7A-593D-803D-96C23926A815}';
    IntfIID:   '{7E2A2E8E-8C58-510E-80CB-DEC831710ED3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoCoefficientsCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoCoefficientsCollection;
  end;
end;

procedure TCCoCoefficientsCollection.ConnectTo(svrIntf: ICoCoefficientsCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoCoefficientsCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoCoefficientsCollection.GetDefaultInterface: ICoCoefficientsCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoCoefficientsCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoCoefficientsCollectionProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoCoefficientsCollection.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoCoefficientsCollection.GetServerProperties: TCCoCoefficientsCollectionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCCoCoefficientsCollection.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TCCoCoefficientsCollection.Item(index: OleVariant): OleVariant;
begin
  Result := DefaultInterface.Item(index);
end;

procedure TCCoCoefficientsCollection.Add(const pnewCoefficientsCollection: IDispatch);
begin
  DefaultInterface.Add(pnewCoefficientsCollection);
end;

procedure TCCoCoefficientsCollection.Remove(index: Integer);
begin
  DefaultInterface.Remove(index);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoCoefficientsCollectionProperties.Create(AServer: TCCoCoefficientsCollection);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoCoefficientsCollectionProperties.GetDefaultInterface: ICoCoefficientsCollection;
begin
  Result := FServer.DefaultInterface;
end;

function TCCoCoefficientsCollectionProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoCCoAcquisitionListener.Create: ICoAcquisitionListener;
begin
  Result := CreateComObject(CLASS_CCoAcquisitionListener) as ICoAcquisitionListener;
end;

class function CoCCoAcquisitionListener.CreateRemote(const MachineName: string): ICoAcquisitionListener;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoAcquisitionListener) as ICoAcquisitionListener;
end;

procedure TCCoAcquisitionListener.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{1D6630E6-8008-5EDD-8089-433E8438F981}';
    IntfIID:   '{23B48C1B-EB33-5B33-91DD-FA58FCEBFF41}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoAcquisitionListener.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoAcquisitionListener;
  end;
end;

procedure TCCoAcquisitionListener.ConnectTo(svrIntf: ICoAcquisitionListener);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoAcquisitionListener.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoAcquisitionListener.GetDefaultInterface: ICoAcquisitionListener;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoAcquisitionListener.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoAcquisitionListenerProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoAcquisitionListener.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoAcquisitionListener.GetServerProperties: TCCoAcquisitionListenerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoAcquisitionListener.CreateAcquisitionListener;
begin
  DefaultInterface.CreateAcquisitionListener;
end;

procedure TCCoAcquisitionListener.pauseSpectrometerAcquisitions(const COM_param0: ICoSpectrometer);
begin
  DefaultInterface.pauseSpectrometerAcquisitions(COM_param0);
end;

procedure TCCoAcquisitionListener.resumeSpectrometerAcquisitions(const COM_param0: ICoSpectrometer);
begin
  DefaultInterface.resumeSpectrometerAcquisitions(COM_param0);
end;

function TCCoAcquisitionListener.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoAcquisitionListenerProperties.Create(AServer: TCCoAcquisitionListener);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoAcquisitionListenerProperties.GetDefaultInterface: ICoAcquisitionListener;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoADC1000USB.Create: ICoADC1000USB;
begin
  Result := CreateComObject(CLASS_CCoADC1000USB) as ICoADC1000USB;
end;

class function CoCCoADC1000USB.CreateRemote(const MachineName: string): ICoADC1000USB;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoADC1000USB) as ICoADC1000USB;
end;

procedure TCCoADC1000USB.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{12F011AB-F23A-561F-915E-D7C550095CA6}';
    IntfIID:   '{FC329161-8CED-5F04-816B-E0BC69667A72}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoADC1000USB.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoADC1000USB;
  end;
end;

procedure TCCoADC1000USB.ConnectTo(svrIntf: ICoADC1000USB);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoADC1000USB.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoADC1000USB.GetDefaultInterface: ICoADC1000USB;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoADC1000USB.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoADC1000USBProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoADC1000USB.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoADC1000USB.GetServerProperties: TCCoADC1000USBProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoADC1000USB.CreateADC1000USB(COM_i: Integer);
begin
  DefaultInterface.CreateADC1000USB(COM_i);
end;

procedure TCCoADC1000USB.CreateADC1000USBB;
begin
  DefaultInterface.CreateADC1000USBB;
end;

procedure TCCoADC1000USB.setEndpoints;
begin
  DefaultInterface.setEndpoints;
end;

function TCCoADC1000USB.getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getEndpoint(COM_endPoint);
end;

procedure TCCoADC1000USB.openSpectrometer(COM_index: Integer);
begin
  DefaultInterface.openSpectrometer(COM_index);
end;

function TCCoADC1000USB.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

function TCCoADC1000USB.getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
begin
  Result := DefaultInterface.getSpectrum(COM_spectrum);
end;

function TCCoADC1000USB.getSpectrumB: ICoSpectrum;
begin
  Result := DefaultInterface.getSpectrumB;
end;

procedure TCCoADC1000USB.setCoefficients;
begin
  DefaultInterface.setCoefficients;
end;

function TCCoADC1000USB.getDeepWellMinimumIntegrationTime: Integer;
begin
  Result := DefaultInterface.getDeepWellMinimumIntegrationTime;
end;

procedure TCCoADC1000USB.addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
begin
  DefaultInterface.addOmniDriverDispatchListener(COM_listener);
end;

procedure TCCoADC1000USB.removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
begin
  DefaultInterface.removeOmniDriverDispatchListener(COM_listener);
end;

procedure TCCoADC1000USB.addAcquisitionPropertiesListener(const COM_listener: ICoAcquisitionPropertiesListener);
begin
  DefaultInterface.addAcquisitionPropertiesListener(COM_listener);
end;

procedure TCCoADC1000USB.removeAcquisitionPropertiesListener(const COM_listener: ICoAcquisitionPropertiesListener);
begin
  DefaultInterface.removeAcquisitionPropertiesListener(COM_listener);
end;

function TCCoADC1000USB.getActualIntegrationTime: Integer;
begin
  Result := DefaultInterface.getActualIntegrationTime;
end;

function TCCoADC1000USB.readStatus: ICoSpectrometerStatus;
begin
  Result := DefaultInterface.readStatus;
end;

function TCCoADC1000USB.getNewCoefficients(COM_index: Integer): ICoCoefficients;
begin
  Result := DefaultInterface.getNewCoefficients(COM_index);
end;

function TCCoADC1000USB.isDeepWell: WordBool;
begin
  Result := DefaultInterface.isDeepWell;
end;

procedure TCCoADC1000USB.setDeepWell(COM_dw: WordBool);
begin
  DefaultInterface.setDeepWell(COM_dw);
end;

procedure TCCoADC1000USB.setIntegrationTime(COM_intTime: Integer);
begin
  DefaultInterface.setIntegrationTime(COM_intTime);
end;

procedure TCCoADC1000USB.setStrobeDelay(COM_delay: Integer);
begin
  DefaultInterface.setStrobeDelay(COM_delay);
end;

function TCCoADC1000USB.getNumberOfChannels: Integer;
begin
  Result := DefaultInterface.getNumberOfChannels;
end;

function TCCoADC1000USB.getChannelsPresent: OleVariant;
begin
  Result := DefaultInterface.getChannelsPresent;
end;

function TCCoADC1000USB.getNumberOfEnabledChannels: Integer;
begin
  Result := DefaultInterface.getNumberOfEnabledChannels;
end;

procedure TCCoADC1000USB.setChannelMux(COM_index: Integer);
begin
  DefaultInterface.setChannelMux(COM_index);
end;

procedure TCCoADC1000USB.setChannelPresent(COM_index: Integer; COM_present: WordBool);
begin
  DefaultInterface.setChannelPresent(COM_index, COM_present);
end;

function TCCoADC1000USB.isChannelPresent(COM_index: Integer): WordBool;
begin
  Result := DefaultInterface.isChannelPresent(COM_index);
end;

procedure TCCoADC1000USB.setChannelStatus(COM_index: Integer; COM_status: WordBool);
begin
  DefaultInterface.setChannelStatus(COM_index, COM_status);
end;

procedure TCCoADC1000USB.setDeepWellStatus(COM_status: WordBool);
begin
  DefaultInterface.setDeepWellStatus(COM_status);
end;

function TCCoADC1000USB.getChannelIndices: OleVariant;
begin
  Result := DefaultInterface.getChannelIndices;
end;

function TCCoADC1000USB.isRotatorEnabled: WordBool;
begin
  Result := DefaultInterface.isRotatorEnabled;
end;

procedure TCCoADC1000USB.setRotatorEnabled(COM_enabled: WordBool);
begin
  DefaultInterface.setRotatorEnabled(COM_enabled);
end;

function TCCoADC1000USB.isInterpolationEnabled: WordBool;
begin
  Result := DefaultInterface.isInterpolationEnabled;
end;

procedure TCCoADC1000USB.setInterpolationEnabled(COM_enabled: WordBool);
begin
  DefaultInterface.setInterpolationEnabled(COM_enabled);
end;

procedure TCCoADC1000USB.addChannelListener(const COM_listener: ICoMultiChannelListener);
begin
  DefaultInterface.addChannelListener(COM_listener);
end;

procedure TCCoADC1000USB.removeChannelListener(const COM_listener: ICoMultiChannelListener);
begin
  DefaultInterface.removeChannelListener(COM_listener);
end;

procedure TCCoADC1000USB.setContinuousStrobeDelay(COM_delayMicros: Integer);
begin
  DefaultInterface.setContinuousStrobeDelay(COM_delayMicros);
end;

function TCCoADC1000USB.getContinuousStrobeDelayMinimum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMinimum;
end;

function TCCoADC1000USB.getContinuousStrobeDelayMaximum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMaximum;
end;

function TCCoADC1000USB.getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayIncrement(COM_magnitude);
end;

function TCCoADC1000USB.continuousStrobeCountsToMicros(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.continuousStrobeCountsToMicros(COM_counts);
end;

procedure TCCoADC1000USB.setMasterClock(COM_rate: Integer);
begin
  DefaultInterface.setMasterClock(COM_rate);
end;

procedure TCCoADC1000USB.setExternalTriggerMode(COM_mode: Integer);
begin
  DefaultInterface.setExternalTriggerMode(COM_mode);
end;

function TCCoADC1000USB.getExternalTriggerModes: ICoExternalTriggerModeCollection;
begin
  Result := DefaultInterface.getExternalTriggerModes;
end;

procedure TCCoADC1000USB.setDACCounts(COM_counts: Integer; COM_index: Integer);
begin
  DefaultInterface.setDACCounts(COM_counts, COM_index);
end;

function TCCoADC1000USB.analogOutCountsToVolts(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.analogOutCountsToVolts(COM_counts);
end;

function TCCoADC1000USB.getDACMinimum: Integer;
begin
  Result := DefaultInterface.getDACMinimum;
end;

function TCCoADC1000USB.getDACMaximum: Integer;
begin
  Result := DefaultInterface.getDACMaximum;
end;

function TCCoADC1000USB.getDACIncrement: Integer;
begin
  Result := DefaultInterface.getDACIncrement;
end;

function TCCoADC1000USB.isDACPresent: WordBool;
begin
  Result := DefaultInterface.isDACPresent;
end;

function TCCoADC1000USB.getDACPins: Integer;
begin
  Result := DefaultInterface.getDACPins;
end;

function TCCoADC1000USB.readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readNonlinearityCoefficientsFromSpectrometer;
end;

function TCCoADC1000USB.getNonlinearityCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getNonlinearityCoefficients;
end;

function TCCoADC1000USB.getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getNonlinearityCoefficientsSingleChannel(COM_index);
end;

procedure TCCoADC1000USB.setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; 
                                                                  COM_index: Integer);
begin
  DefaultInterface.setNonlinearityCoefficientsSingleChannel(COM_nl, COM_index);
end;

function TCCoADC1000USB.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoADC1000USB.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoADC1000USB.getWavelengths(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_index);
end;

procedure TCCoADC1000USB.setWavelengths(COM_wl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setWavelengths(COM_wl, COM_index);
end;

function TCCoADC1000USB.readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readStrayLightCorrectionCoefficientFromSpectrometer;
end;

function TCCoADC1000USB.getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getStrayLightCorrectionCoefficient;
end;

procedure TCCoADC1000USB.setStrayLight(COM_strayLight: Double; COM_index: Integer);
begin
  DefaultInterface.setStrayLight(COM_strayLight, COM_index);
end;

function TCCoADC1000USB.getStrayLight(COM_index: Integer): Double;
begin
  Result := DefaultInterface.getStrayLight(COM_index);
end;

function TCCoADC1000USB.isAdvancedVersion: WordBool;
begin
  Result := DefaultInterface.isAdvancedVersion;
end;

procedure TCCoADC1000USB.addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.addAcquisitionListener(COM_listener);
end;

procedure TCCoADC1000USB.removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.removeAcquisitionListener(COM_listener);
end;

function TCCoADC1000USB.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoADC1000USBProperties.Create(AServer: TCCoADC1000USB);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoADC1000USBProperties.GetDefaultInterface: ICoADC1000USB;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoADC1000USBTest.Create: ICoADC1000USBTest;
begin
  Result := CreateComObject(CLASS_CCoADC1000USBTest) as ICoADC1000USBTest;
end;

class function CoCCoADC1000USBTest.CreateRemote(const MachineName: string): ICoADC1000USBTest;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoADC1000USBTest) as ICoADC1000USBTest;
end;

procedure TCCoADC1000USBTest.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{709520BC-8083-510E-80FB-ECFB164129FC}';
    IntfIID:   '{0D294460-81E0-5C0B-90B3-D627995E6D22}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoADC1000USBTest.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoADC1000USBTest;
  end;
end;

procedure TCCoADC1000USBTest.ConnectTo(svrIntf: ICoADC1000USBTest);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoADC1000USBTest.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoADC1000USBTest.GetDefaultInterface: ICoADC1000USBTest;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoADC1000USBTest.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoADC1000USBTestProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoADC1000USBTest.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoADC1000USBTest.GetServerProperties: TCCoADC1000USBTestProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoADC1000USBTest.CreateADC1000USBTest;
begin
  DefaultInterface.CreateADC1000USBTest;
end;

procedure TCCoADC1000USBTest.setEndpoints;
begin
  DefaultInterface.setEndpoints;
end;

procedure TCCoADC1000USBTest.runDriverDependent;
begin
  DefaultInterface.runDriverDependent;
end;

procedure TCCoADC1000USBTest.runIndependent;
begin
  DefaultInterface.runIndependent;
end;

procedure TCCoADC1000USBTest.initialize;
begin
  DefaultInterface.initialize;
end;

function TCCoADC1000USBTest.getNumChannels: Integer;
begin
  Result := DefaultInterface.getNumChannels;
end;

function TCCoADC1000USBTest.readInfo(COM_slot: Integer): WideString;
begin
  Result := DefaultInterface.readInfo(COM_slot);
end;

procedure TCCoADC1000USBTest.setRotatorTrue;
begin
  DefaultInterface.setRotatorTrue;
end;

procedure TCCoADC1000USBTest.setChannelMux(COM_channel: Integer);
begin
  DefaultInterface.setChannelMux(COM_channel);
end;

function TCCoADC1000USBTest.getSpectrum: OleVariant;
begin
  Result := DefaultInterface.getSpectrum;
end;

function TCCoADC1000USBTest.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoADC1000USBTestProperties.Create(AServer: TCCoADC1000USBTest);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoADC1000USBTestProperties.GetDefaultInterface: ICoADC1000USBTest;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoAdvancedIntegrationClock.Create: ICoAdvancedIntegrationClock;
begin
  Result := CreateComObject(CLASS_CCoAdvancedIntegrationClock) as ICoAdvancedIntegrationClock;
end;

class function CoCCoAdvancedIntegrationClock.CreateRemote(const MachineName: string): ICoAdvancedIntegrationClock;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoAdvancedIntegrationClock) as ICoAdvancedIntegrationClock;
end;

procedure TCCoAdvancedIntegrationClock.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D82214E5-3B45-50B5-91BC-FDA78D45AE3F}';
    IntfIID:   '{B669149A-E83F-501B-8195-3E2E78C81B33}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoAdvancedIntegrationClock.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoAdvancedIntegrationClock;
  end;
end;

procedure TCCoAdvancedIntegrationClock.ConnectTo(svrIntf: ICoAdvancedIntegrationClock);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoAdvancedIntegrationClock.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoAdvancedIntegrationClock.GetDefaultInterface: ICoAdvancedIntegrationClock;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoAdvancedIntegrationClock.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoAdvancedIntegrationClockProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoAdvancedIntegrationClock.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoAdvancedIntegrationClock.GetServerProperties: TCCoAdvancedIntegrationClockProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoAdvancedIntegrationClock.CreateAdvancedIntegrationClock;
begin
  DefaultInterface.CreateAdvancedIntegrationClock;
end;

function TCCoAdvancedIntegrationClock.getIntegrationClockTimer: Integer;
begin
  Result := DefaultInterface.getIntegrationClockTimer;
end;

function TCCoAdvancedIntegrationClock.getIntegrationTimeBaseClock: Integer;
begin
  Result := DefaultInterface.getIntegrationTimeBaseClock;
end;

procedure TCCoAdvancedIntegrationClock.setAdvancedIntegrationTime(COM_param0: Integer);
begin
  DefaultInterface.setAdvancedIntegrationTime(COM_param0);
end;

function TCCoAdvancedIntegrationClock.getAdvancedIntegrationTimeMinimum: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeMinimum;
end;

function TCCoAdvancedIntegrationClock.getAdvancedIntegrationTimeMaximum: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeMaximum;
end;

function TCCoAdvancedIntegrationClock.getAdvancedIntegrationTimeIncrement: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeIncrement;
end;

function TCCoAdvancedIntegrationClock.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoAdvancedIntegrationClockProperties.Create(AServer: TCCoAdvancedIntegrationClock);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoAdvancedIntegrationClockProperties.GetDefaultInterface: ICoAdvancedIntegrationClock;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSBInterface.Create: ICoUSBInterface;
begin
  Result := CreateComObject(CLASS_CCoUSBInterface) as ICoUSBInterface;
end;

class function CoCCoUSBInterface.CreateRemote(const MachineName: string): ICoUSBInterface;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSBInterface) as ICoUSBInterface;
end;

procedure TCCoUSBInterface.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8F0B98DE-AF17-5D5B-9039-ECF60D35DD39}';
    IntfIID:   '{95C7060C-5993-5A15-80B3-938835A23C5E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSBInterface.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSBInterface;
  end;
end;

procedure TCCoUSBInterface.ConnectTo(svrIntf: ICoUSBInterface);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSBInterface.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSBInterface.GetDefaultInterface: ICoUSBInterface;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSBInterface.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSBInterfaceProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSBInterface.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSBInterface.GetServerProperties: TCCoUSBInterfaceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSBInterface.CreateUSBInterface;
begin
  DefaultInterface.CreateUSBInterface;
end;

function TCCoUSBInterface.getInputBuffer: OleVariant;
begin
  Result := DefaultInterface.getInputBuffer;
end;

function TCCoUSBInterface.getOutputBuffer: OleVariant;
begin
  Result := DefaultInterface.getOutputBuffer;
end;

procedure TCCoUSBInterface.increaseInputBufferSize(COM_param0: Integer);
begin
  DefaultInterface.increaseInputBufferSize(COM_param0);
end;

procedure TCCoUSBInterface.increaseOutputBufferSize(COM_param0: Integer);
begin
  DefaultInterface.increaseOutputBufferSize(COM_param0);
end;

procedure TCCoUSBInterface.bulkIn(const COM_param0: ICoUSBEndpointDescriptor; 
                                  COM_param1: OleVariant; COM_param2: Integer);
begin
  DefaultInterface.bulkIn(COM_param0, COM_param1, COM_param2);
end;

procedure TCCoUSBInterface.bulkOut(const COM_param0: ICoUSBEndpointDescriptor; 
                                   COM_param1: OleVariant; COM_param2: Integer);
begin
  DefaultInterface.bulkOut(COM_param0, COM_param1, COM_param2);
end;

procedure TCCoUSBInterface.openDevice(COM_param0: Integer; COM_param1: Integer; COM_param2: Integer);
begin
  DefaultInterface.openDevice(COM_param0, COM_param1, COM_param2);
end;

procedure TCCoUSBInterface.closeDevice;
begin
  DefaultInterface.closeDevice;
end;

function TCCoUSBInterface.getUSBStringDescriptor(COM_param0: Integer): WideString;
begin
  Result := DefaultInterface.getUSBStringDescriptor(COM_param0);
end;

function TCCoUSBInterface.isUSB2Mode: WordBool;
begin
  Result := DefaultInterface.isUSB2Mode;
end;

function TCCoUSBInterface.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSBInterfaceProperties.Create(AServer: TCCoUSBInterface);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSBInterfaceProperties.GetDefaultInterface: ICoUSBInterface;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoAdvancedIntegrationClockImpl.Create: ICoAdvancedIntegrationClockImpl;
begin
  Result := CreateComObject(CLASS_CCoAdvancedIntegrationClockImpl) as ICoAdvancedIntegrationClockImpl;
end;

class function CoCCoAdvancedIntegrationClockImpl.CreateRemote(const MachineName: string): ICoAdvancedIntegrationClockImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoAdvancedIntegrationClockImpl) as ICoAdvancedIntegrationClockImpl;
end;

procedure TCCoAdvancedIntegrationClockImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{FF0085C3-489B-5A96-911F-AA2EF609AC89}';
    IntfIID:   '{7A1343B2-12E3-503F-918A-79B206B4552D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoAdvancedIntegrationClockImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoAdvancedIntegrationClockImpl;
  end;
end;

procedure TCCoAdvancedIntegrationClockImpl.ConnectTo(svrIntf: ICoAdvancedIntegrationClockImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoAdvancedIntegrationClockImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoAdvancedIntegrationClockImpl.GetDefaultInterface: ICoAdvancedIntegrationClockImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoAdvancedIntegrationClockImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoAdvancedIntegrationClockImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoAdvancedIntegrationClockImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoAdvancedIntegrationClockImpl.GetServerProperties: TCCoAdvancedIntegrationClockImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoAdvancedIntegrationClockImpl.CreateAdvancedIntegrationClockImplB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateAdvancedIntegrationClockImplB(COM_usbInt);
end;

function TCCoAdvancedIntegrationClockImpl.getIntegrationClockTimer: Integer;
begin
  Result := DefaultInterface.getIntegrationClockTimer;
end;

function TCCoAdvancedIntegrationClockImpl.getIntegrationTimeBaseClock: Integer;
begin
  Result := DefaultInterface.getIntegrationTimeBaseClock;
end;

procedure TCCoAdvancedIntegrationClockImpl.setAdvancedIntegrationTime(COM_delayMicros: Integer);
begin
  DefaultInterface.setAdvancedIntegrationTime(COM_delayMicros);
end;

function TCCoAdvancedIntegrationClockImpl.getAdvancedIntegrationTimeMinimum: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeMinimum;
end;

function TCCoAdvancedIntegrationClockImpl.getAdvancedIntegrationTimeMaximum: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeMaximum;
end;

function TCCoAdvancedIntegrationClockImpl.getAdvancedIntegrationTimeIncrement: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeIncrement;
end;

procedure TCCoAdvancedIntegrationClockImpl.masterClockChanged(COM_newValue: Integer);
begin
  DefaultInterface.masterClockChanged(COM_newValue);
end;

function TCCoAdvancedIntegrationClockImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoAdvancedIntegrationClockImplProperties.Create(AServer: TCCoAdvancedIntegrationClockImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoAdvancedIntegrationClockImplProperties.GetDefaultInterface: ICoAdvancedIntegrationClockImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoAdvancedVersion.Create: ICoAdvancedVersion;
begin
  Result := CreateComObject(CLASS_CCoAdvancedVersion) as ICoAdvancedVersion;
end;

class function CoCCoAdvancedVersion.CreateRemote(const MachineName: string): ICoAdvancedVersion;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoAdvancedVersion) as ICoAdvancedVersion;
end;

procedure TCCoAdvancedVersion.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F99165F6-6CC7-5A9A-80A2-521BDAE52060}';
    IntfIID:   '{5B3E2572-4876-58DB-8102-C5DDB1C7934F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoAdvancedVersion.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoAdvancedVersion;
  end;
end;

procedure TCCoAdvancedVersion.ConnectTo(svrIntf: ICoAdvancedVersion);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoAdvancedVersion.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoAdvancedVersion.GetDefaultInterface: ICoAdvancedVersion;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoAdvancedVersion.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoAdvancedVersionProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoAdvancedVersion.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoAdvancedVersion.GetServerProperties: TCCoAdvancedVersionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoAdvancedVersion.CreateAdvancedVersion;
begin
  DefaultInterface.CreateAdvancedVersion;
end;

function TCCoAdvancedVersion.getFPGAFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFPGAFirmwareVersion;
end;

function TCCoAdvancedVersion.getPSOCVersion: WideString;
begin
  Result := DefaultInterface.getPSOCVersion;
end;

function TCCoAdvancedVersion.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoAdvancedVersionProperties.Create(AServer: TCCoAdvancedVersion);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoAdvancedVersionProperties.GetDefaultInterface: ICoAdvancedVersion;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoAdvancedVersionImpl.Create: ICoAdvancedVersionImpl;
begin
  Result := CreateComObject(CLASS_CCoAdvancedVersionImpl) as ICoAdvancedVersionImpl;
end;

class function CoCCoAdvancedVersionImpl.CreateRemote(const MachineName: string): ICoAdvancedVersionImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoAdvancedVersionImpl) as ICoAdvancedVersionImpl;
end;

procedure TCCoAdvancedVersionImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{B09E0B8F-AE6A-5B76-9173-99A12EA486E1}';
    IntfIID:   '{22298733-F91E-5F26-90D0-BCB63E1C8DFA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoAdvancedVersionImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoAdvancedVersionImpl;
  end;
end;

procedure TCCoAdvancedVersionImpl.ConnectTo(svrIntf: ICoAdvancedVersionImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoAdvancedVersionImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoAdvancedVersionImpl.GetDefaultInterface: ICoAdvancedVersionImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoAdvancedVersionImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoAdvancedVersionImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoAdvancedVersionImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoAdvancedVersionImpl.GetServerProperties: TCCoAdvancedVersionImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoAdvancedVersionImpl.CreateAdvancedVersionImplB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateAdvancedVersionImplB(COM_usbInt);
end;

function TCCoAdvancedVersionImpl.getFPGAFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFPGAFirmwareVersion;
end;

function TCCoAdvancedVersionImpl.getPSOCVersion: WideString;
begin
  Result := DefaultInterface.getPSOCVersion;
end;

function TCCoAdvancedVersionImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoAdvancedVersionImplProperties.Create(AServer: TCCoAdvancedVersionImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoAdvancedVersionImplProperties.GetDefaultInterface: ICoAdvancedVersionImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoAdvancedVersionImpl_NIR.Create: ICoAdvancedVersionImpl_NIR;
begin
  Result := CreateComObject(CLASS_CCoAdvancedVersionImpl_NIR) as ICoAdvancedVersionImpl_NIR;
end;

class function CoCCoAdvancedVersionImpl_NIR.CreateRemote(const MachineName: string): ICoAdvancedVersionImpl_NIR;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoAdvancedVersionImpl_NIR) as ICoAdvancedVersionImpl_NIR;
end;

procedure TCCoAdvancedVersionImpl_NIR.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DEE1EE69-8810-5B55-91E7-89B6C03A8826}';
    IntfIID:   '{8AA8B93C-B43D-59EF-908D-461309454FD8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoAdvancedVersionImpl_NIR.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoAdvancedVersionImpl_NIR;
  end;
end;

procedure TCCoAdvancedVersionImpl_NIR.ConnectTo(svrIntf: ICoAdvancedVersionImpl_NIR);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoAdvancedVersionImpl_NIR.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoAdvancedVersionImpl_NIR.GetDefaultInterface: ICoAdvancedVersionImpl_NIR;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoAdvancedVersionImpl_NIR.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoAdvancedVersionImpl_NIRProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoAdvancedVersionImpl_NIR.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoAdvancedVersionImpl_NIR.GetServerProperties: TCCoAdvancedVersionImpl_NIRProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoAdvancedVersionImpl_NIR.CreateAdvancedVersionImpl_NIRB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateAdvancedVersionImpl_NIRB(COM_usbInt);
end;

function TCCoAdvancedVersionImpl_NIR.getPSOCVersion: WideString;
begin
  Result := DefaultInterface.getPSOCVersion;
end;

function TCCoAdvancedVersionImpl_NIR.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoAdvancedVersionImpl_NIRProperties.Create(AServer: TCCoAdvancedVersionImpl_NIR);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoAdvancedVersionImpl_NIRProperties.GetDefaultInterface: ICoAdvancedVersionImpl_NIR;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoAnalogIn.Create: ICoAnalogIn;
begin
  Result := CreateComObject(CLASS_CCoAnalogIn) as ICoAnalogIn;
end;

class function CoCCoAnalogIn.CreateRemote(const MachineName: string): ICoAnalogIn;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoAnalogIn) as ICoAnalogIn;
end;

procedure TCCoAnalogIn.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9FE7B07B-AF86-588C-8077-EC1D6359BDB1}';
    IntfIID:   '{85C8B6D0-B14B-554B-91F8-B83570B69253}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoAnalogIn.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoAnalogIn;
  end;
end;

procedure TCCoAnalogIn.ConnectTo(svrIntf: ICoAnalogIn);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoAnalogIn.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoAnalogIn.GetDefaultInterface: ICoAnalogIn;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoAnalogIn.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoAnalogInProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoAnalogIn.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoAnalogIn.GetServerProperties: TCCoAnalogInProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoAnalogIn.CreateAnalogIn;
begin
  DefaultInterface.CreateAnalogIn;
end;

function TCCoAnalogIn.getVoltageIn: Double;
begin
  Result := DefaultInterface.getVoltageIn;
end;

function TCCoAnalogIn.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoAnalogInProperties.Create(AServer: TCCoAnalogIn);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoAnalogInProperties.GetDefaultInterface: ICoAnalogIn;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoAnalogInGUIProvider.Create: ICoAnalogInGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoAnalogInGUIProvider) as ICoAnalogInGUIProvider;
end;

class function CoCCoAnalogInGUIProvider.CreateRemote(const MachineName: string): ICoAnalogInGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoAnalogInGUIProvider) as ICoAnalogInGUIProvider;
end;

procedure TCCoAnalogInGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9164BE2D-2A87-5BE5-8130-0E330726A21B}';
    IntfIID:   '{F07EA215-2A85-5C1B-91BE-01AA69BFCAC6}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoAnalogInGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoAnalogInGUIProvider;
  end;
end;

procedure TCCoAnalogInGUIProvider.ConnectTo(svrIntf: ICoAnalogInGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoAnalogInGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoAnalogInGUIProvider.GetDefaultInterface: ICoAnalogInGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoAnalogInGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoAnalogInGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoAnalogInGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoAnalogInGUIProvider.GetServerProperties: TCCoAnalogInGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoAnalogInGUIProvider.CreateAnalogInGUIProvider;
begin
  DefaultInterface.CreateAnalogInGUIProvider;
end;

function TCCoAnalogInGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoAnalogInGUIProviderProperties.Create(AServer: TCCoAnalogInGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoAnalogInGUIProviderProperties.GetDefaultInterface: ICoAnalogInGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoAnalogInImpl.Create: ICoAnalogInImpl;
begin
  Result := CreateComObject(CLASS_CCoAnalogInImpl) as ICoAnalogInImpl;
end;

class function CoCCoAnalogInImpl.CreateRemote(const MachineName: string): ICoAnalogInImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoAnalogInImpl) as ICoAnalogInImpl;
end;

procedure TCCoAnalogInImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E04495E2-9348-5A8D-81DB-0164443EC5AE}';
    IntfIID:   '{12158587-8FEB-57DB-80BD-3DE6161F5395}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoAnalogInImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoAnalogInImpl;
  end;
end;

procedure TCCoAnalogInImpl.ConnectTo(svrIntf: ICoAnalogInImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoAnalogInImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoAnalogInImpl.GetDefaultInterface: ICoAnalogInImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoAnalogInImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoAnalogInImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoAnalogInImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoAnalogInImpl.GetServerProperties: TCCoAnalogInImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoAnalogInImpl.CreateAnalogInImplB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateAnalogInImplB(COM_usbInt);
end;

function TCCoAnalogInImpl.getVoltageIn: Double;
begin
  Result := DefaultInterface.getVoltageIn;
end;

function TCCoAnalogInImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoAnalogInImplProperties.Create(AServer: TCCoAnalogInImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoAnalogInImplProperties.GetDefaultInterface: ICoAnalogInImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoAnalogOut.Create: ICoAnalogOut;
begin
  Result := CreateComObject(CLASS_CCoAnalogOut) as ICoAnalogOut;
end;

class function CoCCoAnalogOut.CreateRemote(const MachineName: string): ICoAnalogOut;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoAnalogOut) as ICoAnalogOut;
end;

procedure TCCoAnalogOut.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2329802E-CB0D-5D30-804D-C9E26D071315}';
    IntfIID:   '{F3E57C26-D75B-5CAD-9121-510548A608F7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoAnalogOut.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoAnalogOut;
  end;
end;

procedure TCCoAnalogOut.ConnectTo(svrIntf: ICoAnalogOut);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoAnalogOut.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoAnalogOut.GetDefaultInterface: ICoAnalogOut;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoAnalogOut.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoAnalogOutProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoAnalogOut.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoAnalogOut.GetServerProperties: TCCoAnalogOutProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoAnalogOut.CreateAnalogOut;
begin
  DefaultInterface.CreateAnalogOut;
end;

procedure TCCoAnalogOut.setDACCounts(COM_param0: Integer; COM_param1: Integer);
begin
  DefaultInterface.setDACCounts(COM_param0, COM_param1);
end;

function TCCoAnalogOut.getDACMinimum: Integer;
begin
  Result := DefaultInterface.getDACMinimum;
end;

function TCCoAnalogOut.getDACMaximum: Integer;
begin
  Result := DefaultInterface.getDACMaximum;
end;

function TCCoAnalogOut.getDACIncrement: Integer;
begin
  Result := DefaultInterface.getDACIncrement;
end;

function TCCoAnalogOut.analogOutCountsToVolts(COM_param0: Integer): Double;
begin
  Result := DefaultInterface.analogOutCountsToVolts(COM_param0);
end;

function TCCoAnalogOut.isDACPresent: WordBool;
begin
  Result := DefaultInterface.isDACPresent;
end;

function TCCoAnalogOut.getDACPins: Integer;
begin
  Result := DefaultInterface.getDACPins;
end;

function TCCoAnalogOut.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoAnalogOutProperties.Create(AServer: TCCoAnalogOut);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoAnalogOutProperties.GetDefaultInterface: ICoAnalogOut;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoAnalogOutGUIProvider.Create: ICoAnalogOutGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoAnalogOutGUIProvider) as ICoAnalogOutGUIProvider;
end;

class function CoCCoAnalogOutGUIProvider.CreateRemote(const MachineName: string): ICoAnalogOutGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoAnalogOutGUIProvider) as ICoAnalogOutGUIProvider;
end;

procedure TCCoAnalogOutGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{91F790A1-D55E-5FD1-917D-5E7C40CE2BC4}';
    IntfIID:   '{8CF824F2-4A70-56A0-914E-465F62FDD994}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoAnalogOutGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoAnalogOutGUIProvider;
  end;
end;

procedure TCCoAnalogOutGUIProvider.ConnectTo(svrIntf: ICoAnalogOutGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoAnalogOutGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoAnalogOutGUIProvider.GetDefaultInterface: ICoAnalogOutGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoAnalogOutGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoAnalogOutGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoAnalogOutGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoAnalogOutGUIProvider.GetServerProperties: TCCoAnalogOutGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoAnalogOutGUIProvider.CreateAnalogOutGUIProvider;
begin
  DefaultInterface.CreateAnalogOutGUIProvider;
end;

function TCCoAnalogOutGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoAnalogOutGUIProviderProperties.Create(AServer: TCCoAnalogOutGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoAnalogOutGUIProviderProperties.GetDefaultInterface: ICoAnalogOutGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoAnalogOutImpl.Create: ICoAnalogOutImpl;
begin
  Result := CreateComObject(CLASS_CCoAnalogOutImpl) as ICoAnalogOutImpl;
end;

class function CoCCoAnalogOutImpl.CreateRemote(const MachineName: string): ICoAnalogOutImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoAnalogOutImpl) as ICoAnalogOutImpl;
end;

procedure TCCoAnalogOutImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F8BD6A68-C786-54A5-91E1-6CE4E4BF2E3A}';
    IntfIID:   '{8F49592E-4842-5D8F-91DD-DF2EAB32C373}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoAnalogOutImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoAnalogOutImpl;
  end;
end;

procedure TCCoAnalogOutImpl.ConnectTo(svrIntf: ICoAnalogOutImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoAnalogOutImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoAnalogOutImpl.GetDefaultInterface: ICoAnalogOutImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoAnalogOutImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoAnalogOutImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoAnalogOutImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoAnalogOutImpl.GetServerProperties: TCCoAnalogOutImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoAnalogOutImpl.CreateAnalogOutImplB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateAnalogOutImplB(COM_usbInt);
end;

procedure TCCoAnalogOutImpl.setDACCounts(COM_param0: Integer; COM_param1: Integer);
begin
  DefaultInterface.setDACCounts(COM_param0, COM_param1);
end;

function TCCoAnalogOutImpl.getDACMinimum: Integer;
begin
  Result := DefaultInterface.getDACMinimum;
end;

function TCCoAnalogOutImpl.getDACMaximum: Integer;
begin
  Result := DefaultInterface.getDACMaximum;
end;

function TCCoAnalogOutImpl.getDACIncrement: Integer;
begin
  Result := DefaultInterface.getDACIncrement;
end;

function TCCoAnalogOutImpl.analogOutCountsToVolts(COM_param0: Integer): Double;
begin
  Result := DefaultInterface.analogOutCountsToVolts(COM_param0);
end;

function TCCoAnalogOutImpl.isDACPresent: WordBool;
begin
  Result := DefaultInterface.isDACPresent;
end;

function TCCoAnalogOutImpl.getDACPins: Integer;
begin
  Result := DefaultInterface.getDACPins;
end;

function TCCoAnalogOutImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoAnalogOutImplProperties.Create(AServer: TCCoAnalogOutImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoAnalogOutImplProperties.GetDefaultInterface: ICoAnalogOutImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoAnalogOutImpl_ADC1000.Create: ICoAnalogOutImpl_ADC1000;
begin
  Result := CreateComObject(CLASS_CCoAnalogOutImpl_ADC1000) as ICoAnalogOutImpl_ADC1000;
end;

class function CoCCoAnalogOutImpl_ADC1000.CreateRemote(const MachineName: string): ICoAnalogOutImpl_ADC1000;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoAnalogOutImpl_ADC1000) as ICoAnalogOutImpl_ADC1000;
end;

procedure TCCoAnalogOutImpl_ADC1000.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A3B470A5-9125-5121-81F2-F16481A68E5E}';
    IntfIID:   '{0FF3EBF0-CDDF-599C-804C-2364E64BB5E8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoAnalogOutImpl_ADC1000.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoAnalogOutImpl_ADC1000;
  end;
end;

procedure TCCoAnalogOutImpl_ADC1000.ConnectTo(svrIntf: ICoAnalogOutImpl_ADC1000);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoAnalogOutImpl_ADC1000.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoAnalogOutImpl_ADC1000.GetDefaultInterface: ICoAnalogOutImpl_ADC1000;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoAnalogOutImpl_ADC1000.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoAnalogOutImpl_ADC1000Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoAnalogOutImpl_ADC1000.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoAnalogOutImpl_ADC1000.GetServerProperties: TCCoAnalogOutImpl_ADC1000Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoAnalogOutImpl_ADC1000.CreateAnalogOutImpl_ADC1000B(const COM_usbInt: ICoUSBInterface; 
                                                                 COM_fw: Integer; COM_pins: Integer);
begin
  DefaultInterface.CreateAnalogOutImpl_ADC1000B(COM_usbInt, COM_fw, COM_pins);
end;

function TCCoAnalogOutImpl_ADC1000.isFirmwareValid: WordBool;
begin
  Result := DefaultInterface.isFirmwareValid;
end;

function TCCoAnalogOutImpl_ADC1000.isDACPresent: WordBool;
begin
  Result := DefaultInterface.isDACPresent;
end;

procedure TCCoAnalogOutImpl_ADC1000.setDACCounts(COM_counts: Integer; COM_channel: Integer);
begin
  DefaultInterface.setDACCounts(COM_counts, COM_channel);
end;

function TCCoAnalogOutImpl_ADC1000.readDACCounts(COM_channel: Integer): Integer;
begin
  Result := DefaultInterface.readDACCounts(COM_channel);
end;

function TCCoAnalogOutImpl_ADC1000.analogOutCountsToVolts(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.analogOutCountsToVolts(COM_counts);
end;

function TCCoAnalogOutImpl_ADC1000.getDACMinimum: Integer;
begin
  Result := DefaultInterface.getDACMinimum;
end;

function TCCoAnalogOutImpl_ADC1000.getDACMaximum: Integer;
begin
  Result := DefaultInterface.getDACMaximum;
end;

function TCCoAnalogOutImpl_ADC1000.getDACIncrement: Integer;
begin
  Result := DefaultInterface.getDACIncrement;
end;

function TCCoAnalogOutImpl_ADC1000.getDACPins: Integer;
begin
  Result := DefaultInterface.getDACPins;
end;

function TCCoAnalogOutImpl_ADC1000.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoAnalogOutImpl_ADC1000Properties.Create(AServer: TCCoAnalogOutImpl_ADC1000);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoAnalogOutImpl_ADC1000Properties.GetDefaultInterface: ICoAnalogOutImpl_ADC1000;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoAnalogOutImpl_PSOC.Create: ICoAnalogOutImpl_PSOC;
begin
  Result := CreateComObject(CLASS_CCoAnalogOutImpl_PSOC) as ICoAnalogOutImpl_PSOC;
end;

class function CoCCoAnalogOutImpl_PSOC.CreateRemote(const MachineName: string): ICoAnalogOutImpl_PSOC;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoAnalogOutImpl_PSOC) as ICoAnalogOutImpl_PSOC;
end;

procedure TCCoAnalogOutImpl_PSOC.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DE1EBD14-C262-50B5-9046-4190D35990A0}';
    IntfIID:   '{B7180FC1-17C7-5F0F-8087-0BDDE6A58DE3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoAnalogOutImpl_PSOC.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoAnalogOutImpl_PSOC;
  end;
end;

procedure TCCoAnalogOutImpl_PSOC.ConnectTo(svrIntf: ICoAnalogOutImpl_PSOC);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoAnalogOutImpl_PSOC.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoAnalogOutImpl_PSOC.GetDefaultInterface: ICoAnalogOutImpl_PSOC;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoAnalogOutImpl_PSOC.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoAnalogOutImpl_PSOCProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoAnalogOutImpl_PSOC.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoAnalogOutImpl_PSOC.GetServerProperties: TCCoAnalogOutImpl_PSOCProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoAnalogOutImpl_PSOC.CreateAnalogOutImpl_PSOCB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateAnalogOutImpl_PSOCB(COM_usbInt);
end;

procedure TCCoAnalogOutImpl_PSOC.setDACCounts(COM_counts: Integer; COM_channel: Integer);
begin
  DefaultInterface.setDACCounts(COM_counts, COM_channel);
end;

function TCCoAnalogOutImpl_PSOC.analogOutCountsToVolts(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.analogOutCountsToVolts(COM_counts);
end;

function TCCoAnalogOutImpl_PSOC.getDACMinimum: Integer;
begin
  Result := DefaultInterface.getDACMinimum;
end;

function TCCoAnalogOutImpl_PSOC.getDACMaximum: Integer;
begin
  Result := DefaultInterface.getDACMaximum;
end;

function TCCoAnalogOutImpl_PSOC.getDACIncrement: Integer;
begin
  Result := DefaultInterface.getDACIncrement;
end;

function TCCoAnalogOutImpl_PSOC.isDACPresent: WordBool;
begin
  Result := DefaultInterface.isDACPresent;
end;

function TCCoAnalogOutImpl_PSOC.getDACPins: Integer;
begin
  Result := DefaultInterface.getDACPins;
end;

function TCCoAnalogOutImpl_PSOC.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoAnalogOutImpl_PSOCProperties.Create(AServer: TCCoAnalogOutImpl_PSOC);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoAnalogOutImpl_PSOCProperties.GetDefaultInterface: ICoAnalogOutImpl_PSOC;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoAutonullingConfiguration.Create: ICoAutonullingConfiguration;
begin
  Result := CreateComObject(CLASS_CCoAutonullingConfiguration) as ICoAutonullingConfiguration;
end;

class function CoCCoAutonullingConfiguration.CreateRemote(const MachineName: string): ICoAutonullingConfiguration;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoAutonullingConfiguration) as ICoAutonullingConfiguration;
end;

procedure TCCoAutonullingConfiguration.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{109E922C-E9C9-5F76-900D-B9FF563164BD}';
    IntfIID:   '{11F77CAC-A99A-573C-8007-1AAB31F47B34}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoAutonullingConfiguration.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoAutonullingConfiguration;
  end;
end;

procedure TCCoAutonullingConfiguration.ConnectTo(svrIntf: ICoAutonullingConfiguration);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoAutonullingConfiguration.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoAutonullingConfiguration.GetDefaultInterface: ICoAutonullingConfiguration;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoAutonullingConfiguration.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoAutonullingConfigurationProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoAutonullingConfiguration.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoAutonullingConfiguration.GetServerProperties: TCCoAutonullingConfigurationProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoAutonullingConfiguration.CreateAutonullingConfiguration;
begin
  DefaultInterface.CreateAutonullingConfiguration;
end;

procedure TCCoAutonullingConfiguration.CreateAutonullingConfigurationB(COM_ena: Integer; 
                                                                       COM_temp: Integer; 
                                                                       COM_dark: Integer; 
                                                                       COM_sat: Double);
begin
  DefaultInterface.CreateAutonullingConfigurationB(COM_ena, COM_temp, COM_dark, COM_sat);
end;

function TCCoAutonullingConfiguration.getEnabled: Integer;
begin
  Result := DefaultInterface.getEnabled;
end;

procedure TCCoAutonullingConfiguration.setEnabled(COM_ena: Integer);
begin
  DefaultInterface.setEnabled(COM_ena);
end;

function TCCoAutonullingConfiguration.getTemperatureCompensationEnabled: Integer;
begin
  Result := DefaultInterface.getTemperatureCompensationEnabled;
end;

procedure TCCoAutonullingConfiguration.setTemperatureCompensationEnabled(COM_ena: Integer);
begin
  DefaultInterface.setTemperatureCompensationEnabled(COM_ena);
end;

function TCCoAutonullingConfiguration.getDarkValue: Integer;
begin
  Result := DefaultInterface.getDarkValue;
end;

function TCCoAutonullingConfiguration.getSaturationValue: Double;
begin
  Result := DefaultInterface.getSaturationValue;
end;

function TCCoAutonullingConfiguration.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoAutonullingConfigurationProperties.Create(AServer: TCCoAutonullingConfiguration);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoAutonullingConfigurationProperties.GetDefaultInterface: ICoAutonullingConfiguration;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoAutonulling.Create: ICoAutonulling;
begin
  Result := CreateComObject(CLASS_CCoAutonulling) as ICoAutonulling;
end;

class function CoCCoAutonulling.CreateRemote(const MachineName: string): ICoAutonulling;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoAutonulling) as ICoAutonulling;
end;

procedure TCCoAutonulling.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{776E32A7-8083-54D9-8068-F7B49B107659}';
    IntfIID:   '{38824B7D-2F73-51B7-91D9-05C0701A1D1B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoAutonulling.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoAutonulling;
  end;
end;

procedure TCCoAutonulling.ConnectTo(svrIntf: ICoAutonulling);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoAutonulling.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoAutonulling.GetDefaultInterface: ICoAutonulling;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoAutonulling.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoAutonullingProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoAutonulling.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoAutonulling.GetServerProperties: TCCoAutonullingProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoAutonulling.CreateAutonulling;
begin
  DefaultInterface.CreateAutonulling;
end;

function TCCoAutonulling.getAutonullingScanStatus: Integer;
begin
  Result := DefaultInterface.getAutonullingScanStatus;
end;

procedure TCCoAutonulling.setAutonullingScanStatus(COM_param0: Integer);
begin
  DefaultInterface.setAutonullingScanStatus(COM_param0);
end;

function TCCoAutonulling.getAutonullingScanValue: Integer;
begin
  Result := DefaultInterface.getAutonullingScanValue;
end;

procedure TCCoAutonulling.setAutonullingScanValue(COM_param0: Integer);
begin
  DefaultInterface.setAutonullingScanValue(COM_param0);
end;

function TCCoAutonulling.getAutonullingConfiguration: ICoAutonullingConfiguration;
begin
  Result := DefaultInterface.getAutonullingConfiguration;
end;

function TCCoAutonulling.readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration;
begin
  Result := DefaultInterface.readAutonullingConfigurationFromSpectrometer;
end;

procedure TCCoAutonulling.setAutonullingConfiguration(const COM_param0: ICoAutonullingConfiguration);
begin
  DefaultInterface.setAutonullingConfiguration(COM_param0);
end;

procedure TCCoAutonulling.writeAutonullingConfigurationToSpectrometer;
begin
  DefaultInterface.writeAutonullingConfigurationToSpectrometer;
end;

function TCCoAutonulling.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoAutonullingProperties.Create(AServer: TCCoAutonulling);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoAutonullingProperties.GetDefaultInterface: ICoAutonulling;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoAutonullingGUIProvider.Create: ICoAutonullingGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoAutonullingGUIProvider) as ICoAutonullingGUIProvider;
end;

class function CoCCoAutonullingGUIProvider.CreateRemote(const MachineName: string): ICoAutonullingGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoAutonullingGUIProvider) as ICoAutonullingGUIProvider;
end;

procedure TCCoAutonullingGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{247A0738-2AC9-58A4-8044-E5CC46F60229}';
    IntfIID:   '{ECCF457F-8801-53B4-800F-0DD400E56AF7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoAutonullingGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoAutonullingGUIProvider;
  end;
end;

procedure TCCoAutonullingGUIProvider.ConnectTo(svrIntf: ICoAutonullingGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoAutonullingGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoAutonullingGUIProvider.GetDefaultInterface: ICoAutonullingGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoAutonullingGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoAutonullingGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoAutonullingGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoAutonullingGUIProvider.GetServerProperties: TCCoAutonullingGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoAutonullingGUIProvider.CreateAutonullingGUIProvider;
begin
  DefaultInterface.CreateAutonullingGUIProvider;
end;

function TCCoAutonullingGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoAutonullingGUIProviderProperties.Create(AServer: TCCoAutonullingGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoAutonullingGUIProviderProperties.GetDefaultInterface: ICoAutonullingGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoAutonullingImpl.Create: ICoAutonullingImpl;
begin
  Result := CreateComObject(CLASS_CCoAutonullingImpl) as ICoAutonullingImpl;
end;

class function CoCCoAutonullingImpl.CreateRemote(const MachineName: string): ICoAutonullingImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoAutonullingImpl) as ICoAutonullingImpl;
end;

procedure TCCoAutonullingImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{BE2606EF-BC9F-517E-91AF-CF87ACE11DBA}';
    IntfIID:   '{A90E1DF9-D407-507A-903B-79409CBD698A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoAutonullingImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoAutonullingImpl;
  end;
end;

procedure TCCoAutonullingImpl.ConnectTo(svrIntf: ICoAutonullingImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoAutonullingImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoAutonullingImpl.GetDefaultInterface: ICoAutonullingImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoAutonullingImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoAutonullingImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoAutonullingImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoAutonullingImpl.GetServerProperties: TCCoAutonullingImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoAutonullingImpl.CreateAutonullingImplB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateAutonullingImplB(COM_usbInt);
end;

function TCCoAutonullingImpl.readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration;
begin
  Result := DefaultInterface.readAutonullingConfigurationFromSpectrometer;
end;

function TCCoAutonullingImpl.getAutonullingScanStatus: Integer;
begin
  Result := DefaultInterface.getAutonullingScanStatus;
end;

function TCCoAutonullingImpl.getAutonullingScanValue: Integer;
begin
  Result := DefaultInterface.getAutonullingScanValue;
end;

function TCCoAutonullingImpl.getAutonullingConfiguration: ICoAutonullingConfiguration;
begin
  Result := DefaultInterface.getAutonullingConfiguration;
end;

procedure TCCoAutonullingImpl.setAutonullingConfiguration(const COM_configuration: ICoAutonullingConfiguration);
begin
  DefaultInterface.setAutonullingConfiguration(COM_configuration);
end;

procedure TCCoAutonullingImpl.writeAutonullingConfigurationToSpectrometer;
begin
  DefaultInterface.writeAutonullingConfigurationToSpectrometer;
end;

procedure TCCoAutonullingImpl.setAutonullingScanStatus(COM_value: Integer);
begin
  DefaultInterface.setAutonullingScanStatus(COM_value);
end;

procedure TCCoAutonullingImpl.setAutonullingScanValue(COM_value: Integer);
begin
  DefaultInterface.setAutonullingScanValue(COM_value);
end;

function TCCoAutonullingImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoAutonullingImplProperties.Create(AServer: TCCoAutonullingImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoAutonullingImplProperties.GetDefaultInterface: ICoAutonullingImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoBadPixelRemoval.Create: ICoBadPixelRemoval;
begin
  Result := CreateComObject(CLASS_CCoBadPixelRemoval) as ICoBadPixelRemoval;
end;

class function CoCCoBadPixelRemoval.CreateRemote(const MachineName: string): ICoBadPixelRemoval;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoBadPixelRemoval) as ICoBadPixelRemoval;
end;

procedure TCCoBadPixelRemoval.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0F56A71C-17FC-5152-9122-D7B399247C74}';
    IntfIID:   '{464A75A7-9D57-5FF6-8196-C90537D7F91F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoBadPixelRemoval.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoBadPixelRemoval;
  end;
end;

procedure TCCoBadPixelRemoval.ConnectTo(svrIntf: ICoBadPixelRemoval);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoBadPixelRemoval.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoBadPixelRemoval.GetDefaultInterface: ICoBadPixelRemoval;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoBadPixelRemoval.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoBadPixelRemovalProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoBadPixelRemoval.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoBadPixelRemoval.GetServerProperties: TCCoBadPixelRemovalProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoBadPixelRemoval.CreateBadPixelRemoval;
begin
  DefaultInterface.CreateBadPixelRemoval;
end;

function TCCoBadPixelRemoval.getBadPixels: OleVariant;
begin
  Result := DefaultInterface.getBadPixels;
end;

procedure TCCoBadPixelRemoval.setBadPixels(COM_param0: OleVariant);
begin
  DefaultInterface.setBadPixels(COM_param0);
end;

function TCCoBadPixelRemoval.removeBadPixels(const COM_param0: ICoSpectrum): ICoSpectrum;
begin
  Result := DefaultInterface.removeBadPixels(COM_param0);
end;

function TCCoBadPixelRemoval.getNumberOfBadPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfBadPixels;
end;

function TCCoBadPixelRemoval.getAllPixels: OleVariant;
begin
  Result := DefaultInterface.getAllPixels;
end;

procedure TCCoBadPixelRemoval.setBadPixelsToSpectrometer;
begin
  DefaultInterface.setBadPixelsToSpectrometer;
end;

function TCCoBadPixelRemoval.getBadPixelsFromSpectrometer: OleVariant;
begin
  Result := DefaultInterface.getBadPixelsFromSpectrometer;
end;

function TCCoBadPixelRemoval.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoBadPixelRemovalProperties.Create(AServer: TCCoBadPixelRemoval);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoBadPixelRemovalProperties.GetDefaultInterface: ICoBadPixelRemoval;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoBadPixelRemovalGUIProvider.Create: ICoBadPixelRemovalGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoBadPixelRemovalGUIProvider) as ICoBadPixelRemovalGUIProvider;
end;

class function CoCCoBadPixelRemovalGUIProvider.CreateRemote(const MachineName: string): ICoBadPixelRemovalGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoBadPixelRemovalGUIProvider) as ICoBadPixelRemovalGUIProvider;
end;

procedure TCCoBadPixelRemovalGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A9A9FC9C-190C-59B6-8068-A65E16D9426D}';
    IntfIID:   '{AA0C43A5-ACFA-516E-800C-8953E9A32291}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoBadPixelRemovalGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoBadPixelRemovalGUIProvider;
  end;
end;

procedure TCCoBadPixelRemovalGUIProvider.ConnectTo(svrIntf: ICoBadPixelRemovalGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoBadPixelRemovalGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoBadPixelRemovalGUIProvider.GetDefaultInterface: ICoBadPixelRemovalGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoBadPixelRemovalGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoBadPixelRemovalGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoBadPixelRemovalGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoBadPixelRemovalGUIProvider.GetServerProperties: TCCoBadPixelRemovalGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoBadPixelRemovalGUIProvider.CreateBadPixelRemovalGUIProvider;
begin
  DefaultInterface.CreateBadPixelRemovalGUIProvider;
end;

function TCCoBadPixelRemovalGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoBadPixelRemovalGUIProviderProperties.Create(AServer: TCCoBadPixelRemovalGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoBadPixelRemovalGUIProviderProperties.GetDefaultInterface: ICoBadPixelRemovalGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoBadPixelRemovalImpl.Create: ICoBadPixelRemovalImpl;
begin
  Result := CreateComObject(CLASS_CCoBadPixelRemovalImpl) as ICoBadPixelRemovalImpl;
end;

class function CoCCoBadPixelRemovalImpl.CreateRemote(const MachineName: string): ICoBadPixelRemovalImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoBadPixelRemovalImpl) as ICoBadPixelRemovalImpl;
end;

procedure TCCoBadPixelRemovalImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CB3041FD-14E6-5CE3-9194-CFE27595A988}';
    IntfIID:   '{4779BFE1-3E10-5049-819F-5AF69039B09C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoBadPixelRemovalImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoBadPixelRemovalImpl;
  end;
end;

procedure TCCoBadPixelRemovalImpl.ConnectTo(svrIntf: ICoBadPixelRemovalImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoBadPixelRemovalImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoBadPixelRemovalImpl.GetDefaultInterface: ICoBadPixelRemovalImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoBadPixelRemovalImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoBadPixelRemovalImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoBadPixelRemovalImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoBadPixelRemovalImpl.GetServerProperties: TCCoBadPixelRemovalImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoBadPixelRemovalImpl.CreateBadPixelRemovalImplB(const COM_usbInt: ICoUSBInterface; 
                                                             COM_numPixels: Integer);
begin
  DefaultInterface.CreateBadPixelRemovalImplB(COM_usbInt, COM_numPixels);
end;

procedure TCCoBadPixelRemovalImpl.setBadPixelsToSpectrometer;
begin
  DefaultInterface.setBadPixelsToSpectrometer;
end;

function TCCoBadPixelRemovalImpl.getBadPixelsFromSpectrometer: OleVariant;
begin
  Result := DefaultInterface.getBadPixelsFromSpectrometer;
end;

function TCCoBadPixelRemovalImpl.getBadPixels: OleVariant;
begin
  Result := DefaultInterface.getBadPixels;
end;

procedure TCCoBadPixelRemovalImpl.setBadPixels(COM_pixels: OleVariant);
begin
  DefaultInterface.setBadPixels(COM_pixels);
end;

function TCCoBadPixelRemovalImpl.removeBadPixels(const COM_spectrum: ICoSpectrum): ICoSpectrum;
begin
  Result := DefaultInterface.removeBadPixels(COM_spectrum);
end;

function TCCoBadPixelRemovalImpl.getNumberOfBadPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfBadPixels;
end;

procedure TCCoBadPixelRemovalImpl.setNumberOfBadPixels(COM_num: Integer);
begin
  DefaultInterface.setNumberOfBadPixels(COM_num);
end;

function TCCoBadPixelRemovalImpl.getAllPixels: OleVariant;
begin
  Result := DefaultInterface.getAllPixels;
end;

function TCCoBadPixelRemovalImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoBadPixelRemovalImplProperties.Create(AServer: TCCoBadPixelRemovalImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoBadPixelRemovalImplProperties.GetDefaultInterface: ICoBadPixelRemovalImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoBaseSpecFunctionality.Create: ICoBaseSpecFunctionality;
begin
  Result := CreateComObject(CLASS_CCoBaseSpecFunctionality) as ICoBaseSpecFunctionality;
end;

class function CoCCoBaseSpecFunctionality.CreateRemote(const MachineName: string): ICoBaseSpecFunctionality;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoBaseSpecFunctionality) as ICoBaseSpecFunctionality;
end;

procedure TCCoBaseSpecFunctionality.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{287230AF-89F9-5CED-9128-4F8FC52E36B8}';
    IntfIID:   '{9D7E1D09-A80E-5F9E-80A2-B0F3716FD253}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoBaseSpecFunctionality.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoBaseSpecFunctionality;
  end;
end;

procedure TCCoBaseSpecFunctionality.ConnectTo(svrIntf: ICoBaseSpecFunctionality);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoBaseSpecFunctionality.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoBaseSpecFunctionality.GetDefaultInterface: ICoBaseSpecFunctionality;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoBaseSpecFunctionality.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoBaseSpecFunctionalityProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoBaseSpecFunctionality.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoBaseSpecFunctionality.GetServerProperties: TCCoBaseSpecFunctionalityProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoBaseSpecFunctionality.CreateBaseSpecFunctionality;
begin
  DefaultInterface.CreateBaseSpecFunctionality;
end;

procedure TCCoBaseSpecFunctionality.closeSpectrometer;
begin
  DefaultInterface.closeSpectrometer;
end;

function TCCoBaseSpecFunctionality.getActualIntegrationTime: Integer;
begin
  Result := DefaultInterface.getActualIntegrationTime;
end;

function TCCoBaseSpecFunctionality.getChannels: ICoSpectrometerChannelCollection;
begin
  Result := DefaultInterface.getChannels;
end;

function TCCoBaseSpecFunctionality.getClassName: WideString;
begin
  Result := DefaultInterface.getClassName;
end;

function TCCoBaseSpecFunctionality.getDeviceIndex: Integer;
begin
  Result := DefaultInterface.getDeviceIndex;
end;

function TCCoBaseSpecFunctionality.isStabilityScan: WordBool;
begin
  Result := DefaultInterface.isStabilityScan;
end;

function TCCoBaseSpecFunctionality.getSpectrum(const COM_param0: ICoSpectrum): ICoSpectrum;
begin
  Result := DefaultInterface.getSpectrum(COM_param0);
end;

function TCCoBaseSpecFunctionality.getFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFirmwareVersion;
end;

function TCCoBaseSpecFunctionality.getFirmwareVersionNumber: Integer;
begin
  Result := DefaultInterface.getFirmwareVersionNumber;
end;

function TCCoBaseSpecFunctionality.getInfo(COM_param0: Integer): WideString;
begin
  Result := DefaultInterface.getInfo(COM_param0);
end;

function TCCoBaseSpecFunctionality.getIntegrationTimeBase: Integer;
begin
  Result := DefaultInterface.getIntegrationTimeBase;
end;

function TCCoBaseSpecFunctionality.getIntegrationTimeIncrement: Integer;
begin
  Result := DefaultInterface.getIntegrationTimeIncrement;
end;

function TCCoBaseSpecFunctionality.getIntegrationTimeMaximum: Integer;
begin
  Result := DefaultInterface.getIntegrationTimeMaximum;
end;

function TCCoBaseSpecFunctionality.getIntegrationTimeMinimum: Integer;
begin
  Result := DefaultInterface.getIntegrationTimeMinimum;
end;

function TCCoBaseSpecFunctionality.getMaxIntensity: Integer;
begin
  Result := DefaultInterface.getMaxIntensity;
end;

function TCCoBaseSpecFunctionality.getName: WideString;
begin
  Result := DefaultInterface.getName;
end;

function TCCoBaseSpecFunctionality.getSerialNumber: WideString;
begin
  Result := DefaultInterface.getSerialNumber;
end;

procedure TCCoBaseSpecFunctionality.initialize;
begin
  DefaultInterface.initialize;
end;

procedure TCCoBaseSpecFunctionality.openNextUnclaimed;
begin
  DefaultInterface.openNextUnclaimed;
end;

procedure TCCoBaseSpecFunctionality.openSpectrometer(COM_param0: Integer);
begin
  DefaultInterface.openSpectrometer(COM_param0);
end;

procedure TCCoBaseSpecFunctionality.getCoefficientsFromSpectrometer;
begin
  DefaultInterface.getCoefficientsFromSpectrometer;
end;

procedure TCCoBaseSpecFunctionality.getConfigurationFromSpectrometer;
begin
  DefaultInterface.getConfigurationFromSpectrometer;
end;

procedure TCCoBaseSpecFunctionality.setStabilityScan(COM_param0: WordBool);
begin
  DefaultInterface.setStabilityScan(COM_param0);
end;

procedure TCCoBaseSpecFunctionality.setInfo(COM_param0: Integer; const COM_param1: WideString);
begin
  DefaultInterface.setInfo(COM_param0, COM_param1);
end;

procedure TCCoBaseSpecFunctionality.setIntegrationTime(COM_param0: Integer);
begin
  DefaultInterface.setIntegrationTime(COM_param0);
end;

procedure TCCoBaseSpecFunctionality.setPowerState(COM_param0: WordBool);
begin
  DefaultInterface.setPowerState(COM_param0);
end;

procedure TCCoBaseSpecFunctionality.setStrobeEnable(COM_param0: WordBool);
begin
  DefaultInterface.setStrobeEnable(COM_param0);
end;

procedure TCCoBaseSpecFunctionality.setStrobeDelay(COM_param0: Integer);
begin
  DefaultInterface.setStrobeDelay(COM_param0);
end;

procedure TCCoBaseSpecFunctionality.setCoefficients;
begin
  DefaultInterface.setCoefficients;
end;

procedure TCCoBaseSpecFunctionality.setConfiguration;
begin
  DefaultInterface.setConfiguration;
end;

function TCCoBaseSpecFunctionality.isStrobeDelayEnabled: WordBool;
begin
  Result := DefaultInterface.isStrobeDelayEnabled;
end;

function TCCoBaseSpecFunctionality.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoBaseSpecFunctionalityProperties.Create(AServer: TCCoBaseSpecFunctionality);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoBaseSpecFunctionalityProperties.GetDefaultInterface: ICoBaseSpecFunctionality;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoBitSet.Create: ICoBitSet;
begin
  Result := CreateComObject(CLASS_CCoBitSet) as ICoBitSet;
end;

class function CoCCoBitSet.CreateRemote(const MachineName: string): ICoBitSet;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoBitSet) as ICoBitSet;
end;

procedure TCCoBitSet.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4BA7AC9C-3A15-51F6-8079-59C8C60C70D2}';
    IntfIID:   '{73D9D1D4-D4A9-5B88-91B5-7AFCAF882D87}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoBitSet.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoBitSet;
  end;
end;

procedure TCCoBitSet.ConnectTo(svrIntf: ICoBitSet);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoBitSet.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoBitSet.GetDefaultInterface: ICoBitSet;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoBitSet.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoBitSetProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoBitSet.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoBitSet.GetServerProperties: TCCoBitSetProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCCoBitSet.cardinality: Integer;
begin
  Result := DefaultInterface.cardinality;
end;

function TCCoBitSet.hashCode: Integer;
begin
  Result := DefaultInterface.hashCode;
end;

function TCCoBitSet.length: Integer;
begin
  Result := DefaultInterface.length;
end;

function TCCoBitSet.size: Integer;
begin
  Result := DefaultInterface.size;
end;

procedure TCCoBitSet.CreateBitSet;
begin
  DefaultInterface.CreateBitSet;
end;

procedure TCCoBitSet.clear;
begin
  DefaultInterface.clear;
end;

function TCCoBitSet.isEmpty: WordBool;
begin
  Result := DefaultInterface.isEmpty;
end;

function TCCoBitSet.nextClearBit(COM_param0: Integer): Integer;
begin
  Result := DefaultInterface.nextClearBit(COM_param0);
end;

function TCCoBitSet.nextSetBit(COM_param0: Integer): Integer;
begin
  Result := DefaultInterface.nextSetBit(COM_param0);
end;

procedure TCCoBitSet.CreateBitSetB(COM_param0: Integer);
begin
  DefaultInterface.CreateBitSetB(COM_param0);
end;

procedure TCCoBitSet.clearB(COM_param0: Integer);
begin
  DefaultInterface.clearB(COM_param0);
end;

procedure TCCoBitSet.flip(COM_param0: Integer);
begin
  DefaultInterface.flip(COM_param0);
end;

procedure TCCoBitSet.set_(COM_param0: Integer);
begin
  DefaultInterface.set_(COM_param0);
end;

function TCCoBitSet.get(COM_param0: Integer): WordBool;
begin
  Result := DefaultInterface.get(COM_param0);
end;

procedure TCCoBitSet.clearC(COM_param0: Integer; COM_param1: Integer);
begin
  DefaultInterface.clearC(COM_param0, COM_param1);
end;

procedure TCCoBitSet.flipB(COM_param0: Integer; COM_param1: Integer);
begin
  DefaultInterface.flipB(COM_param0, COM_param1);
end;

procedure TCCoBitSet.setB(COM_param0: Integer; COM_param1: Integer);
begin
  DefaultInterface.setB(COM_param0, COM_param1);
end;

procedure TCCoBitSet.setC(COM_param0: Integer; COM_param1: Integer; COM_param2: WordBool);
begin
  DefaultInterface.setC(COM_param0, COM_param1, COM_param2);
end;

procedure TCCoBitSet.setD(COM_param0: Integer; COM_param1: WordBool);
begin
  DefaultInterface.setD(COM_param0, COM_param1);
end;

function TCCoBitSet.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoBitSet.getB(COM_param0: Integer; COM_param1: Integer): ICoBitSet;
begin
  Result := DefaultInterface.getB(COM_param0, COM_param1);
end;

procedure TCCoBitSet.bit_and(const COM_param0: ICoBitSet);
begin
  DefaultInterface.bit_and(COM_param0);
end;

procedure TCCoBitSet.bit_andNot(const COM_param0: ICoBitSet);
begin
  DefaultInterface.bit_andNot(COM_param0);
end;

procedure TCCoBitSet.bit_or(const COM_param0: ICoBitSet);
begin
  DefaultInterface.bit_or(COM_param0);
end;

procedure TCCoBitSet.bit_xor(const COM_param0: ICoBitSet);
begin
  DefaultInterface.bit_xor(COM_param0);
end;

function TCCoBitSet.intersects(const COM_param0: ICoBitSet): WordBool;
begin
  Result := DefaultInterface.intersects(COM_param0);
end;

function TCCoBitSet.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoBitSetProperties.Create(AServer: TCCoBitSet);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoBitSetProperties.GetDefaultInterface: ICoBitSet;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoBoardTemperature.Create: ICoBoardTemperature;
begin
  Result := CreateComObject(CLASS_CCoBoardTemperature) as ICoBoardTemperature;
end;

class function CoCCoBoardTemperature.CreateRemote(const MachineName: string): ICoBoardTemperature;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoBoardTemperature) as ICoBoardTemperature;
end;

procedure TCCoBoardTemperature.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E5D0929E-9979-5521-813D-C857EF032778}';
    IntfIID:   '{DD959286-7309-5977-91D7-AC2586B3381C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoBoardTemperature.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoBoardTemperature;
  end;
end;

procedure TCCoBoardTemperature.ConnectTo(svrIntf: ICoBoardTemperature);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoBoardTemperature.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoBoardTemperature.GetDefaultInterface: ICoBoardTemperature;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoBoardTemperature.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoBoardTemperatureProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoBoardTemperature.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoBoardTemperature.GetServerProperties: TCCoBoardTemperatureProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoBoardTemperature.CreateBoardTemperature;
begin
  DefaultInterface.CreateBoardTemperature;
end;

function TCCoBoardTemperature.getBoardTemperatureCelsius: Double;
begin
  Result := DefaultInterface.getBoardTemperatureCelsius;
end;

function TCCoBoardTemperature.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoBoardTemperatureProperties.Create(AServer: TCCoBoardTemperature);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoBoardTemperatureProperties.GetDefaultInterface: ICoBoardTemperature;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoBoardTemperatureGUIProvider.Create: ICoBoardTemperatureGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoBoardTemperatureGUIProvider) as ICoBoardTemperatureGUIProvider;
end;

class function CoCCoBoardTemperatureGUIProvider.CreateRemote(const MachineName: string): ICoBoardTemperatureGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoBoardTemperatureGUIProvider) as ICoBoardTemperatureGUIProvider;
end;

procedure TCCoBoardTemperatureGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{948DA2D3-5B39-5B04-9163-F7931604E75A}';
    IntfIID:   '{A418378A-3AE3-54B1-815A-642B1B01BB82}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoBoardTemperatureGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoBoardTemperatureGUIProvider;
  end;
end;

procedure TCCoBoardTemperatureGUIProvider.ConnectTo(svrIntf: ICoBoardTemperatureGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoBoardTemperatureGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoBoardTemperatureGUIProvider.GetDefaultInterface: ICoBoardTemperatureGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoBoardTemperatureGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoBoardTemperatureGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoBoardTemperatureGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoBoardTemperatureGUIProvider.GetServerProperties: TCCoBoardTemperatureGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoBoardTemperatureGUIProvider.CreateBoardTemperatureGUIProvider;
begin
  DefaultInterface.CreateBoardTemperatureGUIProvider;
end;

function TCCoBoardTemperatureGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoBoardTemperatureGUIProviderProperties.Create(AServer: TCCoBoardTemperatureGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoBoardTemperatureGUIProviderProperties.GetDefaultInterface: ICoBoardTemperatureGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoBoardTemperatureImpl.Create: ICoBoardTemperatureImpl;
begin
  Result := CreateComObject(CLASS_CCoBoardTemperatureImpl) as ICoBoardTemperatureImpl;
end;

class function CoCCoBoardTemperatureImpl.CreateRemote(const MachineName: string): ICoBoardTemperatureImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoBoardTemperatureImpl) as ICoBoardTemperatureImpl;
end;

procedure TCCoBoardTemperatureImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9B48C33C-B9E1-56C8-908A-36A4347E9D10}';
    IntfIID:   '{641E5427-C36B-550C-9109-2DDEB0B6A582}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoBoardTemperatureImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoBoardTemperatureImpl;
  end;
end;

procedure TCCoBoardTemperatureImpl.ConnectTo(svrIntf: ICoBoardTemperatureImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoBoardTemperatureImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoBoardTemperatureImpl.GetDefaultInterface: ICoBoardTemperatureImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoBoardTemperatureImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoBoardTemperatureImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoBoardTemperatureImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoBoardTemperatureImpl.GetServerProperties: TCCoBoardTemperatureImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoBoardTemperatureImpl.CreateBoardTemperatureImplB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateBoardTemperatureImplB(COM_usbInt);
end;

function TCCoBoardTemperatureImpl.getBoardTemperatureCelsius: Double;
begin
  Result := DefaultInterface.getBoardTemperatureCelsius;
end;

function TCCoBoardTemperatureImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoBoardTemperatureImplProperties.Create(AServer: TCCoBoardTemperatureImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoBoardTemperatureImplProperties.GetDefaultInterface: ICoBoardTemperatureImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoBoardTemperatureImpl_QE65000.Create: ICoBoardTemperatureImpl_QE65000;
begin
  Result := CreateComObject(CLASS_CCoBoardTemperatureImpl_QE65000) as ICoBoardTemperatureImpl_QE65000;
end;

class function CoCCoBoardTemperatureImpl_QE65000.CreateRemote(const MachineName: string): ICoBoardTemperatureImpl_QE65000;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoBoardTemperatureImpl_QE65000) as ICoBoardTemperatureImpl_QE65000;
end;

procedure TCCoBoardTemperatureImpl_QE65000.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{B4628866-33BE-5C9A-91FF-C7EFC62654CC}';
    IntfIID:   '{B08493EE-C2BC-5E65-9148-5D1F06CB11FA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoBoardTemperatureImpl_QE65000.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoBoardTemperatureImpl_QE65000;
  end;
end;

procedure TCCoBoardTemperatureImpl_QE65000.ConnectTo(svrIntf: ICoBoardTemperatureImpl_QE65000);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoBoardTemperatureImpl_QE65000.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoBoardTemperatureImpl_QE65000.GetDefaultInterface: ICoBoardTemperatureImpl_QE65000;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoBoardTemperatureImpl_QE65000.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoBoardTemperatureImpl_QE65000Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoBoardTemperatureImpl_QE65000.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoBoardTemperatureImpl_QE65000.GetServerProperties: TCCoBoardTemperatureImpl_QE65000Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoBoardTemperatureImpl_QE65000.CreateBoardTemperatureImpl_QE65000B(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateBoardTemperatureImpl_QE65000B(COM_usbInt);
end;

function TCCoBoardTemperatureImpl_QE65000.getBoardTemperatureCelsius: Double;
begin
  Result := DefaultInterface.getBoardTemperatureCelsius;
end;

function TCCoBoardTemperatureImpl_QE65000.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoBoardTemperatureImpl_QE65000Properties.Create(AServer: TCCoBoardTemperatureImpl_QE65000);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoBoardTemperatureImpl_QE65000Properties.GetDefaultInterface: ICoBoardTemperatureImpl_QE65000;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoCCDShutter.Create: ICoCCDShutter;
begin
  Result := CreateComObject(CLASS_CCoCCDShutter) as ICoCCDShutter;
end;

class function CoCCoCCDShutter.CreateRemote(const MachineName: string): ICoCCDShutter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoCCDShutter) as ICoCCDShutter;
end;

procedure TCCoCCDShutter.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{45625EB8-0CA7-5CAC-80E7-F9F85D8F172D}';
    IntfIID:   '{07A56668-2445-5E20-90DA-901E06509327}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoCCDShutter.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoCCDShutter;
  end;
end;

procedure TCCoCCDShutter.ConnectTo(svrIntf: ICoCCDShutter);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoCCDShutter.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoCCDShutter.GetDefaultInterface: ICoCCDShutter;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoCCDShutter.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoCCDShutterProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoCCDShutter.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoCCDShutter.GetServerProperties: TCCoCCDShutterProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoCCDShutter.CreateCCDShutter;
begin
  DefaultInterface.CreateCCDShutter;
end;

function TCCoCCDShutter.getShutterState: Shortint;
begin
  Result := DefaultInterface.getShutterState;
end;

function TCCoCCDShutter.isShutterOpen: WordBool;
begin
  Result := DefaultInterface.isShutterOpen;
end;

procedure TCCoCCDShutter.openShutter;
begin
  DefaultInterface.openShutter;
end;

procedure TCCoCCDShutter.closeShutter;
begin
  DefaultInterface.closeShutter;
end;

function TCCoCCDShutter.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoCCDShutterProperties.Create(AServer: TCCoCCDShutter);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoCCDShutterProperties.GetDefaultInterface: ICoCCDShutter;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoCCDShutterGUIProvider.Create: ICoCCDShutterGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoCCDShutterGUIProvider) as ICoCCDShutterGUIProvider;
end;

class function CoCCoCCDShutterGUIProvider.CreateRemote(const MachineName: string): ICoCCDShutterGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoCCDShutterGUIProvider) as ICoCCDShutterGUIProvider;
end;

procedure TCCoCCDShutterGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{78BAC90A-7496-5FF5-81D9-037A5B5B1D06}';
    IntfIID:   '{C92B69BE-DFB9-56FE-902F-B628494EE3A5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoCCDShutterGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoCCDShutterGUIProvider;
  end;
end;

procedure TCCoCCDShutterGUIProvider.ConnectTo(svrIntf: ICoCCDShutterGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoCCDShutterGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoCCDShutterGUIProvider.GetDefaultInterface: ICoCCDShutterGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoCCDShutterGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoCCDShutterGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoCCDShutterGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoCCDShutterGUIProvider.GetServerProperties: TCCoCCDShutterGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoCCDShutterGUIProvider.CreateCCDShutterGUIProvider;
begin
  DefaultInterface.CreateCCDShutterGUIProvider;
end;

function TCCoCCDShutterGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoCCDShutterGUIProviderProperties.Create(AServer: TCCoCCDShutterGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoCCDShutterGUIProviderProperties.GetDefaultInterface: ICoCCDShutterGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoLaser.Create: ICoLaser;
begin
  Result := CreateComObject(CLASS_CCoLaser) as ICoLaser;
end;

class function CoCCoLaser.CreateRemote(const MachineName: string): ICoLaser;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoLaser) as ICoLaser;
end;

procedure TCCoLaser.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F1CB4CD9-9BCE-5C00-916D-4A20E21479D1}';
    IntfIID:   '{202F4240-B129-510D-8067-3A1C7F324ADE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoLaser.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoLaser;
  end;
end;

procedure TCCoLaser.ConnectTo(svrIntf: ICoLaser);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoLaser.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoLaser.GetDefaultInterface: ICoLaser;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoLaser.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoLaserProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoLaser.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoLaser.GetServerProperties: TCCoLaserProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoLaser.CreateLaserB(const COM_spectrometer: ICoSpectrometer; COM_laserIndex: Integer);
begin
  DefaultInterface.CreateLaserB(COM_spectrometer, COM_laserIndex);
end;

function TCCoLaser.getLaserIndex: Integer;
begin
  Result := DefaultInterface.getLaserIndex;
end;

function TCCoLaser.isRemoteEnabled: WordBool;
begin
  Result := DefaultInterface.isRemoteEnabled;
end;

procedure TCCoLaser.setRemoteEnabled(COM_remoteEnabled: WordBool);
begin
  DefaultInterface.setRemoteEnabled(COM_remoteEnabled);
end;

function TCCoLaser.getLaserWavelength: Single;
begin
  Result := DefaultInterface.getLaserWavelength;
end;

procedure TCCoLaser.setLaserWavelength(COM_laserWavelength: Single; COM_channelIndex: Integer);
begin
  DefaultInterface.setLaserWavelength(COM_laserWavelength, COM_channelIndex);
end;

procedure TCCoLaser.setLaserWavelengthForAllChannels(COM_laserWavelength: Single);
begin
  DefaultInterface.setLaserWavelengthForAllChannels(COM_laserWavelength);
end;

function TCCoLaser.isSafetyKeyOn: WordBool;
begin
  Result := DefaultInterface.isSafetyKeyOn;
end;

procedure TCCoLaser.setSafetyKeyOn(COM_safetyKeyOn: WordBool);
begin
  DefaultInterface.setSafetyKeyOn(COM_safetyKeyOn);
end;

function TCCoLaser.isLaserPresent: WordBool;
begin
  Result := DefaultInterface.isLaserPresent;
end;

procedure TCCoLaser.setLaserPresent(COM_laserPresent: WordBool);
begin
  DefaultInterface.setLaserPresent(COM_laserPresent);
end;

function TCCoLaser.isLaserFault: WordBool;
begin
  Result := DefaultInterface.isLaserFault;
end;

procedure TCCoLaser.setLaserFault(COM_laserFault: WordBool);
begin
  DefaultInterface.setLaserFault(COM_laserFault);
end;

function TCCoLaser.isLaserTemperatureLock: WordBool;
begin
  Result := DefaultInterface.isLaserTemperatureLock;
end;

procedure TCCoLaser.setLaserTemperatureLock(COM_laserTemperatureLock: WordBool);
begin
  DefaultInterface.setLaserTemperatureLock(COM_laserTemperatureLock);
end;

function TCCoLaser.isLaserPowered: WordBool;
begin
  Result := DefaultInterface.isLaserPowered;
end;

procedure TCCoLaser.setLaserPowered(COM_laserPowered: WordBool);
begin
  DefaultInterface.setLaserPowered(COM_laserPowered);
end;

function TCCoLaser.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoLaser.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoLaserProperties.Create(AServer: TCCoLaser);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoLaserProperties.GetDefaultInterface: ICoLaser;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMMSRamanSpectrometer.Create: ICoMMSRamanSpectrometer;
begin
  Result := CreateComObject(CLASS_CCoMMSRamanSpectrometer) as ICoMMSRamanSpectrometer;
end;

class function CoCCoMMSRamanSpectrometer.CreateRemote(const MachineName: string): ICoMMSRamanSpectrometer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMMSRamanSpectrometer) as ICoMMSRamanSpectrometer;
end;

procedure TCCoMMSRamanSpectrometer.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D355137B-D0A6-51D8-817D-F568B02D7C53}';
    IntfIID:   '{1F1D8139-64F2-5642-91D8-D4461AE0BE1A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMMSRamanSpectrometer.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMMSRamanSpectrometer;
  end;
end;

procedure TCCoMMSRamanSpectrometer.ConnectTo(svrIntf: ICoMMSRamanSpectrometer);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMMSRamanSpectrometer.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMMSRamanSpectrometer.GetDefaultInterface: ICoMMSRamanSpectrometer;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMMSRamanSpectrometer.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMMSRamanSpectrometerProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoMMSRamanSpectrometer.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMMSRamanSpectrometer.GetServerProperties: TCCoMMSRamanSpectrometerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMMSRamanSpectrometer.CreateMMSRamanSpectrometer;
begin
  DefaultInterface.CreateMMSRamanSpectrometer;
end;

procedure TCCoMMSRamanSpectrometer.setEndpoints;
begin
  DefaultInterface.setEndpoints;
end;

function TCCoMMSRamanSpectrometer.getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getEndpoint(COM_endPoint);
end;

function TCCoMMSRamanSpectrometer.getLaser(COM_param0: Integer): ICoLaser;
begin
  Result := DefaultInterface.getLaser(COM_param0);
end;

function TCCoMMSRamanSpectrometer.process(COM_opCode: Shortint): OleVariant;
begin
  Result := DefaultInterface.process(COM_opCode);
end;

function TCCoMMSRamanSpectrometer.processB(COM_opCode: Shortint; COM_schemaOut: Shortint; 
                                           COM_schemaIn: Shortint): OleVariant;
begin
  Result := DefaultInterface.processB(COM_opCode, COM_schemaOut, COM_schemaIn);
end;

function TCCoMMSRamanSpectrometer.processC(COM_opCode: Shortint; COM_size: Integer): OleVariant;
begin
  Result := DefaultInterface.processC(COM_opCode, COM_size);
end;

function TCCoMMSRamanSpectrometer.processD(COM_opCode: Shortint; COM_size: Integer; 
                                           COM_schemaOut: Shortint; COM_schemaIn: Shortint): OleVariant;
begin
  Result := DefaultInterface.processD(COM_opCode, COM_size, COM_schemaOut, COM_schemaIn);
end;

function TCCoMMSRamanSpectrometer.processE(COM_opCode: Shortint; COM_size: Integer; 
                                           COM_data: OleVariant; COM_schemaOut: Shortint; 
                                           COM_schemaIn: Shortint): OleVariant;
begin
  Result := DefaultInterface.processE(COM_opCode, COM_size, COM_data, COM_schemaOut, COM_schemaIn);
end;

function TCCoMMSRamanSpectrometer.processF(COM_opCode: Shortint; COM_size: Integer; 
                                           COM_schemaOut: Shortint; COM_schemaIn: Shortint; 
                                           const COM_inEndPoint: ICoUSBEndpointDescriptor; 
                                           const COM_outEndPoint: ICoUSBEndpointDescriptor): OleVariant;
begin
  Result := DefaultInterface.processF(COM_opCode, COM_size, COM_schemaOut, COM_schemaIn, 
                                      COM_inEndPoint, COM_outEndPoint);
end;

function TCCoMMSRamanSpectrometer.trimTrailingNulls(const COM_toTrim: WideString): WideString;
begin
  Result := DefaultInterface.trimTrailingNulls(COM_toTrim);
end;

function TCCoMMSRamanSpectrometer.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMMSRamanSpectrometerProperties.Create(AServer: TCCoMMSRamanSpectrometer);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMMSRamanSpectrometerProperties.GetDefaultInterface: ICoMMSRamanSpectrometer;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoCCDShutterImpl.Create: ICoCCDShutterImpl;
begin
  Result := CreateComObject(CLASS_CCoCCDShutterImpl) as ICoCCDShutterImpl;
end;

class function CoCCoCCDShutterImpl.CreateRemote(const MachineName: string): ICoCCDShutterImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoCCDShutterImpl) as ICoCCDShutterImpl;
end;

procedure TCCoCCDShutterImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{504010CA-528D-5F02-8196-002401550C5A}';
    IntfIID:   '{DC4432F7-EDE7-5E4D-9017-7B5C43B0C210}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoCCDShutterImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoCCDShutterImpl;
  end;
end;

procedure TCCoCCDShutterImpl.ConnectTo(svrIntf: ICoCCDShutterImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoCCDShutterImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoCCDShutterImpl.GetDefaultInterface: ICoCCDShutterImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoCCDShutterImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoCCDShutterImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoCCDShutterImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoCCDShutterImpl.GetServerProperties: TCCoCCDShutterImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoCCDShutterImpl.CreateCCDShutterImplB(const COM_usbInt: ICoUSBInterface; 
                                                   const COM_spec: ICoMMSRamanSpectrometer);
begin
  DefaultInterface.CreateCCDShutterImplB(COM_usbInt, COM_spec);
end;

function TCCoCCDShutterImpl.getShutterState: Shortint;
begin
  Result := DefaultInterface.getShutterState;
end;

function TCCoCCDShutterImpl.isShutterOpen: WordBool;
begin
  Result := DefaultInterface.isShutterOpen;
end;

procedure TCCoCCDShutterImpl.openShutter;
begin
  DefaultInterface.openShutter;
end;

procedure TCCoCCDShutterImpl.closeShutter;
begin
  DefaultInterface.closeShutter;
end;

function TCCoCCDShutterImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoCCDShutterImplProperties.Create(AServer: TCCoCCDShutterImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoCCDShutterImplProperties.GetDefaultInterface: ICoCCDShutterImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoCCDTemperature.Create: ICoCCDTemperature;
begin
  Result := CreateComObject(CLASS_CCoCCDTemperature) as ICoCCDTemperature;
end;

class function CoCCoCCDTemperature.CreateRemote(const MachineName: string): ICoCCDTemperature;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoCCDTemperature) as ICoCCDTemperature;
end;

procedure TCCoCCDTemperature.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{51C622A4-7153-5A10-8064-B9D3C67E6FD3}';
    IntfIID:   '{7B8CBEE1-51BB-5E93-914B-92286A4B6556}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoCCDTemperature.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoCCDTemperature;
  end;
end;

procedure TCCoCCDTemperature.ConnectTo(svrIntf: ICoCCDTemperature);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoCCDTemperature.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoCCDTemperature.GetDefaultInterface: ICoCCDTemperature;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoCCDTemperature.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoCCDTemperatureProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoCCDTemperature.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoCCDTemperature.GetServerProperties: TCCoCCDTemperatureProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoCCDTemperature.CreateCCDTemperature;
begin
  DefaultInterface.CreateCCDTemperature;
end;

procedure TCCoCCDTemperature.getCCDTemperatureInfo;
begin
  DefaultInterface.getCCDTemperatureInfo;
end;

procedure TCCoCCDTemperature.setCCDTemperatureInfo(COM_param0: WordBool; COM_param1: Single);
begin
  DefaultInterface.setCCDTemperatureInfo(COM_param0, COM_param1);
end;

function TCCoCCDTemperature.isTemperatureRegulation: WordBool;
begin
  Result := DefaultInterface.isTemperatureRegulation;
end;

procedure TCCoCCDTemperature.setTemperatureRegulation(COM_param0: WordBool);
begin
  DefaultInterface.setTemperatureRegulation(COM_param0);
end;

function TCCoCCDTemperature.getCCDSetpoint: Single;
begin
  Result := DefaultInterface.getCCDSetpoint;
end;

procedure TCCoCCDTemperature.setCCDSetpoint(COM_param0: Single);
begin
  DefaultInterface.setCCDSetpoint(COM_param0);
end;

function TCCoCCDTemperature.getMinimumCCDSetpoint: Integer;
begin
  Result := DefaultInterface.getMinimumCCDSetpoint;
end;

procedure TCCoCCDTemperature.setMinimumCCDSetpoint(COM_param0: Integer);
begin
  DefaultInterface.setMinimumCCDSetpoint(COM_param0);
end;

function TCCoCCDTemperature.getMaximumCCDSetpoint: Integer;
begin
  Result := DefaultInterface.getMaximumCCDSetpoint;
end;

procedure TCCoCCDTemperature.setMaximumCCDSetpoint(COM_param0: Integer);
begin
  DefaultInterface.setMaximumCCDSetpoint(COM_param0);
end;

function TCCoCCDTemperature.getThermistor: Single;
begin
  Result := DefaultInterface.getThermistor;
end;

function TCCoCCDTemperature.isThermFault: WordBool;
begin
  Result := DefaultInterface.isThermFault;
end;

function TCCoCCDTemperature.isTempLock: WordBool;
begin
  Result := DefaultInterface.isTempLock;
end;

function TCCoCCDTemperature.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoCCDTemperatureProperties.Create(AServer: TCCoCCDTemperature);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoCCDTemperatureProperties.GetDefaultInterface: ICoCCDTemperature;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoCCDTemperatureGUIProvider.Create: ICoCCDTemperatureGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoCCDTemperatureGUIProvider) as ICoCCDTemperatureGUIProvider;
end;

class function CoCCoCCDTemperatureGUIProvider.CreateRemote(const MachineName: string): ICoCCDTemperatureGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoCCDTemperatureGUIProvider) as ICoCCDTemperatureGUIProvider;
end;

procedure TCCoCCDTemperatureGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E822C1EF-C8E6-572F-8102-8927DE7F9C0E}';
    IntfIID:   '{F392E565-6183-51C1-8007-BF59B170DD31}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoCCDTemperatureGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoCCDTemperatureGUIProvider;
  end;
end;

procedure TCCoCCDTemperatureGUIProvider.ConnectTo(svrIntf: ICoCCDTemperatureGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoCCDTemperatureGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoCCDTemperatureGUIProvider.GetDefaultInterface: ICoCCDTemperatureGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoCCDTemperatureGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoCCDTemperatureGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoCCDTemperatureGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoCCDTemperatureGUIProvider.GetServerProperties: TCCoCCDTemperatureGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoCCDTemperatureGUIProvider.CreateCCDTemperatureGUIProvider;
begin
  DefaultInterface.CreateCCDTemperatureGUIProvider;
end;

function TCCoCCDTemperatureGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoCCDTemperatureGUIProviderProperties.Create(AServer: TCCoCCDTemperatureGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoCCDTemperatureGUIProviderProperties.GetDefaultInterface: ICoCCDTemperatureGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoCCDTemperatureImpl.Create: ICoCCDTemperatureImpl;
begin
  Result := CreateComObject(CLASS_CCoCCDTemperatureImpl) as ICoCCDTemperatureImpl;
end;

class function CoCCoCCDTemperatureImpl.CreateRemote(const MachineName: string): ICoCCDTemperatureImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoCCDTemperatureImpl) as ICoCCDTemperatureImpl;
end;

procedure TCCoCCDTemperatureImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{AC419DE4-6E0C-5ED7-813A-9AEFA3EEBEC0}';
    IntfIID:   '{494B83E2-E788-5D82-905B-2ABE692E714B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoCCDTemperatureImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoCCDTemperatureImpl;
  end;
end;

procedure TCCoCCDTemperatureImpl.ConnectTo(svrIntf: ICoCCDTemperatureImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoCCDTemperatureImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoCCDTemperatureImpl.GetDefaultInterface: ICoCCDTemperatureImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoCCDTemperatureImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoCCDTemperatureImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoCCDTemperatureImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoCCDTemperatureImpl.GetServerProperties: TCCoCCDTemperatureImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoCCDTemperatureImpl.CreateCCDTemperatureImplB(const COM_usbInt: ICoUSBInterface; 
                                                           const COM_spec: ICoMMSRamanSpectrometer);
begin
  DefaultInterface.CreateCCDTemperatureImplB(COM_usbInt, COM_spec);
end;

procedure TCCoCCDTemperatureImpl.getCCDTemperatureInfo;
begin
  DefaultInterface.getCCDTemperatureInfo;
end;

procedure TCCoCCDTemperatureImpl.setCCDTemperatureInfo(COM_regulation: WordBool; 
                                                       COM_setpoint: Single);
begin
  DefaultInterface.setCCDTemperatureInfo(COM_regulation, COM_setpoint);
end;

procedure TCCoCCDTemperatureImpl.setTemperatureRegulation(COM_regulation: WordBool);
begin
  DefaultInterface.setTemperatureRegulation(COM_regulation);
end;

function TCCoCCDTemperatureImpl.isTemperatureRegulation: WordBool;
begin
  Result := DefaultInterface.isTemperatureRegulation;
end;

function TCCoCCDTemperatureImpl.getCCDSetpoint: Single;
begin
  Result := DefaultInterface.getCCDSetpoint;
end;

procedure TCCoCCDTemperatureImpl.setCCDSetpoint(COM_setpoint: Single);
begin
  DefaultInterface.setCCDSetpoint(COM_setpoint);
end;

function TCCoCCDTemperatureImpl.getMinimumCCDSetpoint: Integer;
begin
  Result := DefaultInterface.getMinimumCCDSetpoint;
end;

procedure TCCoCCDTemperatureImpl.setMinimumCCDSetpoint(COM_min: Integer);
begin
  DefaultInterface.setMinimumCCDSetpoint(COM_min);
end;

function TCCoCCDTemperatureImpl.getMaximumCCDSetpoint: Integer;
begin
  Result := DefaultInterface.getMaximumCCDSetpoint;
end;

procedure TCCoCCDTemperatureImpl.setMaximumCCDSetpoint(COM_max: Integer);
begin
  DefaultInterface.setMaximumCCDSetpoint(COM_max);
end;

function TCCoCCDTemperatureImpl.getThermistor: Single;
begin
  Result := DefaultInterface.getThermistor;
end;

function TCCoCCDTemperatureImpl.isThermFault: WordBool;
begin
  Result := DefaultInterface.isThermFault;
end;

function TCCoCCDTemperatureImpl.isTempLock: WordBool;
begin
  Result := DefaultInterface.isTempLock;
end;

function TCCoCCDTemperatureImpl.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoCCDTemperatureImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoCCDTemperatureImplProperties.Create(AServer: TCCoCCDTemperatureImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoCCDTemperatureImplProperties.GetDefaultInterface: ICoCCDTemperatureImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMMSRamanCalibration.Create: ICoMMSRamanCalibration;
begin
  Result := CreateComObject(CLASS_CCoMMSRamanCalibration) as ICoMMSRamanCalibration;
end;

class function CoCCoMMSRamanCalibration.CreateRemote(const MachineName: string): ICoMMSRamanCalibration;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMMSRamanCalibration) as ICoMMSRamanCalibration;
end;

procedure TCCoMMSRamanCalibration.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{13BB1E51-6F31-5354-909A-3297637DEC52}';
    IntfIID:   '{2DD42B62-8467-5C4C-8051-A8D756FD8D7D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMMSRamanCalibration.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMMSRamanCalibration;
  end;
end;

procedure TCCoMMSRamanCalibration.ConnectTo(svrIntf: ICoMMSRamanCalibration);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMMSRamanCalibration.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMMSRamanCalibration.GetDefaultInterface: ICoMMSRamanCalibration;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMMSRamanCalibration.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMMSRamanCalibrationProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoMMSRamanCalibration.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMMSRamanCalibration.GetServerProperties: TCCoMMSRamanCalibrationProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMMSRamanCalibration.CreateMMSRamanCalibration;
begin
  DefaultInterface.CreateMMSRamanCalibration;
end;

procedure TCCoMMSRamanCalibration.CreateMMSRamanCalibrationB(const COM_calibration: ICoMMSRamanCalibration);
begin
  DefaultInterface.CreateMMSRamanCalibrationB(COM_calibration);
end;

function TCCoMMSRamanCalibration.getMaskRatio: Integer;
begin
  Result := DefaultInterface.getMaskRatio;
end;

procedure TCCoMMSRamanCalibration.setMaskRatio(COM_maskRatio: Integer);
begin
  DefaultInterface.setMaskRatio(COM_maskRatio);
end;

function TCCoMMSRamanCalibration.getMaskFlipped: Integer;
begin
  Result := DefaultInterface.getMaskFlipped;
end;

procedure TCCoMMSRamanCalibration.setMaskFlipped(COM_maskFlipped: Integer);
begin
  DefaultInterface.setMaskFlipped(COM_maskFlipped);
end;

function TCCoMMSRamanCalibration.getMaskOrientation: WideString;
begin
  Result := DefaultInterface.getMaskOrientation;
end;

function TCCoMMSRamanCalibration.isSpectraFlipped: WordBool;
begin
  Result := DefaultInterface.isSpectraFlipped;
end;

procedure TCCoMMSRamanCalibration.setSpectraFlipped(COM_spectraFlipped: WordBool);
begin
  DefaultInterface.setSpectraFlipped(COM_spectraFlipped);
end;

function TCCoMMSRamanCalibration.getMaskIndices: OleVariant;
begin
  Result := DefaultInterface.getMaskIndices;
end;

procedure TCCoMMSRamanCalibration.setMaskIndices(COM_maskIndices: OleVariant);
begin
  DefaultInterface.setMaskIndices(COM_maskIndices);
end;

function TCCoMMSRamanCalibration.getMaskXAlignmentAdjustments(COM_index: Integer): Integer;
begin
  Result := DefaultInterface.getMaskXAlignmentAdjustments(COM_index);
end;

function TCCoMMSRamanCalibration.getMaskXAlignmentAdjustmentsB: OleVariant;
begin
  Result := DefaultInterface.getMaskXAlignmentAdjustmentsB;
end;

procedure TCCoMMSRamanCalibration.setMaskXAlignmentAdjustments(COM_maskXAlignmentAdjustments: OleVariant);
begin
  DefaultInterface.setMaskXAlignmentAdjustments(COM_maskXAlignmentAdjustments);
end;

function TCCoMMSRamanCalibration.getMaskYAlignmentAdjustments: OleVariant;
begin
  Result := DefaultInterface.getMaskYAlignmentAdjustments;
end;

procedure TCCoMMSRamanCalibration.setMaskYAlignmentAdjustments(COM_maskYAlignmentAdjustments: OleVariant);
begin
  DefaultInterface.setMaskYAlignmentAdjustments(COM_maskYAlignmentAdjustments);
end;

function TCCoMMSRamanCalibration.getSourcePeaks: Integer;
begin
  Result := DefaultInterface.getSourcePeaks;
end;

procedure TCCoMMSRamanCalibration.setSourcePeaks(COM_sourcePeaks: Integer);
begin
  DefaultInterface.setSourcePeaks(COM_sourcePeaks);
end;

function TCCoMMSRamanCalibration.getShifts(COM_index: Integer): Integer;
begin
  Result := DefaultInterface.getShifts(COM_index);
end;

function TCCoMMSRamanCalibration.getShiftsB: OleVariant;
begin
  Result := DefaultInterface.getShiftsB;
end;

procedure TCCoMMSRamanCalibration.setShifts(COM_index: Integer; COM_shifts: Integer);
begin
  DefaultInterface.setShifts(COM_index, COM_shifts);
end;

procedure TCCoMMSRamanCalibration.setShiftsB(COM_shifts: OleVariant);
begin
  DefaultInterface.setShiftsB(COM_shifts);
end;

function TCCoMMSRamanCalibration.getPolynomialOrder: Integer;
begin
  Result := DefaultInterface.getPolynomialOrder;
end;

procedure TCCoMMSRamanCalibration.setPolynomialOrder(COM_polynomialOrder: Integer);
begin
  DefaultInterface.setPolynomialOrder(COM_polynomialOrder);
end;

function TCCoMMSRamanCalibration.getObservedPixels: OleVariant;
begin
  Result := DefaultInterface.getObservedPixels;
end;

procedure TCCoMMSRamanCalibration.setObservedPixels(COM_observedPixels: OleVariant);
begin
  DefaultInterface.setObservedPixels(COM_observedPixels);
end;

function TCCoMMSRamanCalibration.getActualWavelengths: OleVariant;
begin
  Result := DefaultInterface.getActualWavelengths;
end;

procedure TCCoMMSRamanCalibration.setActualWavelengths(COM_actualWavelengths: OleVariant);
begin
  DefaultInterface.setActualWavelengths(COM_actualWavelengths);
end;

function TCCoMMSRamanCalibration.getNumberOfDeadPixelColumnsLeft: Integer;
begin
  Result := DefaultInterface.getNumberOfDeadPixelColumnsLeft;
end;

procedure TCCoMMSRamanCalibration.setNumberOfDeadPixelColumnsLeft(COM_numberOfDeadPixelColumnsLeft: Integer);
begin
  DefaultInterface.setNumberOfDeadPixelColumnsLeft(COM_numberOfDeadPixelColumnsLeft);
end;

function TCCoMMSRamanCalibration.getNumberOfDeadPixelColumnsRight: Integer;
begin
  Result := DefaultInterface.getNumberOfDeadPixelColumnsRight;
end;

procedure TCCoMMSRamanCalibration.setNumberOfDeadPixelColumnsRight(COM_numberOfDeadPixelColumnsRight: Integer);
begin
  DefaultInterface.setNumberOfDeadPixelColumnsRight(COM_numberOfDeadPixelColumnsRight);
end;

function TCCoMMSRamanCalibration.getName: WideString;
begin
  Result := DefaultInterface.getName;
end;

procedure TCCoMMSRamanCalibration.setName(const COM_name: WideString);
begin
  DefaultInterface.setName(COM_name);
end;

function TCCoMMSRamanCalibration.getMask: WideString;
begin
  Result := DefaultInterface.getMask;
end;

procedure TCCoMMSRamanCalibration.setMask(const COM_mask: WideString);
begin
  DefaultInterface.setMask(COM_mask);
end;

function TCCoMMSRamanCalibration.getSpectralSource: WideString;
begin
  Result := DefaultInterface.getSpectralSource;
end;

procedure TCCoMMSRamanCalibration.setSpectralSource(const COM_spectralSource: WideString);
begin
  DefaultInterface.setSpectralSource(COM_spectralSource);
end;

function TCCoMMSRamanCalibration.getSerialNumber: WideString;
begin
  Result := DefaultInterface.getSerialNumber;
end;

procedure TCCoMMSRamanCalibration.setSerialNumber(const COM_serialNumber: WideString);
begin
  DefaultInterface.setSerialNumber(COM_serialNumber);
end;

function TCCoMMSRamanCalibration.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoMMSRamanCalibration.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMMSRamanCalibrationProperties.Create(AServer: TCCoMMSRamanCalibration);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMMSRamanCalibrationProperties.GetDefaultInterface: ICoMMSRamanCalibration;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoCalibration.Create: ICoCalibration;
begin
  Result := CreateComObject(CLASS_CCoCalibration) as ICoCalibration;
end;

class function CoCCoCalibration.CreateRemote(const MachineName: string): ICoCalibration;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoCalibration) as ICoCalibration;
end;

procedure TCCoCalibration.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9F4B2AB4-086C-5C11-90F2-61AC59F5FBD7}';
    IntfIID:   '{489FB3F4-7146-5768-90E4-B53E8B80C94C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoCalibration.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoCalibration;
  end;
end;

procedure TCCoCalibration.ConnectTo(svrIntf: ICoCalibration);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoCalibration.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoCalibration.GetDefaultInterface: ICoCalibration;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoCalibration.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoCalibrationProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoCalibration.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoCalibration.GetServerProperties: TCCoCalibrationProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoCalibration.CreateCalibration;
begin
  DefaultInterface.CreateCalibration;
end;

procedure TCCoCalibration.readCalibrationFromSpectrometer;
begin
  DefaultInterface.readCalibrationFromSpectrometer;
end;

procedure TCCoCalibration.writeCalibrationToSpectrometer(const COM_param0: ICoMMSRamanCalibration);
begin
  DefaultInterface.writeCalibrationToSpectrometer(COM_param0);
end;

function TCCoCalibration.getCalibration: ICoMMSRamanCalibration;
begin
  Result := DefaultInterface.getCalibration;
end;

function TCCoCalibration.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoCalibrationProperties.Create(AServer: TCCoCalibration);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoCalibrationProperties.GetDefaultInterface: ICoCalibration;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoCalibrationGUIProvider.Create: ICoCalibrationGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoCalibrationGUIProvider) as ICoCalibrationGUIProvider;
end;

class function CoCCoCalibrationGUIProvider.CreateRemote(const MachineName: string): ICoCalibrationGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoCalibrationGUIProvider) as ICoCalibrationGUIProvider;
end;

procedure TCCoCalibrationGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{113FBFA9-D11A-5F20-81F4-20277B8E5107}';
    IntfIID:   '{08E8D0BF-F3F4-5E16-80F5-53DF7788CDB3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoCalibrationGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoCalibrationGUIProvider;
  end;
end;

procedure TCCoCalibrationGUIProvider.ConnectTo(svrIntf: ICoCalibrationGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoCalibrationGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoCalibrationGUIProvider.GetDefaultInterface: ICoCalibrationGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoCalibrationGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoCalibrationGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoCalibrationGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoCalibrationGUIProvider.GetServerProperties: TCCoCalibrationGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoCalibrationGUIProvider.CreateCalibrationGUIProvider;
begin
  DefaultInterface.CreateCalibrationGUIProvider;
end;

function TCCoCalibrationGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoCalibrationGUIProviderProperties.Create(AServer: TCCoCalibrationGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoCalibrationGUIProviderProperties.GetDefaultInterface: ICoCalibrationGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoCalibrationImpl.Create: ICoCalibrationImpl;
begin
  Result := CreateComObject(CLASS_CCoCalibrationImpl) as ICoCalibrationImpl;
end;

class function CoCCoCalibrationImpl.CreateRemote(const MachineName: string): ICoCalibrationImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoCalibrationImpl) as ICoCalibrationImpl;
end;

procedure TCCoCalibrationImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A5E05852-98D4-50D4-8098-9F91A4160753}';
    IntfIID:   '{6F6733B1-2626-532D-80EC-FBD8941A76F8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoCalibrationImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoCalibrationImpl;
  end;
end;

procedure TCCoCalibrationImpl.ConnectTo(svrIntf: ICoCalibrationImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoCalibrationImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoCalibrationImpl.GetDefaultInterface: ICoCalibrationImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoCalibrationImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoCalibrationImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoCalibrationImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoCalibrationImpl.GetServerProperties: TCCoCalibrationImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoCalibrationImpl.CreateCalibrationImplB(const COM_usbInt: ICoUSBInterface; 
                                                     const COM_spec: ICoMMSRamanSpectrometer);
begin
  DefaultInterface.CreateCalibrationImplB(COM_usbInt, COM_spec);
end;

procedure TCCoCalibrationImpl.readCalibrationFromSpectrometer;
begin
  DefaultInterface.readCalibrationFromSpectrometer;
end;

procedure TCCoCalibrationImpl.writeCalibrationToSpectrometer(const COM_cal: ICoMMSRamanCalibration);
begin
  DefaultInterface.writeCalibrationToSpectrometer(COM_cal);
end;

function TCCoCalibrationImpl.getCalibration: ICoMMSRamanCalibration;
begin
  Result := DefaultInterface.getCalibration;
end;

function TCCoCalibrationImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoCalibrationImplProperties.Create(AServer: TCCoCalibrationImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoCalibrationImplProperties.GetDefaultInterface: ICoCalibrationImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoIterator.Create: ICoIterator;
begin
  Result := CreateComObject(CLASS_CCoIterator) as ICoIterator;
end;

class function CoCCoIterator.CreateRemote(const MachineName: string): ICoIterator;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoIterator) as ICoIterator;
end;

procedure TCCoIterator.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D42457DF-2B85-578B-80EB-E00954DDE89F}';
    IntfIID:   '{DA76826F-A81B-5020-90B5-4FAEE27D1E7F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoIterator.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoIterator;
  end;
end;

procedure TCCoIterator.ConnectTo(svrIntf: ICoIterator);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoIterator.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoIterator.GetDefaultInterface: ICoIterator;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoIterator.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoIteratorProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoIterator.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoIterator.GetServerProperties: TCCoIteratorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoIterator.CreateIterator;
begin
  DefaultInterface.CreateIterator;
end;

procedure TCCoIterator.Remove;
begin
  DefaultInterface.Remove;
end;

function TCCoIterator.hasNext: WordBool;
begin
  Result := DefaultInterface.hasNext;
end;

function TCCoIterator.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoIteratorProperties.Create(AServer: TCCoIterator);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoIteratorProperties.GetDefaultInterface: ICoIterator;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoCollection.Create: ICoCollection;
begin
  Result := CreateComObject(CLASS_CCoCollection) as ICoCollection;
end;

class function CoCCoCollection.CreateRemote(const MachineName: string): ICoCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoCollection) as ICoCollection;
end;

procedure TCCoCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D2E75287-BFB2-5044-81CF-2E1EAE8310A0}';
    IntfIID:   '{70804830-D735-5ACB-8021-AB2A6F407E38}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoCollection;
  end;
end;

procedure TCCoCollection.ConnectTo(svrIntf: ICoCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoCollection.GetDefaultInterface: ICoCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoCollectionProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoCollection.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoCollection.GetServerProperties: TCCoCollectionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoCollection.CreateCollection;
begin
  DefaultInterface.CreateCollection;
end;

function TCCoCollection.hashCode: Integer;
begin
  Result := DefaultInterface.hashCode;
end;

function TCCoCollection.size: Integer;
begin
  Result := DefaultInterface.size;
end;

procedure TCCoCollection.clear;
begin
  DefaultInterface.clear;
end;

function TCCoCollection.isEmpty: WordBool;
begin
  Result := DefaultInterface.isEmpty;
end;

function TCCoCollection.addAll(const COM_param0: ICoCollection): WordBool;
begin
  Result := DefaultInterface.addAll(COM_param0);
end;

function TCCoCollection.containsAll(const COM_param0: ICoCollection): WordBool;
begin
  Result := DefaultInterface.containsAll(COM_param0);
end;

function TCCoCollection.removeAll(const COM_param0: ICoCollection): WordBool;
begin
  Result := DefaultInterface.removeAll(COM_param0);
end;

function TCCoCollection.retainAll(const COM_param0: ICoCollection): WordBool;
begin
  Result := DefaultInterface.retainAll(COM_param0);
end;

function TCCoCollection.iterator: ICoIterator;
begin
  Result := DefaultInterface.iterator;
end;

function TCCoCollection.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoCollectionProperties.Create(AServer: TCCoCollection);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoCollectionProperties.GetDefaultInterface: ICoCollection;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoConfigureFromFile.Create: ICoConfigureFromFile;
begin
  Result := CreateComObject(CLASS_CCoConfigureFromFile) as ICoConfigureFromFile;
end;

class function CoCCoConfigureFromFile.CreateRemote(const MachineName: string): ICoConfigureFromFile;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoConfigureFromFile) as ICoConfigureFromFile;
end;

procedure TCCoConfigureFromFile.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{AAADCBD8-7146-59DA-81DD-9A39234013FB}';
    IntfIID:   '{9A0129B5-EC35-5C7D-81F9-37DFCF04CA58}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoConfigureFromFile.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoConfigureFromFile;
  end;
end;

procedure TCCoConfigureFromFile.ConnectTo(svrIntf: ICoConfigureFromFile);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoConfigureFromFile.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoConfigureFromFile.GetDefaultInterface: ICoConfigureFromFile;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoConfigureFromFile.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoConfigureFromFileProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoConfigureFromFile.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoConfigureFromFile.GetServerProperties: TCCoConfigureFromFileProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoConfigureFromFile.CreateConfigureFromFile;
begin
  DefaultInterface.CreateConfigureFromFile;
end;

function TCCoConfigureFromFile.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoConfigureFromFileProperties.Create(AServer: TCCoConfigureFromFile);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoConfigureFromFileProperties.GetDefaultInterface: ICoConfigureFromFile;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoContinuousStrobe.Create: ICoContinuousStrobe;
begin
  Result := CreateComObject(CLASS_CCoContinuousStrobe) as ICoContinuousStrobe;
end;

class function CoCCoContinuousStrobe.CreateRemote(const MachineName: string): ICoContinuousStrobe;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoContinuousStrobe) as ICoContinuousStrobe;
end;

procedure TCCoContinuousStrobe.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D13B2756-198A-5A92-8015-ADB1CD767C25}';
    IntfIID:   '{B3A27980-7F13-58B3-802F-2A794FF0F9EF}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoContinuousStrobe.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoContinuousStrobe;
  end;
end;

procedure TCCoContinuousStrobe.ConnectTo(svrIntf: ICoContinuousStrobe);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoContinuousStrobe.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoContinuousStrobe.GetDefaultInterface: ICoContinuousStrobe;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoContinuousStrobe.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoContinuousStrobeProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoContinuousStrobe.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoContinuousStrobe.GetServerProperties: TCCoContinuousStrobeProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoContinuousStrobe.CreateContinuousStrobe;
begin
  DefaultInterface.CreateContinuousStrobe;
end;

procedure TCCoContinuousStrobe.setContinuousStrobeDelay(COM_param0: Integer);
begin
  DefaultInterface.setContinuousStrobeDelay(COM_param0);
end;

function TCCoContinuousStrobe.getContinuousStrobeDelayMinimum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMinimum;
end;

function TCCoContinuousStrobe.getContinuousStrobeDelayMaximum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMaximum;
end;

function TCCoContinuousStrobe.getContinuousStrobeDelayIncrement(COM_param0: Integer): Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayIncrement(COM_param0);
end;

function TCCoContinuousStrobe.continuousStrobeCountsToMicros(COM_param0: Integer): Double;
begin
  Result := DefaultInterface.continuousStrobeCountsToMicros(COM_param0);
end;

function TCCoContinuousStrobe.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoContinuousStrobeProperties.Create(AServer: TCCoContinuousStrobe);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoContinuousStrobeProperties.GetDefaultInterface: ICoContinuousStrobe;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoContinuousStrobeGUIProvider.Create: ICoContinuousStrobeGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoContinuousStrobeGUIProvider) as ICoContinuousStrobeGUIProvider;
end;

class function CoCCoContinuousStrobeGUIProvider.CreateRemote(const MachineName: string): ICoContinuousStrobeGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoContinuousStrobeGUIProvider) as ICoContinuousStrobeGUIProvider;
end;

procedure TCCoContinuousStrobeGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{383A3801-163C-5F96-812E-9B078EADCAF6}';
    IntfIID:   '{3E254DFD-22B0-5DFE-909D-C9A64D231644}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoContinuousStrobeGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoContinuousStrobeGUIProvider;
  end;
end;

procedure TCCoContinuousStrobeGUIProvider.ConnectTo(svrIntf: ICoContinuousStrobeGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoContinuousStrobeGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoContinuousStrobeGUIProvider.GetDefaultInterface: ICoContinuousStrobeGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoContinuousStrobeGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoContinuousStrobeGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoContinuousStrobeGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoContinuousStrobeGUIProvider.GetServerProperties: TCCoContinuousStrobeGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoContinuousStrobeGUIProvider.CreateContinuousStrobeGUIProvider;
begin
  DefaultInterface.CreateContinuousStrobeGUIProvider;
end;

function TCCoContinuousStrobeGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoContinuousStrobeGUIProviderProperties.Create(AServer: TCCoContinuousStrobeGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoContinuousStrobeGUIProviderProperties.GetDefaultInterface: ICoContinuousStrobeGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoContinuousStrobeImpl.Create: ICoContinuousStrobeImpl;
begin
  Result := CreateComObject(CLASS_CCoContinuousStrobeImpl) as ICoContinuousStrobeImpl;
end;

class function CoCCoContinuousStrobeImpl.CreateRemote(const MachineName: string): ICoContinuousStrobeImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoContinuousStrobeImpl) as ICoContinuousStrobeImpl;
end;

procedure TCCoContinuousStrobeImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{924C5FEC-C159-536F-80F5-3EAA4FDE5FB9}';
    IntfIID:   '{93B9A7FE-761D-5249-8132-2AAD007206B7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoContinuousStrobeImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoContinuousStrobeImpl;
  end;
end;

procedure TCCoContinuousStrobeImpl.ConnectTo(svrIntf: ICoContinuousStrobeImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoContinuousStrobeImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoContinuousStrobeImpl.GetDefaultInterface: ICoContinuousStrobeImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoContinuousStrobeImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoContinuousStrobeImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoContinuousStrobeImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoContinuousStrobeImpl.GetServerProperties: TCCoContinuousStrobeImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoContinuousStrobeImpl.CreateContinuousStrobeImplB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateContinuousStrobeImplB(COM_usbInt);
end;

procedure TCCoContinuousStrobeImpl.setContinuousStrobeDelay(COM_param0: Integer);
begin
  DefaultInterface.setContinuousStrobeDelay(COM_param0);
end;

function TCCoContinuousStrobeImpl.getContinuousStrobeDelayMinimum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMinimum;
end;

function TCCoContinuousStrobeImpl.getContinuousStrobeDelayMaximum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMaximum;
end;

function TCCoContinuousStrobeImpl.getContinuousStrobeDelayIncrement(COM_param0: Integer): Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayIncrement(COM_param0);
end;

function TCCoContinuousStrobeImpl.continuousStrobeCountsToMicros(COM_param0: Integer): Double;
begin
  Result := DefaultInterface.continuousStrobeCountsToMicros(COM_param0);
end;

function TCCoContinuousStrobeImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoContinuousStrobeImplProperties.Create(AServer: TCCoContinuousStrobeImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoContinuousStrobeImplProperties.GetDefaultInterface: ICoContinuousStrobeImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoContinuousStrobeImpl_ADC1000.Create: ICoContinuousStrobeImpl_ADC1000;
begin
  Result := CreateComObject(CLASS_CCoContinuousStrobeImpl_ADC1000) as ICoContinuousStrobeImpl_ADC1000;
end;

class function CoCCoContinuousStrobeImpl_ADC1000.CreateRemote(const MachineName: string): ICoContinuousStrobeImpl_ADC1000;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoContinuousStrobeImpl_ADC1000) as ICoContinuousStrobeImpl_ADC1000;
end;

procedure TCCoContinuousStrobeImpl_ADC1000.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{971A3DB8-AE2E-5054-9088-926D216B7A79}';
    IntfIID:   '{306AFACC-95BD-5DE6-90DB-95E44F668B1D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoContinuousStrobeImpl_ADC1000.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoContinuousStrobeImpl_ADC1000;
  end;
end;

procedure TCCoContinuousStrobeImpl_ADC1000.ConnectTo(svrIntf: ICoContinuousStrobeImpl_ADC1000);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoContinuousStrobeImpl_ADC1000.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoContinuousStrobeImpl_ADC1000.GetDefaultInterface: ICoContinuousStrobeImpl_ADC1000;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoContinuousStrobeImpl_ADC1000.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoContinuousStrobeImpl_ADC1000Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoContinuousStrobeImpl_ADC1000.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoContinuousStrobeImpl_ADC1000.GetServerProperties: TCCoContinuousStrobeImpl_ADC1000Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoContinuousStrobeImpl_ADC1000.CreateContinuousStrobeImpl_ADC1000B(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateContinuousStrobeImpl_ADC1000B(COM_usbInt);
end;

function TCCoContinuousStrobeImpl_ADC1000.continuousStrobeCountsToMicros(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.continuousStrobeCountsToMicros(COM_counts);
end;

procedure TCCoContinuousStrobeImpl_ADC1000.setContinuousStrobeDelay(COM_delayMicros: Integer);
begin
  DefaultInterface.setContinuousStrobeDelay(COM_delayMicros);
end;

function TCCoContinuousStrobeImpl_ADC1000.getContinuousStrobeDelayMinimum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMinimum;
end;

function TCCoContinuousStrobeImpl_ADC1000.getContinuousStrobeDelayMaximum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMaximum;
end;

function TCCoContinuousStrobeImpl_ADC1000.getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayIncrement(COM_magnitude);
end;

function TCCoContinuousStrobeImpl_ADC1000.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoContinuousStrobeImpl_ADC1000Properties.Create(AServer: TCCoContinuousStrobeImpl_ADC1000);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoContinuousStrobeImpl_ADC1000Properties.GetDefaultInterface: ICoContinuousStrobeImpl_ADC1000;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoContinuousStrobeImpl_FPGA.Create: ICoContinuousStrobeImpl_FPGA;
begin
  Result := CreateComObject(CLASS_CCoContinuousStrobeImpl_FPGA) as ICoContinuousStrobeImpl_FPGA;
end;

class function CoCCoContinuousStrobeImpl_FPGA.CreateRemote(const MachineName: string): ICoContinuousStrobeImpl_FPGA;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoContinuousStrobeImpl_FPGA) as ICoContinuousStrobeImpl_FPGA;
end;

procedure TCCoContinuousStrobeImpl_FPGA.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{60E9E1B9-0BFA-5BC4-906A-2048617C2A47}';
    IntfIID:   '{83DD1BE2-9840-59B4-901E-30FBD9CAB7E9}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoContinuousStrobeImpl_FPGA.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoContinuousStrobeImpl_FPGA;
  end;
end;

procedure TCCoContinuousStrobeImpl_FPGA.ConnectTo(svrIntf: ICoContinuousStrobeImpl_FPGA);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoContinuousStrobeImpl_FPGA.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoContinuousStrobeImpl_FPGA.GetDefaultInterface: ICoContinuousStrobeImpl_FPGA;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoContinuousStrobeImpl_FPGA.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoContinuousStrobeImpl_FPGAProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoContinuousStrobeImpl_FPGA.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoContinuousStrobeImpl_FPGA.GetServerProperties: TCCoContinuousStrobeImpl_FPGAProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoContinuousStrobeImpl_FPGA.CreateContinuousStrobeImpl_FPGAB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateContinuousStrobeImpl_FPGAB(COM_usbInt);
end;

function TCCoContinuousStrobeImpl_FPGA.getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayIncrement(COM_magnitude);
end;

function TCCoContinuousStrobeImpl_FPGA.getContinuousStrobeDelayMaximum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMaximum;
end;

function TCCoContinuousStrobeImpl_FPGA.getContinuousStrobeDelayMinimum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMinimum;
end;

procedure TCCoContinuousStrobeImpl_FPGA.setContinuousStrobeDelay(COM_delayMicros: Integer);
begin
  DefaultInterface.setContinuousStrobeDelay(COM_delayMicros);
end;

function TCCoContinuousStrobeImpl_FPGA.continuousStrobeCountsToMicros(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.continuousStrobeCountsToMicros(COM_counts);
end;

procedure TCCoContinuousStrobeImpl_FPGA.masterClockChanged(COM_newValue: Integer);
begin
  DefaultInterface.masterClockChanged(COM_newValue);
end;

function TCCoContinuousStrobeImpl_FPGA.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoContinuousStrobeImpl_FPGAProperties.Create(AServer: TCCoContinuousStrobeImpl_FPGA);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoContinuousStrobeImpl_FPGAProperties.GetDefaultInterface: ICoContinuousStrobeImpl_FPGA;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoCurrentOut.Create: ICoCurrentOut;
begin
  Result := CreateComObject(CLASS_CCoCurrentOut) as ICoCurrentOut;
end;

class function CoCCoCurrentOut.CreateRemote(const MachineName: string): ICoCurrentOut;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoCurrentOut) as ICoCurrentOut;
end;

procedure TCCoCurrentOut.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{66565671-CB5B-51AC-8144-0BF514A8DD59}';
    IntfIID:   '{FED40AF7-3B0B-5B4D-80AA-42AC5A45AF28}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoCurrentOut.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoCurrentOut;
  end;
end;

procedure TCCoCurrentOut.ConnectTo(svrIntf: ICoCurrentOut);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoCurrentOut.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoCurrentOut.GetDefaultInterface: ICoCurrentOut;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoCurrentOut.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoCurrentOutProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoCurrentOut.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoCurrentOut.GetServerProperties: TCCoCurrentOutProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoCurrentOut.CreateCurrentOut;
begin
  DefaultInterface.CreateCurrentOut;
end;

procedure TCCoCurrentOut.setDACCounts(COM_param0: Integer);
begin
  DefaultInterface.setDACCounts(COM_param0);
end;

function TCCoCurrentOut.getDACMinimum: Integer;
begin
  Result := DefaultInterface.getDACMinimum;
end;

function TCCoCurrentOut.getDACMaximum: Integer;
begin
  Result := DefaultInterface.getDACMaximum;
end;

function TCCoCurrentOut.getDACIncrement: Integer;
begin
  Result := DefaultInterface.getDACIncrement;
end;

function TCCoCurrentOut.analogOutCountsToMilliamps(COM_param0: Integer): Double;
begin
  Result := DefaultInterface.analogOutCountsToMilliamps(COM_param0);
end;

function TCCoCurrentOut.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoCurrentOutProperties.Create(AServer: TCCoCurrentOut);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoCurrentOutProperties.GetDefaultInterface: ICoCurrentOut;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoCurrentOutGUIProvider.Create: ICoCurrentOutGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoCurrentOutGUIProvider) as ICoCurrentOutGUIProvider;
end;

class function CoCCoCurrentOutGUIProvider.CreateRemote(const MachineName: string): ICoCurrentOutGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoCurrentOutGUIProvider) as ICoCurrentOutGUIProvider;
end;

procedure TCCoCurrentOutGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{AF9A6CC5-1101-5BD0-800E-7DC26354781B}';
    IntfIID:   '{82AEFB1B-2F62-56ED-90FE-E06BA6C832BD}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoCurrentOutGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoCurrentOutGUIProvider;
  end;
end;

procedure TCCoCurrentOutGUIProvider.ConnectTo(svrIntf: ICoCurrentOutGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoCurrentOutGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoCurrentOutGUIProvider.GetDefaultInterface: ICoCurrentOutGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoCurrentOutGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoCurrentOutGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoCurrentOutGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoCurrentOutGUIProvider.GetServerProperties: TCCoCurrentOutGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoCurrentOutGUIProvider.CreateCurrentOutGUIProvider;
begin
  DefaultInterface.CreateCurrentOutGUIProvider;
end;

function TCCoCurrentOutGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoCurrentOutGUIProviderProperties.Create(AServer: TCCoCurrentOutGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoCurrentOutGUIProviderProperties.GetDefaultInterface: ICoCurrentOutGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoCurrentOutImpl_LS450.Create: ICoCurrentOutImpl_LS450;
begin
  Result := CreateComObject(CLASS_CCoCurrentOutImpl_LS450) as ICoCurrentOutImpl_LS450;
end;

class function CoCCoCurrentOutImpl_LS450.CreateRemote(const MachineName: string): ICoCurrentOutImpl_LS450;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoCurrentOutImpl_LS450) as ICoCurrentOutImpl_LS450;
end;

procedure TCCoCurrentOutImpl_LS450.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{790A9A3F-FDF5-5C1C-909B-CF24442BA143}';
    IntfIID:   '{893E24F7-6FA0-5F2D-8004-CA101BE2A2AE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoCurrentOutImpl_LS450.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoCurrentOutImpl_LS450;
  end;
end;

procedure TCCoCurrentOutImpl_LS450.ConnectTo(svrIntf: ICoCurrentOutImpl_LS450);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoCurrentOutImpl_LS450.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoCurrentOutImpl_LS450.GetDefaultInterface: ICoCurrentOutImpl_LS450;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoCurrentOutImpl_LS450.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoCurrentOutImpl_LS450Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoCurrentOutImpl_LS450.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoCurrentOutImpl_LS450.GetServerProperties: TCCoCurrentOutImpl_LS450Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoCurrentOutImpl_LS450.CreateCurrentOutImpl_LS450B(const COM_usbInt: ICoUSBInterface; 
                                                               const COM_endPoint: ICoUSBEndpointDescriptor);
begin
  DefaultInterface.CreateCurrentOutImpl_LS450B(COM_usbInt, COM_endPoint);
end;

function TCCoCurrentOutImpl_LS450.analogOutCountsToMilliamps(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.analogOutCountsToMilliamps(COM_counts);
end;

function TCCoCurrentOutImpl_LS450.getDACIncrement: Integer;
begin
  Result := DefaultInterface.getDACIncrement;
end;

function TCCoCurrentOutImpl_LS450.getDACMaximum: Integer;
begin
  Result := DefaultInterface.getDACMaximum;
end;

function TCCoCurrentOutImpl_LS450.getDACMinimum: Integer;
begin
  Result := DefaultInterface.getDACMinimum;
end;

procedure TCCoCurrentOutImpl_LS450.setDACCounts(COM_counts: Integer);
begin
  DefaultInterface.setDACCounts(COM_counts);
end;

function TCCoCurrentOutImpl_LS450.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoCurrentOutImpl_LS450Properties.Create(AServer: TCCoCurrentOutImpl_LS450);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoCurrentOutImpl_LS450Properties.GetDefaultInterface: ICoCurrentOutImpl_LS450;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoDeepWellErrorProvider.Create: ICoDeepWellErrorProvider;
begin
  Result := CreateComObject(CLASS_CCoDeepWellErrorProvider) as ICoDeepWellErrorProvider;
end;

class function CoCCoDeepWellErrorProvider.CreateRemote(const MachineName: string): ICoDeepWellErrorProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoDeepWellErrorProvider) as ICoDeepWellErrorProvider;
end;

procedure TCCoDeepWellErrorProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DC50D129-FAEA-5E2E-903D-489E2D49AF8E}';
    IntfIID:   '{7A9BD927-DDD3-5294-80C2-F0E22862B8EC}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoDeepWellErrorProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoDeepWellErrorProvider;
  end;
end;

procedure TCCoDeepWellErrorProvider.ConnectTo(svrIntf: ICoDeepWellErrorProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoDeepWellErrorProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoDeepWellErrorProvider.GetDefaultInterface: ICoDeepWellErrorProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoDeepWellErrorProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoDeepWellErrorProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoDeepWellErrorProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoDeepWellErrorProvider.GetServerProperties: TCCoDeepWellErrorProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoDeepWellErrorProvider.CreateDeepWellErrorProvider;
begin
  DefaultInterface.CreateDeepWellErrorProvider;
end;

function TCCoDeepWellErrorProvider.getDeepWellMinimumIntegrationTime: Integer;
begin
  Result := DefaultInterface.getDeepWellMinimumIntegrationTime;
end;

procedure TCCoDeepWellErrorProvider.addAcquisitionPropertiesListener(const COM_param0: ICoAcquisitionPropertiesListener);
begin
  DefaultInterface.addAcquisitionPropertiesListener(COM_param0);
end;

procedure TCCoDeepWellErrorProvider.removeAcquisitionPropertiesListener(const COM_param0: ICoAcquisitionPropertiesListener);
begin
  DefaultInterface.removeAcquisitionPropertiesListener(COM_param0);
end;

function TCCoDeepWellErrorProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoDeepWellErrorProviderProperties.Create(AServer: TCCoDeepWellErrorProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoDeepWellErrorProviderProperties.GetDefaultInterface: ICoDeepWellErrorProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoDeepWellErrorProviderImpl.Create: ICoDeepWellErrorProviderImpl;
begin
  Result := CreateComObject(CLASS_CCoDeepWellErrorProviderImpl) as ICoDeepWellErrorProviderImpl;
end;

class function CoCCoDeepWellErrorProviderImpl.CreateRemote(const MachineName: string): ICoDeepWellErrorProviderImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoDeepWellErrorProviderImpl) as ICoDeepWellErrorProviderImpl;
end;

procedure TCCoDeepWellErrorProviderImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3140E5A6-D23E-5AA9-9150-BAF35B95FB97}';
    IntfIID:   '{DDBB2A3F-519F-5268-8028-238FB16B87C2}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoDeepWellErrorProviderImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoDeepWellErrorProviderImpl;
  end;
end;

procedure TCCoDeepWellErrorProviderImpl.ConnectTo(svrIntf: ICoDeepWellErrorProviderImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoDeepWellErrorProviderImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoDeepWellErrorProviderImpl.GetDefaultInterface: ICoDeepWellErrorProviderImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoDeepWellErrorProviderImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoDeepWellErrorProviderImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoDeepWellErrorProviderImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoDeepWellErrorProviderImpl.GetServerProperties: TCCoDeepWellErrorProviderImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoDeepWellErrorProviderImpl.CreateDeepWellErrorProviderImplB(const COM_usbInt: ICoUSBInterface; 
                                                                         const COM_spectrometer: ICoSpectrometer);
begin
  DefaultInterface.CreateDeepWellErrorProviderImplB(COM_usbInt, COM_spectrometer);
end;

procedure TCCoDeepWellErrorProviderImpl.checkIntegrationTime(COM_intTime: Integer);
begin
  DefaultInterface.checkIntegrationTime(COM_intTime);
end;

function TCCoDeepWellErrorProviderImpl.isInDeepWellMode: WordBool;
begin
  Result := DefaultInterface.isInDeepWellMode;
end;

procedure TCCoDeepWellErrorProviderImpl.setIgnore(COM_ignore: WordBool);
begin
  DefaultInterface.setIgnore(COM_ignore);
end;

procedure TCCoDeepWellErrorProviderImpl.addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
begin
  DefaultInterface.addOmniDriverDispatchListener(COM_listener);
end;

procedure TCCoDeepWellErrorProviderImpl.removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
begin
  DefaultInterface.removeOmniDriverDispatchListener(COM_listener);
end;

procedure TCCoDeepWellErrorProviderImpl.addAcquisitionPropertiesListener(const COM_listener: ICoAcquisitionPropertiesListener);
begin
  DefaultInterface.addAcquisitionPropertiesListener(COM_listener);
end;

procedure TCCoDeepWellErrorProviderImpl.removeAcquisitionPropertiesListener(const COM_listener: ICoAcquisitionPropertiesListener);
begin
  DefaultInterface.removeAcquisitionPropertiesListener(COM_listener);
end;

procedure TCCoDeepWellErrorProviderImpl.fireAcquisitionPropertiesListener;
begin
  DefaultInterface.fireAcquisitionPropertiesListener;
end;

function TCCoDeepWellErrorProviderImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoDeepWellErrorProviderImplProperties.Create(AServer: TCCoDeepWellErrorProviderImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoDeepWellErrorProviderImplProperties.GetDefaultInterface: ICoDeepWellErrorProviderImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoEndpointToPipeMapping.Create: ICoEndpointToPipeMapping;
begin
  Result := CreateComObject(CLASS_CCoEndpointToPipeMapping) as ICoEndpointToPipeMapping;
end;

class function CoCCoEndpointToPipeMapping.CreateRemote(const MachineName: string): ICoEndpointToPipeMapping;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoEndpointToPipeMapping) as ICoEndpointToPipeMapping;
end;

procedure TCCoEndpointToPipeMapping.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{15806D13-4FC5-5FF3-914F-4A04F06235EA}';
    IntfIID:   '{8E964B7C-364C-5BD6-9133-41B41748DC8A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoEndpointToPipeMapping.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoEndpointToPipeMapping;
  end;
end;

procedure TCCoEndpointToPipeMapping.ConnectTo(svrIntf: ICoEndpointToPipeMapping);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoEndpointToPipeMapping.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoEndpointToPipeMapping.GetDefaultInterface: ICoEndpointToPipeMapping;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoEndpointToPipeMapping.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoEndpointToPipeMappingProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoEndpointToPipeMapping.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoEndpointToPipeMapping.GetServerProperties: TCCoEndpointToPipeMappingProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoEndpointToPipeMapping.CreateEndpointToPipeMapping;
begin
  DefaultInterface.CreateEndpointToPipeMapping;
end;

procedure TCCoEndpointToPipeMapping.addMapping(COM_pipe: Integer; COM_endPoint: Smallint);
begin
  DefaultInterface.addMapping(COM_pipe, COM_endPoint);
end;

function TCCoEndpointToPipeMapping.getPipe(COM_endPoint: Smallint): Integer;
begin
  Result := DefaultInterface.getPipe(COM_endPoint);
end;

function TCCoEndpointToPipeMapping.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoEndpointToPipeMappingProperties.Create(AServer: TCCoEndpointToPipeMapping);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoEndpointToPipeMappingProperties.GetDefaultInterface: ICoEndpointToPipeMapping;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoEnumeration.Create: ICoEnumeration;
begin
  Result := CreateComObject(CLASS_CCoEnumeration) as ICoEnumeration;
end;

class function CoCCoEnumeration.CreateRemote(const MachineName: string): ICoEnumeration;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoEnumeration) as ICoEnumeration;
end;

procedure TCCoEnumeration.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4F062A1C-FE64-5D85-919A-65E93F4AABEA}';
    IntfIID:   '{063D9ECC-E58F-5FE5-901F-03A656AB9EB1}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoEnumeration.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoEnumeration;
  end;
end;

procedure TCCoEnumeration.ConnectTo(svrIntf: ICoEnumeration);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoEnumeration.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoEnumeration.GetDefaultInterface: ICoEnumeration;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoEnumeration.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoEnumerationProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoEnumeration.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoEnumeration.GetServerProperties: TCCoEnumerationProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoEnumeration.CreateEnumeration;
begin
  DefaultInterface.CreateEnumeration;
end;

function TCCoEnumeration.hasMoreElements: WordBool;
begin
  Result := DefaultInterface.hasMoreElements;
end;

function TCCoEnumeration.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoEnumerationProperties.Create(AServer: TCCoEnumeration);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoEnumerationProperties.GetDefaultInterface: ICoEnumeration;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoErrorProvider.Create: ICoErrorProvider;
begin
  Result := CreateComObject(CLASS_CCoErrorProvider) as ICoErrorProvider;
end;

class function CoCCoErrorProvider.CreateRemote(const MachineName: string): ICoErrorProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoErrorProvider) as ICoErrorProvider;
end;

procedure TCCoErrorProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8732FEEB-6393-5F39-91B3-CD75CA522F30}';
    IntfIID:   '{F0384D2F-24F7-5C2F-812B-F1F6122D398E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoErrorProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoErrorProvider;
  end;
end;

procedure TCCoErrorProvider.ConnectTo(svrIntf: ICoErrorProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoErrorProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoErrorProvider.GetDefaultInterface: ICoErrorProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoErrorProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoErrorProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoErrorProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoErrorProvider.GetServerProperties: TCCoErrorProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoErrorProvider.CreateErrorProvider;
begin
  DefaultInterface.CreateErrorProvider;
end;

procedure TCCoErrorProvider.addOmniDriverDispatchListener(const COM_param0: ICoOmniDriverDispatchListener);
begin
  DefaultInterface.addOmniDriverDispatchListener(COM_param0);
end;

procedure TCCoErrorProvider.removeOmniDriverDispatchListener(const COM_param0: ICoOmniDriverDispatchListener);
begin
  DefaultInterface.removeOmniDriverDispatchListener(COM_param0);
end;

function TCCoErrorProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoErrorProviderProperties.Create(AServer: TCCoErrorProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoErrorProviderProperties.GetDefaultInterface: ICoErrorProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSBSpectrometerCollection.Create: ICoUSBSpectrometerCollection;
begin
  Result := CreateComObject(CLASS_CCoUSBSpectrometerCollection) as ICoUSBSpectrometerCollection;
end;

class function CoCCoUSBSpectrometerCollection.CreateRemote(const MachineName: string): ICoUSBSpectrometerCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSBSpectrometerCollection) as ICoUSBSpectrometerCollection;
end;

procedure TCCoUSBSpectrometerCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{B281FFD9-C630-5A04-81A9-EECFA464191F}';
    IntfIID:   '{C300E9FA-62BB-5E4F-81D7-D54EB6CEB0B5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSBSpectrometerCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSBSpectrometerCollection;
  end;
end;

procedure TCCoUSBSpectrometerCollection.ConnectTo(svrIntf: ICoUSBSpectrometerCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSBSpectrometerCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSBSpectrometerCollection.GetDefaultInterface: ICoUSBSpectrometerCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSBSpectrometerCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSBSpectrometerCollectionProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSBSpectrometerCollection.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSBSpectrometerCollection.GetServerProperties: TCCoUSBSpectrometerCollectionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCCoUSBSpectrometerCollection.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TCCoUSBSpectrometerCollection.Item(index: OleVariant): OleVariant;
begin
  Result := DefaultInterface.Item(index);
end;

procedure TCCoUSBSpectrometerCollection.Add(const pnewUSBSpectrometerCollection: IDispatch);
begin
  DefaultInterface.Add(pnewUSBSpectrometerCollection);
end;

procedure TCCoUSBSpectrometerCollection.Remove(index: Integer);
begin
  DefaultInterface.Remove(index);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSBSpectrometerCollectionProperties.Create(AServer: TCCoUSBSpectrometerCollection);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSBSpectrometerCollectionProperties.GetDefaultInterface: ICoUSBSpectrometerCollection;
begin
  Result := FServer.DefaultInterface;
end;

function TCCoUSBSpectrometerCollectionProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoCCoUSBSpectrometer.Create: ICoUSBSpectrometer;
begin
  Result := CreateComObject(CLASS_CCoUSBSpectrometer) as ICoUSBSpectrometer;
end;

class function CoCCoUSBSpectrometer.CreateRemote(const MachineName: string): ICoUSBSpectrometer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSBSpectrometer) as ICoUSBSpectrometer;
end;

procedure TCCoUSBSpectrometer.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{87FF9B36-3B55-599A-91B3-4111F4B15F25}';
    IntfIID:   '{4791F0DC-F24A-5A16-8199-639C60EA6C5E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSBSpectrometer.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSBSpectrometer;
  end;
end;

procedure TCCoUSBSpectrometer.ConnectTo(svrIntf: ICoUSBSpectrometer);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSBSpectrometer.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSBSpectrometer.GetDefaultInterface: ICoUSBSpectrometer;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSBSpectrometer.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSBSpectrometerProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSBSpectrometer.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSBSpectrometer.GetServerProperties: TCCoUSBSpectrometerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSBSpectrometer.CreateUSBSpectrometer;
begin
  DefaultInterface.CreateUSBSpectrometer;
end;

function TCCoUSBSpectrometer.getInputBuffer: OleVariant;
begin
  Result := DefaultInterface.getInputBuffer;
end;

function TCCoUSBSpectrometer.getOutputBuffer: OleVariant;
begin
  Result := DefaultInterface.getOutputBuffer;
end;

procedure TCCoUSBSpectrometer.openNextUnclaimed;
begin
  DefaultInterface.openNextUnclaimed;
end;

procedure TCCoUSBSpectrometer.openNextUnclaimedUSB;
begin
  DefaultInterface.openNextUnclaimedUSB;
end;

function TCCoUSBSpectrometer.getOpenSpectrometersOfThisType: ICoUSBSpectrometerCollection;
begin
  Result := DefaultInterface.getOpenSpectrometersOfThisType;
end;

procedure TCCoUSBSpectrometer.initialize;
begin
  DefaultInterface.initialize;
end;

procedure TCCoUSBSpectrometer.setIntegrationTime(COM_intTime: Integer);
begin
  DefaultInterface.setIntegrationTime(COM_intTime);
end;

procedure TCCoUSBSpectrometer.setStrobeEnable(COM_strobe: WordBool);
begin
  DefaultInterface.setStrobeEnable(COM_strobe);
end;

procedure TCCoUSBSpectrometer.setStrobeDelay(COM_delay: Integer);
begin
  DefaultInterface.setStrobeDelay(COM_delay);
end;

procedure TCCoUSBSpectrometer.setPowerState(COM_power: WordBool);
begin
  DefaultInterface.setPowerState(COM_power);
end;

function TCCoUSBSpectrometer.getInfo(COM_slot: Integer): WideString;
begin
  Result := DefaultInterface.getInfo(COM_slot);
end;

procedure TCCoUSBSpectrometer.setInfo(COM_slot: Integer; const COM_str: WideString);
begin
  DefaultInterface.setInfo(COM_slot, COM_str);
end;

function TCCoUSBSpectrometer.getInfoBytes(COM_slot: Integer): OleVariant;
begin
  Result := DefaultInterface.getInfoBytes(COM_slot);
end;

procedure TCCoUSBSpectrometer.setInfoBytes(COM_slot: Integer; COM_byteArray: OleVariant);
begin
  DefaultInterface.setInfoBytes(COM_slot, COM_byteArray);
end;

function TCCoUSBSpectrometer.getSerialNumber: WideString;
begin
  Result := DefaultInterface.getSerialNumber;
end;

procedure TCCoUSBSpectrometer.setSerialNumber(const COM_serialNumber: WideString);
begin
  DefaultInterface.setSerialNumber(COM_serialNumber);
end;

function TCCoUSBSpectrometer.getDeviceIndex: Integer;
begin
  Result := DefaultInterface.getDeviceIndex;
end;

procedure TCCoUSBSpectrometer.closeSpectrometer;
begin
  DefaultInterface.closeSpectrometer;
end;

function TCCoUSBSpectrometer.getFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFirmwareVersion;
end;

function TCCoUSBSpectrometer.getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
begin
  Result := DefaultInterface.getSpectrum(COM_spectrum);
end;

function TCCoUSBSpectrometer.getName: WideString;
begin
  Result := DefaultInterface.getName;
end;

function TCCoUSBSpectrometer.getClassName: WideString;
begin
  Result := DefaultInterface.getClassName;
end;

function TCCoUSBSpectrometer.getNumberOfPixels(COM_index: Integer): Integer;
begin
  Result := DefaultInterface.getNumberOfPixels(COM_index);
end;

function TCCoUSBSpectrometer.getNumberOfDarkPixels(COM_index: Integer): Integer;
begin
  Result := DefaultInterface.getNumberOfDarkPixels(COM_index);
end;

function TCCoUSBSpectrometer.getNumberOfDarkCCDPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfDarkCCDPixels;
end;

function TCCoUSBSpectrometer.getNumberOfCCDPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfCCDPixels;
end;

procedure TCCoUSBSpectrometer.close;
begin
  DefaultInterface.close;
end;

function TCCoUSBSpectrometer.isCommunicatingSuccessfully: WordBool;
begin
  Result := DefaultInterface.isCommunicatingSuccessfully;
end;

function TCCoUSBSpectrometer.testSpectrometerCommunication: WideString;
begin
  Result := DefaultInterface.testSpectrometerCommunication;
end;

function TCCoUSBSpectrometer.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoUSBSpectrometer.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSBSpectrometerProperties.Create(AServer: TCCoUSBSpectrometer);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSBSpectrometerProperties.GetDefaultInterface: ICoUSBSpectrometer;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoExposureImage.Create: ICoExposureImage;
begin
  Result := CreateComObject(CLASS_CCoExposureImage) as ICoExposureImage;
end;

class function CoCCoExposureImage.CreateRemote(const MachineName: string): ICoExposureImage;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoExposureImage) as ICoExposureImage;
end;

procedure TCCoExposureImage.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{FB8B247A-2ABF-504A-8044-49648F6E2D66}';
    IntfIID:   '{89DB4427-F97A-580E-91A0-DAD71370A370}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoExposureImage.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoExposureImage;
  end;
end;

procedure TCCoExposureImage.ConnectTo(svrIntf: ICoExposureImage);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoExposureImage.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoExposureImage.GetDefaultInterface: ICoExposureImage;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoExposureImage.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoExposureImageProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoExposureImage.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoExposureImage.GetServerProperties: TCCoExposureImageProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoExposureImage.CreateExposureImage;
begin
  DefaultInterface.CreateExposureImage;
end;

function TCCoExposureImage.getSpectrometer: ICoUSBSpectrometer;
begin
  Result := DefaultInterface.getSpectrometer;
end;

function TCCoExposureImage.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoExposureImageProperties.Create(AServer: TCCoExposureImage);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoExposureImageProperties.GetDefaultInterface: ICoExposureImage;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoExposureImageGUIProvider.Create: ICoExposureImageGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoExposureImageGUIProvider) as ICoExposureImageGUIProvider;
end;

class function CoCCoExposureImageGUIProvider.CreateRemote(const MachineName: string): ICoExposureImageGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoExposureImageGUIProvider) as ICoExposureImageGUIProvider;
end;

procedure TCCoExposureImageGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CA22ACEE-8CB0-5F44-90CC-20C44F9FCB1C}';
    IntfIID:   '{CD215D10-8BFE-5ED0-9127-C5FC328FE397}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoExposureImageGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoExposureImageGUIProvider;
  end;
end;

procedure TCCoExposureImageGUIProvider.ConnectTo(svrIntf: ICoExposureImageGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoExposureImageGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoExposureImageGUIProvider.GetDefaultInterface: ICoExposureImageGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoExposureImageGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoExposureImageGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoExposureImageGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoExposureImageGUIProvider.GetServerProperties: TCCoExposureImageGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoExposureImageGUIProvider.CreateExposureImageGUIProvider;
begin
  DefaultInterface.CreateExposureImageGUIProvider;
end;

function TCCoExposureImageGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoExposureImageGUIProviderProperties.Create(AServer: TCCoExposureImageGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoExposureImageGUIProviderProperties.GetDefaultInterface: ICoExposureImageGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoExposureImageImpl.Create: ICoExposureImageImpl;
begin
  Result := CreateComObject(CLASS_CCoExposureImageImpl) as ICoExposureImageImpl;
end;

class function CoCCoExposureImageImpl.CreateRemote(const MachineName: string): ICoExposureImageImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoExposureImageImpl) as ICoExposureImageImpl;
end;

procedure TCCoExposureImageImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C696BD89-C298-5F76-819C-974366849F58}';
    IntfIID:   '{101688DE-9693-534F-8118-EB495C415B11}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoExposureImageImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoExposureImageImpl;
  end;
end;

procedure TCCoExposureImageImpl.ConnectTo(svrIntf: ICoExposureImageImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoExposureImageImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoExposureImageImpl.GetDefaultInterface: ICoExposureImageImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoExposureImageImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoExposureImageImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoExposureImageImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoExposureImageImpl.GetServerProperties: TCCoExposureImageImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoExposureImageImpl.CreateExposureImageImplB(const COM_spectrometer: ICoUSBSpectrometer);
begin
  DefaultInterface.CreateExposureImageImplB(COM_spectrometer);
end;

function TCCoExposureImageImpl.getSpectrometer: ICoUSBSpectrometer;
begin
  Result := DefaultInterface.getSpectrometer;
end;

function TCCoExposureImageImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoExposureImageImplProperties.Create(AServer: TCCoExposureImageImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoExposureImageImplProperties.GetDefaultInterface: ICoExposureImageImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectrometerExposure.Create: ICoSpectrometerExposure;
begin
  Result := CreateComObject(CLASS_CCoSpectrometerExposure) as ICoSpectrometerExposure;
end;

class function CoCCoSpectrometerExposure.CreateRemote(const MachineName: string): ICoSpectrometerExposure;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrometerExposure) as ICoSpectrometerExposure;
end;

procedure TCCoSpectrometerExposure.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5426E713-9F4C-5084-81F4-1D1597638BD4}';
    IntfIID:   '{6F43694A-9A13-5CEE-80B4-EB5DACAE61A5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrometerExposure.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrometerExposure;
  end;
end;

procedure TCCoSpectrometerExposure.ConnectTo(svrIntf: ICoSpectrometerExposure);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrometerExposure.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrometerExposure.GetDefaultInterface: ICoSpectrometerExposure;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrometerExposure.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrometerExposureProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrometerExposure.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrometerExposure.GetServerProperties: TCCoSpectrometerExposureProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCCoSpectrometerExposure.getShutterState: Shortint;
begin
  Result := DefaultInterface.getShutterState;
end;

procedure TCCoSpectrometerExposure.setShutterState(COM_shutterState: Shortint);
begin
  DefaultInterface.setShutterState(COM_shutterState);
end;

function TCCoSpectrometerExposure.getExposureType: Shortint;
begin
  Result := DefaultInterface.getExposureType;
end;

procedure TCCoSpectrometerExposure.setExposureType(COM_exposureType: Shortint);
begin
  DefaultInterface.setExposureType(COM_exposureType);
end;

function TCCoSpectrometerExposure.getExposuresToAverage: Smallint;
begin
  Result := DefaultInterface.getExposuresToAverage;
end;

procedure TCCoSpectrometerExposure.setExposuresToAverage(COM_exposuresToAverage: Smallint);
begin
  DefaultInterface.setExposuresToAverage(COM_exposuresToAverage);
end;

function TCCoSpectrometerExposure.getStrExposureType: WideString;
begin
  Result := DefaultInterface.getStrExposureType;
end;

function TCCoSpectrometerExposure.getBitsPerPixel: Integer;
begin
  Result := DefaultInterface.getBitsPerPixel;
end;

procedure TCCoSpectrometerExposure.setBitsPerPixel(COM_bitsPerPixel: Integer);
begin
  DefaultInterface.setBitsPerPixel(COM_bitsPerPixel);
end;

function TCCoSpectrometerExposure.getExposureTime: Integer;
begin
  Result := DefaultInterface.getExposureTime;
end;

procedure TCCoSpectrometerExposure.setExposureTime(COM_exposureTime: Integer);
begin
  DefaultInterface.setExposureTime(COM_exposureTime);
end;

function TCCoSpectrometerExposure.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrometerExposureProperties.Create(AServer: TCCoSpectrometerExposure);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrometerExposureProperties.GetDefaultInterface: ICoSpectrometerExposure;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoExposureListener.Create: ICoExposureListener;
begin
  Result := CreateComObject(CLASS_CCoExposureListener) as ICoExposureListener;
end;

class function CoCCoExposureListener.CreateRemote(const MachineName: string): ICoExposureListener;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoExposureListener) as ICoExposureListener;
end;

procedure TCCoExposureListener.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E93E7170-62CB-5A14-9128-67AFA7723DAA}';
    IntfIID:   '{C15C71DA-2FAE-5EC6-911C-59D68BDEBBAF}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoExposureListener.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoExposureListener;
  end;
end;

procedure TCCoExposureListener.ConnectTo(svrIntf: ICoExposureListener);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoExposureListener.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoExposureListener.GetDefaultInterface: ICoExposureListener;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoExposureListener.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoExposureListenerProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoExposureListener.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoExposureListener.GetServerProperties: TCCoExposureListenerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoExposureListener.CreateExposureListener;
begin
  DefaultInterface.CreateExposureListener;
end;

function TCCoExposureListener.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoExposureListenerProperties.Create(AServer: TCCoExposureListener);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoExposureListenerProperties.GetDefaultInterface: ICoExposureListener;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoIntegrationTimeChangeListener.Create: ICoIntegrationTimeChangeListener;
begin
  Result := CreateComObject(CLASS_CCoIntegrationTimeChangeListener) as ICoIntegrationTimeChangeListener;
end;

class function CoCCoIntegrationTimeChangeListener.CreateRemote(const MachineName: string): ICoIntegrationTimeChangeListener;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoIntegrationTimeChangeListener) as ICoIntegrationTimeChangeListener;
end;

procedure TCCoIntegrationTimeChangeListener.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5807AA44-3E74-51DF-819D-8BD6E9E82EE6}';
    IntfIID:   '{41DAE341-B833-5E61-8166-F33B8A98C4A9}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoIntegrationTimeChangeListener.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoIntegrationTimeChangeListener;
  end;
end;

procedure TCCoIntegrationTimeChangeListener.ConnectTo(svrIntf: ICoIntegrationTimeChangeListener);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoIntegrationTimeChangeListener.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoIntegrationTimeChangeListener.GetDefaultInterface: ICoIntegrationTimeChangeListener;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoIntegrationTimeChangeListener.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoIntegrationTimeChangeListenerProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoIntegrationTimeChangeListener.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoIntegrationTimeChangeListener.GetServerProperties: TCCoIntegrationTimeChangeListenerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoIntegrationTimeChangeListener.CreateIntegrationTimeChangeListener;
begin
  DefaultInterface.CreateIntegrationTimeChangeListener;
end;

procedure TCCoIntegrationTimeChangeListener.integrationTimeChanged(COM_param0: Integer);
begin
  DefaultInterface.integrationTimeChanged(COM_param0);
end;

function TCCoIntegrationTimeChangeListener.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoIntegrationTimeChangeListenerProperties.Create(AServer: TCCoIntegrationTimeChangeListener);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoIntegrationTimeChangeListenerProperties.GetDefaultInterface: ICoIntegrationTimeChangeListener;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoExposureImageable.Create: ICoExposureImageable;
begin
  Result := CreateComObject(CLASS_CCoExposureImageable) as ICoExposureImageable;
end;

class function CoCCoExposureImageable.CreateRemote(const MachineName: string): ICoExposureImageable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoExposureImageable) as ICoExposureImageable;
end;

procedure TCCoExposureImageable.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7ABADC11-5EA3-54E3-911A-F778EF76E493}';
    IntfIID:   '{EBE9D3AF-933F-5587-9085-92D94EB01E36}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoExposureImageable.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoExposureImageable;
  end;
end;

procedure TCCoExposureImageable.ConnectTo(svrIntf: ICoExposureImageable);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoExposureImageable.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoExposureImageable.GetDefaultInterface: ICoExposureImageable;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoExposureImageable.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoExposureImageableProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoExposureImageable.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoExposureImageable.GetServerProperties: TCCoExposureImageableProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoExposureImageable.CreateExposureImageable;
begin
  DefaultInterface.CreateExposureImageable;
end;

function TCCoExposureImageable.getCcdWidth: Integer;
begin
  Result := DefaultInterface.getCcdWidth;
end;

function TCCoExposureImageable.getCcdHeight: Integer;
begin
  Result := DefaultInterface.getCcdHeight;
end;

procedure TCCoExposureImageable.set1DMode(COM_param0: Integer);
begin
  DefaultInterface.set1DMode(COM_param0);
end;

procedure TCCoExposureImageable.set2DMode(COM_param0: Integer);
begin
  DefaultInterface.set2DMode(COM_param0);
end;

function TCCoExposureImageable.has1DMode: WordBool;
begin
  Result := DefaultInterface.has1DMode;
end;

function TCCoExposureImageable.get2DintegrationTime: Integer;
begin
  Result := DefaultInterface.get2DintegrationTime;
end;

function TCCoExposureImageable.is2DMode: WordBool;
begin
  Result := DefaultInterface.is2DMode;
end;

function TCCoExposureImageable.is1DMode: WordBool;
begin
  Result := DefaultInterface.is1DMode;
end;

procedure TCCoExposureImageable.addIntegrationTimeChangeListener(const COM_param0: ICoIntegrationTimeChangeListener);
begin
  DefaultInterface.addIntegrationTimeChangeListener(COM_param0);
end;

procedure TCCoExposureImageable.removeIntegrationTimeChangeListener(const COM_param0: ICoIntegrationTimeChangeListener);
begin
  DefaultInterface.removeIntegrationTimeChangeListener(COM_param0);
end;

function TCCoExposureImageable.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoExposureImageableProperties.Create(AServer: TCCoExposureImageable);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoExposureImageableProperties.GetDefaultInterface: ICoExposureImageable;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoExternalTemperature.Create: ICoExternalTemperature;
begin
  Result := CreateComObject(CLASS_CCoExternalTemperature) as ICoExternalTemperature;
end;

class function CoCCoExternalTemperature.CreateRemote(const MachineName: string): ICoExternalTemperature;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoExternalTemperature) as ICoExternalTemperature;
end;

procedure TCCoExternalTemperature.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{867FB3A6-3DCD-5D29-90CE-14D3B3CEFDF1}';
    IntfIID:   '{16EF74C6-FF0C-5234-81A5-FA57D2E7FA99}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoExternalTemperature.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoExternalTemperature;
  end;
end;

procedure TCCoExternalTemperature.ConnectTo(svrIntf: ICoExternalTemperature);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoExternalTemperature.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoExternalTemperature.GetDefaultInterface: ICoExternalTemperature;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoExternalTemperature.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoExternalTemperatureProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoExternalTemperature.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoExternalTemperature.GetServerProperties: TCCoExternalTemperatureProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoExternalTemperature.CreateExternalTemperature;
begin
  DefaultInterface.CreateExternalTemperature;
end;

function TCCoExternalTemperature.getExternalTemperatureCelsius: Double;
begin
  Result := DefaultInterface.getExternalTemperatureCelsius;
end;

function TCCoExternalTemperature.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoExternalTemperatureProperties.Create(AServer: TCCoExternalTemperature);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoExternalTemperatureProperties.GetDefaultInterface: ICoExternalTemperature;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoExternalTemperatureGUIProvider.Create: ICoExternalTemperatureGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoExternalTemperatureGUIProvider) as ICoExternalTemperatureGUIProvider;
end;

class function CoCCoExternalTemperatureGUIProvider.CreateRemote(const MachineName: string): ICoExternalTemperatureGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoExternalTemperatureGUIProvider) as ICoExternalTemperatureGUIProvider;
end;

procedure TCCoExternalTemperatureGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3D21AC30-698C-587E-91BD-621B5378A105}';
    IntfIID:   '{B94D950B-0513-55F6-80C8-D5E2E6C40BC9}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoExternalTemperatureGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoExternalTemperatureGUIProvider;
  end;
end;

procedure TCCoExternalTemperatureGUIProvider.ConnectTo(svrIntf: ICoExternalTemperatureGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoExternalTemperatureGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoExternalTemperatureGUIProvider.GetDefaultInterface: ICoExternalTemperatureGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoExternalTemperatureGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoExternalTemperatureGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoExternalTemperatureGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoExternalTemperatureGUIProvider.GetServerProperties: TCCoExternalTemperatureGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoExternalTemperatureGUIProvider.CreateExternalTemperatureGUIProvider;
begin
  DefaultInterface.CreateExternalTemperatureGUIProvider;
end;

function TCCoExternalTemperatureGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoExternalTemperatureGUIProviderProperties.Create(AServer: TCCoExternalTemperatureGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoExternalTemperatureGUIProviderProperties.GetDefaultInterface: ICoExternalTemperatureGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoLS450Coefficients.Create: ICoLS450Coefficients;
begin
  Result := CreateComObject(CLASS_CCoLS450Coefficients) as ICoLS450Coefficients;
end;

class function CoCCoLS450Coefficients.CreateRemote(const MachineName: string): ICoLS450Coefficients;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoLS450Coefficients) as ICoLS450Coefficients;
end;

procedure TCCoLS450Coefficients.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{84914134-77DE-5A6D-81B0-7566DEC5E609}';
    IntfIID:   '{07FE66E8-166F-578C-80A4-CB658061CC68}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoLS450Coefficients.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoLS450Coefficients;
  end;
end;

procedure TCCoLS450Coefficients.ConnectTo(svrIntf: ICoLS450Coefficients);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoLS450Coefficients.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoLS450Coefficients.GetDefaultInterface: ICoLS450Coefficients;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoLS450Coefficients.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoLS450CoefficientsProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoLS450Coefficients.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoLS450Coefficients.GetServerProperties: TCCoLS450CoefficientsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoLS450Coefficients.CreateLS450Coefficients;
begin
  DefaultInterface.CreateLS450Coefficients;
end;

procedure TCCoLS450Coefficients.CreateLS450CoefficientsB(const COM_ls450Coefficients: ICoLS450Coefficients);
begin
  DefaultInterface.CreateLS450CoefficientsB(COM_ls450Coefficients);
end;

function TCCoLS450Coefficients.getTemperatureCalibrationConstant1: Double;
begin
  Result := DefaultInterface.getTemperatureCalibrationConstant1;
end;

procedure TCCoLS450Coefficients.setTemperatureCalibrationConstant1(COM_t: Double);
begin
  DefaultInterface.setTemperatureCalibrationConstant1(COM_t);
end;

function TCCoLS450Coefficients.getTemperatureCalibrationConstant0: Double;
begin
  Result := DefaultInterface.getTemperatureCalibrationConstant0;
end;

procedure TCCoLS450Coefficients.setTemperatureCalibrationConstant0(COM_t: Double);
begin
  DefaultInterface.setTemperatureCalibrationConstant0(COM_t);
end;

procedure TCCoLS450Coefficients.setO2ProbeCalibrationCoefficients(COM_o2Coeffs: OleVariant);
begin
  DefaultInterface.setO2ProbeCalibrationCoefficients(COM_o2Coeffs);
end;

function TCCoLS450Coefficients.getO2ProbeCalibrationCoefficients: OleVariant;
begin
  Result := DefaultInterface.getO2ProbeCalibrationCoefficients;
end;

function TCCoLS450Coefficients.geto2_IO_No: Double;
begin
  Result := DefaultInterface.geto2_IO_No;
end;

procedure TCCoLS450Coefficients.seto2_IO_No(COM_o2: Double);
begin
  DefaultInterface.seto2_IO_No(COM_o2);
end;

function TCCoLS450Coefficients.geto2_IO_0: Double;
begin
  Result := DefaultInterface.geto2_IO_0;
end;

procedure TCCoLS450Coefficients.seto2_IO_0(COM_o2: Double);
begin
  DefaultInterface.seto2_IO_0(COM_o2);
end;

function TCCoLS450Coefficients.geto2_IO_1: Double;
begin
  Result := DefaultInterface.geto2_IO_1;
end;

procedure TCCoLS450Coefficients.seto2_IO_1(COM_o2: Double);
begin
  DefaultInterface.seto2_IO_1(COM_o2);
end;

function TCCoLS450Coefficients.geto2_IO_2: Double;
begin
  Result := DefaultInterface.geto2_IO_2;
end;

procedure TCCoLS450Coefficients.seto2_IO_2(COM_o2: Double);
begin
  DefaultInterface.seto2_IO_2(COM_o2);
end;

function TCCoLS450Coefficients.geto2_K_No: Double;
begin
  Result := DefaultInterface.geto2_K_No;
end;

procedure TCCoLS450Coefficients.seto2_K_No(COM_o2: Double);
begin
  DefaultInterface.seto2_K_No(COM_o2);
end;

function TCCoLS450Coefficients.geto2_K_0: Double;
begin
  Result := DefaultInterface.geto2_K_0;
end;

procedure TCCoLS450Coefficients.seto2_K_0(COM_o2: Double);
begin
  DefaultInterface.seto2_K_0(COM_o2);
end;

function TCCoLS450Coefficients.geto2_K_1: Double;
begin
  Result := DefaultInterface.geto2_K_1;
end;

procedure TCCoLS450Coefficients.seto2_K_1(COM_o2: Double);
begin
  DefaultInterface.seto2_K_1(COM_o2);
end;

function TCCoLS450Coefficients.geto2_K_2: Double;
begin
  Result := DefaultInterface.geto2_K_2;
end;

procedure TCCoLS450Coefficients.seto2_K_2(COM_o2: Double);
begin
  DefaultInterface.seto2_K_2(COM_o2);
end;

function TCCoLS450Coefficients.geto2_K1_No: Double;
begin
  Result := DefaultInterface.geto2_K1_No;
end;

procedure TCCoLS450Coefficients.seto2_K1_No(COM_o2: Double);
begin
  DefaultInterface.seto2_K1_No(COM_o2);
end;

function TCCoLS450Coefficients.geto2_K1_0: Double;
begin
  Result := DefaultInterface.geto2_K1_0;
end;

procedure TCCoLS450Coefficients.seto2_K1_0(COM_o2: Double);
begin
  DefaultInterface.seto2_K1_0(COM_o2);
end;

function TCCoLS450Coefficients.geto2_K1_1: Double;
begin
  Result := DefaultInterface.geto2_K1_1;
end;

procedure TCCoLS450Coefficients.seto2_K1_1(COM_o2: Double);
begin
  DefaultInterface.seto2_K1_1(COM_o2);
end;

function TCCoLS450Coefficients.geto2_K1_2: Double;
begin
  Result := DefaultInterface.geto2_K1_2;
end;

procedure TCCoLS450Coefficients.seto2_K1_2(COM_o2: Double);
begin
  DefaultInterface.seto2_K1_2(COM_o2);
end;

function TCCoLS450Coefficients.geto2_K2_No: Double;
begin
  Result := DefaultInterface.geto2_K2_No;
end;

procedure TCCoLS450Coefficients.seto2_K2_No(COM_o2: Double);
begin
  DefaultInterface.seto2_K2_No(COM_o2);
end;

function TCCoLS450Coefficients.geto2_K2_0: Double;
begin
  Result := DefaultInterface.geto2_K2_0;
end;

procedure TCCoLS450Coefficients.seto2_K2_0(COM_o2: Double);
begin
  DefaultInterface.seto2_K2_0(COM_o2);
end;

function TCCoLS450Coefficients.geto2_K2_1: Double;
begin
  Result := DefaultInterface.geto2_K2_1;
end;

procedure TCCoLS450Coefficients.seto2_K2_1(COM_o2: Double);
begin
  DefaultInterface.seto2_K2_1(COM_o2);
end;

function TCCoLS450Coefficients.geto2_K2_2: Double;
begin
  Result := DefaultInterface.geto2_K2_2;
end;

procedure TCCoLS450Coefficients.seto2_K2_2(COM_o2: Double);
begin
  DefaultInterface.seto2_K2_2(COM_o2);
end;

function TCCoLS450Coefficients.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoLS450Coefficients.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoLS450CoefficientsProperties.Create(AServer: TCCoLS450Coefficients);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoLS450CoefficientsProperties.GetDefaultInterface: ICoLS450Coefficients;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoLS450_Functions.Create: ICoLS450_Functions;
begin
  Result := CreateComObject(CLASS_CCoLS450_Functions) as ICoLS450_Functions;
end;

class function CoCCoLS450_Functions.CreateRemote(const MachineName: string): ICoLS450_Functions;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoLS450_Functions) as ICoLS450_Functions;
end;

procedure TCCoLS450_Functions.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4C33A220-A8BA-5A6D-81C6-85B38BBFF37B}';
    IntfIID:   '{294C03BC-E003-59D3-8059-6484617573C9}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoLS450_Functions.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoLS450_Functions;
  end;
end;

procedure TCCoLS450_Functions.ConnectTo(svrIntf: ICoLS450_Functions);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoLS450_Functions.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoLS450_Functions.GetDefaultInterface: ICoLS450_Functions;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoLS450_Functions.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoLS450_FunctionsProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoLS450_Functions.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoLS450_Functions.GetServerProperties: TCCoLS450_FunctionsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoLS450_Functions.CreateLS450_Functions;
begin
  DefaultInterface.CreateLS450_Functions;
end;

procedure TCCoLS450_Functions.setLEDMode(COM_param0: WordBool);
begin
  DefaultInterface.setLEDMode(COM_param0);
end;

function TCCoLS450_Functions.getLS450Coefficients: ICoLS450Coefficients;
begin
  Result := DefaultInterface.getLS450Coefficients;
end;

procedure TCCoLS450_Functions.setLS450Coefficients(const COM_param0: ICoLS450Coefficients);
begin
  DefaultInterface.setLS450Coefficients(COM_param0);
end;

function TCCoLS450_Functions.getLS450Info(COM_param0: Integer): WideString;
begin
  Result := DefaultInterface.getLS450Info(COM_param0);
end;

procedure TCCoLS450_Functions.setLS450Info(COM_param0: Integer; const COM_param1: WideString);
begin
  DefaultInterface.setLS450Info(COM_param0, COM_param1);
end;

procedure TCCoLS450_Functions.setAllLS450Info(const COM_param0: ICoLS450Coefficients);
begin
  DefaultInterface.setAllLS450Info(COM_param0);
end;

function TCCoLS450_Functions.getAllLS450Info: ICoLS450Coefficients;
begin
  Result := DefaultInterface.getAllLS450Info;
end;

procedure TCCoLS450_Functions.loadInfo;
begin
  DefaultInterface.loadInfo;
end;

procedure TCCoLS450_Functions.saveInfo;
begin
  DefaultInterface.saveInfo;
end;

procedure TCCoLS450_Functions.loadLS450CoefficientsFromEEPROM;
begin
  DefaultInterface.loadLS450CoefficientsFromEEPROM;
end;

function TCCoLS450_Functions.getO2ProbeCalibrationCoefficients: OleVariant;
begin
  Result := DefaultInterface.getO2ProbeCalibrationCoefficients;
end;

procedure TCCoLS450_Functions.setO2ProbeCalibrationCoefficients(COM_param0: OleVariant);
begin
  DefaultInterface.setO2ProbeCalibrationCoefficients(COM_param0);
end;

function TCCoLS450_Functions.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoLS450_FunctionsProperties.Create(AServer: TCCoLS450_Functions);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoLS450_FunctionsProperties.GetDefaultInterface: ICoLS450_Functions;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoExternalTemperatureImpl_LS450.Create: ICoExternalTemperatureImpl_LS450;
begin
  Result := CreateComObject(CLASS_CCoExternalTemperatureImpl_LS450) as ICoExternalTemperatureImpl_LS450;
end;

class function CoCCoExternalTemperatureImpl_LS450.CreateRemote(const MachineName: string): ICoExternalTemperatureImpl_LS450;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoExternalTemperatureImpl_LS450) as ICoExternalTemperatureImpl_LS450;
end;

procedure TCCoExternalTemperatureImpl_LS450.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{14F51D01-EE5F-5FA3-9071-B02517B88AF8}';
    IntfIID:   '{92962C3B-8C4F-576C-8073-0F0D820A2E7B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoExternalTemperatureImpl_LS450.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoExternalTemperatureImpl_LS450;
  end;
end;

procedure TCCoExternalTemperatureImpl_LS450.ConnectTo(svrIntf: ICoExternalTemperatureImpl_LS450);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoExternalTemperatureImpl_LS450.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoExternalTemperatureImpl_LS450.GetDefaultInterface: ICoExternalTemperatureImpl_LS450;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoExternalTemperatureImpl_LS450.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoExternalTemperatureImpl_LS450Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoExternalTemperatureImpl_LS450.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoExternalTemperatureImpl_LS450.GetServerProperties: TCCoExternalTemperatureImpl_LS450Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoExternalTemperatureImpl_LS450.CreateExternalTemperatureImpl_LS450B(const COM_usbInt: ICoUSBInterface; 
                                                                                 const COM_ls: ICoLS450_Functions);
begin
  DefaultInterface.CreateExternalTemperatureImpl_LS450B(COM_usbInt, COM_ls);
end;

function TCCoExternalTemperatureImpl_LS450.getExternalTemperatureCelsius: Double;
begin
  Result := DefaultInterface.getExternalTemperatureCelsius;
end;

function TCCoExternalTemperatureImpl_LS450.getDataOutEndPoint: ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getDataOutEndPoint;
end;

function TCCoExternalTemperatureImpl_LS450.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoExternalTemperatureImpl_LS450Properties.Create(AServer: TCCoExternalTemperatureImpl_LS450);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoExternalTemperatureImpl_LS450Properties.GetDefaultInterface: ICoExternalTemperatureImpl_LS450;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoExternalTemperatureImpl_LS450_2000.Create: ICoExternalTemperatureImpl_LS450_2000;
begin
  Result := CreateComObject(CLASS_CCoExternalTemperatureImpl_LS450_2000) as ICoExternalTemperatureImpl_LS450_2000;
end;

class function CoCCoExternalTemperatureImpl_LS450_2000.CreateRemote(const MachineName: string): ICoExternalTemperatureImpl_LS450_2000;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoExternalTemperatureImpl_LS450_2000) as ICoExternalTemperatureImpl_LS450_2000;
end;

procedure TCCoExternalTemperatureImpl_LS450_2000.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C9AE4932-EA7C-54CC-8076-1FD493F95739}';
    IntfIID:   '{E5749314-180C-5603-800D-BA2A14B54199}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoExternalTemperatureImpl_LS450_2000.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoExternalTemperatureImpl_LS450_2000;
  end;
end;

procedure TCCoExternalTemperatureImpl_LS450_2000.ConnectTo(svrIntf: ICoExternalTemperatureImpl_LS450_2000);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoExternalTemperatureImpl_LS450_2000.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoExternalTemperatureImpl_LS450_2000.GetDefaultInterface: ICoExternalTemperatureImpl_LS450_2000;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoExternalTemperatureImpl_LS450_2000.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoExternalTemperatureImpl_LS450_2000Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoExternalTemperatureImpl_LS450_2000.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoExternalTemperatureImpl_LS450_2000.GetServerProperties: TCCoExternalTemperatureImpl_LS450_2000Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoExternalTemperatureImpl_LS450_2000.CreateExternalTemperatureImpl_LS450_2000B(const COM_usbInt: ICoUSBInterface; 
                                                                                           const COM_ls: ICoLS450_Functions);
begin
  DefaultInterface.CreateExternalTemperatureImpl_LS450_2000B(COM_usbInt, COM_ls);
end;

function TCCoExternalTemperatureImpl_LS450_2000.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoExternalTemperatureImpl_LS450_2000Properties.Create(AServer: TCCoExternalTemperatureImpl_LS450_2000);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoExternalTemperatureImpl_LS450_2000Properties.GetDefaultInterface: ICoExternalTemperatureImpl_LS450_2000;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoExternalTemperatureImpl_LS450_4000.Create: ICoExternalTemperatureImpl_LS450_4000;
begin
  Result := CreateComObject(CLASS_CCoExternalTemperatureImpl_LS450_4000) as ICoExternalTemperatureImpl_LS450_4000;
end;

class function CoCCoExternalTemperatureImpl_LS450_4000.CreateRemote(const MachineName: string): ICoExternalTemperatureImpl_LS450_4000;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoExternalTemperatureImpl_LS450_4000) as ICoExternalTemperatureImpl_LS450_4000;
end;

procedure TCCoExternalTemperatureImpl_LS450_4000.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A8198125-1064-531B-80DC-660523F5CCAD}';
    IntfIID:   '{DB802C43-B70E-5B1B-8102-05976CE441DF}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoExternalTemperatureImpl_LS450_4000.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoExternalTemperatureImpl_LS450_4000;
  end;
end;

procedure TCCoExternalTemperatureImpl_LS450_4000.ConnectTo(svrIntf: ICoExternalTemperatureImpl_LS450_4000);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoExternalTemperatureImpl_LS450_4000.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoExternalTemperatureImpl_LS450_4000.GetDefaultInterface: ICoExternalTemperatureImpl_LS450_4000;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoExternalTemperatureImpl_LS450_4000.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoExternalTemperatureImpl_LS450_4000Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoExternalTemperatureImpl_LS450_4000.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoExternalTemperatureImpl_LS450_4000.GetServerProperties: TCCoExternalTemperatureImpl_LS450_4000Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoExternalTemperatureImpl_LS450_4000.CreateExternalTemperatureImpl_LS450_4000B(const COM_usbInt: ICoUSBInterface; 
                                                                                           const COM_ls: ICoLS450_Functions);
begin
  DefaultInterface.CreateExternalTemperatureImpl_LS450_4000B(COM_usbInt, COM_ls);
end;

function TCCoExternalTemperatureImpl_LS450_4000.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoExternalTemperatureImpl_LS450_4000Properties.Create(AServer: TCCoExternalTemperatureImpl_LS450_4000);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoExternalTemperatureImpl_LS450_4000Properties.GetDefaultInterface: ICoExternalTemperatureImpl_LS450_4000;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoExternalTriggerDelay.Create: ICoExternalTriggerDelay;
begin
  Result := CreateComObject(CLASS_CCoExternalTriggerDelay) as ICoExternalTriggerDelay;
end;

class function CoCCoExternalTriggerDelay.CreateRemote(const MachineName: string): ICoExternalTriggerDelay;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoExternalTriggerDelay) as ICoExternalTriggerDelay;
end;

procedure TCCoExternalTriggerDelay.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{94617DE6-0E83-5807-90A2-1ED5716CDFEC}';
    IntfIID:   '{651E22E2-2735-5F16-9123-A089784AD4BF}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoExternalTriggerDelay.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoExternalTriggerDelay;
  end;
end;

procedure TCCoExternalTriggerDelay.ConnectTo(svrIntf: ICoExternalTriggerDelay);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoExternalTriggerDelay.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoExternalTriggerDelay.GetDefaultInterface: ICoExternalTriggerDelay;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoExternalTriggerDelay.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoExternalTriggerDelayProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoExternalTriggerDelay.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoExternalTriggerDelay.GetServerProperties: TCCoExternalTriggerDelayProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoExternalTriggerDelay.CreateExternalTriggerDelay;
begin
  DefaultInterface.CreateExternalTriggerDelay;
end;

procedure TCCoExternalTriggerDelay.setExternalTriggerDelay(COM_param0: Integer);
begin
  DefaultInterface.setExternalTriggerDelay(COM_param0);
end;

function TCCoExternalTriggerDelay.triggerDelayCountsToMicroseconds(COM_param0: Integer): Double;
begin
  Result := DefaultInterface.triggerDelayCountsToMicroseconds(COM_param0);
end;

function TCCoExternalTriggerDelay.getExternalTriggerDelayMinimum: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayMinimum;
end;

function TCCoExternalTriggerDelay.getExternalTriggerDelayMaximum: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayMaximum;
end;

function TCCoExternalTriggerDelay.getExternalTriggerDelayIncrement: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayIncrement;
end;

function TCCoExternalTriggerDelay.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoExternalTriggerDelayProperties.Create(AServer: TCCoExternalTriggerDelay);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoExternalTriggerDelayProperties.GetDefaultInterface: ICoExternalTriggerDelay;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoExternalTriggerDelayGUIProvider.Create: ICoExternalTriggerDelayGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoExternalTriggerDelayGUIProvider) as ICoExternalTriggerDelayGUIProvider;
end;

class function CoCCoExternalTriggerDelayGUIProvider.CreateRemote(const MachineName: string): ICoExternalTriggerDelayGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoExternalTriggerDelayGUIProvider) as ICoExternalTriggerDelayGUIProvider;
end;

procedure TCCoExternalTriggerDelayGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DBBF30BB-5F4A-5D01-914C-01DAA461A931}';
    IntfIID:   '{6EB799F1-14D2-528E-90B9-D428FE43C0DD}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoExternalTriggerDelayGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoExternalTriggerDelayGUIProvider;
  end;
end;

procedure TCCoExternalTriggerDelayGUIProvider.ConnectTo(svrIntf: ICoExternalTriggerDelayGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoExternalTriggerDelayGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoExternalTriggerDelayGUIProvider.GetDefaultInterface: ICoExternalTriggerDelayGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoExternalTriggerDelayGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoExternalTriggerDelayGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoExternalTriggerDelayGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoExternalTriggerDelayGUIProvider.GetServerProperties: TCCoExternalTriggerDelayGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoExternalTriggerDelayGUIProvider.CreateExternalTriggerDelayGUIProvider;
begin
  DefaultInterface.CreateExternalTriggerDelayGUIProvider;
end;

function TCCoExternalTriggerDelayGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoExternalTriggerDelayGUIProviderProperties.Create(AServer: TCCoExternalTriggerDelayGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoExternalTriggerDelayGUIProviderProperties.GetDefaultInterface: ICoExternalTriggerDelayGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoExternalTriggerDelayImpl.Create: ICoExternalTriggerDelayImpl;
begin
  Result := CreateComObject(CLASS_CCoExternalTriggerDelayImpl) as ICoExternalTriggerDelayImpl;
end;

class function CoCCoExternalTriggerDelayImpl.CreateRemote(const MachineName: string): ICoExternalTriggerDelayImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoExternalTriggerDelayImpl) as ICoExternalTriggerDelayImpl;
end;

procedure TCCoExternalTriggerDelayImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{BDA91C41-69CB-5ADE-915D-857319A7638B}';
    IntfIID:   '{5535E844-4BD1-50A4-91D6-306617849D0E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoExternalTriggerDelayImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoExternalTriggerDelayImpl;
  end;
end;

procedure TCCoExternalTriggerDelayImpl.ConnectTo(svrIntf: ICoExternalTriggerDelayImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoExternalTriggerDelayImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoExternalTriggerDelayImpl.GetDefaultInterface: ICoExternalTriggerDelayImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoExternalTriggerDelayImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoExternalTriggerDelayImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoExternalTriggerDelayImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoExternalTriggerDelayImpl.GetServerProperties: TCCoExternalTriggerDelayImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoExternalTriggerDelayImpl.CreateExternalTriggerDelayImplB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateExternalTriggerDelayImplB(COM_usbInt);
end;

function TCCoExternalTriggerDelayImpl.triggerDelayCountsToMicroseconds(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.triggerDelayCountsToMicroseconds(COM_counts);
end;

function TCCoExternalTriggerDelayImpl.getExternalTriggerDelayIncrement: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayIncrement;
end;

function TCCoExternalTriggerDelayImpl.getExternalTriggerDelayMaximum: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayMaximum;
end;

function TCCoExternalTriggerDelayImpl.getExternalTriggerDelayMinimum: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayMinimum;
end;

procedure TCCoExternalTriggerDelayImpl.setExternalTriggerDelay(COM_value: Integer);
begin
  DefaultInterface.setExternalTriggerDelay(COM_value);
end;

procedure TCCoExternalTriggerDelayImpl.masterClockChanged(COM_newValue: Integer);
begin
  DefaultInterface.masterClockChanged(COM_newValue);
end;

function TCCoExternalTriggerDelayImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoExternalTriggerDelayImplProperties.Create(AServer: TCCoExternalTriggerDelayImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoExternalTriggerDelayImplProperties.GetDefaultInterface: ICoExternalTriggerDelayImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoFPGA.Create: ICoFPGA;
begin
  Result := CreateComObject(CLASS_CCoFPGA) as ICoFPGA;
end;

class function CoCCoFPGA.CreateRemote(const MachineName: string): ICoFPGA;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoFPGA) as ICoFPGA;
end;

procedure TCCoFPGA.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{16041FA7-D9CC-50BD-90D6-74ED84973D1F}';
    IntfIID:   '{977C8CB5-4BE7-5151-8092-F02A1BFFB0FE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoFPGA.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoFPGA;
  end;
end;

procedure TCCoFPGA.ConnectTo(svrIntf: ICoFPGA);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoFPGA.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoFPGA.GetDefaultInterface: ICoFPGA;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoFPGA.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoFPGAProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoFPGA.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoFPGA.GetServerProperties: TCCoFPGAProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoFPGA.CreateFPGA;
begin
  DefaultInterface.CreateFPGA;
end;

function TCCoFPGA.getFPGA(COM_param0: Shortint): Integer;
begin
  Result := DefaultInterface.getFPGA(COM_param0);
end;

function TCCoFPGA.getAllFPGA: OleVariant;
begin
  Result := DefaultInterface.getAllFPGA;
end;

procedure TCCoFPGA.setFPGA(COM_param0: Shortint; COM_param1: Integer);
begin
  DefaultInterface.setFPGA(COM_param0, COM_param1);
end;

function TCCoFPGA.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoFPGAProperties.Create(AServer: TCCoFPGA);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoFPGAProperties.GetDefaultInterface: ICoFPGA;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoFPGAImpl.Create: ICoFPGAImpl;
begin
  Result := CreateComObject(CLASS_CCoFPGAImpl) as ICoFPGAImpl;
end;

class function CoCCoFPGAImpl.CreateRemote(const MachineName: string): ICoFPGAImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoFPGAImpl) as ICoFPGAImpl;
end;

procedure TCCoFPGAImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A70BF946-A19B-5A75-8025-229D0B1F42C6}';
    IntfIID:   '{7781FEAD-AEA1-563F-9156-2F21C6BB335A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoFPGAImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoFPGAImpl;
  end;
end;

procedure TCCoFPGAImpl.ConnectTo(svrIntf: ICoFPGAImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoFPGAImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoFPGAImpl.GetDefaultInterface: ICoFPGAImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoFPGAImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoFPGAImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoFPGAImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoFPGAImpl.GetServerProperties: TCCoFPGAImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoFPGAImpl.CreateFPGAImplB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateFPGAImplB(COM_usbInt);
end;

procedure TCCoFPGAImpl.setFPGA(COM_reg: Shortint; COM_value: Integer);
begin
  DefaultInterface.setFPGA(COM_reg, COM_value);
end;

function TCCoFPGAImpl.getFPGA(COM_reg: Shortint): Integer;
begin
  Result := DefaultInterface.getFPGA(COM_reg);
end;

function TCCoFPGAImpl.getAllFPGA: OleVariant;
begin
  Result := DefaultInterface.getAllFPGA;
end;

function TCCoFPGAImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoFPGAImplProperties.Create(AServer: TCCoFPGAImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoFPGAImplProperties.GetDefaultInterface: ICoFPGAImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoFPGARegisters.Create: ICoFPGARegisters;
begin
  Result := CreateComObject(CLASS_CCoFPGARegisters) as ICoFPGARegisters;
end;

class function CoCCoFPGARegisters.CreateRemote(const MachineName: string): ICoFPGARegisters;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoFPGARegisters) as ICoFPGARegisters;
end;

procedure TCCoFPGARegisters.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{621F4C41-30AA-57F6-805B-89FCF0E3790C}';
    IntfIID:   '{DA0F69A7-2081-538F-9050-F6A598A31F52}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoFPGARegisters.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoFPGARegisters;
  end;
end;

procedure TCCoFPGARegisters.ConnectTo(svrIntf: ICoFPGARegisters);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoFPGARegisters.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoFPGARegisters.GetDefaultInterface: ICoFPGARegisters;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoFPGARegisters.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoFPGARegistersProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoFPGARegisters.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoFPGARegisters.GetServerProperties: TCCoFPGARegistersProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoFPGARegisters.CreateFPGARegisters;
begin
  DefaultInterface.CreateFPGARegisters;
end;

function TCCoFPGARegisters.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoFPGARegisters.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoFPGARegistersProperties.Create(AServer: TCCoFPGARegisters);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoFPGARegistersProperties.GetDefaultInterface: ICoFPGARegisters;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoFeatureEvent.Create: ICoFeatureEvent;
begin
  Result := CreateComObject(CLASS_CCoFeatureEvent) as ICoFeatureEvent;
end;

class function CoCCoFeatureEvent.CreateRemote(const MachineName: string): ICoFeatureEvent;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoFeatureEvent) as ICoFeatureEvent;
end;

procedure TCCoFeatureEvent.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{848A1259-8FDA-5CD7-912F-AD8D22015C34}';
    IntfIID:   '{1DBC2903-B700-5745-80D8-660236AB96D3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoFeatureEvent.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoFeatureEvent;
  end;
end;

procedure TCCoFeatureEvent.ConnectTo(svrIntf: ICoFeatureEvent);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoFeatureEvent.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoFeatureEvent.GetDefaultInterface: ICoFeatureEvent;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoFeatureEvent.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoFeatureEventProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoFeatureEvent.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoFeatureEvent.GetServerProperties: TCCoFeatureEventProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoFeatureEvent.CreateFeatureEvent;
begin
  DefaultInterface.CreateFeatureEvent;
end;

procedure TCCoFeatureEvent.setLifespan(COM_lifespan: Integer);
begin
  DefaultInterface.setLifespan(COM_lifespan);
end;

function TCCoFeatureEvent.getLifespan: Integer;
begin
  Result := DefaultInterface.getLifespan;
end;

function TCCoFeatureEvent.getID: Integer;
begin
  Result := DefaultInterface.getID;
end;

procedure TCCoFeatureEvent.setID(COM_id: Integer);
begin
  DefaultInterface.setID(COM_id);
end;

procedure TCCoFeatureEvent.setFeatureCommand(const COM_command: WideString);
begin
  DefaultInterface.setFeatureCommand(COM_command);
end;

function TCCoFeatureEvent.getFeatureCommand: WideString;
begin
  Result := DefaultInterface.getFeatureCommand;
end;

function TCCoFeatureEvent.getBirthTime: Integer;
begin
  Result := DefaultInterface.getBirthTime;
end;

function TCCoFeatureEvent.getSerialNumber: WideString;
begin
  Result := DefaultInterface.getSerialNumber;
end;

function TCCoFeatureEvent.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoFeatureEventProperties.Create(AServer: TCCoFeatureEvent);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoFeatureEventProperties.GetDefaultInterface: ICoFeatureEvent;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoFeatureListener.Create: ICoFeatureListener;
begin
  Result := CreateComObject(CLASS_CCoFeatureListener) as ICoFeatureListener;
end;

class function CoCCoFeatureListener.CreateRemote(const MachineName: string): ICoFeatureListener;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoFeatureListener) as ICoFeatureListener;
end;

procedure TCCoFeatureListener.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{80727909-7148-54BC-90F2-2C94BC8E3054}';
    IntfIID:   '{163C7820-CC3B-59ED-80E9-493E90828A2A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoFeatureListener.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoFeatureListener;
  end;
end;

procedure TCCoFeatureListener.ConnectTo(svrIntf: ICoFeatureListener);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoFeatureListener.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoFeatureListener.GetDefaultInterface: ICoFeatureListener;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoFeatureListener.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoFeatureListenerProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoFeatureListener.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoFeatureListener.GetServerProperties: TCCoFeatureListenerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoFeatureListener.CreateFeatureListener;
begin
  DefaultInterface.CreateFeatureListener;
end;

procedure TCCoFeatureListener.addToStatusBar(const COM_param0: ICoFeatureEvent; COM_param1: Integer);
begin
  DefaultInterface.addToStatusBar(COM_param0, COM_param1);
end;

procedure TCCoFeatureListener.addToStatusBarB(const COM_param0: ICoFeatureEvent);
begin
  DefaultInterface.addToStatusBarB(COM_param0);
end;

procedure TCCoFeatureListener.updateStatusText(const COM_param0: ICoFeatureEvent);
begin
  DefaultInterface.updateStatusText(COM_param0);
end;

procedure TCCoFeatureListener.clearStatusBar;
begin
  DefaultInterface.clearStatusBar;
end;

procedure TCCoFeatureListener.clearStatusText(const COM_param0: WideString);
begin
  DefaultInterface.clearStatusText(COM_param0);
end;

function TCCoFeatureListener.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoFeatureListenerProperties.Create(AServer: TCCoFeatureListener);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoFeatureListenerProperties.GetDefaultInterface: ICoFeatureListener;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoFeature.Create: ICoFeature;
begin
  Result := CreateComObject(CLASS_CCoFeature) as ICoFeature;
end;

class function CoCCoFeature.CreateRemote(const MachineName: string): ICoFeature;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoFeature) as ICoFeature;
end;

procedure TCCoFeature.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8254CE75-0867-51A2-80A0-876B241FD2BC}';
    IntfIID:   '{E08AFD26-F644-5770-81EA-28481939B227}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoFeature.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoFeature;
  end;
end;

procedure TCCoFeature.ConnectTo(svrIntf: ICoFeature);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoFeature.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoFeature.GetDefaultInterface: ICoFeature;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoFeature.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoFeatureProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoFeature.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoFeature.GetServerProperties: TCCoFeatureProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoFeature.CreateFeature;
begin
  DefaultInterface.CreateFeature;
end;

function TCCoFeature.getFeatureName: WideString;
begin
  Result := DefaultInterface.getFeatureName;
end;

procedure TCCoFeature.addFeatureListener(const COM_param0: ICoFeatureListener);
begin
  DefaultInterface.addFeatureListener(COM_param0);
end;

procedure TCCoFeature.removeFeatureListener(const COM_param0: ICoFeatureListener);
begin
  DefaultInterface.removeFeatureListener(COM_param0);
end;

function TCCoFeature.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoFeatureProperties.Create(AServer: TCCoFeature);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoFeatureProperties.GetDefaultInterface: ICoFeature;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoFeatureProvider.Create: ICoFeatureProvider;
begin
  Result := CreateComObject(CLASS_CCoFeatureProvider) as ICoFeatureProvider;
end;

class function CoCCoFeatureProvider.CreateRemote(const MachineName: string): ICoFeatureProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoFeatureProvider) as ICoFeatureProvider;
end;

procedure TCCoFeatureProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{78F0ADA8-D4FC-58FC-808E-6885A25ECF2A}';
    IntfIID:   '{3D07838D-F25C-53C2-8198-CA717EC6C2F8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoFeatureProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoFeatureProvider;
  end;
end;

procedure TCCoFeatureProvider.ConnectTo(svrIntf: ICoFeatureProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoFeatureProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoFeatureProvider.GetDefaultInterface: ICoFeatureProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoFeatureProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoFeatureProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoFeatureProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoFeatureProvider.GetServerProperties: TCCoFeatureProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoFeatureProvider.CreateFeatureProvider;
begin
  DefaultInterface.CreateFeatureProvider;
end;

function TCCoFeatureProvider.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

function TCCoFeatureProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoFeatureProviderProperties.Create(AServer: TCCoFeatureProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoFeatureProviderProperties.GetDefaultInterface: ICoFeatureProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectrometerReconstruction.Create: ICoSpectrometerReconstruction;
begin
  Result := CreateComObject(CLASS_CCoSpectrometerReconstruction) as ICoSpectrometerReconstruction;
end;

class function CoCCoSpectrometerReconstruction.CreateRemote(const MachineName: string): ICoSpectrometerReconstruction;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrometerReconstruction) as ICoSpectrometerReconstruction;
end;

procedure TCCoSpectrometerReconstruction.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4E7E6001-A58E-541F-9084-6D41288A8A4C}';
    IntfIID:   '{B52BBA4F-B57D-5B96-81AF-336D7F035F31}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrometerReconstruction.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrometerReconstruction;
  end;
end;

procedure TCCoSpectrometerReconstruction.ConnectTo(svrIntf: ICoSpectrometerReconstruction);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrometerReconstruction.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrometerReconstruction.GetDefaultInterface: ICoSpectrometerReconstruction;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrometerReconstruction.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrometerReconstructionProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrometerReconstruction.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrometerReconstruction.GetServerProperties: TCCoSpectrometerReconstructionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSpectrometerReconstruction.CreateSpectrometerReconstruction;
begin
  DefaultInterface.CreateSpectrometerReconstruction;
end;

function TCCoSpectrometerReconstruction.getAlgorithm: Shortint;
begin
  Result := DefaultInterface.getAlgorithm;
end;

procedure TCCoSpectrometerReconstruction.setAlgorithm(COM_algorithm: Shortint);
begin
  DefaultInterface.setAlgorithm(COM_algorithm);
end;

function TCCoSpectrometerReconstruction.getReconstructionType: Shortint;
begin
  Result := DefaultInterface.getReconstructionType;
end;

procedure TCCoSpectrometerReconstruction.setReconstructionType(COM_reconstructionType: Shortint);
begin
  DefaultInterface.setReconstructionType(COM_reconstructionType);
end;

function TCCoSpectrometerReconstruction.isSaturated: WordBool;
begin
  Result := DefaultInterface.isSaturated;
end;

procedure TCCoSpectrometerReconstruction.setSaturated(COM_saturated: WordBool);
begin
  DefaultInterface.setSaturated(COM_saturated);
end;

function TCCoSpectrometerReconstruction.getIntensities: OleVariant;
begin
  Result := DefaultInterface.getIntensities;
end;

procedure TCCoSpectrometerReconstruction.setIntensities(COM_intensities: OleVariant);
begin
  DefaultInterface.setIntensities(COM_intensities);
end;

function TCCoSpectrometerReconstruction.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrometerReconstructionProperties.Create(AServer: TCCoSpectrometerReconstruction);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrometerReconstructionProperties.GetDefaultInterface: ICoSpectrometerReconstruction;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoLaserCollection.Create: ICoLaserCollection;
begin
  Result := CreateComObject(CLASS_CCoLaserCollection) as ICoLaserCollection;
end;

class function CoCCoLaserCollection.CreateRemote(const MachineName: string): ICoLaserCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoLaserCollection) as ICoLaserCollection;
end;

procedure TCCoLaserCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{18BC4BD5-067F-55FA-91C4-8895057944D9}';
    IntfIID:   '{D5C57769-2068-5444-90E6-1729C08BA0A5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoLaserCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoLaserCollection;
  end;
end;

procedure TCCoLaserCollection.ConnectTo(svrIntf: ICoLaserCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoLaserCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoLaserCollection.GetDefaultInterface: ICoLaserCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoLaserCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoLaserCollectionProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoLaserCollection.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoLaserCollection.GetServerProperties: TCCoLaserCollectionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCCoLaserCollection.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TCCoLaserCollection.Item(index: OleVariant): OleVariant;
begin
  Result := DefaultInterface.Item(index);
end;

procedure TCCoLaserCollection.Add(const pnewLaserCollection: IDispatch);
begin
  DefaultInterface.Add(pnewLaserCollection);
end;

procedure TCCoLaserCollection.Remove(index: Integer);
begin
  DefaultInterface.Remove(index);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoLaserCollectionProperties.Create(AServer: TCCoLaserCollection);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoLaserCollectionProperties.GetDefaultInterface: ICoLaserCollection;
begin
  Result := FServer.DefaultInterface;
end;

function TCCoLaserCollectionProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoCCoMMSRaman.Create: ICoMMSRaman;
begin
  Result := CreateComObject(CLASS_CCoMMSRaman) as ICoMMSRaman;
end;

class function CoCCoMMSRaman.CreateRemote(const MachineName: string): ICoMMSRaman;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMMSRaman) as ICoMMSRaman;
end;

procedure TCCoMMSRaman.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{07942D02-AB02-57F7-917A-5BCC30E07944}';
    IntfIID:   '{7613E754-670A-5FC4-91F7-2EBA3FE14F57}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMMSRaman.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMMSRaman;
  end;
end;

procedure TCCoMMSRaman.ConnectTo(svrIntf: ICoMMSRaman);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMMSRaman.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMMSRaman.GetDefaultInterface: ICoMMSRaman;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMMSRaman.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMMSRamanProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoMMSRaman.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMMSRaman.GetServerProperties: TCCoMMSRamanProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMMSRaman.CreateMMSRaman;
begin
  DefaultInterface.CreateMMSRaman;
end;

procedure TCCoMMSRaman.CreateMMSRamanB(COM_i: Integer);
begin
  DefaultInterface.CreateMMSRamanB(COM_i);
end;

procedure TCCoMMSRaman.openSpectrometer(COM_index: Integer);
begin
  DefaultInterface.openSpectrometer(COM_index);
end;

function TCCoMMSRaman.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

function TCCoMMSRaman.getSerialNumber: WideString;
begin
  Result := DefaultInterface.getSerialNumber;
end;

function TCCoMMSRaman.getModelNumber: WideString;
begin
  Result := DefaultInterface.getModelNumber;
end;

procedure TCCoMMSRaman.getSpectrometerInfo;
begin
  DefaultInterface.getSpectrometerInfo;
end;

function TCCoMMSRaman.getIntegrationTime: Single;
begin
  Result := DefaultInterface.getIntegrationTime;
end;

procedure TCCoMMSRaman.setIntegrationTime(COM_intTime: Integer);
begin
  DefaultInterface.setIntegrationTime(COM_intTime);
end;

function TCCoMMSRaman.getSpectrometerExposure(COM_shutter: Shortint; COM_type: Shortint): ICoSpectrometerExposure;
begin
  Result := DefaultInterface.getSpectrometerExposure(COM_shutter, COM_type);
end;

procedure TCCoMMSRaman.startExposure(COM_shutter: Shortint; COM_type: Shortint);
begin
  DefaultInterface.startExposure(COM_shutter, COM_type);
end;

function TCCoMMSRaman.queryExposure: WordBool;
begin
  Result := DefaultInterface.queryExposure;
end;

function TCCoMMSRaman.getExposure: ICoSpectrometerExposure;
begin
  Result := DefaultInterface.getExposure;
end;

procedure TCCoMMSRaman.endExposure;
begin
  DefaultInterface.endExposure;
end;

procedure TCCoMMSRaman.endExposureB(COM_shutterState: Shortint);
begin
  DefaultInterface.endExposureB(COM_shutterState);
end;

function TCCoMMSRaman.getReconstruction(COM_type: Shortint): ICoSpectrometerReconstruction;
begin
  Result := DefaultInterface.getReconstruction(COM_type);
end;

procedure TCCoMMSRaman.reset;
begin
  DefaultInterface.reset;
end;

function TCCoMMSRaman.getReconstructionType: Shortint;
begin
  Result := DefaultInterface.getReconstructionType;
end;

procedure TCCoMMSRaman.setReconstructionType(COM_reconstructionType: Shortint);
begin
  DefaultInterface.setReconstructionType(COM_reconstructionType);
end;

function TCCoMMSRaman.getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
begin
  Result := DefaultInterface.getSpectrum(COM_spectrum);
end;

procedure TCCoMMSRaman.getDarkExposure;
begin
  DefaultInterface.getDarkExposure;
end;

procedure TCCoMMSRaman.getLightExposure;
begin
  DefaultInterface.getLightExposure;
end;

function TCCoMMSRaman.getCcdWidth: Integer;
begin
  Result := DefaultInterface.getCcdWidth;
end;

function TCCoMMSRaman.getCcdHeight: Integer;
begin
  Result := DefaultInterface.getCcdHeight;
end;

function TCCoMMSRaman.isExposureInProgress: WordBool;
begin
  Result := DefaultInterface.isExposureInProgress;
end;

procedure TCCoMMSRaman.setStrobeEnable(COM_laserOn: WordBool);
begin
  DefaultInterface.setStrobeEnable(COM_laserOn);
end;

procedure TCCoMMSRaman.readCalibrationFromSpectrometer;
begin
  DefaultInterface.readCalibrationFromSpectrometer;
end;

procedure TCCoMMSRaman.writeCalibrationToSpectrometer(const COM_cal: ICoMMSRamanCalibration);
begin
  DefaultInterface.writeCalibrationToSpectrometer(COM_cal);
end;

function TCCoMMSRaman.getCalibration: ICoMMSRamanCalibration;
begin
  Result := DefaultInterface.getCalibration;
end;

function TCCoMMSRaman.getLaser(COM_laserIndex: Integer): ICoLaser;
begin
  Result := DefaultInterface.getLaser(COM_laserIndex);
end;

function TCCoMMSRaman.getLasers: ICoLaserCollection;
begin
  Result := DefaultInterface.getLasers;
end;

function TCCoMMSRaman.getNumberOfEnabledLasers: Integer;
begin
  Result := DefaultInterface.getNumberOfEnabledLasers;
end;

procedure TCCoMMSRaman.setLaserInfo(COM_laserIndex: Integer);
begin
  DefaultInterface.setLaserInfo(COM_laserIndex);
end;

procedure TCCoMMSRaman.getLaserInfo(COM_laserIndex: Integer);
begin
  DefaultInterface.getLaserInfo(COM_laserIndex);
end;

function TCCoMMSRaman.getNumberOfSupportedLasers: Integer;
begin
  Result := DefaultInterface.getNumberOfSupportedLasers;
end;

procedure TCCoMMSRaman.setNumberOfSupportedLasers(COM_numberOfSupportedLasers: Integer);
begin
  DefaultInterface.setNumberOfSupportedLasers(COM_numberOfSupportedLasers);
end;

procedure TCCoMMSRaman.setDefaultLaser(COM_laserIndex: Integer);
begin
  DefaultInterface.setDefaultLaser(COM_laserIndex);
end;

function TCCoMMSRaman.getDefaultLaser: Integer;
begin
  Result := DefaultInterface.getDefaultLaser;
end;

function TCCoMMSRaman.isLaserTemperatureRegulation: WordBool;
begin
  Result := DefaultInterface.isLaserTemperatureRegulation;
end;

procedure TCCoMMSRaman.setLaserTemperatureRegulation(COM_laserTemperatureRegulation: WordBool);
begin
  DefaultInterface.setLaserTemperatureRegulation(COM_laserTemperatureRegulation);
end;

procedure TCCoMMSRaman.getLaserTemperatureInfo;
begin
  DefaultInterface.getLaserTemperatureInfo;
end;

procedure TCCoMMSRaman.setLaserTemperatureInfo;
begin
  DefaultInterface.setLaserTemperatureInfo;
end;

function TCCoMMSRaman.getMinimumLaserSetpoint: Integer;
begin
  Result := DefaultInterface.getMinimumLaserSetpoint;
end;

procedure TCCoMMSRaman.setMinimumLaserSetpoint(COM_minimumLaserSetpoint: Integer);
begin
  DefaultInterface.setMinimumLaserSetpoint(COM_minimumLaserSetpoint);
end;

function TCCoMMSRaman.getMaximumLaserSetpoint: Integer;
begin
  Result := DefaultInterface.getMaximumLaserSetpoint;
end;

procedure TCCoMMSRaman.setMaximumLaserSetpoint(COM_maximumLaserSetpoint: Integer);
begin
  DefaultInterface.setMaximumLaserSetpoint(COM_maximumLaserSetpoint);
end;

procedure TCCoMMSRaman.setLaserPowerInfo(COM_power: Integer);
begin
  DefaultInterface.setLaserPowerInfo(COM_power);
end;

function TCCoMMSRaman.getLaserPowerInfo: Integer;
begin
  Result := DefaultInterface.getLaserPowerInfo;
end;

function TCCoMMSRaman.isLaserPowerRegulation: WordBool;
begin
  Result := DefaultInterface.isLaserPowerRegulation;
end;

procedure TCCoMMSRaman.setLaserPowerRegulation(COM_laserPowerRegulation: WordBool);
begin
  DefaultInterface.setLaserPowerRegulation(COM_laserPowerRegulation);
end;

function TCCoMMSRaman.getMinimumLaserPowerSetpoint: Integer;
begin
  Result := DefaultInterface.getMinimumLaserPowerSetpoint;
end;

procedure TCCoMMSRaman.setMinimumLaserPowerSetpoint(COM_minimumLaserPowerSetpoint: Integer);
begin
  DefaultInterface.setMinimumLaserPowerSetpoint(COM_minimumLaserPowerSetpoint);
end;

function TCCoMMSRaman.getMaximumLaserPowerSetpoint: Integer;
begin
  Result := DefaultInterface.getMaximumLaserPowerSetpoint;
end;

procedure TCCoMMSRaman.setMaximumLaserPowerSetpoint(COM_maximumLaserPowerSetpoint: Integer);
begin
  DefaultInterface.setMaximumLaserPowerSetpoint(COM_maximumLaserPowerSetpoint);
end;

procedure TCCoMMSRaman.getCCDTemperatureInfo;
begin
  DefaultInterface.getCCDTemperatureInfo;
end;

procedure TCCoMMSRaman.setCCDTemperatureInfo(COM_regulation: WordBool; COM_setpoint: Single);
begin
  DefaultInterface.setCCDTemperatureInfo(COM_regulation, COM_setpoint);
end;

function TCCoMMSRaman.isTemperatureRegulation: WordBool;
begin
  Result := DefaultInterface.isTemperatureRegulation;
end;

procedure TCCoMMSRaman.setTemperatureRegulation(COM_temperatureRegulation: WordBool);
begin
  DefaultInterface.setTemperatureRegulation(COM_temperatureRegulation);
end;

function TCCoMMSRaman.getCCDSetpoint: Single;
begin
  Result := DefaultInterface.getCCDSetpoint;
end;

procedure TCCoMMSRaman.setCCDSetpoint(COM_setpoint: Single);
begin
  DefaultInterface.setCCDSetpoint(COM_setpoint);
end;

function TCCoMMSRaman.getMinimumCCDSetpoint: Integer;
begin
  Result := DefaultInterface.getMinimumCCDSetpoint;
end;

procedure TCCoMMSRaman.setMinimumCCDSetpoint(COM_min: Integer);
begin
  DefaultInterface.setMinimumCCDSetpoint(COM_min);
end;

function TCCoMMSRaman.getMaximumCCDSetpoint: Integer;
begin
  Result := DefaultInterface.getMaximumCCDSetpoint;
end;

procedure TCCoMMSRaman.setMaximumCCDSetpoint(COM_max: Integer);
begin
  DefaultInterface.setMaximumCCDSetpoint(COM_max);
end;

function TCCoMMSRaman.getThermistor: Single;
begin
  Result := DefaultInterface.getThermistor;
end;

function TCCoMMSRaman.isThermFault: WordBool;
begin
  Result := DefaultInterface.isThermFault;
end;

function TCCoMMSRaman.isTempLock: WordBool;
begin
  Result := DefaultInterface.isTempLock;
end;

function TCCoMMSRaman.getShutterState: Shortint;
begin
  Result := DefaultInterface.getShutterState;
end;

function TCCoMMSRaman.isShutterOpen: WordBool;
begin
  Result := DefaultInterface.isShutterOpen;
end;

procedure TCCoMMSRaman.openShutter;
begin
  DefaultInterface.openShutter;
end;

procedure TCCoMMSRaman.closeShutter;
begin
  DefaultInterface.closeShutter;
end;

function TCCoMMSRaman.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoMMSRaman.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoMMSRaman.getWavelengths(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_index);
end;

procedure TCCoMMSRaman.setWavelengths(COM_wl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setWavelengths(COM_wl, COM_index);
end;

function TCCoMMSRaman.getFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFirmwareVersion;
end;

procedure TCCoMMSRaman.setDSPFirmwareVersion(const COM_dsp: WideString);
begin
  DefaultInterface.setDSPFirmwareVersion(COM_dsp);
end;

function TCCoMMSRaman.getDSPFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getDSPFirmwareVersion;
end;

procedure TCCoMMSRaman.setFPGAFirmwareVersion(const COM_fpga: WideString);
begin
  DefaultInterface.setFPGAFirmwareVersion(COM_fpga);
end;

function TCCoMMSRaman.getFPGAFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFPGAFirmwareVersion;
end;

procedure TCCoMMSRaman.setUSBFirmwareVersion(const COM_usb: WideString);
begin
  DefaultInterface.setUSBFirmwareVersion(COM_usb);
end;

function TCCoMMSRaman.getUSBFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getUSBFirmwareVersion;
end;

function TCCoMMSRaman.getSpectrometer: ICoMMSRaman;
begin
  Result := DefaultInterface.getSpectrometer;
end;

procedure TCCoMMSRaman.setMasterClock(COM_rate: Integer);
begin
  DefaultInterface.setMasterClock(COM_rate);
end;

function TCCoMMSRaman.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoMMSRaman.getConfiguration: ICoConfiguration;
begin
  Result := DefaultInterface.getConfiguration;
end;

procedure TCCoMMSRaman.addExposureListener(const COM_listener: ICoExposureListener);
begin
  DefaultInterface.addExposureListener(COM_listener);
end;

procedure TCCoMMSRaman.removeExposureListener(const COM_listener: ICoExposureListener);
begin
  DefaultInterface.removeExposureListener(COM_listener);
end;

function TCCoMMSRaman.getLastExposure: ICoSpectrometerExposure;
begin
  Result := DefaultInterface.getLastExposure;
end;

function TCCoMMSRaman.has1DMode: WordBool;
begin
  Result := DefaultInterface.has1DMode;
end;

procedure TCCoMMSRaman.set2DMode(COM_channel: Integer);
begin
  DefaultInterface.set2DMode(COM_channel);
end;

procedure TCCoMMSRaman.set1DMode(COM_channel: Integer);
begin
  DefaultInterface.set1DMode(COM_channel);
end;

function TCCoMMSRaman.is2DMode: WordBool;
begin
  Result := DefaultInterface.is2DMode;
end;

function TCCoMMSRaman.is1DMode: WordBool;
begin
  Result := DefaultInterface.is1DMode;
end;

function TCCoMMSRaman.get2DintegrationTime: Integer;
begin
  Result := DefaultInterface.get2DintegrationTime;
end;

procedure TCCoMMSRaman.addIntegrationTimeChangeListener(const COM_listener: ICoIntegrationTimeChangeListener);
begin
  DefaultInterface.addIntegrationTimeChangeListener(COM_listener);
end;

procedure TCCoMMSRaman.removeIntegrationTimeChangeListener(const COM_listener: ICoIntegrationTimeChangeListener);
begin
  DefaultInterface.removeIntegrationTimeChangeListener(COM_listener);
end;

procedure TCCoMMSRaman.fireIntegrationTimeChanged(COM_time: Integer);
begin
  DefaultInterface.fireIntegrationTimeChanged(COM_time);
end;

function TCCoMMSRaman.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMMSRamanProperties.Create(AServer: TCCoMMSRaman);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMMSRamanProperties.GetDefaultInterface: ICoMMSRaman;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoFirmware.Create: ICoFirmware;
begin
  Result := CreateComObject(CLASS_CCoFirmware) as ICoFirmware;
end;

class function CoCCoFirmware.CreateRemote(const MachineName: string): ICoFirmware;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoFirmware) as ICoFirmware;
end;

procedure TCCoFirmware.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{1CC95AC8-4092-5C89-819A-8A6E9B4C52A5}';
    IntfIID:   '{FDC0ACBD-1104-5143-818D-1772E6FEBCD9}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoFirmware.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoFirmware;
  end;
end;

procedure TCCoFirmware.ConnectTo(svrIntf: ICoFirmware);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoFirmware.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoFirmware.GetDefaultInterface: ICoFirmware;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoFirmware.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoFirmwareProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoFirmware.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoFirmware.GetServerProperties: TCCoFirmwareProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoFirmware.CreateFirmware;
begin
  DefaultInterface.CreateFirmware;
end;

function TCCoFirmware.getFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFirmwareVersion;
end;

procedure TCCoFirmware.setDSPFirmwareVersion(const COM_param0: WideString);
begin
  DefaultInterface.setDSPFirmwareVersion(COM_param0);
end;

function TCCoFirmware.getDSPFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getDSPFirmwareVersion;
end;

procedure TCCoFirmware.setFPGAFirmwareVersion(const COM_param0: WideString);
begin
  DefaultInterface.setFPGAFirmwareVersion(COM_param0);
end;

function TCCoFirmware.getFPGAFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFPGAFirmwareVersion;
end;

procedure TCCoFirmware.setUSBFirmwareVersion(const COM_param0: WideString);
begin
  DefaultInterface.setUSBFirmwareVersion(COM_param0);
end;

function TCCoFirmware.getUSBFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getUSBFirmwareVersion;
end;

function TCCoFirmware.getSpectrometer: ICoMMSRaman;
begin
  Result := DefaultInterface.getSpectrometer;
end;

function TCCoFirmware.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoFirmwareProperties.Create(AServer: TCCoFirmware);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoFirmwareProperties.GetDefaultInterface: ICoFirmware;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoFirmwareGUIProvider.Create: ICoFirmwareGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoFirmwareGUIProvider) as ICoFirmwareGUIProvider;
end;

class function CoCCoFirmwareGUIProvider.CreateRemote(const MachineName: string): ICoFirmwareGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoFirmwareGUIProvider) as ICoFirmwareGUIProvider;
end;

procedure TCCoFirmwareGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F66E1982-60BD-54F5-81A8-5FEC228EE0DE}';
    IntfIID:   '{47B816EB-195A-5AFB-80E1-FAD38CEAA204}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoFirmwareGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoFirmwareGUIProvider;
  end;
end;

procedure TCCoFirmwareGUIProvider.ConnectTo(svrIntf: ICoFirmwareGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoFirmwareGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoFirmwareGUIProvider.GetDefaultInterface: ICoFirmwareGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoFirmwareGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoFirmwareGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoFirmwareGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoFirmwareGUIProvider.GetServerProperties: TCCoFirmwareGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoFirmwareGUIProvider.CreateFirmwareGUIProvider;
begin
  DefaultInterface.CreateFirmwareGUIProvider;
end;

function TCCoFirmwareGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoFirmwareGUIProviderProperties.Create(AServer: TCCoFirmwareGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoFirmwareGUIProviderProperties.GetDefaultInterface: ICoFirmwareGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoFirmwareImpl.Create: ICoFirmwareImpl;
begin
  Result := CreateComObject(CLASS_CCoFirmwareImpl) as ICoFirmwareImpl;
end;

class function CoCCoFirmwareImpl.CreateRemote(const MachineName: string): ICoFirmwareImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoFirmwareImpl) as ICoFirmwareImpl;
end;

procedure TCCoFirmwareImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{FA1E3DE4-1E08-54A0-8158-F0D2F7A6A0D0}';
    IntfIID:   '{5B5A1BB3-E36E-5C0A-81D4-EB75E400F330}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoFirmwareImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoFirmwareImpl;
  end;
end;

procedure TCCoFirmwareImpl.ConnectTo(svrIntf: ICoFirmwareImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoFirmwareImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoFirmwareImpl.GetDefaultInterface: ICoFirmwareImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoFirmwareImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoFirmwareImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoFirmwareImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoFirmwareImpl.GetServerProperties: TCCoFirmwareImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoFirmwareImpl.CreateFirmwareImplB(const COM_usbInt: ICoUSBInterface; 
                                               const COM_spec: ICoMMSRaman);
begin
  DefaultInterface.CreateFirmwareImplB(COM_usbInt, COM_spec);
end;

function TCCoFirmwareImpl.getFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFirmwareVersion;
end;

procedure TCCoFirmwareImpl.setDSPFirmwareVersion(const COM_dsp: WideString);
begin
  DefaultInterface.setDSPFirmwareVersion(COM_dsp);
end;

function TCCoFirmwareImpl.getDSPFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getDSPFirmwareVersion;
end;

procedure TCCoFirmwareImpl.setFPGAFirmwareVersion(const COM_fpga: WideString);
begin
  DefaultInterface.setFPGAFirmwareVersion(COM_fpga);
end;

function TCCoFirmwareImpl.getFPGAFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFPGAFirmwareVersion;
end;

procedure TCCoFirmwareImpl.setUSBFirmwareVersion(const COM_usb: WideString);
begin
  DefaultInterface.setUSBFirmwareVersion(COM_usb);
end;

function TCCoFirmwareImpl.getUSBFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getUSBFirmwareVersion;
end;

function TCCoFirmwareImpl.getSpectrometer: ICoMMSRaman;
begin
  Result := DefaultInterface.getSpectrometer;
end;

function TCCoFirmwareImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoFirmwareImplProperties.Create(AServer: TCCoFirmwareImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoFirmwareImplProperties.GetDefaultInterface: ICoFirmwareImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoGateDelayListener.Create: ICoGateDelayListener;
begin
  Result := CreateComObject(CLASS_CCoGateDelayListener) as ICoGateDelayListener;
end;

class function CoCCoGateDelayListener.CreateRemote(const MachineName: string): ICoGateDelayListener;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoGateDelayListener) as ICoGateDelayListener;
end;

procedure TCCoGateDelayListener.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3FD39E84-E4C3-5554-80F2-62EA6A11F4CA}';
    IntfIID:   '{8847C63C-1DCF-569F-80BB-F5B90BD93762}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoGateDelayListener.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoGateDelayListener;
  end;
end;

procedure TCCoGateDelayListener.ConnectTo(svrIntf: ICoGateDelayListener);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoGateDelayListener.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoGateDelayListener.GetDefaultInterface: ICoGateDelayListener;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoGateDelayListener.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoGateDelayListenerProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoGateDelayListener.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoGateDelayListener.GetServerProperties: TCCoGateDelayListenerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoGateDelayListener.CreateGateDelayListener;
begin
  DefaultInterface.CreateGateDelayListener;
end;

procedure TCCoGateDelayListener.gateDelayValueChanged(COM_param0: Integer);
begin
  DefaultInterface.gateDelayValueChanged(COM_param0);
end;

function TCCoGateDelayListener.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoGateDelayListenerProperties.Create(AServer: TCCoGateDelayListener);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoGateDelayListenerProperties.GetDefaultInterface: ICoGateDelayListener;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoFlGated.Create: ICoFlGated;
begin
  Result := CreateComObject(CLASS_CCoFlGated) as ICoFlGated;
end;

class function CoCCoFlGated.CreateRemote(const MachineName: string): ICoFlGated;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoFlGated) as ICoFlGated;
end;

procedure TCCoFlGated.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F6A161EE-322E-5653-81EE-1AA3D8944F54}';
    IntfIID:   '{E0F12890-325C-56F2-8015-B1971613A693}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoFlGated.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoFlGated;
  end;
end;

procedure TCCoFlGated.ConnectTo(svrIntf: ICoFlGated);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoFlGated.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoFlGated.GetDefaultInterface: ICoFlGated;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoFlGated.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoFlGatedProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoFlGated.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoFlGated.GetServerProperties: TCCoFlGatedProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoFlGated.CreateFlGated;
begin
  DefaultInterface.CreateFlGated;
end;

function TCCoFlGated.getGateIncrement: Integer;
begin
  Result := DefaultInterface.getGateIncrement;
end;

function TCCoFlGated.getGateMaximum: Integer;
begin
  Result := DefaultInterface.getGateMaximum;
end;

function TCCoFlGated.getGateMinimum: Integer;
begin
  Result := DefaultInterface.getGateMinimum;
end;

procedure TCCoFlGated.setGateFrequency(COM_param0: Integer);
begin
  DefaultInterface.setGateFrequency(COM_param0);
end;

function TCCoFlGated.getGateFrequency: Integer;
begin
  Result := DefaultInterface.getGateFrequency;
end;

procedure TCCoFlGated.addGateDelayListener(const COM_param0: ICoGateDelayListener);
begin
  DefaultInterface.addGateDelayListener(COM_param0);
end;

procedure TCCoFlGated.removeGateDelayListener(const COM_param0: ICoGateDelayListener);
begin
  DefaultInterface.removeGateDelayListener(COM_param0);
end;

function TCCoFlGated.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoFlGatedProperties.Create(AServer: TCCoFlGated);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoFlGatedProperties.GetDefaultInterface: ICoFlGated;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoFlGatedGUIProvider.Create: ICoFlGatedGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoFlGatedGUIProvider) as ICoFlGatedGUIProvider;
end;

class function CoCCoFlGatedGUIProvider.CreateRemote(const MachineName: string): ICoFlGatedGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoFlGatedGUIProvider) as ICoFlGatedGUIProvider;
end;

procedure TCCoFlGatedGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4C243652-4E99-5A80-904D-1E61393C904B}';
    IntfIID:   '{37348848-0827-56C8-81DC-0CCC335AEE0F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoFlGatedGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoFlGatedGUIProvider;
  end;
end;

procedure TCCoFlGatedGUIProvider.ConnectTo(svrIntf: ICoFlGatedGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoFlGatedGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoFlGatedGUIProvider.GetDefaultInterface: ICoFlGatedGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoFlGatedGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoFlGatedGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoFlGatedGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoFlGatedGUIProvider.GetServerProperties: TCCoFlGatedGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoFlGatedGUIProvider.CreateFlGatedGUIProvider;
begin
  DefaultInterface.CreateFlGatedGUIProvider;
end;

function TCCoFlGatedGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoFlGatedGUIProviderProperties.Create(AServer: TCCoFlGatedGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoFlGatedGUIProviderProperties.GetDefaultInterface: ICoFlGatedGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectrometerPlugIn.Create: ICoSpectrometerPlugIn;
begin
  Result := CreateComObject(CLASS_CCoSpectrometerPlugIn) as ICoSpectrometerPlugIn;
end;

class function CoCCoSpectrometerPlugIn.CreateRemote(const MachineName: string): ICoSpectrometerPlugIn;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrometerPlugIn) as ICoSpectrometerPlugIn;
end;

procedure TCCoSpectrometerPlugIn.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{75E5F91F-DF61-5312-81D2-B1668117E1AE}';
    IntfIID:   '{9ECA58FC-F445-52B6-90FB-950D2205F4F3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrometerPlugIn.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrometerPlugIn;
  end;
end;

procedure TCCoSpectrometerPlugIn.ConnectTo(svrIntf: ICoSpectrometerPlugIn);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrometerPlugIn.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrometerPlugIn.GetDefaultInterface: ICoSpectrometerPlugIn;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrometerPlugIn.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrometerPlugInProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrometerPlugIn.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrometerPlugIn.GetServerProperties: TCCoSpectrometerPlugInProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSpectrometerPlugIn.CreateSpectrometerPlugIn;
begin
  DefaultInterface.CreateSpectrometerPlugIn;
end;

function TCCoSpectrometerPlugIn.getName(COM_productID: Integer): WideString;
begin
  Result := DefaultInterface.getName(COM_productID);
end;

function TCCoSpectrometerPlugIn.getNameB: WideString;
begin
  Result := DefaultInterface.getNameB;
end;

function TCCoSpectrometerPlugIn.getClassName(COM_productID: Integer): WideString;
begin
  Result := DefaultInterface.getClassName(COM_productID);
end;

function TCCoSpectrometerPlugIn.getClassNameB: WideString;
begin
  Result := DefaultInterface.getClassNameB;
end;

function TCCoSpectrometerPlugIn.getUSBSpectrometer: ICoUSBSpectrometer;
begin
  Result := DefaultInterface.getUSBSpectrometer;
end;

function TCCoSpectrometerPlugIn.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrometerPlugInProperties.Create(AServer: TCCoSpectrometerPlugIn);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrometerPlugInProperties.GetDefaultInterface: ICoSpectrometerPlugIn;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectrometerPlugInCollection.Create: ICoSpectrometerPlugInCollection;
begin
  Result := CreateComObject(CLASS_CCoSpectrometerPlugInCollection) as ICoSpectrometerPlugInCollection;
end;

class function CoCCoSpectrometerPlugInCollection.CreateRemote(const MachineName: string): ICoSpectrometerPlugInCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrometerPlugInCollection) as ICoSpectrometerPlugInCollection;
end;

procedure TCCoSpectrometerPlugInCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7105FC09-CE66-558F-8065-665325C09B71}';
    IntfIID:   '{2E0D8121-FD64-5F98-91EF-F91E783AD312}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrometerPlugInCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrometerPlugInCollection;
  end;
end;

procedure TCCoSpectrometerPlugInCollection.ConnectTo(svrIntf: ICoSpectrometerPlugInCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrometerPlugInCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrometerPlugInCollection.GetDefaultInterface: ICoSpectrometerPlugInCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrometerPlugInCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrometerPlugInCollectionProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrometerPlugInCollection.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrometerPlugInCollection.GetServerProperties: TCCoSpectrometerPlugInCollectionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCCoSpectrometerPlugInCollection.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TCCoSpectrometerPlugInCollection.Item(index: OleVariant): OleVariant;
begin
  Result := DefaultInterface.Item(index);
end;

procedure TCCoSpectrometerPlugInCollection.Add(const pnewSpectrometerPlugInCollection: IDispatch);
begin
  DefaultInterface.Add(pnewSpectrometerPlugInCollection);
end;

procedure TCCoSpectrometerPlugInCollection.Remove(index: Integer);
begin
  DefaultInterface.Remove(index);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrometerPlugInCollectionProperties.Create(AServer: TCCoSpectrometerPlugInCollection);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrometerPlugInCollectionProperties.GetDefaultInterface: ICoSpectrometerPlugInCollection;
begin
  Result := FServer.DefaultInterface;
end;

function TCCoSpectrometerPlugInCollectionProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoCCoUSB2000.Create: ICoUSB2000;
begin
  Result := CreateComObject(CLASS_CCoUSB2000) as ICoUSB2000;
end;

class function CoCCoUSB2000.CreateRemote(const MachineName: string): ICoUSB2000;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSB2000) as ICoUSB2000;
end;

procedure TCCoUSB2000.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7EAA09BE-5FCD-5565-81F4-F928E8286B5C}';
    IntfIID:   '{EC2C8E6D-72F2-52C3-818C-8785512F1B9F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSB2000.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSB2000;
  end;
end;

procedure TCCoUSB2000.ConnectTo(svrIntf: ICoUSB2000);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSB2000.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSB2000.GetDefaultInterface: ICoUSB2000;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSB2000.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSB2000Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSB2000.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSB2000.GetServerProperties: TCCoUSB2000Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSB2000.CreateUSB2000;
begin
  DefaultInterface.CreateUSB2000;
end;

procedure TCCoUSB2000.CreateUSB2000B(COM_i: Integer);
begin
  DefaultInterface.CreateUSB2000B(COM_i);
end;

procedure TCCoUSB2000.setEndpoints;
begin
  DefaultInterface.setEndpoints;
end;

function TCCoUSB2000.getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getEndpoint(COM_endPoint);
end;

procedure TCCoUSB2000.openSpectrometer(COM_index: Integer);
begin
  DefaultInterface.openSpectrometer(COM_index);
end;

function TCCoUSB2000.getUniUsb: ICoUSBInterface;
begin
  Result := DefaultInterface.getUniUsb;
end;

function TCCoUSB2000.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

function TCCoUSB2000.isFlGated: WordBool;
begin
  Result := DefaultInterface.isFlGated;
end;

function TCCoUSB2000.isCurie: WordBool;
begin
  Result := DefaultInterface.isCurie;
end;

function TCCoUSB2000.getStatus: ICoSpectrometerStatus;
begin
  Result := DefaultInterface.getStatus;
end;

function TCCoUSB2000.readIntegrationTime: Integer;
begin
  Result := DefaultInterface.readIntegrationTime;
end;

procedure TCCoUSB2000.setMasterClock(COM_freq: Integer);
begin
  DefaultInterface.setMasterClock(COM_freq);
end;

function TCCoUSB2000.getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
begin
  Result := DefaultInterface.getIrradianceCalibrationFactors(COM_address);
end;

procedure TCCoUSB2000.setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant);
begin
  DefaultInterface.setIrradianceCalibrationFactors(COM_address, COM_data);
end;

function TCCoUSB2000.getActualIntegrationTime: Integer;
begin
  Result := DefaultInterface.getActualIntegrationTime;
end;

procedure TCCoUSB2000.setStrobeDelay(COM_delay: Integer);
begin
  DefaultInterface.setStrobeDelay(COM_delay);
end;

function TCCoUSB2000.getStrobeDelay: Integer;
begin
  Result := DefaultInterface.getStrobeDelay;
end;

function TCCoUSB2000.getName: WideString;
begin
  Result := DefaultInterface.getName;
end;

function TCCoUSB2000.getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
begin
  Result := DefaultInterface.getSPIBytes(COM_message, COM_length);
end;

procedure TCCoUSB2000.setExternalTriggerMode(COM_mode: Integer);
begin
  DefaultInterface.setExternalTriggerMode(COM_mode);
end;

function TCCoUSB2000.getExternalTriggerModes: ICoExternalTriggerModeCollection;
begin
  Result := DefaultInterface.getExternalTriggerModes;
end;

function TCCoUSB2000.isPlugInDetected(COM_id: Integer): WordBool;
begin
  Result := DefaultInterface.isPlugInDetected(COM_id);
end;

function TCCoUSB2000.getPlugIns: ICoSpectrometerPlugInCollection;
begin
  Result := DefaultInterface.getPlugIns;
end;

function TCCoUSB2000.getNumberOfPlugIns: Integer;
begin
  Result := DefaultInterface.getNumberOfPlugIns;
end;

function TCCoUSB2000.initializePlugIns: OleVariant;
begin
  Result := DefaultInterface.initializePlugIns;
end;

procedure TCCoUSB2000.detectPlugIns;
begin
  DefaultInterface.detectPlugIns;
end;

function TCCoUSB2000.readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readNonlinearityCoefficientsFromSpectrometer;
end;

function TCCoUSB2000.getNonlinearityCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getNonlinearityCoefficients;
end;

function TCCoUSB2000.getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getNonlinearityCoefficientsSingleChannel(COM_index);
end;

procedure TCCoUSB2000.setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; 
                                                               COM_index: Integer);
begin
  DefaultInterface.setNonlinearityCoefficientsSingleChannel(COM_nl, COM_index);
end;

function TCCoUSB2000.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoUSB2000.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoUSB2000.getWavelengths(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_index);
end;

procedure TCCoUSB2000.setWavelengths(COM_wl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setWavelengths(COM_wl, COM_index);
end;

function TCCoUSB2000.readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readStrayLightCorrectionCoefficientFromSpectrometer;
end;

function TCCoUSB2000.getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getStrayLightCorrectionCoefficient;
end;

procedure TCCoUSB2000.setStrayLight(COM_strayLight: Double; COM_index: Integer);
begin
  DefaultInterface.setStrayLight(COM_strayLight, COM_index);
end;

function TCCoUSB2000.getStrayLight(COM_index: Integer): Double;
begin
  Result := DefaultInterface.getStrayLight(COM_index);
end;

function TCCoUSB2000.setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer;
begin
  Result := DefaultInterface.setI2CBytes(COM_address, COM_numBytes, COM_i2C);
end;

function TCCoUSB2000.getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
begin
  Result := DefaultInterface.getI2CBytes(COM_address, COM_numBytes);
end;

function TCCoUSB2000.isAdvancedVersion: WordBool;
begin
  Result := DefaultInterface.isAdvancedVersion;
end;

procedure TCCoUSB2000.addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.addAcquisitionListener(COM_listener);
end;

procedure TCCoUSB2000.removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.removeAcquisitionListener(COM_listener);
end;

function TCCoUSB2000.getGateIncrement: Integer;
begin
  Result := DefaultInterface.getGateIncrement;
end;

function TCCoUSB2000.getGateMaximum: Integer;
begin
  Result := DefaultInterface.getGateMaximum;
end;

function TCCoUSB2000.getGateMinimum: Integer;
begin
  Result := DefaultInterface.getGateMinimum;
end;

procedure TCCoUSB2000.setGateFrequency(COM_freq: Integer);
begin
  DefaultInterface.setGateFrequency(COM_freq);
end;

function TCCoUSB2000.getGateFrequency: Integer;
begin
  Result := DefaultInterface.getGateFrequency;
end;

procedure TCCoUSB2000.addGateDelayListener(const COM_listener: ICoGateDelayListener);
begin
  DefaultInterface.addGateDelayListener(COM_listener);
end;

procedure TCCoUSB2000.removeGateDelayListener(const COM_listener: ICoGateDelayListener);
begin
  DefaultInterface.removeGateDelayListener(COM_listener);
end;

function TCCoUSB2000.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoUSB2000.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSB2000Properties.Create(AServer: TCCoUSB2000);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSB2000Properties.GetDefaultInterface: ICoUSB2000;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoFlGatedImpl.Create: ICoFlGatedImpl;
begin
  Result := CreateComObject(CLASS_CCoFlGatedImpl) as ICoFlGatedImpl;
end;

class function CoCCoFlGatedImpl.CreateRemote(const MachineName: string): ICoFlGatedImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoFlGatedImpl) as ICoFlGatedImpl;
end;

procedure TCCoFlGatedImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EFBC0E91-7BD5-5A21-917F-6FC65D7C844F}';
    IntfIID:   '{F5E105DE-4587-5378-80C1-2FA29B9B1A75}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoFlGatedImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoFlGatedImpl;
  end;
end;

procedure TCCoFlGatedImpl.ConnectTo(svrIntf: ICoFlGatedImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoFlGatedImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoFlGatedImpl.GetDefaultInterface: ICoFlGatedImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoFlGatedImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoFlGatedImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoFlGatedImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoFlGatedImpl.GetServerProperties: TCCoFlGatedImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoFlGatedImpl.CreateFlGatedImplB(const COM_usbInt: ICoUSBInterface; 
                                             const COM_spectrometer: ICoUSB2000);
begin
  DefaultInterface.CreateFlGatedImplB(COM_usbInt, COM_spectrometer);
end;

function TCCoFlGatedImpl.getGateIncrement: Integer;
begin
  Result := DefaultInterface.getGateIncrement;
end;

function TCCoFlGatedImpl.getGateMaximum: Integer;
begin
  Result := DefaultInterface.getGateMaximum;
end;

function TCCoFlGatedImpl.getGateMinimum: Integer;
begin
  Result := DefaultInterface.getGateMinimum;
end;

procedure TCCoFlGatedImpl.setGateFrequency(COM_freq: Integer);
begin
  DefaultInterface.setGateFrequency(COM_freq);
end;

function TCCoFlGatedImpl.getGateFrequency: Integer;
begin
  Result := DefaultInterface.getGateFrequency;
end;

procedure TCCoFlGatedImpl.addGateDelayListener(const COM_listener: ICoGateDelayListener);
begin
  DefaultInterface.addGateDelayListener(COM_listener);
end;

procedure TCCoFlGatedImpl.removeGateDelayListener(const COM_listener: ICoGateDelayListener);
begin
  DefaultInterface.removeGateDelayListener(COM_listener);
end;

function TCCoFlGatedImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoFlGatedImplProperties.Create(AServer: TCCoFlGatedImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoFlGatedImplProperties.GetDefaultInterface: ICoFlGatedImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoGPIO.Create: ICoGPIO;
begin
  Result := CreateComObject(CLASS_CCoGPIO) as ICoGPIO;
end;

class function CoCCoGPIO.CreateRemote(const MachineName: string): ICoGPIO;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoGPIO) as ICoGPIO;
end;

procedure TCCoGPIO.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A69C1504-37F6-51F1-9067-2F75A92CAEB3}';
    IntfIID:   '{7F251211-6B4E-5734-9074-3DB312CBE018}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoGPIO.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoGPIO;
  end;
end;

procedure TCCoGPIO.ConnectTo(svrIntf: ICoGPIO);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoGPIO.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoGPIO.GetDefaultInterface: ICoGPIO;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoGPIO.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoGPIOProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoGPIO.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoGPIO.GetServerProperties: TCCoGPIOProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoGPIO.CreateGPIO;
begin
  DefaultInterface.CreateGPIO;
end;

function TCCoGPIO.getValueBits: ICoBitSet;
begin
  Result := DefaultInterface.getValueBits;
end;

function TCCoGPIO.getValueBit(COM_param0: Integer): Integer;
begin
  Result := DefaultInterface.getValueBit(COM_param0);
end;

procedure TCCoGPIO.setValueAllBits(const COM_param0: ICoBitSet);
begin
  DefaultInterface.setValueAllBits(COM_param0);
end;

procedure TCCoGPIO.setValueBitmask(COM_param0: Smallint);
begin
  DefaultInterface.setValueBitmask(COM_param0);
end;

procedure TCCoGPIO.setValueBit(COM_param0: Integer; COM_param1: WordBool);
begin
  DefaultInterface.setValueBit(COM_param0, COM_param1);
end;

function TCCoGPIO.getDirectionBits: ICoBitSet;
begin
  Result := DefaultInterface.getDirectionBits;
end;

procedure TCCoGPIO.setDirectionAllBits(const COM_param0: ICoBitSet);
begin
  DefaultInterface.setDirectionAllBits(COM_param0);
end;

procedure TCCoGPIO.setDirectionBitmask(COM_param0: Smallint);
begin
  DefaultInterface.setDirectionBitmask(COM_param0);
end;

procedure TCCoGPIO.setDirectionBit(COM_param0: Integer; COM_param1: WordBool);
begin
  DefaultInterface.setDirectionBit(COM_param0, COM_param1);
end;

function TCCoGPIO.getMuxBits: ICoBitSet;
begin
  Result := DefaultInterface.getMuxBits;
end;

function TCCoGPIO.getNumberOfPins: Integer;
begin
  Result := DefaultInterface.getNumberOfPins;
end;

procedure TCCoGPIO.setMuxAllBits(const COM_param0: ICoBitSet);
begin
  DefaultInterface.setMuxAllBits(COM_param0);
end;

procedure TCCoGPIO.setMuxBitmask(COM_param0: Smallint);
begin
  DefaultInterface.setMuxBitmask(COM_param0);
end;

procedure TCCoGPIO.setMuxBit(COM_param0: Integer; COM_param1: WordBool);
begin
  DefaultInterface.setMuxBit(COM_param0, COM_param1);
end;

function TCCoGPIO.getTotalGPIOBits: Integer;
begin
  Result := DefaultInterface.getTotalGPIOBits;
end;

function TCCoGPIO.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoGPIOProperties.Create(AServer: TCCoGPIO);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoGPIOProperties.GetDefaultInterface: ICoGPIO;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoGPIOGUIProvider.Create: ICoGPIOGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoGPIOGUIProvider) as ICoGPIOGUIProvider;
end;

class function CoCCoGPIOGUIProvider.CreateRemote(const MachineName: string): ICoGPIOGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoGPIOGUIProvider) as ICoGPIOGUIProvider;
end;

procedure TCCoGPIOGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4AFE304C-2804-51F1-81CB-336AB8362CAD}';
    IntfIID:   '{3AA51657-9811-53BC-813B-023E956BD45B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoGPIOGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoGPIOGUIProvider;
  end;
end;

procedure TCCoGPIOGUIProvider.ConnectTo(svrIntf: ICoGPIOGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoGPIOGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoGPIOGUIProvider.GetDefaultInterface: ICoGPIOGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoGPIOGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoGPIOGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoGPIOGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoGPIOGUIProvider.GetServerProperties: TCCoGPIOGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoGPIOGUIProvider.CreateGPIOGUIProvider;
begin
  DefaultInterface.CreateGPIOGUIProvider;
end;

function TCCoGPIOGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoGPIOGUIProviderProperties.Create(AServer: TCCoGPIOGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoGPIOGUIProviderProperties.GetDefaultInterface: ICoGPIOGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoGPIOImpl.Create: ICoGPIOImpl;
begin
  Result := CreateComObject(CLASS_CCoGPIOImpl) as ICoGPIOImpl;
end;

class function CoCCoGPIOImpl.CreateRemote(const MachineName: string): ICoGPIOImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoGPIOImpl) as ICoGPIOImpl;
end;

procedure TCCoGPIOImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{810936CE-251F-5DF3-8093-2AF941AD9A28}';
    IntfIID:   '{C6FB307A-460F-5EB6-912A-F0335A58F5CF}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoGPIOImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoGPIOImpl;
  end;
end;

procedure TCCoGPIOImpl.ConnectTo(svrIntf: ICoGPIOImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoGPIOImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoGPIOImpl.GetDefaultInterface: ICoGPIOImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoGPIOImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoGPIOImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoGPIOImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoGPIOImpl.GetServerProperties: TCCoGPIOImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoGPIOImpl.CreateGPIOImplB(const COM_usbInt: ICoUSBInterface; COM_numPins: Integer);
begin
  DefaultInterface.CreateGPIOImplB(COM_usbInt, COM_numPins);
end;

function TCCoGPIOImpl.getTotalGPIOBits: Integer;
begin
  Result := DefaultInterface.getTotalGPIOBits;
end;

function TCCoGPIOImpl.getDirectionBits: ICoBitSet;
begin
  Result := DefaultInterface.getDirectionBits;
end;

function TCCoGPIOImpl.getMuxBits: ICoBitSet;
begin
  Result := DefaultInterface.getMuxBits;
end;

function TCCoGPIOImpl.getValueBits: ICoBitSet;
begin
  Result := DefaultInterface.getValueBits;
end;

function TCCoGPIOImpl.getValueBit(COM_bitNumber: Integer): Integer;
begin
  Result := DefaultInterface.getValueBit(COM_bitNumber);
end;

function TCCoGPIOImpl.getNumberOfPins: Integer;
begin
  Result := DefaultInterface.getNumberOfPins;
end;

procedure TCCoGPIOImpl.setMuxAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setMuxAllBits(COM_bitSet);
end;

procedure TCCoGPIOImpl.setValueAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setValueAllBits(COM_bitSet);
end;

procedure TCCoGPIOImpl.setDirectionAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setDirectionAllBits(COM_bitSet);
end;

procedure TCCoGPIOImpl.setDirectionBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setDirectionBit(COM_bit, COM_value);
end;

procedure TCCoGPIOImpl.setDirectionBitmask(COM_value: Smallint);
begin
  DefaultInterface.setDirectionBitmask(COM_value);
end;

procedure TCCoGPIOImpl.setMuxBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setMuxBit(COM_bit, COM_value);
end;

procedure TCCoGPIOImpl.setMuxBitmask(COM_value: Smallint);
begin
  DefaultInterface.setMuxBitmask(COM_value);
end;

procedure TCCoGPIOImpl.setValueBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setValueBit(COM_bit, COM_value);
end;

procedure TCCoGPIOImpl.setValueBitmask(COM_value: Smallint);
begin
  DefaultInterface.setValueBitmask(COM_value);
end;

function TCCoGPIOImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoGPIOImplProperties.Create(AServer: TCCoGPIOImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoGPIOImplProperties.GetDefaultInterface: ICoGPIOImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoGatingErrorProvider.Create: ICoGatingErrorProvider;
begin
  Result := CreateComObject(CLASS_CCoGatingErrorProvider) as ICoGatingErrorProvider;
end;

class function CoCCoGatingErrorProvider.CreateRemote(const MachineName: string): ICoGatingErrorProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoGatingErrorProvider) as ICoGatingErrorProvider;
end;

procedure TCCoGatingErrorProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{62DCBE18-0156-5B6E-915E-AA6424B1920D}';
    IntfIID:   '{9F4BB6CB-2555-5916-8037-1ABC740D567A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoGatingErrorProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoGatingErrorProvider;
  end;
end;

procedure TCCoGatingErrorProvider.ConnectTo(svrIntf: ICoGatingErrorProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoGatingErrorProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoGatingErrorProvider.GetDefaultInterface: ICoGatingErrorProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoGatingErrorProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoGatingErrorProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoGatingErrorProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoGatingErrorProvider.GetServerProperties: TCCoGatingErrorProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoGatingErrorProvider.CreateGatingErrorProvider;
begin
  DefaultInterface.CreateGatingErrorProvider;
end;

function TCCoGatingErrorProvider.getGatingModeIntegrationTime: Integer;
begin
  Result := DefaultInterface.getGatingModeIntegrationTime;
end;

function TCCoGatingErrorProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoGatingErrorProviderProperties.Create(AServer: TCCoGatingErrorProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoGatingErrorProviderProperties.GetDefaultInterface: ICoGatingErrorProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoGatingErrorProviderImpl.Create: ICoGatingErrorProviderImpl;
begin
  Result := CreateComObject(CLASS_CCoGatingErrorProviderImpl) as ICoGatingErrorProviderImpl;
end;

class function CoCCoGatingErrorProviderImpl.CreateRemote(const MachineName: string): ICoGatingErrorProviderImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoGatingErrorProviderImpl) as ICoGatingErrorProviderImpl;
end;

procedure TCCoGatingErrorProviderImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{AC4435EF-DB0B-5E85-80E9-A827009428EB}';
    IntfIID:   '{EBB3D935-441B-5CAC-80F4-8E0A290EFC3F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoGatingErrorProviderImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoGatingErrorProviderImpl;
  end;
end;

procedure TCCoGatingErrorProviderImpl.ConnectTo(svrIntf: ICoGatingErrorProviderImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoGatingErrorProviderImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoGatingErrorProviderImpl.GetDefaultInterface: ICoGatingErrorProviderImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoGatingErrorProviderImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoGatingErrorProviderImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoGatingErrorProviderImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoGatingErrorProviderImpl.GetServerProperties: TCCoGatingErrorProviderImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoGatingErrorProviderImpl.CreateGatingErrorProviderImplB(const COM_usbInt: ICoUSBInterface; 
                                                                     const COM_spectrometer: ICoSpectrometer);
begin
  DefaultInterface.CreateGatingErrorProviderImplB(COM_usbInt, COM_spectrometer);
end;

procedure TCCoGatingErrorProviderImpl.checkIntegrationTime(COM_intTime: Integer);
begin
  DefaultInterface.checkIntegrationTime(COM_intTime);
end;

procedure TCCoGatingErrorProviderImpl.checkTriggerNotification(COM_mode: Integer);
begin
  DefaultInterface.checkTriggerNotification(COM_mode);
end;

function TCCoGatingErrorProviderImpl.isInGatedMode: WordBool;
begin
  Result := DefaultInterface.isInGatedMode;
end;

procedure TCCoGatingErrorProviderImpl.addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
begin
  DefaultInterface.addOmniDriverDispatchListener(COM_listener);
end;

procedure TCCoGatingErrorProviderImpl.removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
begin
  DefaultInterface.removeOmniDriverDispatchListener(COM_listener);
end;

function TCCoGatingErrorProviderImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoGatingErrorProviderImplProperties.Create(AServer: TCCoGatingErrorProviderImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoGatingErrorProviderImplProperties.GetDefaultInterface: ICoGatingErrorProviderImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoHR2000.Create: ICoHR2000;
begin
  Result := CreateComObject(CLASS_CCoHR2000) as ICoHR2000;
end;

class function CoCCoHR2000.CreateRemote(const MachineName: string): ICoHR2000;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoHR2000) as ICoHR2000;
end;

procedure TCCoHR2000.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D11F559D-503B-5AD3-8062-EF0144C71F8D}';
    IntfIID:   '{8058AC8B-131A-59FC-819F-44AB2CC0B5E5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoHR2000.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoHR2000;
  end;
end;

procedure TCCoHR2000.ConnectTo(svrIntf: ICoHR2000);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoHR2000.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoHR2000.GetDefaultInterface: ICoHR2000;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoHR2000.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoHR2000Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoHR2000.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoHR2000.GetServerProperties: TCCoHR2000Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoHR2000.CreateHR2000;
begin
  DefaultInterface.CreateHR2000;
end;

procedure TCCoHR2000.CreateHR2000B(COM_i: Integer);
begin
  DefaultInterface.CreateHR2000B(COM_i);
end;

procedure TCCoHR2000.setEndpoints;
begin
  DefaultInterface.setEndpoints;
end;

function TCCoHR2000.getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getEndpoint(COM_endPoint);
end;

procedure TCCoHR2000.openSpectrometer(COM_index: Integer);
begin
  DefaultInterface.openSpectrometer(COM_index);
end;

function TCCoHR2000.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

function TCCoHR2000.getActualIntegrationTime: Integer;
begin
  Result := DefaultInterface.getActualIntegrationTime;
end;

function TCCoHR2000.setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; 
                                COM_message: OleVariant): Integer;
begin
  Result := DefaultInterface.setI2CBytes(COM_address, COM_numBytes, COM_message);
end;

function TCCoHR2000.getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
begin
  Result := DefaultInterface.getI2CBytes(COM_address, COM_numBytes);
end;

function TCCoHR2000.isPlugInDetected(COM_id: Integer): WordBool;
begin
  Result := DefaultInterface.isPlugInDetected(COM_id);
end;

function TCCoHR2000.getPlugIns: ICoSpectrometerPlugInCollection;
begin
  Result := DefaultInterface.getPlugIns;
end;

function TCCoHR2000.getNumberOfPlugIns: Integer;
begin
  Result := DefaultInterface.getNumberOfPlugIns;
end;

function TCCoHR2000.initializePlugIns: OleVariant;
begin
  Result := DefaultInterface.initializePlugIns;
end;

procedure TCCoHR2000.detectPlugIns;
begin
  DefaultInterface.detectPlugIns;
end;

procedure TCCoHR2000.setExternalTriggerMode(COM_mode: Integer);
begin
  DefaultInterface.setExternalTriggerMode(COM_mode);
end;

function TCCoHR2000.getExternalTriggerModes: ICoExternalTriggerModeCollection;
begin
  Result := DefaultInterface.getExternalTriggerModes;
end;

function TCCoHR2000.readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readNonlinearityCoefficientsFromSpectrometer;
end;

function TCCoHR2000.getNonlinearityCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getNonlinearityCoefficients;
end;

function TCCoHR2000.getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getNonlinearityCoefficientsSingleChannel(COM_index);
end;

procedure TCCoHR2000.setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setNonlinearityCoefficientsSingleChannel(COM_nl, COM_index);
end;

function TCCoHR2000.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoHR2000.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoHR2000.getWavelengths(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_index);
end;

procedure TCCoHR2000.setWavelengths(COM_wl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setWavelengths(COM_wl, COM_index);
end;

function TCCoHR2000.readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readStrayLightCorrectionCoefficientFromSpectrometer;
end;

function TCCoHR2000.getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getStrayLightCorrectionCoefficient;
end;

procedure TCCoHR2000.setStrayLight(COM_strayLight: Double; COM_index: Integer);
begin
  DefaultInterface.setStrayLight(COM_strayLight, COM_index);
end;

function TCCoHR2000.getStrayLight(COM_index: Integer): Double;
begin
  Result := DefaultInterface.getStrayLight(COM_index);
end;

function TCCoHR2000.isAdvancedVersion: WordBool;
begin
  Result := DefaultInterface.isAdvancedVersion;
end;

procedure TCCoHR2000.addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.addAcquisitionListener(COM_listener);
end;

procedure TCCoHR2000.removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.removeAcquisitionListener(COM_listener);
end;

function TCCoHR2000.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoHR2000Properties.Create(AServer: TCCoHR2000);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoHR2000Properties.GetDefaultInterface: ICoHR2000;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoHR2000Plus.Create: ICoHR2000Plus;
begin
  Result := CreateComObject(CLASS_CCoHR2000Plus) as ICoHR2000Plus;
end;

class function CoCCoHR2000Plus.CreateRemote(const MachineName: string): ICoHR2000Plus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoHR2000Plus) as ICoHR2000Plus;
end;

procedure TCCoHR2000Plus.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DAC05764-24B8-5271-81D7-50AE2033714D}';
    IntfIID:   '{29CCCA88-B0DD-5126-81F3-AF2652AD956B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoHR2000Plus.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoHR2000Plus;
  end;
end;

procedure TCCoHR2000Plus.ConnectTo(svrIntf: ICoHR2000Plus);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoHR2000Plus.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoHR2000Plus.GetDefaultInterface: ICoHR2000Plus;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoHR2000Plus.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoHR2000PlusProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoHR2000Plus.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoHR2000Plus.GetServerProperties: TCCoHR2000PlusProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoHR2000Plus.CreateHR2000Plus;
begin
  DefaultInterface.CreateHR2000Plus;
end;

procedure TCCoHR2000Plus.CreateHR2000PlusB(COM_i: Integer);
begin
  DefaultInterface.CreateHR2000PlusB(COM_i);
end;

procedure TCCoHR2000Plus.setEndpoints;
begin
  DefaultInterface.setEndpoints;
end;

function TCCoHR2000Plus.getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getEndpoint(COM_endPoint);
end;

procedure TCCoHR2000Plus.openSpectrometer(COM_index: Integer);
begin
  DefaultInterface.openSpectrometer(COM_index);
end;

function TCCoHR2000Plus.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

function TCCoHR2000Plus.getStatus: ICoSpectrometerStatus;
begin
  Result := DefaultInterface.getStatus;
end;

function TCCoHR2000Plus.readIntegrationTime: Integer;
begin
  Result := DefaultInterface.readIntegrationTime;
end;

procedure TCCoHR2000Plus.setStrobeDelay(COM_delay: Integer);
begin
  DefaultInterface.setStrobeDelay(COM_delay);
end;

function TCCoHR2000Plus.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoHR2000Plus.getPlugIns: ICoSpectrometerPlugInCollection;
begin
  Result := DefaultInterface.getPlugIns;
end;

function TCCoHR2000Plus.getNumberOfPlugIns: Integer;
begin
  Result := DefaultInterface.getNumberOfPlugIns;
end;

function TCCoHR2000Plus.isPlugInDetected(COM_id: Integer): WordBool;
begin
  Result := DefaultInterface.isPlugInDetected(COM_id);
end;

function TCCoHR2000Plus.initializePlugIns: OleVariant;
begin
  Result := DefaultInterface.initializePlugIns;
end;

procedure TCCoHR2000Plus.detectPlugIns;
begin
  DefaultInterface.detectPlugIns;
end;

function TCCoHR2000Plus.setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; 
                                    COM_i2C: OleVariant): Integer;
begin
  Result := DefaultInterface.setI2CBytes(COM_address, COM_numBytes, COM_i2C);
end;

function TCCoHR2000Plus.getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
begin
  Result := DefaultInterface.getI2CBytes(COM_address, COM_numBytes);
end;

function TCCoHR2000Plus.getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
begin
  Result := DefaultInterface.getSPIBytes(COM_message, COM_length);
end;

function TCCoHR2000Plus.getPSOCVersion: WideString;
begin
  Result := DefaultInterface.getPSOCVersion;
end;

function TCCoHR2000Plus.getFPGAFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFPGAFirmwareVersion;
end;

function TCCoHR2000Plus.continuousStrobeCountsToMicros(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.continuousStrobeCountsToMicros(COM_counts);
end;

procedure TCCoHR2000Plus.setContinuousStrobeDelay(COM_delayMicros: Integer);
begin
  DefaultInterface.setContinuousStrobeDelay(COM_delayMicros);
end;

function TCCoHR2000Plus.getContinuousStrobeDelayMinimum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMinimum;
end;

function TCCoHR2000Plus.getContinuousStrobeDelayMaximum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMaximum;
end;

function TCCoHR2000Plus.getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayIncrement(COM_magnitude);
end;

procedure TCCoHR2000Plus.setAdvancedIntegrationTime(COM_delayMicros: Integer);
begin
  DefaultInterface.setAdvancedIntegrationTime(COM_delayMicros);
end;

function TCCoHR2000Plus.getIntegrationTimeBaseClock: Integer;
begin
  Result := DefaultInterface.getIntegrationTimeBaseClock;
end;

function TCCoHR2000Plus.getIntegrationClockTimer: Integer;
begin
  Result := DefaultInterface.getIntegrationClockTimer;
end;

function TCCoHR2000Plus.getAdvancedIntegrationTimeMinimum: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeMinimum;
end;

function TCCoHR2000Plus.getAdvancedIntegrationTimeMaximum: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeMaximum;
end;

function TCCoHR2000Plus.getAdvancedIntegrationTimeIncrement: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeIncrement;
end;

procedure TCCoHR2000Plus.setExternalTriggerMode(COM_mode: Integer);
begin
  DefaultInterface.setExternalTriggerMode(COM_mode);
end;

function TCCoHR2000Plus.getExternalTriggerModes: ICoExternalTriggerModeCollection;
begin
  Result := DefaultInterface.getExternalTriggerModes;
end;

procedure TCCoHR2000Plus.setShutterClock(COM_value: Integer);
begin
  DefaultInterface.setShutterClock(COM_value);
end;

function TCCoHR2000Plus.getShutterClock: Integer;
begin
  Result := DefaultInterface.getShutterClock;
end;

procedure TCCoHR2000Plus.setSingleStrobeLow(COM_value: Integer);
begin
  DefaultInterface.setSingleStrobeLow(COM_value);
end;

procedure TCCoHR2000Plus.setSingleStrobeHigh(COM_value: Integer);
begin
  DefaultInterface.setSingleStrobeHigh(COM_value);
end;

function TCCoHR2000Plus.getSingleStrobeCountsToMicros(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.getSingleStrobeCountsToMicros(COM_counts);
end;

function TCCoHR2000Plus.getSingleStrobeLow: Integer;
begin
  Result := DefaultInterface.getSingleStrobeLow;
end;

function TCCoHR2000Plus.getSingleStrobeHigh: Integer;
begin
  Result := DefaultInterface.getSingleStrobeHigh;
end;

function TCCoHR2000Plus.getSingleStrobeMinimum: Integer;
begin
  Result := DefaultInterface.getSingleStrobeMinimum;
end;

function TCCoHR2000Plus.getSingleStrobeMaximum: Integer;
begin
  Result := DefaultInterface.getSingleStrobeMaximum;
end;

function TCCoHR2000Plus.getSingleStrobeIncrement: Integer;
begin
  Result := DefaultInterface.getSingleStrobeIncrement;
end;

procedure TCCoHR2000Plus.setDirectionAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setDirectionAllBits(COM_bitSet);
end;

procedure TCCoHR2000Plus.setMuxAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setMuxAllBits(COM_bitSet);
end;

procedure TCCoHR2000Plus.setValueAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setValueAllBits(COM_bitSet);
end;

procedure TCCoHR2000Plus.setDirectionBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setDirectionBitmask(COM_bitmask);
end;

procedure TCCoHR2000Plus.setMuxBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setMuxBitmask(COM_bitmask);
end;

procedure TCCoHR2000Plus.setValueBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setValueBitmask(COM_bitmask);
end;

procedure TCCoHR2000Plus.setDirectionBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setDirectionBit(COM_bit, COM_value);
end;

procedure TCCoHR2000Plus.setMuxBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setMuxBit(COM_bit, COM_value);
end;

procedure TCCoHR2000Plus.setValueBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setValueBit(COM_bit, COM_value);
end;

function TCCoHR2000Plus.getTotalGPIOBits: Integer;
begin
  Result := DefaultInterface.getTotalGPIOBits;
end;

function TCCoHR2000Plus.getDirectionBits: ICoBitSet;
begin
  Result := DefaultInterface.getDirectionBits;
end;

function TCCoHR2000Plus.getMuxBits: ICoBitSet;
begin
  Result := DefaultInterface.getMuxBits;
end;

function TCCoHR2000Plus.getValueBit(COM_bitNumber: Integer): Integer;
begin
  Result := DefaultInterface.getValueBit(COM_bitNumber);
end;

function TCCoHR2000Plus.getValueBits: ICoBitSet;
begin
  Result := DefaultInterface.getValueBits;
end;

function TCCoHR2000Plus.getNumberOfPins: Integer;
begin
  Result := DefaultInterface.getNumberOfPins;
end;

function TCCoHR2000Plus.getBoardTemperatureCelsius: Double;
begin
  Result := DefaultInterface.getBoardTemperatureCelsius;
end;

function TCCoHR2000Plus.getVoltageIn: Double;
begin
  Result := DefaultInterface.getVoltageIn;
end;

procedure TCCoHR2000Plus.setDACCounts(COM_counts: Integer; COM_channelIndex: Integer);
begin
  DefaultInterface.setDACCounts(COM_counts, COM_channelIndex);
end;

function TCCoHR2000Plus.analogOutCountsToVolts(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.analogOutCountsToVolts(COM_counts);
end;

function TCCoHR2000Plus.getDACMinimum: Integer;
begin
  Result := DefaultInterface.getDACMinimum;
end;

function TCCoHR2000Plus.getDACMaximum: Integer;
begin
  Result := DefaultInterface.getDACMaximum;
end;

function TCCoHR2000Plus.getDACIncrement: Integer;
begin
  Result := DefaultInterface.getDACIncrement;
end;

function TCCoHR2000Plus.isDACPresent: WordBool;
begin
  Result := DefaultInterface.isDACPresent;
end;

function TCCoHR2000Plus.getDACPins: Integer;
begin
  Result := DefaultInterface.getDACPins;
end;

function TCCoHR2000Plus.getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
begin
  Result := DefaultInterface.getIrradianceCalibrationFactors(COM_address);
end;

procedure TCCoHR2000Plus.setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant);
begin
  DefaultInterface.setIrradianceCalibrationFactors(COM_address, COM_data);
end;

procedure TCCoHR2000Plus.setMasterClockDivisor(COM_value: Integer);
begin
  DefaultInterface.setMasterClockDivisor(COM_value);
end;

function TCCoHR2000Plus.getMasterClockDivisor: Integer;
begin
  Result := DefaultInterface.getMasterClockDivisor;
end;

procedure TCCoHR2000Plus.setExternalTriggerDelay(COM_counts: Integer);
begin
  DefaultInterface.setExternalTriggerDelay(COM_counts);
end;

function TCCoHR2000Plus.triggerDelayCountsToMicroseconds(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.triggerDelayCountsToMicroseconds(COM_counts);
end;

function TCCoHR2000Plus.getExternalTriggerDelayMinimum: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayMinimum;
end;

function TCCoHR2000Plus.getExternalTriggerDelayMaximum: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayMaximum;
end;

function TCCoHR2000Plus.getExternalTriggerDelayIncrement: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayIncrement;
end;

function TCCoHR2000Plus.readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readNonlinearityCoefficientsFromSpectrometer;
end;

function TCCoHR2000Plus.getNonlinearityCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getNonlinearityCoefficients;
end;

function TCCoHR2000Plus.getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getNonlinearityCoefficientsSingleChannel(COM_index);
end;

procedure TCCoHR2000Plus.setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; 
                                                                  COM_index: Integer);
begin
  DefaultInterface.setNonlinearityCoefficientsSingleChannel(COM_nl, COM_index);
end;

function TCCoHR2000Plus.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoHR2000Plus.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoHR2000Plus.getWavelengths(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_index);
end;

procedure TCCoHR2000Plus.setWavelengths(COM_wl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setWavelengths(COM_wl, COM_index);
end;

function TCCoHR2000Plus.readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readStrayLightCorrectionCoefficientFromSpectrometer;
end;

function TCCoHR2000Plus.getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getStrayLightCorrectionCoefficient;
end;

procedure TCCoHR2000Plus.setStrayLight(COM_strayLight: Double; COM_index: Integer);
begin
  DefaultInterface.setStrayLight(COM_strayLight, COM_index);
end;

function TCCoHR2000Plus.getStrayLight(COM_index: Integer): Double;
begin
  Result := DefaultInterface.getStrayLight(COM_index);
end;

function TCCoHR2000Plus.isAdvancedVersion: WordBool;
begin
  Result := DefaultInterface.isAdvancedVersion;
end;

procedure TCCoHR2000Plus.addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.addAcquisitionListener(COM_listener);
end;

procedure TCCoHR2000Plus.removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.removeAcquisitionListener(COM_listener);
end;

function TCCoHR2000Plus.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoHR2000PlusProperties.Create(AServer: TCCoHR2000Plus);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoHR2000PlusProperties.GetDefaultInterface: ICoHR2000Plus;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoHR2000PlusStatus.Create: ICoHR2000PlusStatus;
begin
  Result := CreateComObject(CLASS_CCoHR2000PlusStatus) as ICoHR2000PlusStatus;
end;

class function CoCCoHR2000PlusStatus.CreateRemote(const MachineName: string): ICoHR2000PlusStatus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoHR2000PlusStatus) as ICoHR2000PlusStatus;
end;

procedure TCCoHR2000PlusStatus.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2696074A-96EE-5AD1-9182-CDE438F4AF2E}';
    IntfIID:   '{6E1C16D0-79F8-54D3-9005-39AA3B39DE4B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoHR2000PlusStatus.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoHR2000PlusStatus;
  end;
end;

procedure TCCoHR2000PlusStatus.ConnectTo(svrIntf: ICoHR2000PlusStatus);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoHR2000PlusStatus.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoHR2000PlusStatus.GetDefaultInterface: ICoHR2000PlusStatus;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoHR2000PlusStatus.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoHR2000PlusStatusProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoHR2000PlusStatus.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoHR2000PlusStatus.GetServerProperties: TCCoHR2000PlusStatusProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoHR2000PlusStatus.CreateHR2000PlusStatus;
begin
  DefaultInterface.CreateHR2000PlusStatus;
end;

function TCCoHR2000PlusStatus.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoHR2000PlusStatus.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoHR2000PlusStatusProperties.Create(AServer: TCCoHR2000PlusStatus);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoHR2000PlusStatusProperties.GetDefaultInterface: ICoHR2000PlusStatus;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSBFeature.Create: ICoUSBFeature;
begin
  Result := CreateComObject(CLASS_CCoUSBFeature) as ICoUSBFeature;
end;

class function CoCCoUSBFeature.CreateRemote(const MachineName: string): ICoUSBFeature;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSBFeature) as ICoUSBFeature;
end;

procedure TCCoUSBFeature.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0099FC20-033D-5A85-8081-5D5F7A328902}';
    IntfIID:   '{310EE4EC-7AE1-5C80-91C2-FEE9E91BEAFB}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSBFeature.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSBFeature;
  end;
end;

procedure TCCoUSBFeature.ConnectTo(svrIntf: ICoUSBFeature);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSBFeature.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSBFeature.GetDefaultInterface: ICoUSBFeature;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSBFeature.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSBFeatureProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSBFeature.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSBFeature.GetServerProperties: TCCoUSBFeatureProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSBFeature.CreateUSBFeatureB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateUSBFeatureB(COM_usbInt);
end;

function TCCoUSBFeature.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSBFeatureProperties.Create(AServer: TCCoUSBFeature);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSBFeatureProperties.GetDefaultInterface: ICoUSBFeature;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSHACoefficients.Create: ICoSHACoefficients;
begin
  Result := CreateComObject(CLASS_CCoSHACoefficients) as ICoSHACoefficients;
end;

class function CoCCoSHACoefficients.CreateRemote(const MachineName: string): ICoSHACoefficients;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSHACoefficients) as ICoSHACoefficients;
end;

procedure TCCoSHACoefficients.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{68DF6113-8E4B-551B-901A-53F453117AC2}';
    IntfIID:   '{D5124C14-8861-556E-910D-115A732BC729}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSHACoefficients.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSHACoefficients;
  end;
end;

procedure TCCoSHACoefficients.ConnectTo(svrIntf: ICoSHACoefficients);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSHACoefficients.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSHACoefficients.GetDefaultInterface: ICoSHACoefficients;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSHACoefficients.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSHACoefficientsProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSHACoefficients.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSHACoefficients.GetServerProperties: TCCoSHACoefficientsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSHACoefficients.CreateSHACoefficients;
begin
  DefaultInterface.CreateSHACoefficients;
end;

procedure TCCoSHACoefficients.setLenIntercept(COM_intercept: Double);
begin
  DefaultInterface.setLenIntercept(COM_intercept);
end;

function TCCoSHACoefficients.getLenIntercept: Double;
begin
  Result := DefaultInterface.getLenIntercept;
end;

procedure TCCoSHACoefficients.setLenFirst(COM_first: Double);
begin
  DefaultInterface.setLenFirst(COM_first);
end;

function TCCoSHACoefficients.getLenFirst: Double;
begin
  Result := DefaultInterface.getLenFirst;
end;

procedure TCCoSHACoefficients.setLenSecond(COM_second: Double);
begin
  DefaultInterface.setLenSecond(COM_second);
end;

function TCCoSHACoefficients.getLenSecond: Double;
begin
  Result := DefaultInterface.getLenSecond;
end;

procedure TCCoSHACoefficients.setIntercept(COM_intercept: Double);
begin
  DefaultInterface.setIntercept(COM_intercept);
end;

function TCCoSHACoefficients.getIntercept: Double;
begin
  Result := DefaultInterface.getIntercept;
end;

procedure TCCoSHACoefficients.setFirst(COM_first: Double);
begin
  DefaultInterface.setFirst(COM_first);
end;

function TCCoSHACoefficients.getFirst: Double;
begin
  Result := DefaultInterface.getFirst;
end;

procedure TCCoSHACoefficients.setSecond(COM_second: Double);
begin
  DefaultInterface.setSecond(COM_second);
end;

function TCCoSHACoefficients.getSecond: Double;
begin
  Result := DefaultInterface.getSecond;
end;

procedure TCCoSHACoefficients.setDefaultIntercept(COM_intercept: Double);
begin
  DefaultInterface.setDefaultIntercept(COM_intercept);
end;

function TCCoSHACoefficients.getDefaultIntercept: Double;
begin
  Result := DefaultInterface.getDefaultIntercept;
end;

procedure TCCoSHACoefficients.setDefaultFirst(COM_first: Double);
begin
  DefaultInterface.setDefaultFirst(COM_first);
end;

function TCCoSHACoefficients.getDefaultFirst: Double;
begin
  Result := DefaultInterface.getDefaultFirst;
end;

procedure TCCoSHACoefficients.setDefaultSecond(COM_second: Double);
begin
  DefaultInterface.setDefaultSecond(COM_second);
end;

function TCCoSHACoefficients.getDefaultSecond: Double;
begin
  Result := DefaultInterface.getDefaultSecond;
end;

procedure TCCoSHACoefficients.setPivotWavelength(COM_wl: Double);
begin
  DefaultInterface.setPivotWavelength(COM_wl);
end;

function TCCoSHACoefficients.getPivotWavelength: Double;
begin
  Result := DefaultInterface.getPivotWavelength;
end;

procedure TCCoSHACoefficients.setPhaseIntercept(COM_intercept: Double);
begin
  DefaultInterface.setPhaseIntercept(COM_intercept);
end;

function TCCoSHACoefficients.getPhaseIntercept: Double;
begin
  Result := DefaultInterface.getPhaseIntercept;
end;

procedure TCCoSHACoefficients.setPhaseFirst(COM_first: Double);
begin
  DefaultInterface.setPhaseFirst(COM_first);
end;

function TCCoSHACoefficients.getPhaseFirst: Double;
begin
  Result := DefaultInterface.getPhaseFirst;
end;

procedure TCCoSHACoefficients.setPhaseSecond(COM_second: Double);
begin
  DefaultInterface.setPhaseSecond(COM_second);
end;

function TCCoSHACoefficients.getPhaseSecond: Double;
begin
  Result := DefaultInterface.getPhaseSecond;
end;

procedure TCCoSHACoefficients.setPhaseThird(COM_third: Double);
begin
  DefaultInterface.setPhaseThird(COM_third);
end;

function TCCoSHACoefficients.getPhaseThird: Double;
begin
  Result := DefaultInterface.getPhaseThird;
end;

procedure TCCoSHACoefficients.setPhaseRangeStart(COM_start: Double);
begin
  DefaultInterface.setPhaseRangeStart(COM_start);
end;

function TCCoSHACoefficients.getPhaseRangeStart: Double;
begin
  Result := DefaultInterface.getPhaseRangeStart;
end;

procedure TCCoSHACoefficients.setPhaseRangeEnd(COM_end: Double);
begin
  DefaultInterface.setPhaseRangeEnd(COM_end);
end;

function TCCoSHACoefficients.getPhaseRangeEnd: Double;
begin
  Result := DefaultInterface.getPhaseRangeEnd;
end;

procedure TCCoSHACoefficients.setPhaseInterceptOut(COM_intercept: Double);
begin
  DefaultInterface.setPhaseInterceptOut(COM_intercept);
end;

function TCCoSHACoefficients.getPhaseInterceptOut: Double;
begin
  Result := DefaultInterface.getPhaseInterceptOut;
end;

procedure TCCoSHACoefficients.setPhaseFirstOut(COM_first: Double);
begin
  DefaultInterface.setPhaseFirstOut(COM_first);
end;

function TCCoSHACoefficients.getPhaseFirstOut: Double;
begin
  Result := DefaultInterface.getPhaseFirstOut;
end;

procedure TCCoSHACoefficients.setPhaseSecondOut(COM_second: Double);
begin
  DefaultInterface.setPhaseSecondOut(COM_second);
end;

function TCCoSHACoefficients.getPhaseSecondOut: Double;
begin
  Result := DefaultInterface.getPhaseSecondOut;
end;

procedure TCCoSHACoefficients.setPhaseThirdOut(COM_third: Double);
begin
  DefaultInterface.setPhaseThirdOut(COM_third);
end;

function TCCoSHACoefficients.getPhaseThirdOut: Double;
begin
  Result := DefaultInterface.getPhaseThirdOut;
end;

procedure TCCoSHACoefficients.setCalibrateWLStart(COM_start: Double);
begin
  DefaultInterface.setCalibrateWLStart(COM_start);
end;

function TCCoSHACoefficients.getCalibrateWLStart: Double;
begin
  Result := DefaultInterface.getCalibrateWLStart;
end;

procedure TCCoSHACoefficients.setCalibrateWLEnd(COM_end: Double);
begin
  DefaultInterface.setCalibrateWLEnd(COM_end);
end;

function TCCoSHACoefficients.getCalibrateWLEnd: Double;
begin
  Result := DefaultInterface.getCalibrateWLEnd;
end;

procedure TCCoSHACoefficients.setNumberOfPhasePoints(COM_points: Integer);
begin
  DefaultInterface.setNumberOfPhasePoints(COM_points);
end;

function TCCoSHACoefficients.getNumberOfPhasePoints: Integer;
begin
  Result := DefaultInterface.getNumberOfPhasePoints;
end;

procedure TCCoSHACoefficients.setPhaseStart(COM_start: Double);
begin
  DefaultInterface.setPhaseStart(COM_start);
end;

function TCCoSHACoefficients.getPhaseStart: Double;
begin
  Result := DefaultInterface.getPhaseStart;
end;

procedure TCCoSHACoefficients.setPhaseEnd(COM_end: Double);
begin
  DefaultInterface.setPhaseEnd(COM_end);
end;

function TCCoSHACoefficients.getPhaseEnd: Double;
begin
  Result := DefaultInterface.getPhaseEnd;
end;

procedure TCCoSHACoefficients.setPhaseStep(COM_step: Double);
begin
  DefaultInterface.setPhaseStep(COM_step);
end;

function TCCoSHACoefficients.getPhaseStep: Double;
begin
  Result := DefaultInterface.getPhaseStep;
end;

procedure TCCoSHACoefficients.setPhasePoints(COM_points: OleVariant);
begin
  DefaultInterface.setPhasePoints(COM_points);
end;

function TCCoSHACoefficients.getPhasePoints: OleVariant;
begin
  Result := DefaultInterface.getPhasePoints;
end;

procedure TCCoSHACoefficients.setScanDirection(COM_direction: Integer);
begin
  DefaultInterface.setScanDirection(COM_direction);
end;

function TCCoSHACoefficients.getScanDirection: Integer;
begin
  Result := DefaultInterface.getScanDirection;
end;

procedure TCCoSHACoefficients.setFinesse(COM_finesse: Double);
begin
  DefaultInterface.setFinesse(COM_finesse);
end;

function TCCoSHACoefficients.getFinesse: Double;
begin
  Result := DefaultInterface.getFinesse;
end;

procedure TCCoSHACoefficients.setMirrorWLLow(COM_wl: Double);
begin
  DefaultInterface.setMirrorWLLow(COM_wl);
end;

function TCCoSHACoefficients.getMirrorWLLow: Double;
begin
  Result := DefaultInterface.getMirrorWLLow;
end;

procedure TCCoSHACoefficients.setMirrorWLHigh(COM_wl: Double);
begin
  DefaultInterface.setMirrorWLHigh(COM_wl);
end;

function TCCoSHACoefficients.getMirrorWLHigh: Double;
begin
  Result := DefaultInterface.getMirrorWLHigh;
end;

function TCCoSHACoefficients.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSHACoefficientsProperties.Create(AServer: TCCoSHACoefficients);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSHACoefficientsProperties.GetDefaultInterface: ICoSHACoefficients;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSHAChannel.Create: ICoSHAChannel;
begin
  Result := CreateComObject(CLASS_CCoSHAChannel) as ICoSHAChannel;
end;

class function CoCCoSHAChannel.CreateRemote(const MachineName: string): ICoSHAChannel;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSHAChannel) as ICoSHAChannel;
end;

procedure TCCoSHAChannel.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7828D6F0-4E67-50C2-91BB-DDAA7ADB985D}';
    IntfIID:   '{2BBF8ED6-703A-5C7E-9115-45E36DB40415}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSHAChannel.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSHAChannel;
  end;
end;

procedure TCCoSHAChannel.ConnectTo(svrIntf: ICoSHAChannel);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSHAChannel.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSHAChannel.GetDefaultInterface: ICoSHAChannel;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSHAChannel.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSHAChannelProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSHAChannel.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSHAChannel.GetServerProperties: TCCoSHAChannelProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSHAChannel.CreateSHAChannelB(const COM_spectrometer: ICoSpectrometer; 
                                           const COM_coefficients: ICoCoefficients; 
                                           COM_index: Integer);
begin
  DefaultInterface.CreateSHAChannelB(COM_spectrometer, COM_coefficients, COM_index);
end;

function TCCoSHAChannel.getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
begin
  Result := DefaultInterface.getSpectrum(COM_spectrum);
end;

function TCCoSHAChannel.getSpectrumB: ICoSpectrum;
begin
  Result := DefaultInterface.getSpectrumB;
end;

function TCCoSHAChannel.findPeak(COM_data: OleVariant; COM_pos: Integer): Double;
begin
  Result := DefaultInterface.findPeak(COM_data, COM_pos);
end;

procedure TCCoSHAChannel.sortPeaks(COM_length: Integer);
begin
  DefaultInterface.sortPeaks(COM_length);
end;

function TCCoSHAChannel.getLength(COM_voltage: Double): Double;
begin
  Result := DefaultInterface.getLength(COM_voltage);
end;

function TCCoSHAChannel.getPhase(COM_wl: Double): Double;
begin
  Result := DefaultInterface.getPhase(COM_wl);
end;

function TCCoSHAChannel.getMaxNumberOfCounts: Integer;
begin
  Result := DefaultInterface.getMaxNumberOfCounts;
end;

procedure TCCoSHAChannel.getSHACoefficientsFromDevice;
begin
  DefaultInterface.getSHACoefficientsFromDevice;
end;

function TCCoSHAChannel.getConstant(COM_slot: Integer): WideString;
begin
  Result := DefaultInterface.getConstant(COM_slot);
end;

procedure TCCoSHAChannel.saveSHACoefficients;
begin
  DefaultInterface.saveSHACoefficients;
end;

function TCCoSHAChannel.saveConstant(COM_slot: Integer; const COM_str: WideString): Integer;
begin
  Result := DefaultInterface.saveConstant(COM_slot, COM_str);
end;

function TCCoSHAChannel.getPixel(COM_wl: Double): Integer;
begin
  Result := DefaultInterface.getPixel(COM_wl);
end;

function TCCoSHAChannel.calcPixel(COM_wl: Double): Integer;
begin
  Result := DefaultInterface.calcPixel(COM_wl);
end;

function TCCoSHAChannel.getWavelength(COM_pixel: Integer): Double;
begin
  Result := DefaultInterface.getWavelength(COM_pixel);
end;

function TCCoSHAChannel.getWavelengthB(COM_pixel: Double): Double;
begin
  Result := DefaultInterface.getWavelengthB(COM_pixel);
end;

function TCCoSHAChannel.getAllWavelengths: OleVariant;
begin
  Result := DefaultInterface.getAllWavelengths;
end;

function TCCoSHAChannel.getSHACoefficients: ICoSHACoefficients;
begin
  Result := DefaultInterface.getSHACoefficients;
end;

function TCCoSHAChannel.getNumberOfVoltageSteps: Integer;
begin
  Result := DefaultInterface.getNumberOfVoltageSteps;
end;

function TCCoSHAChannel.getNumberOfSpectrometerPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfSpectrometerPixels;
end;

function TCCoSHAChannel.getSHASerialNumber: WideString;
begin
  Result := DefaultInterface.getSHASerialNumber;
end;

function TCCoSHAChannel.getSHAFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getSHAFirmwareVersion;
end;

function TCCoSHAChannel.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSHAChannelProperties.Create(AServer: TCCoSHAChannel);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSHAChannelProperties.GetDefaultInterface: ICoSHAChannel;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoHR4000.Create: ICoHR4000;
begin
  Result := CreateComObject(CLASS_CCoHR4000) as ICoHR4000;
end;

class function CoCCoHR4000.CreateRemote(const MachineName: string): ICoHR4000;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoHR4000) as ICoHR4000;
end;

procedure TCCoHR4000.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3D3236DB-C21B-5C2D-8121-A2A064D0888B}';
    IntfIID:   '{030F5B15-9E20-527F-9195-7FE3AF687B60}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoHR4000.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoHR4000;
  end;
end;

procedure TCCoHR4000.ConnectTo(svrIntf: ICoHR4000);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoHR4000.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoHR4000.GetDefaultInterface: ICoHR4000;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoHR4000.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoHR4000Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoHR4000.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoHR4000.GetServerProperties: TCCoHR4000Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoHR4000.CreateHR4000;
begin
  DefaultInterface.CreateHR4000;
end;

procedure TCCoHR4000.CreateHR4000B(COM_i: Integer);
begin
  DefaultInterface.CreateHR4000B(COM_i);
end;

procedure TCCoHR4000.setEndpoints;
begin
  DefaultInterface.setEndpoints;
end;

function TCCoHR4000.getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getEndpoint(COM_endPoint);
end;

procedure TCCoHR4000.openSpectrometer(COM_index: Integer);
begin
  DefaultInterface.openSpectrometer(COM_index);
end;

function TCCoHR4000.getFeatureControllerGPIO: ICoUSBFeature;
begin
  Result := DefaultInterface.getFeatureControllerGPIO;
end;

function TCCoHR4000.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

procedure TCCoHR4000.readSpectrum(COM_data: OleVariant);
begin
  DefaultInterface.readSpectrum(COM_data);
end;

procedure TCCoHR4000.readSpectrumB;
begin
  DefaultInterface.readSpectrumB;
end;

function TCCoHR4000.readIntegrationTime: Integer;
begin
  Result := DefaultInterface.readIntegrationTime;
end;

procedure TCCoHR4000.setIntegrationTime(COM_intTime: Integer);
begin
  DefaultInterface.setIntegrationTime(COM_intTime);
end;

function TCCoHR4000.getGatingModeIntegrationTime: Integer;
begin
  Result := DefaultInterface.getGatingModeIntegrationTime;
end;

procedure TCCoHR4000.addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
begin
  DefaultInterface.addOmniDriverDispatchListener(COM_listener);
end;

procedure TCCoHR4000.removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
begin
  DefaultInterface.removeOmniDriverDispatchListener(COM_listener);
end;

function TCCoHR4000.getName: WideString;
begin
  Result := DefaultInterface.getName;
end;

function TCCoHR4000.isSHAEnabled: WordBool;
begin
  Result := DefaultInterface.isSHAEnabled;
end;

procedure TCCoHR4000.enableSHA(COM_enable: WordBool);
begin
  DefaultInterface.enableSHA(COM_enable);
end;

procedure TCCoHR4000.setStrobeDelay(COM_delay: Integer);
begin
  DefaultInterface.setStrobeDelay(COM_delay);
end;

function TCCoHR4000.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

procedure TCCoHR4000.setAdvancedIntegrationTime(COM_delayMicros: Integer);
begin
  DefaultInterface.setAdvancedIntegrationTime(COM_delayMicros);
end;

function TCCoHR4000.getIntegrationTimeBaseClock: Integer;
begin
  Result := DefaultInterface.getIntegrationTimeBaseClock;
end;

function TCCoHR4000.getIntegrationClockTimer: Integer;
begin
  Result := DefaultInterface.getIntegrationClockTimer;
end;

function TCCoHR4000.getAdvancedIntegrationTimeMinimum: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeMinimum;
end;

function TCCoHR4000.getAdvancedIntegrationTimeMaximum: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeMaximum;
end;

function TCCoHR4000.getAdvancedIntegrationTimeIncrement: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeIncrement;
end;

function TCCoHR4000.getPSOCVersion: WideString;
begin
  Result := DefaultInterface.getPSOCVersion;
end;

function TCCoHR4000.getFPGAFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFPGAFirmwareVersion;
end;

function TCCoHR4000.getVoltageIn: Double;
begin
  Result := DefaultInterface.getVoltageIn;
end;

procedure TCCoHR4000.setDACCounts(COM_counts: Integer; COM_index: Integer);
begin
  DefaultInterface.setDACCounts(COM_counts, COM_index);
end;

function TCCoHR4000.analogOutCountsToVolts(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.analogOutCountsToVolts(COM_counts);
end;

function TCCoHR4000.getDACMinimum: Integer;
begin
  Result := DefaultInterface.getDACMinimum;
end;

function TCCoHR4000.getDACMaximum: Integer;
begin
  Result := DefaultInterface.getDACMaximum;
end;

function TCCoHR4000.getDACIncrement: Integer;
begin
  Result := DefaultInterface.getDACIncrement;
end;

function TCCoHR4000.isDACPresent: WordBool;
begin
  Result := DefaultInterface.isDACPresent;
end;

function TCCoHR4000.getDACPins: Integer;
begin
  Result := DefaultInterface.getDACPins;
end;

function TCCoHR4000.getBoardTemperatureCelsius: Double;
begin
  Result := DefaultInterface.getBoardTemperatureCelsius;
end;

procedure TCCoHR4000.setContinuousStrobeDelay(COM_delayMicros: Integer);
begin
  DefaultInterface.setContinuousStrobeDelay(COM_delayMicros);
end;

function TCCoHR4000.getContinuousStrobeDelayMinimum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMinimum;
end;

function TCCoHR4000.getContinuousStrobeDelayMaximum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMaximum;
end;

function TCCoHR4000.getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayIncrement(COM_magnitude);
end;

function TCCoHR4000.continuousStrobeCountsToMicros(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.continuousStrobeCountsToMicros(COM_counts);
end;

procedure TCCoHR4000.setExternalTriggerDelay(COM_counts: Integer);
begin
  DefaultInterface.setExternalTriggerDelay(COM_counts);
end;

function TCCoHR4000.triggerDelayCountsToMicroseconds(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.triggerDelayCountsToMicroseconds(COM_counts);
end;

function TCCoHR4000.getExternalTriggerDelayMinimum: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayMinimum;
end;

function TCCoHR4000.getExternalTriggerDelayMaximum: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayMaximum;
end;

function TCCoHR4000.getExternalTriggerDelayIncrement: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayIncrement;
end;

procedure TCCoHR4000.setDirectionAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setDirectionAllBits(COM_bitSet);
end;

procedure TCCoHR4000.setMuxAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setMuxAllBits(COM_bitSet);
end;

procedure TCCoHR4000.setValueAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setValueAllBits(COM_bitSet);
end;

procedure TCCoHR4000.setDirectionBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setDirectionBitmask(COM_bitmask);
end;

procedure TCCoHR4000.setMuxBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setMuxBitmask(COM_bitmask);
end;

procedure TCCoHR4000.setValueBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setValueBitmask(COM_bitmask);
end;

procedure TCCoHR4000.setDirectionBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setDirectionBit(COM_bit, COM_value);
end;

procedure TCCoHR4000.setMuxBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setMuxBit(COM_bit, COM_value);
end;

procedure TCCoHR4000.setValueBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setValueBit(COM_bit, COM_value);
end;

function TCCoHR4000.getTotalGPIOBits: Integer;
begin
  Result := DefaultInterface.getTotalGPIOBits;
end;

function TCCoHR4000.getDirectionBits: ICoBitSet;
begin
  Result := DefaultInterface.getDirectionBits;
end;

function TCCoHR4000.getMuxBits: ICoBitSet;
begin
  Result := DefaultInterface.getMuxBits;
end;

function TCCoHR4000.getValueBit(COM_bitNumber: Integer): Integer;
begin
  Result := DefaultInterface.getValueBit(COM_bitNumber);
end;

function TCCoHR4000.getValueBits: ICoBitSet;
begin
  Result := DefaultInterface.getValueBits;
end;

function TCCoHR4000.getNumberOfPins: Integer;
begin
  Result := DefaultInterface.getNumberOfPins;
end;

procedure TCCoHR4000.setExternalTriggerMode(COM_mode: Integer);
begin
  DefaultInterface.setExternalTriggerMode(COM_mode);
end;

function TCCoHR4000.getExternalTriggerModes: ICoExternalTriggerModeCollection;
begin
  Result := DefaultInterface.getExternalTriggerModes;
end;

function TCCoHR4000.setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer;
begin
  Result := DefaultInterface.setI2CBytes(COM_address, COM_numBytes, COM_i2C);
end;

function TCCoHR4000.getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
begin
  Result := DefaultInterface.getI2CBytes(COM_address, COM_numBytes);
end;

function TCCoHR4000.setSHAI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; 
                                   COM_i2C: OleVariant): Integer;
begin
  Result := DefaultInterface.setSHAI2CBytes(COM_address, COM_numBytes, COM_i2C);
end;

function TCCoHR4000.getSHAI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
begin
  Result := DefaultInterface.getSHAI2CBytes(COM_address, COM_numBytes);
end;

function TCCoHR4000.getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
begin
  Result := DefaultInterface.getIrradianceCalibrationFactors(COM_address);
end;

procedure TCCoHR4000.setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant);
begin
  DefaultInterface.setIrradianceCalibrationFactors(COM_address, COM_data);
end;

procedure TCCoHR4000.setMasterClockDivisor(COM_value: Integer);
begin
  DefaultInterface.setMasterClockDivisor(COM_value);
end;

function TCCoHR4000.getMasterClockDivisor: Integer;
begin
  Result := DefaultInterface.getMasterClockDivisor;
end;

function TCCoHR4000.readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readNonlinearityCoefficientsFromSpectrometer;
end;

function TCCoHR4000.getNonlinearityCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getNonlinearityCoefficients;
end;

function TCCoHR4000.getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getNonlinearityCoefficientsSingleChannel(COM_index);
end;

procedure TCCoHR4000.setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setNonlinearityCoefficientsSingleChannel(COM_nl, COM_index);
end;

function TCCoHR4000.getPlugIns: ICoSpectrometerPlugInCollection;
begin
  Result := DefaultInterface.getPlugIns;
end;

function TCCoHR4000.getNumberOfPlugIns: Integer;
begin
  Result := DefaultInterface.getNumberOfPlugIns;
end;

function TCCoHR4000.isPlugInDetected(COM_id: Integer): WordBool;
begin
  Result := DefaultInterface.isPlugInDetected(COM_id);
end;

function TCCoHR4000.initializePlugIns: OleVariant;
begin
  Result := DefaultInterface.initializePlugIns;
end;

procedure TCCoHR4000.detectPlugIns;
begin
  DefaultInterface.detectPlugIns;
end;

function TCCoHR4000.isHyperAdapterPresent: WordBool;
begin
  Result := DefaultInterface.isHyperAdapterPresent;
end;

procedure TCCoHR4000.initSHA(const COM_channel: ICoSHAChannel);
begin
  DefaultInterface.initSHA(COM_channel);
end;

function TCCoHR4000.setHyperAdapterDAC(COM_voltage: Double): Integer;
begin
  Result := DefaultInterface.setHyperAdapterDAC(COM_voltage);
end;

function TCCoHR4000.readHyperAdapterEEPROM(COM_data: OleVariant; COM_start: Integer; 
                                           COM_length: Integer): Integer;
begin
  Result := DefaultInterface.readHyperAdapterEEPROM(COM_data, COM_start, COM_length);
end;

function TCCoHR4000.writeHyperAdapterEEPROM(COM_data: OleVariant; COM_start: Integer; 
                                            COM_length: Integer): Integer;
begin
  Result := DefaultInterface.writeHyperAdapterEEPROM(COM_data, COM_start, COM_length);
end;

procedure TCCoHR4000.calibrate;
begin
  DefaultInterface.calibrate;
end;

function TCCoHR4000.getCalibrationTime: Double;
begin
  Result := DefaultInterface.getCalibrationTime;
end;

procedure TCCoHR4000.restoreCalibration;
begin
  DefaultInterface.restoreCalibration;
end;

function TCCoHR4000.getSHAChannel: ICoSHAChannel;
begin
  Result := DefaultInterface.getSHAChannel;
end;

procedure TCCoHR4000.setShutterClock(COM_value: Integer);
begin
  DefaultInterface.setShutterClock(COM_value);
end;

function TCCoHR4000.getShutterClock: Integer;
begin
  Result := DefaultInterface.getShutterClock;
end;

procedure TCCoHR4000.setSingleStrobeLow(COM_value: Integer);
begin
  DefaultInterface.setSingleStrobeLow(COM_value);
end;

procedure TCCoHR4000.setSingleStrobeHigh(COM_value: Integer);
begin
  DefaultInterface.setSingleStrobeHigh(COM_value);
end;

function TCCoHR4000.getSingleStrobeCountsToMicros(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.getSingleStrobeCountsToMicros(COM_counts);
end;

function TCCoHR4000.getSingleStrobeLow: Integer;
begin
  Result := DefaultInterface.getSingleStrobeLow;
end;

function TCCoHR4000.getSingleStrobeHigh: Integer;
begin
  Result := DefaultInterface.getSingleStrobeHigh;
end;

function TCCoHR4000.getSingleStrobeMinimum: Integer;
begin
  Result := DefaultInterface.getSingleStrobeMinimum;
end;

function TCCoHR4000.getSingleStrobeMaximum: Integer;
begin
  Result := DefaultInterface.getSingleStrobeMaximum;
end;

function TCCoHR4000.getSingleStrobeIncrement: Integer;
begin
  Result := DefaultInterface.getSingleStrobeIncrement;
end;

function TCCoHR4000.getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
begin
  Result := DefaultInterface.getSPIBytes(COM_message, COM_length);
end;

function TCCoHR4000.getStatus: ICoSpectrometerStatus;
begin
  Result := DefaultInterface.getStatus;
end;

function TCCoHR4000.readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readStrayLightCorrectionCoefficientFromSpectrometer;
end;

function TCCoHR4000.getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getStrayLightCorrectionCoefficient;
end;

procedure TCCoHR4000.setStrayLight(COM_strayLight: Double; COM_index: Integer);
begin
  DefaultInterface.setStrayLight(COM_strayLight, COM_index);
end;

function TCCoHR4000.getStrayLight(COM_index: Integer): Double;
begin
  Result := DefaultInterface.getStrayLight(COM_index);
end;

function TCCoHR4000.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoHR4000.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoHR4000.getWavelengths(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_index);
end;

procedure TCCoHR4000.setWavelengths(COM_wl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setWavelengths(COM_wl, COM_index);
end;

function TCCoHR4000.isAdvancedVersion: WordBool;
begin
  Result := DefaultInterface.isAdvancedVersion;
end;

procedure TCCoHR4000.addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.addAcquisitionListener(COM_listener);
end;

procedure TCCoHR4000.removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.removeAcquisitionListener(COM_listener);
end;

function TCCoHR4000.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoHR4000Properties.Create(AServer: TCCoHR4000);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoHR4000Properties.GetDefaultInterface: ICoHR4000;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoHR4000Status.Create: ICoHR4000Status;
begin
  Result := CreateComObject(CLASS_CCoHR4000Status) as ICoHR4000Status;
end;

class function CoCCoHR4000Status.CreateRemote(const MachineName: string): ICoHR4000Status;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoHR4000Status) as ICoHR4000Status;
end;

procedure TCCoHR4000Status.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{BE1DCA83-3431-5F58-90ED-373555AC6A5C}';
    IntfIID:   '{32871864-F98B-53DB-906A-17E8AEB9DA43}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoHR4000Status.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoHR4000Status;
  end;
end;

procedure TCCoHR4000Status.ConnectTo(svrIntf: ICoHR4000Status);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoHR4000Status.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoHR4000Status.GetDefaultInterface: ICoHR4000Status;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoHR4000Status.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoHR4000StatusProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoHR4000Status.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoHR4000Status.GetServerProperties: TCCoHR4000StatusProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoHR4000Status.CreateHR4000Status;
begin
  DefaultInterface.CreateHR4000Status;
end;

function TCCoHR4000Status.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoHR4000Status.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoHR4000StatusProperties.Create(AServer: TCCoHR4000Status);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoHR4000StatusProperties.GetDefaultInterface: ICoHR4000Status;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoHardwareTrigger.Create: ICoHardwareTrigger;
begin
  Result := CreateComObject(CLASS_CCoHardwareTrigger) as ICoHardwareTrigger;
end;

class function CoCCoHardwareTrigger.CreateRemote(const MachineName: string): ICoHardwareTrigger;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoHardwareTrigger) as ICoHardwareTrigger;
end;

procedure TCCoHardwareTrigger.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{60AC003E-F9CA-5E57-90A3-2371E65CB8EE}';
    IntfIID:   '{9B45C6E1-50C7-5286-912C-3FE04C39EB6A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoHardwareTrigger.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoHardwareTrigger;
  end;
end;

procedure TCCoHardwareTrigger.ConnectTo(svrIntf: ICoHardwareTrigger);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoHardwareTrigger.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoHardwareTrigger.GetDefaultInterface: ICoHardwareTrigger;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoHardwareTrigger.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoHardwareTriggerProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoHardwareTrigger.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoHardwareTrigger.GetServerProperties: TCCoHardwareTriggerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoHardwareTrigger.CreateHardwareTrigger;
begin
  DefaultInterface.CreateHardwareTrigger;
end;

procedure TCCoHardwareTrigger.setExternalTriggerMode(COM_param0: Integer);
begin
  DefaultInterface.setExternalTriggerMode(COM_param0);
end;

function TCCoHardwareTrigger.getExternalTriggerModes: ICoExternalTriggerModeCollection;
begin
  Result := DefaultInterface.getExternalTriggerModes;
end;

function TCCoHardwareTrigger.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoHardwareTriggerProperties.Create(AServer: TCCoHardwareTrigger);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoHardwareTriggerProperties.GetDefaultInterface: ICoHardwareTrigger;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoHardwareTriggerGUIProvider.Create: ICoHardwareTriggerGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoHardwareTriggerGUIProvider) as ICoHardwareTriggerGUIProvider;
end;

class function CoCCoHardwareTriggerGUIProvider.CreateRemote(const MachineName: string): ICoHardwareTriggerGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoHardwareTriggerGUIProvider) as ICoHardwareTriggerGUIProvider;
end;

procedure TCCoHardwareTriggerGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7355095C-5681-5926-8025-8AF19B52B6FC}';
    IntfIID:   '{F5E0987D-22CE-579C-81AB-9461333CA822}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoHardwareTriggerGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoHardwareTriggerGUIProvider;
  end;
end;

procedure TCCoHardwareTriggerGUIProvider.ConnectTo(svrIntf: ICoHardwareTriggerGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoHardwareTriggerGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoHardwareTriggerGUIProvider.GetDefaultInterface: ICoHardwareTriggerGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoHardwareTriggerGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoHardwareTriggerGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoHardwareTriggerGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoHardwareTriggerGUIProvider.GetServerProperties: TCCoHardwareTriggerGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoHardwareTriggerGUIProvider.CreateHardwareTriggerGUIProvider;
begin
  DefaultInterface.CreateHardwareTriggerGUIProvider;
end;

function TCCoHardwareTriggerGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoHardwareTriggerGUIProviderProperties.Create(AServer: TCCoHardwareTriggerGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoHardwareTriggerGUIProviderProperties.GetDefaultInterface: ICoHardwareTriggerGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoHighGainMode.Create: ICoHighGainMode;
begin
  Result := CreateComObject(CLASS_CCoHighGainMode) as ICoHighGainMode;
end;

class function CoCCoHighGainMode.CreateRemote(const MachineName: string): ICoHighGainMode;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoHighGainMode) as ICoHighGainMode;
end;

procedure TCCoHighGainMode.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CA4C4153-810C-5615-8077-D103529F8B9B}';
    IntfIID:   '{70EC313E-51DB-57FC-81C7-8203B350DC69}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoHighGainMode.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoHighGainMode;
  end;
end;

procedure TCCoHighGainMode.ConnectTo(svrIntf: ICoHighGainMode);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoHighGainMode.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoHighGainMode.GetDefaultInterface: ICoHighGainMode;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoHighGainMode.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoHighGainModeProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoHighGainMode.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoHighGainMode.GetServerProperties: TCCoHighGainModeProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoHighGainMode.CreateHighGainMode;
begin
  DefaultInterface.CreateHighGainMode;
end;

procedure TCCoHighGainMode.setHighGain(COM_param0: WordBool);
begin
  DefaultInterface.setHighGain(COM_param0);
end;

procedure TCCoHighGainMode.setHighGainDefault(COM_param0: WordBool);
begin
  DefaultInterface.setHighGainDefault(COM_param0);
end;

function TCCoHighGainMode.getHighGainDefault: WordBool;
begin
  Result := DefaultInterface.getHighGainDefault;
end;

function TCCoHighGainMode.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoHighGainModeProperties.Create(AServer: TCCoHighGainMode);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoHighGainModeProperties.GetDefaultInterface: ICoHighGainMode;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoHighGainModeGUIProvider.Create: ICoHighGainModeGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoHighGainModeGUIProvider) as ICoHighGainModeGUIProvider;
end;

class function CoCCoHighGainModeGUIProvider.CreateRemote(const MachineName: string): ICoHighGainModeGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoHighGainModeGUIProvider) as ICoHighGainModeGUIProvider;
end;

procedure TCCoHighGainModeGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A6211AC1-00C6-5542-908E-B73AB51200DE}';
    IntfIID:   '{A2F1CB4D-C28C-5541-91F1-ABF2C99CE367}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoHighGainModeGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoHighGainModeGUIProvider;
  end;
end;

procedure TCCoHighGainModeGUIProvider.ConnectTo(svrIntf: ICoHighGainModeGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoHighGainModeGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoHighGainModeGUIProvider.GetDefaultInterface: ICoHighGainModeGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoHighGainModeGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoHighGainModeGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoHighGainModeGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoHighGainModeGUIProvider.GetServerProperties: TCCoHighGainModeGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoHighGainModeGUIProvider.CreateHighGainModeGUIProvider;
begin
  DefaultInterface.CreateHighGainModeGUIProvider;
end;

function TCCoHighGainModeGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoHighGainModeGUIProviderProperties.Create(AServer: TCCoHighGainModeGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoHighGainModeGUIProviderProperties.GetDefaultInterface: ICoHighGainModeGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoHighGainModeImpl.Create: ICoHighGainModeImpl;
begin
  Result := CreateComObject(CLASS_CCoHighGainModeImpl) as ICoHighGainModeImpl;
end;

class function CoCCoHighGainModeImpl.CreateRemote(const MachineName: string): ICoHighGainModeImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoHighGainModeImpl) as ICoHighGainModeImpl;
end;

procedure TCCoHighGainModeImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{26787253-81B5-5D75-8025-8ACDD01988BB}';
    IntfIID:   '{D4EFF4E1-E029-5794-91C7-BA05F8DF670D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoHighGainModeImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoHighGainModeImpl;
  end;
end;

procedure TCCoHighGainModeImpl.ConnectTo(svrIntf: ICoHighGainModeImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoHighGainModeImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoHighGainModeImpl.GetDefaultInterface: ICoHighGainModeImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoHighGainModeImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoHighGainModeImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoHighGainModeImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoHighGainModeImpl.GetServerProperties: TCCoHighGainModeImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoHighGainModeImpl.CreateHighGainModeImplB(const COM_usb: ICoUSBInterface; 
                                                       const COM_spec: ICoSpectrometer);
begin
  DefaultInterface.CreateHighGainModeImplB(COM_usb, COM_spec);
end;

procedure TCCoHighGainModeImpl.setHighGain(COM_gain: WordBool);
begin
  DefaultInterface.setHighGain(COM_gain);
end;

procedure TCCoHighGainModeImpl.setHighGainDefault(COM_gain: WordBool);
begin
  DefaultInterface.setHighGainDefault(COM_gain);
end;

function TCCoHighGainModeImpl.getHighGainDefault: WordBool;
begin
  Result := DefaultInterface.getHighGainDefault;
end;

function TCCoHighGainModeImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoHighGainModeImplProperties.Create(AServer: TCCoHighGainModeImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoHighGainModeImplProperties.GetDefaultInterface: ICoHighGainModeImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoHighResTimeStamp.Create: ICoHighResTimeStamp;
begin
  Result := CreateComObject(CLASS_CCoHighResTimeStamp) as ICoHighResTimeStamp;
end;

class function CoCCoHighResTimeStamp.CreateRemote(const MachineName: string): ICoHighResTimeStamp;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoHighResTimeStamp) as ICoHighResTimeStamp;
end;

procedure TCCoHighResTimeStamp.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{42A4603D-8B71-5850-90C3-E8B6C5D4B3B8}';
    IntfIID:   '{15FB61D6-9C52-5239-8100-3F53BFC5E1D3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoHighResTimeStamp.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoHighResTimeStamp;
  end;
end;

procedure TCCoHighResTimeStamp.ConnectTo(svrIntf: ICoHighResTimeStamp);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoHighResTimeStamp.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoHighResTimeStamp.GetDefaultInterface: ICoHighResTimeStamp;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoHighResTimeStamp.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoHighResTimeStampProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoHighResTimeStamp.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoHighResTimeStamp.GetServerProperties: TCCoHighResTimeStampProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoHighResTimeStamp.CreateHighResTimeStamp;
begin
  DefaultInterface.CreateHighResTimeStamp;
end;

procedure TCCoHighResTimeStamp.CreateHighResTimeStampB(const COM_that: ICoHighResTimeStamp);
begin
  DefaultInterface.CreateHighResTimeStampB(COM_that);
end;

procedure TCCoHighResTimeStamp.CreateHighResTimeStampC(COM_millis: Integer; COM_nanos: Double);
begin
  DefaultInterface.CreateHighResTimeStampC(COM_millis, COM_nanos);
end;

procedure TCCoHighResTimeStamp.CreateHighResTimeStampD(const COM_that: ICoHighResTimeStamp; 
                                                       COM_nanosIntoFuture: Double);
begin
  DefaultInterface.CreateHighResTimeStampD(COM_that, COM_nanosIntoFuture);
end;

function TCCoHighResTimeStamp.getTimeMillis: Integer;
begin
  Result := DefaultInterface.getTimeMillis;
end;

function TCCoHighResTimeStamp.getNanoTimeDeltaSince(const COM_then: ICoHighResTimeStamp): Double;
begin
  Result := DefaultInterface.getNanoTimeDeltaSince(COM_then);
end;

function TCCoHighResTimeStamp.getMicroTimeDeltaSince(const COM_then: ICoHighResTimeStamp): Double;
begin
  Result := DefaultInterface.getMicroTimeDeltaSince(COM_then);
end;

function TCCoHighResTimeStamp.getMilliTimeDeltaSince(const COM_then: ICoHighResTimeStamp): Double;
begin
  Result := DefaultInterface.getMilliTimeDeltaSince(COM_then);
end;

function TCCoHighResTimeStamp.getSecondsTimeDeltaSince(const COM_then: ICoHighResTimeStamp): Double;
begin
  Result := DefaultInterface.getSecondsTimeDeltaSince(COM_then);
end;

function TCCoHighResTimeStamp.getNanoTimeDelta(const COM_before: ICoHighResTimeStamp; 
                                               const COM_after: ICoHighResTimeStamp): Double;
begin
  Result := DefaultInterface.getNanoTimeDelta(COM_before, COM_after);
end;

function TCCoHighResTimeStamp.getMicroTimeDelta(const COM_before: ICoHighResTimeStamp; 
                                                const COM_after: ICoHighResTimeStamp): Double;
begin
  Result := DefaultInterface.getMicroTimeDelta(COM_before, COM_after);
end;

function TCCoHighResTimeStamp.getMilliTimeDelta(const COM_before: ICoHighResTimeStamp; 
                                                const COM_after: ICoHighResTimeStamp): Double;
begin
  Result := DefaultInterface.getMilliTimeDelta(COM_before, COM_after);
end;

function TCCoHighResTimeStamp.getSecondsTimeDelta(const COM_before: ICoHighResTimeStamp; 
                                                  const COM_after: ICoHighResTimeStamp): Double;
begin
  Result := DefaultInterface.getSecondsTimeDelta(COM_before, COM_after);
end;

function TCCoHighResTimeStamp.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoHighResTimeStamp.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoHighResTimeStampProperties.Create(AServer: TCCoHighResTimeStamp);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoHighResTimeStampProperties.GetDefaultInterface: ICoHighResTimeStamp;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoHighResTiming.Create: ICoHighResTiming;
begin
  Result := CreateComObject(CLASS_CCoHighResTiming) as ICoHighResTiming;
end;

class function CoCCoHighResTiming.CreateRemote(const MachineName: string): ICoHighResTiming;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoHighResTiming) as ICoHighResTiming;
end;

procedure TCCoHighResTiming.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{B1A7EDC1-2E2B-57E3-90E1-FA4B2DF11BBD}';
    IntfIID:   '{F0D3C5F5-6226-59D7-8117-4717CF5C1566}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoHighResTiming.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoHighResTiming;
  end;
end;

procedure TCCoHighResTiming.ConnectTo(svrIntf: ICoHighResTiming);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoHighResTiming.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoHighResTiming.GetDefaultInterface: ICoHighResTiming;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoHighResTiming.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoHighResTimingProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoHighResTiming.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoHighResTiming.GetServerProperties: TCCoHighResTimingProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCCoHighResTiming.getTicksPerSecond: Integer;
begin
  Result := DefaultInterface.getTicksPerSecond;
end;

function TCCoHighResTiming.getTickPeriod: Double;
begin
  Result := DefaultInterface.getTickPeriod;
end;

procedure TCCoHighResTiming.setTimeZero;
begin
  DefaultInterface.setTimeZero;
end;

function TCCoHighResTiming.getTicks: Integer;
begin
  Result := DefaultInterface.getTicks;
end;

function TCCoHighResTiming.getTimeInSeconds: Double;
begin
  Result := DefaultInterface.getTimeInSeconds;
end;

function TCCoHighResTiming.getTimeInMilliSeconds: Double;
begin
  Result := DefaultInterface.getTimeInMilliSeconds;
end;

function TCCoHighResTiming.getTimeInMicroSeconds: Double;
begin
  Result := DefaultInterface.getTimeInMicroSeconds;
end;

function TCCoHighResTiming.getTimeInNanoSeconds: Double;
begin
  Result := DefaultInterface.getTimeInNanoSeconds;
end;

procedure TCCoHighResTiming.CreateHighResTiming;
begin
  DefaultInterface.CreateHighResTiming;
end;

function TCCoHighResTiming.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoHighResTimingProperties.Create(AServer: TCCoHighResTiming);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoHighResTimingProperties.GetDefaultInterface: ICoHighResTiming;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoI2CBus.Create: ICoI2CBus;
begin
  Result := CreateComObject(CLASS_CCoI2CBus) as ICoI2CBus;
end;

class function CoCCoI2CBus.CreateRemote(const MachineName: string): ICoI2CBus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoI2CBus) as ICoI2CBus;
end;

procedure TCCoI2CBus.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{ABF5A2BF-3B45-57CF-902C-667E8E4B72EF}';
    IntfIID:   '{A3865F62-AE48-551E-903C-07C826DD101B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoI2CBus.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoI2CBus;
  end;
end;

procedure TCCoI2CBus.ConnectTo(svrIntf: ICoI2CBus);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoI2CBus.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoI2CBus.GetDefaultInterface: ICoI2CBus;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoI2CBus.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoI2CBusProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoI2CBus.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoI2CBus.GetServerProperties: TCCoI2CBusProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoI2CBus.CreateI2CBus;
begin
  DefaultInterface.CreateI2CBus;
end;

function TCCoI2CBus.setI2CBytes(COM_param0: Shortint; COM_param1: Shortint; COM_param2: OleVariant): Integer;
begin
  Result := DefaultInterface.setI2CBytes(COM_param0, COM_param1, COM_param2);
end;

function TCCoI2CBus.getI2CBytes(COM_param0: Shortint; COM_param1: Shortint): OleVariant;
begin
  Result := DefaultInterface.getI2CBytes(COM_param0, COM_param1);
end;

function TCCoI2CBus.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoI2CBusProperties.Create(AServer: TCCoI2CBus);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoI2CBusProperties.GetDefaultInterface: ICoI2CBus;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoI2CBusGUIProvider.Create: ICoI2CBusGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoI2CBusGUIProvider) as ICoI2CBusGUIProvider;
end;

class function CoCCoI2CBusGUIProvider.CreateRemote(const MachineName: string): ICoI2CBusGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoI2CBusGUIProvider) as ICoI2CBusGUIProvider;
end;

procedure TCCoI2CBusGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CB909B6E-33F3-528C-81F2-845506480C17}';
    IntfIID:   '{01B66D7D-D8B3-5ABE-8020-41BBA5DBD924}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoI2CBusGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoI2CBusGUIProvider;
  end;
end;

procedure TCCoI2CBusGUIProvider.ConnectTo(svrIntf: ICoI2CBusGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoI2CBusGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoI2CBusGUIProvider.GetDefaultInterface: ICoI2CBusGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoI2CBusGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoI2CBusGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoI2CBusGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoI2CBusGUIProvider.GetServerProperties: TCCoI2CBusGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoI2CBusGUIProvider.CreateI2CBusGUIProvider;
begin
  DefaultInterface.CreateI2CBusGUIProvider;
end;

function TCCoI2CBusGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoI2CBusGUIProviderProperties.Create(AServer: TCCoI2CBusGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoI2CBusGUIProviderProperties.GetDefaultInterface: ICoI2CBusGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoI2CBusImpl.Create: ICoI2CBusImpl;
begin
  Result := CreateComObject(CLASS_CCoI2CBusImpl) as ICoI2CBusImpl;
end;

class function CoCCoI2CBusImpl.CreateRemote(const MachineName: string): ICoI2CBusImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoI2CBusImpl) as ICoI2CBusImpl;
end;

procedure TCCoI2CBusImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{854576E7-443E-5051-8081-4D48521B0E96}';
    IntfIID:   '{6885B761-9549-51AC-801C-FEBD52D5A1CF}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoI2CBusImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoI2CBusImpl;
  end;
end;

procedure TCCoI2CBusImpl.ConnectTo(svrIntf: ICoI2CBusImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoI2CBusImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoI2CBusImpl.GetDefaultInterface: ICoI2CBusImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoI2CBusImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoI2CBusImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoI2CBusImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoI2CBusImpl.GetServerProperties: TCCoI2CBusImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoI2CBusImpl.CreateI2CBusImplB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateI2CBusImplB(COM_usbInt);
end;

function TCCoI2CBusImpl.getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
begin
  Result := DefaultInterface.getI2CBytes(COM_address, COM_numBytes);
end;

function TCCoI2CBusImpl.setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; 
                                    COM_i2C: OleVariant): Integer;
begin
  Result := DefaultInterface.setI2CBytes(COM_address, COM_numBytes, COM_i2C);
end;

function TCCoI2CBusImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoI2CBusImplProperties.Create(AServer: TCCoI2CBusImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoI2CBusImplProperties.GetDefaultInterface: ICoI2CBusImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoI2CBusImplFPGA.Create: ICoI2CBusImplFPGA;
begin
  Result := CreateComObject(CLASS_CCoI2CBusImplFPGA) as ICoI2CBusImplFPGA;
end;

class function CoCCoI2CBusImplFPGA.CreateRemote(const MachineName: string): ICoI2CBusImplFPGA;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoI2CBusImplFPGA) as ICoI2CBusImplFPGA;
end;

procedure TCCoI2CBusImplFPGA.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DAD495FA-8AAD-53BD-906A-B0E6B64977DE}';
    IntfIID:   '{FA3C7640-AF60-5EF9-9151-193795CEBB80}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoI2CBusImplFPGA.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoI2CBusImplFPGA;
  end;
end;

procedure TCCoI2CBusImplFPGA.ConnectTo(svrIntf: ICoI2CBusImplFPGA);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoI2CBusImplFPGA.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoI2CBusImplFPGA.GetDefaultInterface: ICoI2CBusImplFPGA;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoI2CBusImplFPGA.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoI2CBusImplFPGAProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoI2CBusImplFPGA.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoI2CBusImplFPGA.GetServerProperties: TCCoI2CBusImplFPGAProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoI2CBusImplFPGA.CreateI2CBusImplFPGAB(const COM_usb: ICoUSBInterface);
begin
  DefaultInterface.CreateI2CBusImplFPGAB(COM_usb);
end;

function TCCoI2CBusImplFPGA.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoI2CBusImplFPGAProperties.Create(AServer: TCCoI2CBusImplFPGA);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoI2CBusImplFPGAProperties.GetDefaultInterface: ICoI2CBusImplFPGA;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoI2CBusImplNonFPGA.Create: ICoI2CBusImplNonFPGA;
begin
  Result := CreateComObject(CLASS_CCoI2CBusImplNonFPGA) as ICoI2CBusImplNonFPGA;
end;

class function CoCCoI2CBusImplNonFPGA.CreateRemote(const MachineName: string): ICoI2CBusImplNonFPGA;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoI2CBusImplNonFPGA) as ICoI2CBusImplNonFPGA;
end;

procedure TCCoI2CBusImplNonFPGA.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CD57988C-7C9D-55CF-90E1-6E76333C2084}';
    IntfIID:   '{77A155C4-6853-575F-81AB-F343F98F5033}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoI2CBusImplNonFPGA.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoI2CBusImplNonFPGA;
  end;
end;

procedure TCCoI2CBusImplNonFPGA.ConnectTo(svrIntf: ICoI2CBusImplNonFPGA);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoI2CBusImplNonFPGA.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoI2CBusImplNonFPGA.GetDefaultInterface: ICoI2CBusImplNonFPGA;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoI2CBusImplNonFPGA.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoI2CBusImplNonFPGAProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoI2CBusImplNonFPGA.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoI2CBusImplNonFPGA.GetServerProperties: TCCoI2CBusImplNonFPGAProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoI2CBusImplNonFPGA.CreateI2CBusImplNonFPGAB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateI2CBusImplNonFPGAB(COM_usbInt);
end;

function TCCoI2CBusImplNonFPGA.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoI2CBusImplNonFPGAProperties.Create(AServer: TCCoI2CBusImplNonFPGA);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoI2CBusImplNonFPGAProperties.GetDefaultInterface: ICoI2CBusImplNonFPGA;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoI2CBusImpl_SHA.Create: ICoI2CBusImpl_SHA;
begin
  Result := CreateComObject(CLASS_CCoI2CBusImpl_SHA) as ICoI2CBusImpl_SHA;
end;

class function CoCCoI2CBusImpl_SHA.CreateRemote(const MachineName: string): ICoI2CBusImpl_SHA;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoI2CBusImpl_SHA) as ICoI2CBusImpl_SHA;
end;

procedure TCCoI2CBusImpl_SHA.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D34BE5E1-8856-515B-80C0-0C2987483183}';
    IntfIID:   '{07CA3508-47F9-527A-91D2-2CDAD20F8F25}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoI2CBusImpl_SHA.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoI2CBusImpl_SHA;
  end;
end;

procedure TCCoI2CBusImpl_SHA.ConnectTo(svrIntf: ICoI2CBusImpl_SHA);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoI2CBusImpl_SHA.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoI2CBusImpl_SHA.GetDefaultInterface: ICoI2CBusImpl_SHA;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoI2CBusImpl_SHA.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoI2CBusImpl_SHAProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoI2CBusImpl_SHA.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoI2CBusImpl_SHA.GetServerProperties: TCCoI2CBusImpl_SHAProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoI2CBusImpl_SHA.CreateI2CBusImpl_SHAB(const COM_usbInt: ICoUSBInterface; 
                                                   const COM_spectrometer: ICoSpectrometer);
begin
  DefaultInterface.CreateI2CBusImpl_SHAB(COM_usbInt, COM_spectrometer);
end;

function TCCoI2CBusImpl_SHA.getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
begin
  Result := DefaultInterface.getI2CBytes(COM_address, COM_numBytes);
end;

function TCCoI2CBusImpl_SHA.setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; 
                                        COM_i2C: OleVariant): Integer;
begin
  Result := DefaultInterface.setI2CBytes(COM_address, COM_numBytes, COM_i2C);
end;

function TCCoI2CBusImpl_SHA.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoI2CBusImpl_SHAProperties.Create(AServer: TCCoI2CBusImpl_SHA);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoI2CBusImpl_SHAProperties.GetDefaultInterface: ICoI2CBusImpl_SHA;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoIrradianceCalibrationFactor.Create: ICoIrradianceCalibrationFactor;
begin
  Result := CreateComObject(CLASS_CCoIrradianceCalibrationFactor) as ICoIrradianceCalibrationFactor;
end;

class function CoCCoIrradianceCalibrationFactor.CreateRemote(const MachineName: string): ICoIrradianceCalibrationFactor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoIrradianceCalibrationFactor) as ICoIrradianceCalibrationFactor;
end;

procedure TCCoIrradianceCalibrationFactor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{1B4E1075-8E72-5BA4-810C-09BEEF1FD099}';
    IntfIID:   '{68D5328E-8FDA-57FC-91A8-4E7570EAF55B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoIrradianceCalibrationFactor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoIrradianceCalibrationFactor;
  end;
end;

procedure TCCoIrradianceCalibrationFactor.ConnectTo(svrIntf: ICoIrradianceCalibrationFactor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoIrradianceCalibrationFactor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoIrradianceCalibrationFactor.GetDefaultInterface: ICoIrradianceCalibrationFactor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoIrradianceCalibrationFactor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoIrradianceCalibrationFactorProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoIrradianceCalibrationFactor.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoIrradianceCalibrationFactor.GetServerProperties: TCCoIrradianceCalibrationFactorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoIrradianceCalibrationFactor.CreateIrradianceCalibrationFactor;
begin
  DefaultInterface.CreateIrradianceCalibrationFactor;
end;

function TCCoIrradianceCalibrationFactor.getIrradianceCalibrationFactors(COM_param0: Shortint): OleVariant;
begin
  Result := DefaultInterface.getIrradianceCalibrationFactors(COM_param0);
end;

procedure TCCoIrradianceCalibrationFactor.setIrradianceCalibrationFactors(COM_param0: Shortint; 
                                                                          COM_param1: OleVariant);
begin
  DefaultInterface.setIrradianceCalibrationFactors(COM_param0, COM_param1);
end;

function TCCoIrradianceCalibrationFactor.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoIrradianceCalibrationFactorProperties.Create(AServer: TCCoIrradianceCalibrationFactor);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoIrradianceCalibrationFactorProperties.GetDefaultInterface: ICoIrradianceCalibrationFactor;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoIrradianceCalibrationFactorGUIProvider.Create: ICoIrradianceCalibrationFactorGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoIrradianceCalibrationFactorGUIProvider) as ICoIrradianceCalibrationFactorGUIProvider;
end;

class function CoCCoIrradianceCalibrationFactorGUIProvider.CreateRemote(const MachineName: string): ICoIrradianceCalibrationFactorGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoIrradianceCalibrationFactorGUIProvider) as ICoIrradianceCalibrationFactorGUIProvider;
end;

procedure TCCoIrradianceCalibrationFactorGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{693032CC-66A1-5FA4-80C5-12571B73C405}';
    IntfIID:   '{85932FA1-8AF7-5550-8089-0FF55939894C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoIrradianceCalibrationFactorGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoIrradianceCalibrationFactorGUIProvider;
  end;
end;

procedure TCCoIrradianceCalibrationFactorGUIProvider.ConnectTo(svrIntf: ICoIrradianceCalibrationFactorGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoIrradianceCalibrationFactorGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoIrradianceCalibrationFactorGUIProvider.GetDefaultInterface: ICoIrradianceCalibrationFactorGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoIrradianceCalibrationFactorGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoIrradianceCalibrationFactorGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoIrradianceCalibrationFactorGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoIrradianceCalibrationFactorGUIProvider.GetServerProperties: TCCoIrradianceCalibrationFactorGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoIrradianceCalibrationFactorGUIProvider.CreateIrradianceCalibrationFactorGUIProvider;
begin
  DefaultInterface.CreateIrradianceCalibrationFactorGUIProvider;
end;

function TCCoIrradianceCalibrationFactorGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoIrradianceCalibrationFactorGUIProviderProperties.Create(AServer: TCCoIrradianceCalibrationFactorGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoIrradianceCalibrationFactorGUIProviderProperties.GetDefaultInterface: ICoIrradianceCalibrationFactorGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoIrradianceCalibrationFactorImpl.Create: ICoIrradianceCalibrationFactorImpl;
begin
  Result := CreateComObject(CLASS_CCoIrradianceCalibrationFactorImpl) as ICoIrradianceCalibrationFactorImpl;
end;

class function CoCCoIrradianceCalibrationFactorImpl.CreateRemote(const MachineName: string): ICoIrradianceCalibrationFactorImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoIrradianceCalibrationFactorImpl) as ICoIrradianceCalibrationFactorImpl;
end;

procedure TCCoIrradianceCalibrationFactorImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{BCDD9E57-0C16-579B-9085-0F1C236B7300}';
    IntfIID:   '{5B24BFBB-BA53-5E43-91FC-3AD5FACDE732}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoIrradianceCalibrationFactorImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoIrradianceCalibrationFactorImpl;
  end;
end;

procedure TCCoIrradianceCalibrationFactorImpl.ConnectTo(svrIntf: ICoIrradianceCalibrationFactorImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoIrradianceCalibrationFactorImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoIrradianceCalibrationFactorImpl.GetDefaultInterface: ICoIrradianceCalibrationFactorImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoIrradianceCalibrationFactorImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoIrradianceCalibrationFactorImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoIrradianceCalibrationFactorImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoIrradianceCalibrationFactorImpl.GetServerProperties: TCCoIrradianceCalibrationFactorImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoIrradianceCalibrationFactorImpl.CreateIrradianceCalibrationFactorImplB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateIrradianceCalibrationFactorImplB(COM_usbInt);
end;

function TCCoIrradianceCalibrationFactorImpl.getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
begin
  Result := DefaultInterface.getIrradianceCalibrationFactors(COM_address);
end;

procedure TCCoIrradianceCalibrationFactorImpl.setIrradianceCalibrationFactors(COM_address: Shortint; 
                                                                              COM_data: OleVariant);
begin
  DefaultInterface.setIrradianceCalibrationFactors(COM_address, COM_data);
end;

function TCCoIrradianceCalibrationFactorImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoIrradianceCalibrationFactorImplProperties.Create(AServer: TCCoIrradianceCalibrationFactorImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoIrradianceCalibrationFactorImplProperties.GetDefaultInterface: ICoIrradianceCalibrationFactorImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoIrradianceCalibrationFactorImplFPGA.Create: ICoIrradianceCalibrationFactorImplFPGA;
begin
  Result := CreateComObject(CLASS_CCoIrradianceCalibrationFactorImplFPGA) as ICoIrradianceCalibrationFactorImplFPGA;
end;

class function CoCCoIrradianceCalibrationFactorImplFPGA.CreateRemote(const MachineName: string): ICoIrradianceCalibrationFactorImplFPGA;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoIrradianceCalibrationFactorImplFPGA) as ICoIrradianceCalibrationFactorImplFPGA;
end;

procedure TCCoIrradianceCalibrationFactorImplFPGA.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C4C7360A-C2D0-5036-814C-9A4E8AF09AEC}';
    IntfIID:   '{E6AB4E14-891A-5A4D-9005-60A40AB1A3D5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoIrradianceCalibrationFactorImplFPGA.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoIrradianceCalibrationFactorImplFPGA;
  end;
end;

procedure TCCoIrradianceCalibrationFactorImplFPGA.ConnectTo(svrIntf: ICoIrradianceCalibrationFactorImplFPGA);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoIrradianceCalibrationFactorImplFPGA.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoIrradianceCalibrationFactorImplFPGA.GetDefaultInterface: ICoIrradianceCalibrationFactorImplFPGA;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoIrradianceCalibrationFactorImplFPGA.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoIrradianceCalibrationFactorImplFPGAProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoIrradianceCalibrationFactorImplFPGA.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoIrradianceCalibrationFactorImplFPGA.GetServerProperties: TCCoIrradianceCalibrationFactorImplFPGAProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoIrradianceCalibrationFactorImplFPGA.CreateIrradianceCalibrationFactorImplFPGAB(const COM_usb: ICoUSBInterface);
begin
  DefaultInterface.CreateIrradianceCalibrationFactorImplFPGAB(COM_usb);
end;

function TCCoIrradianceCalibrationFactorImplFPGA.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoIrradianceCalibrationFactorImplFPGAProperties.Create(AServer: TCCoIrradianceCalibrationFactorImplFPGA);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoIrradianceCalibrationFactorImplFPGAProperties.GetDefaultInterface: ICoIrradianceCalibrationFactorImplFPGA;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoIrradianceCalibrationFactorImplNonFPGA.Create: ICoIrradianceCalibrationFactorImplNonFPGA;
begin
  Result := CreateComObject(CLASS_CCoIrradianceCalibrationFactorImplNonFPGA) as ICoIrradianceCalibrationFactorImplNonFPGA;
end;

class function CoCCoIrradianceCalibrationFactorImplNonFPGA.CreateRemote(const MachineName: string): ICoIrradianceCalibrationFactorImplNonFPGA;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoIrradianceCalibrationFactorImplNonFPGA) as ICoIrradianceCalibrationFactorImplNonFPGA;
end;

procedure TCCoIrradianceCalibrationFactorImplNonFPGA.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{15F33F36-D96F-546B-800D-D9DBE1E91A36}';
    IntfIID:   '{541FC480-FB28-5421-8067-AA52F5D86B63}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoIrradianceCalibrationFactorImplNonFPGA.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoIrradianceCalibrationFactorImplNonFPGA;
  end;
end;

procedure TCCoIrradianceCalibrationFactorImplNonFPGA.ConnectTo(svrIntf: ICoIrradianceCalibrationFactorImplNonFPGA);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoIrradianceCalibrationFactorImplNonFPGA.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoIrradianceCalibrationFactorImplNonFPGA.GetDefaultInterface: ICoIrradianceCalibrationFactorImplNonFPGA;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoIrradianceCalibrationFactorImplNonFPGA.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoIrradianceCalibrationFactorImplNonFPGAProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoIrradianceCalibrationFactorImplNonFPGA.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoIrradianceCalibrationFactorImplNonFPGA.GetServerProperties: TCCoIrradianceCalibrationFactorImplNonFPGAProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoIrradianceCalibrationFactorImplNonFPGA.CreateIrradianceCalibrationFactorImplNonFPGAB(const COM_usb: ICoUSBInterface);
begin
  DefaultInterface.CreateIrradianceCalibrationFactorImplNonFPGAB(COM_usb);
end;

function TCCoIrradianceCalibrationFactorImplNonFPGA.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoIrradianceCalibrationFactorImplNonFPGAProperties.Create(AServer: TCCoIrradianceCalibrationFactorImplNonFPGA);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoIrradianceCalibrationFactorImplNonFPGAProperties.GetDefaultInterface: ICoIrradianceCalibrationFactorImplNonFPGA;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoJSocket.Create: ICoJSocket;
begin
  Result := CreateComObject(CLASS_CCoJSocket) as ICoJSocket;
end;

class function CoCCoJSocket.CreateRemote(const MachineName: string): ICoJSocket;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoJSocket) as ICoJSocket;
end;

procedure TCCoJSocket.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4FDC40BD-33A6-5240-9188-5DCFAB61B990}';
    IntfIID:   '{86883084-8FD2-5898-8119-6DB0E0B88561}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoJSocket.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoJSocket;
  end;
end;

procedure TCCoJSocket.ConnectTo(svrIntf: ICoJSocket);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoJSocket.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoJSocket.GetDefaultInterface: ICoJSocket;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoJSocket.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoJSocketProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoJSocket.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoJSocket.GetServerProperties: TCCoJSocketProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoJSocket.CreateJSocketB(const COM_hostName: WideString; COM_portNumber: Integer);
begin
  DefaultInterface.CreateJSocketB(COM_hostName, COM_portNumber);
end;

function TCCoJSocket.isClosed: WordBool;
begin
  Result := DefaultInterface.isClosed;
end;

function TCCoJSocket.isConnected: WordBool;
begin
  Result := DefaultInterface.isConnected;
end;

function TCCoJSocket.isBound: WordBool;
begin
  Result := DefaultInterface.isBound;
end;

function TCCoJSocket.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoJSocketProperties.Create(AServer: TCCoJSocket);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoJSocketProperties.GetDefaultInterface: ICoJSocket;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoJazNetwork.Create: ICoJazNetwork;
begin
  Result := CreateComObject(CLASS_CCoJazNetwork) as ICoJazNetwork;
end;

class function CoCCoJazNetwork.CreateRemote(const MachineName: string): ICoJazNetwork;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoJazNetwork) as ICoJazNetwork;
end;

procedure TCCoJazNetwork.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{47B1EF1C-1942-585F-9029-822B2A0CACD3}';
    IntfIID:   '{E9F0AF58-7F09-5168-9197-EAD70099B85C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoJazNetwork.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoJazNetwork;
  end;
end;

procedure TCCoJazNetwork.ConnectTo(svrIntf: ICoJazNetwork);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoJazNetwork.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoJazNetwork.GetDefaultInterface: ICoJazNetwork;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoJazNetwork.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoJazNetworkProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoJazNetwork.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoJazNetwork.GetServerProperties: TCCoJazNetworkProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoJazNetwork.CreateJazNetworkB(COM_i: Integer);
begin
  DefaultInterface.CreateJazNetworkB(COM_i);
end;

procedure TCCoJazNetwork.CreateJazNetworkD(const COM_jSocket: ICoJSocket);
begin
  DefaultInterface.CreateJazNetworkD(COM_jSocket);
end;

procedure TCCoJazNetwork.openSpectrometer(COM_index: Integer);
begin
  DefaultInterface.openSpectrometer(COM_index);
end;

function TCCoJazNetwork.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

function TCCoJazNetwork.getSerialNumber: WideString;
begin
  Result := DefaultInterface.getSerialNumber;
end;

function TCCoJazNetwork.getFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFirmwareVersion;
end;

procedure TCCoJazNetwork.closeSpectrometer;
begin
  DefaultInterface.closeSpectrometer;
end;

function TCCoJazNetwork.getInfo(COM_slot: Integer): WideString;
begin
  Result := DefaultInterface.getInfo(COM_slot);
end;

function TCCoJazNetwork.getInfoBytes(COM_slot: Integer): OleVariant;
begin
  Result := DefaultInterface.getInfoBytes(COM_slot);
end;

function TCCoJazNetwork.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoJazNetwork.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoJazNetwork.getWavelengths(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_index);
end;

procedure TCCoJazNetwork.setWavelengths(COM_wl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setWavelengths(COM_wl, COM_index);
end;

procedure TCCoJazNetwork.connectToSource(const COM_address: WideString; COM_port: Integer);
begin
  DefaultInterface.connectToSource(COM_address, COM_port);
end;

function TCCoJazNetwork.isConnected: WordBool;
begin
  Result := DefaultInterface.isConnected;
end;

function TCCoJazNetwork.getName: WideString;
begin
  Result := DefaultInterface.getName;
end;

procedure TCCoJazNetwork.disconnect1;
begin
  DefaultInterface.disconnect;
end;

procedure TCCoJazNetwork.setStrobeEnable(COM_strobe: WordBool);
begin
  DefaultInterface.setStrobeEnable(COM_strobe);
end;

procedure TCCoJazNetwork.setIntegrationTime(COM_intTime: Integer);
begin
  DefaultInterface.setIntegrationTime(COM_intTime);
end;

function TCCoJazNetwork.getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
begin
  Result := DefaultInterface.getSpectrum(COM_spectrum);
end;

procedure TCCoJazNetwork.reconnect;
begin
  DefaultInterface.reconnect;
end;

procedure TCCoJazNetwork.setAutonullingConfiguration(const COM_configuration: ICoAutonullingConfiguration);
begin
  DefaultInterface.setAutonullingConfiguration(COM_configuration);
end;

procedure TCCoJazNetwork.setAutonullingScanValue(COM_value: Integer);
begin
  DefaultInterface.setAutonullingScanValue(COM_value);
end;

procedure TCCoJazNetwork.setAutonullingScanStatus(COM_value: Integer);
begin
  DefaultInterface.setAutonullingScanStatus(COM_value);
end;

procedure TCCoJazNetwork.writeAutonullingConfigurationToSpectrometer;
begin
  DefaultInterface.writeAutonullingConfigurationToSpectrometer;
end;

function TCCoJazNetwork.readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration;
begin
  Result := DefaultInterface.readAutonullingConfigurationFromSpectrometer;
end;

function TCCoJazNetwork.getAutonullingScanValue: Integer;
begin
  Result := DefaultInterface.getAutonullingScanValue;
end;

function TCCoJazNetwork.getAutonullingScanStatus: Integer;
begin
  Result := DefaultInterface.getAutonullingScanStatus;
end;

function TCCoJazNetwork.getAutonullingConfiguration: ICoAutonullingConfiguration;
begin
  Result := DefaultInterface.getAutonullingConfiguration;
end;

function TCCoJazNetwork.getChannelsPresent: OleVariant;
begin
  Result := DefaultInterface.getChannelsPresent;
end;

function TCCoJazNetwork.isChannelPresent(COM_index: Integer): WordBool;
begin
  Result := DefaultInterface.isChannelPresent(COM_index);
end;

procedure TCCoJazNetwork.setChannelMux(COM_index: Integer);
begin
  DefaultInterface.setChannelMux(COM_index);
end;

procedure TCCoJazNetwork.setChannelStatus(COM_index: Integer; COM_status: WordBool);
begin
  DefaultInterface.setChannelStatus(COM_index, COM_status);
end;

procedure TCCoJazNetwork.setDeepWellStatus(COM_status: WordBool);
begin
  DefaultInterface.setDeepWellStatus(COM_status);
end;

procedure TCCoJazNetwork.setChannelPresent(COM_index: Integer; COM_present: WordBool);
begin
  DefaultInterface.setChannelPresent(COM_index, COM_present);
end;

function TCCoJazNetwork.isDeepWell: WordBool;
begin
  Result := DefaultInterface.isDeepWell;
end;

function TCCoJazNetwork.isInterpolationEnabled: WordBool;
begin
  Result := DefaultInterface.isInterpolationEnabled;
end;

procedure TCCoJazNetwork.setInterpolationEnabled(COM_enabled: WordBool);
begin
  DefaultInterface.setInterpolationEnabled(COM_enabled);
end;

procedure TCCoJazNetwork.addChannelListener(const COM_listener: ICoMultiChannelListener);
begin
  DefaultInterface.addChannelListener(COM_listener);
end;

procedure TCCoJazNetwork.removeChannelListener(const COM_listener: ICoMultiChannelListener);
begin
  DefaultInterface.removeChannelListener(COM_listener);
end;

function TCCoJazNetwork.readNumberOfChannels: Integer;
begin
  Result := DefaultInterface.readNumberOfChannels;
end;

procedure TCCoJazNetwork.writeChannelMux(COM_channel: Integer);
begin
  DefaultInterface.writeChannelMux(COM_channel);
end;

procedure TCCoJazNetwork.setPowerUpPOTValues;
begin
  DefaultInterface.setPowerUpPOTValues;
end;

function TCCoJazNetwork.getPOTValues: OleVariant;
begin
  Result := DefaultInterface.getPOTValues;
end;

procedure TCCoJazNetwork.setPOTValue(COM_pot: Integer; COM_value: Integer);
begin
  DefaultInterface.setPOTValue(COM_pot, COM_value);
end;

function TCCoJazNetwork.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoJazNetworkProperties.Create(AServer: TCCoJazNetwork);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoJazNetworkProperties.GetDefaultInterface: ICoJazNetwork;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoJazStatus.Create: ICoJazStatus;
begin
  Result := CreateComObject(CLASS_CCoJazStatus) as ICoJazStatus;
end;

class function CoCCoJazStatus.CreateRemote(const MachineName: string): ICoJazStatus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoJazStatus) as ICoJazStatus;
end;

procedure TCCoJazStatus.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{308C03C9-1D4E-514D-916E-F65BB452641D}';
    IntfIID:   '{29D7CE97-BBFC-5652-81FD-F29FB469D5E7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoJazStatus.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoJazStatus;
  end;
end;

procedure TCCoJazStatus.ConnectTo(svrIntf: ICoJazStatus);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoJazStatus.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoJazStatus.GetDefaultInterface: ICoJazStatus;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoJazStatus.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoJazStatusProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoJazStatus.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoJazStatus.GetServerProperties: TCCoJazStatusProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoJazStatus.CreateJazStatus;
begin
  DefaultInterface.CreateJazStatus;
end;

function TCCoJazStatus.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoJazStatus.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoJazStatusProperties.Create(AServer: TCCoJazStatus);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoJazStatusProperties.GetDefaultInterface: ICoJazStatus;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoJazUSB.Create: ICoJazUSB;
begin
  Result := CreateComObject(CLASS_CCoJazUSB) as ICoJazUSB;
end;

class function CoCCoJazUSB.CreateRemote(const MachineName: string): ICoJazUSB;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoJazUSB) as ICoJazUSB;
end;

procedure TCCoJazUSB.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9BE82EF9-B6CC-50F4-803C-4B3828467A18}';
    IntfIID:   '{C21C65F4-62D8-536D-807B-485EBC64A826}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoJazUSB.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoJazUSB;
  end;
end;

procedure TCCoJazUSB.ConnectTo(svrIntf: ICoJazUSB);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoJazUSB.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoJazUSB.GetDefaultInterface: ICoJazUSB;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoJazUSB.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoJazUSBProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoJazUSB.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoJazUSB.GetServerProperties: TCCoJazUSBProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoJazUSB.CreateJazUSB;
begin
  DefaultInterface.CreateJazUSB;
end;

procedure TCCoJazUSB.CreateJazUSBB(COM_i: Integer);
begin
  DefaultInterface.CreateJazUSBB(COM_i);
end;

procedure TCCoJazUSB.setEndpoints;
begin
  DefaultInterface.setEndpoints;
end;

function TCCoJazUSB.getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getEndpoint(COM_endPoint);
end;

function TCCoJazUSB.getDataOutEndPoint: ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getDataOutEndPoint;
end;

function TCCoJazUSB.getLowSpeedInEndPoint: ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getLowSpeedInEndPoint;
end;

procedure TCCoJazUSB.openSpectrometer(COM_index: Integer);
begin
  DefaultInterface.openSpectrometer(COM_index);
end;

function TCCoJazUSB.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

function TCCoJazUSB.getStatus: ICoSpectrometerStatus;
begin
  Result := DefaultInterface.getStatus;
end;

function TCCoJazUSB.readIntegrationTime: Integer;
begin
  Result := DefaultInterface.readIntegrationTime;
end;

function TCCoJazUSB.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

procedure TCCoJazUSB.setExternalTriggerMode(COM_mode: Integer);
begin
  DefaultInterface.setExternalTriggerMode(COM_mode);
end;

function TCCoJazUSB.getExternalTriggerModes: ICoExternalTriggerModeCollection;
begin
  Result := DefaultInterface.getExternalTriggerModes;
end;

function TCCoJazUSB.readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readNonlinearityCoefficientsFromSpectrometer;
end;

function TCCoJazUSB.getNonlinearityCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getNonlinearityCoefficients;
end;

function TCCoJazUSB.getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getNonlinearityCoefficientsSingleChannel(COM_index);
end;

procedure TCCoJazUSB.setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setNonlinearityCoefficientsSingleChannel(COM_nl, COM_index);
end;

function TCCoJazUSB.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoJazUSB.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoJazUSB.getWavelengths(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_index);
end;

procedure TCCoJazUSB.setWavelengths(COM_wl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setWavelengths(COM_wl, COM_index);
end;

function TCCoJazUSB.readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readStrayLightCorrectionCoefficientFromSpectrometer;
end;

function TCCoJazUSB.getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getStrayLightCorrectionCoefficient;
end;

procedure TCCoJazUSB.setStrayLight(COM_strayLight: Double; COM_index: Integer);
begin
  DefaultInterface.setStrayLight(COM_strayLight, COM_index);
end;

function TCCoJazUSB.getStrayLight(COM_index: Integer): Double;
begin
  Result := DefaultInterface.getStrayLight(COM_index);
end;

procedure TCCoJazUSB.setAutonullingConfiguration(const COM_configuration: ICoAutonullingConfiguration);
begin
  DefaultInterface.setAutonullingConfiguration(COM_configuration);
end;

procedure TCCoJazUSB.setAutonullingScanValue(COM_value: Integer);
begin
  DefaultInterface.setAutonullingScanValue(COM_value);
end;

procedure TCCoJazUSB.setAutonullingScanStatus(COM_value: Integer);
begin
  DefaultInterface.setAutonullingScanStatus(COM_value);
end;

procedure TCCoJazUSB.writeAutonullingConfigurationToSpectrometer;
begin
  DefaultInterface.writeAutonullingConfigurationToSpectrometer;
end;

function TCCoJazUSB.readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration;
begin
  Result := DefaultInterface.readAutonullingConfigurationFromSpectrometer;
end;

function TCCoJazUSB.getAutonullingScanValue: Integer;
begin
  Result := DefaultInterface.getAutonullingScanValue;
end;

function TCCoJazUSB.getAutonullingScanStatus: Integer;
begin
  Result := DefaultInterface.getAutonullingScanStatus;
end;

function TCCoJazUSB.getAutonullingConfiguration: ICoAutonullingConfiguration;
begin
  Result := DefaultInterface.getAutonullingConfiguration;
end;

function TCCoJazUSB.getChannelsPresent: OleVariant;
begin
  Result := DefaultInterface.getChannelsPresent;
end;

function TCCoJazUSB.isChannelPresent(COM_index: Integer): WordBool;
begin
  Result := DefaultInterface.isChannelPresent(COM_index);
end;

procedure TCCoJazUSB.setChannelMux(COM_index: Integer);
begin
  DefaultInterface.setChannelMux(COM_index);
end;

procedure TCCoJazUSB.setChannelStatus(COM_index: Integer; COM_status: WordBool);
begin
  DefaultInterface.setChannelStatus(COM_index, COM_status);
end;

procedure TCCoJazUSB.setDeepWellStatus(COM_status: WordBool);
begin
  DefaultInterface.setDeepWellStatus(COM_status);
end;

procedure TCCoJazUSB.setChannelPresent(COM_index: Integer; COM_present: WordBool);
begin
  DefaultInterface.setChannelPresent(COM_index, COM_present);
end;

function TCCoJazUSB.isDeepWell: WordBool;
begin
  Result := DefaultInterface.isDeepWell;
end;

function TCCoJazUSB.isInterpolationEnabled: WordBool;
begin
  Result := DefaultInterface.isInterpolationEnabled;
end;

procedure TCCoJazUSB.setInterpolationEnabled(COM_enabled: WordBool);
begin
  DefaultInterface.setInterpolationEnabled(COM_enabled);
end;

procedure TCCoJazUSB.addChannelListener(const COM_listener: ICoMultiChannelListener);
begin
  DefaultInterface.addChannelListener(COM_listener);
end;

procedure TCCoJazUSB.removeChannelListener(const COM_listener: ICoMultiChannelListener);
begin
  DefaultInterface.removeChannelListener(COM_listener);
end;

procedure TCCoJazUSB.setPowerUpPOTValues;
begin
  DefaultInterface.setPowerUpPOTValues;
end;

function TCCoJazUSB.getPOTValues: OleVariant;
begin
  Result := DefaultInterface.getPOTValues;
end;

procedure TCCoJazUSB.setPOTValue(COM_pot: Integer; COM_value: Integer);
begin
  DefaultInterface.setPOTValue(COM_pot, COM_value);
end;

function TCCoJazUSB.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoJazUSBProperties.Create(AServer: TCCoJazUSB);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoJazUSBProperties.GetDefaultInterface: ICoJazUSB;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoLS450_FunctionsGUIProvider.Create: ICoLS450_FunctionsGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoLS450_FunctionsGUIProvider) as ICoLS450_FunctionsGUIProvider;
end;

class function CoCCoLS450_FunctionsGUIProvider.CreateRemote(const MachineName: string): ICoLS450_FunctionsGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoLS450_FunctionsGUIProvider) as ICoLS450_FunctionsGUIProvider;
end;

procedure TCCoLS450_FunctionsGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{107130FD-E4E7-55D1-9049-019A69965195}';
    IntfIID:   '{F8217074-5B31-59D0-90EB-D6441D9A8023}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoLS450_FunctionsGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoLS450_FunctionsGUIProvider;
  end;
end;

procedure TCCoLS450_FunctionsGUIProvider.ConnectTo(svrIntf: ICoLS450_FunctionsGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoLS450_FunctionsGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoLS450_FunctionsGUIProvider.GetDefaultInterface: ICoLS450_FunctionsGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoLS450_FunctionsGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoLS450_FunctionsGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoLS450_FunctionsGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoLS450_FunctionsGUIProvider.GetServerProperties: TCCoLS450_FunctionsGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoLS450_FunctionsGUIProvider.CreateLS450_FunctionsGUIProvider;
begin
  DefaultInterface.CreateLS450_FunctionsGUIProvider;
end;

function TCCoLS450_FunctionsGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoLS450_FunctionsGUIProviderProperties.Create(AServer: TCCoLS450_FunctionsGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoLS450_FunctionsGUIProviderProperties.GetDefaultInterface: ICoLS450_FunctionsGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoLS450_FunctionsImpl.Create: ICoLS450_FunctionsImpl;
begin
  Result := CreateComObject(CLASS_CCoLS450_FunctionsImpl) as ICoLS450_FunctionsImpl;
end;

class function CoCCoLS450_FunctionsImpl.CreateRemote(const MachineName: string): ICoLS450_FunctionsImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoLS450_FunctionsImpl) as ICoLS450_FunctionsImpl;
end;

procedure TCCoLS450_FunctionsImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5012545E-1098-58E1-9145-A8E8D1902C09}';
    IntfIID:   '{A91B2E0C-90C3-599F-905F-986C71C6C26B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoLS450_FunctionsImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoLS450_FunctionsImpl;
  end;
end;

procedure TCCoLS450_FunctionsImpl.ConnectTo(svrIntf: ICoLS450_FunctionsImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoLS450_FunctionsImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoLS450_FunctionsImpl.GetDefaultInterface: ICoLS450_FunctionsImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoLS450_FunctionsImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoLS450_FunctionsImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoLS450_FunctionsImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoLS450_FunctionsImpl.GetServerProperties: TCCoLS450_FunctionsImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoLS450_FunctionsImpl.CreateLS450_FunctionsImplB(const COM_usbInt: ICoUSBInterface; 
                                                             const COM_plugin: ICoSpectrometerPlugIn);
begin
  DefaultInterface.CreateLS450_FunctionsImplB(COM_usbInt, COM_plugin);
end;

function TCCoLS450_FunctionsImpl.getLS450Coefficients: ICoLS450Coefficients;
begin
  Result := DefaultInterface.getLS450Coefficients;
end;

procedure TCCoLS450_FunctionsImpl.setLS450Coefficients(const COM_ls450Coefficients: ICoLS450Coefficients);
begin
  DefaultInterface.setLS450Coefficients(COM_ls450Coefficients);
end;

procedure TCCoLS450_FunctionsImpl.loadInfo;
begin
  DefaultInterface.loadInfo;
end;

procedure TCCoLS450_FunctionsImpl.saveInfo;
begin
  DefaultInterface.saveInfo;
end;

function TCCoLS450_FunctionsImpl.getLS450Info(COM_index: Integer): WideString;
begin
  Result := DefaultInterface.getLS450Info(COM_index);
end;

procedure TCCoLS450_FunctionsImpl.setAllLS450Info(const COM_coef: ICoLS450Coefficients);
begin
  DefaultInterface.setAllLS450Info(COM_coef);
end;

function TCCoLS450_FunctionsImpl.getAllLS450Info: ICoLS450Coefficients;
begin
  Result := DefaultInterface.getAllLS450Info;
end;

procedure TCCoLS450_FunctionsImpl.setLS450Info(COM_index: Integer; const COM_str: WideString);
begin
  DefaultInterface.setLS450Info(COM_index, COM_str);
end;

procedure TCCoLS450_FunctionsImpl.setLEDMode(COM_pulsed: WordBool);
begin
  DefaultInterface.setLEDMode(COM_pulsed);
end;

procedure TCCoLS450_FunctionsImpl.loadLS450CoefficientsFromEEPROM;
begin
  DefaultInterface.loadLS450CoefficientsFromEEPROM;
end;

function TCCoLS450_FunctionsImpl.getO2ProbeCalibrationCoefficients: OleVariant;
begin
  Result := DefaultInterface.getO2ProbeCalibrationCoefficients;
end;

procedure TCCoLS450_FunctionsImpl.setO2ProbeCalibrationCoefficients(COM_coefficients: OleVariant);
begin
  DefaultInterface.setO2ProbeCalibrationCoefficients(COM_coefficients);
end;

function TCCoLS450_FunctionsImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoLS450_FunctionsImplProperties.Create(AServer: TCCoLS450_FunctionsImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoLS450_FunctionsImplProperties.GetDefaultInterface: ICoLS450_FunctionsImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoLS450_FunctionsImpl_2000.Create: ICoLS450_FunctionsImpl_2000;
begin
  Result := CreateComObject(CLASS_CCoLS450_FunctionsImpl_2000) as ICoLS450_FunctionsImpl_2000;
end;

class function CoCCoLS450_FunctionsImpl_2000.CreateRemote(const MachineName: string): ICoLS450_FunctionsImpl_2000;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoLS450_FunctionsImpl_2000) as ICoLS450_FunctionsImpl_2000;
end;

procedure TCCoLS450_FunctionsImpl_2000.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{835E620E-E4C7-508A-91F9-F384816036BB}';
    IntfIID:   '{EEC7A92F-A873-53F8-8110-8E2FB31853AB}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoLS450_FunctionsImpl_2000.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoLS450_FunctionsImpl_2000;
  end;
end;

procedure TCCoLS450_FunctionsImpl_2000.ConnectTo(svrIntf: ICoLS450_FunctionsImpl_2000);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoLS450_FunctionsImpl_2000.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoLS450_FunctionsImpl_2000.GetDefaultInterface: ICoLS450_FunctionsImpl_2000;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoLS450_FunctionsImpl_2000.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoLS450_FunctionsImpl_2000Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoLS450_FunctionsImpl_2000.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoLS450_FunctionsImpl_2000.GetServerProperties: TCCoLS450_FunctionsImpl_2000Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoLS450_FunctionsImpl_2000.CreateLS450_FunctionsImpl_2000B(const COM_usbInt: ICoUSBInterface; 
                                                                       const COM_plugin: ICoSpectrometerPlugIn);
begin
  DefaultInterface.CreateLS450_FunctionsImpl_2000B(COM_usbInt, COM_plugin);
end;

function TCCoLS450_FunctionsImpl_2000.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoLS450_FunctionsImpl_2000Properties.Create(AServer: TCCoLS450_FunctionsImpl_2000);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoLS450_FunctionsImpl_2000Properties.GetDefaultInterface: ICoLS450_FunctionsImpl_2000;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoLS450_FunctionsImpl_4000.Create: ICoLS450_FunctionsImpl_4000;
begin
  Result := CreateComObject(CLASS_CCoLS450_FunctionsImpl_4000) as ICoLS450_FunctionsImpl_4000;
end;

class function CoCCoLS450_FunctionsImpl_4000.CreateRemote(const MachineName: string): ICoLS450_FunctionsImpl_4000;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoLS450_FunctionsImpl_4000) as ICoLS450_FunctionsImpl_4000;
end;

procedure TCCoLS450_FunctionsImpl_4000.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D89E454F-B25E-5480-913B-42EF6984FF3E}';
    IntfIID:   '{2106D410-967E-5DC3-9073-5F11B832F885}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoLS450_FunctionsImpl_4000.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoLS450_FunctionsImpl_4000;
  end;
end;

procedure TCCoLS450_FunctionsImpl_4000.ConnectTo(svrIntf: ICoLS450_FunctionsImpl_4000);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoLS450_FunctionsImpl_4000.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoLS450_FunctionsImpl_4000.GetDefaultInterface: ICoLS450_FunctionsImpl_4000;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoLS450_FunctionsImpl_4000.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoLS450_FunctionsImpl_4000Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoLS450_FunctionsImpl_4000.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoLS450_FunctionsImpl_4000.GetServerProperties: TCCoLS450_FunctionsImpl_4000Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoLS450_FunctionsImpl_4000.CreateLS450_FunctionsImpl_4000B(const COM_usbInt: ICoUSBInterface; 
                                                                       const COM_plugin: ICoSpectrometerPlugIn);
begin
  DefaultInterface.CreateLS450_FunctionsImpl_4000B(COM_usbInt, COM_plugin);
end;

function TCCoLS450_FunctionsImpl_4000.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoLS450_FunctionsImpl_4000Properties.Create(AServer: TCCoLS450_FunctionsImpl_4000);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoLS450_FunctionsImpl_4000Properties.GetDefaultInterface: ICoLS450_FunctionsImpl_4000;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoLaserGUIProvider.Create: ICoLaserGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoLaserGUIProvider) as ICoLaserGUIProvider;
end;

class function CoCCoLaserGUIProvider.CreateRemote(const MachineName: string): ICoLaserGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoLaserGUIProvider) as ICoLaserGUIProvider;
end;

procedure TCCoLaserGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{26FF48AA-6FE4-5310-9039-803270DDEC9D}';
    IntfIID:   '{0A930BEA-7847-5677-9103-D6D68B11B10F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoLaserGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoLaserGUIProvider;
  end;
end;

procedure TCCoLaserGUIProvider.ConnectTo(svrIntf: ICoLaserGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoLaserGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoLaserGUIProvider.GetDefaultInterface: ICoLaserGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoLaserGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoLaserGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoLaserGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoLaserGUIProvider.GetServerProperties: TCCoLaserGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoLaserGUIProvider.CreateLaserGUIProvider;
begin
  DefaultInterface.CreateLaserGUIProvider;
end;

function TCCoLaserGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoLaserGUIProviderProperties.Create(AServer: TCCoLaserGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoLaserGUIProviderProperties.GetDefaultInterface: ICoLaserGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoLaserProvider.Create: ICoLaserProvider;
begin
  Result := CreateComObject(CLASS_CCoLaserProvider) as ICoLaserProvider;
end;

class function CoCCoLaserProvider.CreateRemote(const MachineName: string): ICoLaserProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoLaserProvider) as ICoLaserProvider;
end;

procedure TCCoLaserProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9F805835-7B6A-58DA-8174-6B7B90F12A3A}';
    IntfIID:   '{A7E147B9-A8E5-56AD-903F-079A80AE219F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoLaserProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoLaserProvider;
  end;
end;

procedure TCCoLaserProvider.ConnectTo(svrIntf: ICoLaserProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoLaserProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoLaserProvider.GetDefaultInterface: ICoLaserProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoLaserProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoLaserProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoLaserProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoLaserProvider.GetServerProperties: TCCoLaserProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoLaserProvider.CreateLaserProvider;
begin
  DefaultInterface.CreateLaserProvider;
end;

function TCCoLaserProvider.getLaser(COM_param0: Integer): ICoLaser;
begin
  Result := DefaultInterface.getLaser(COM_param0);
end;

function TCCoLaserProvider.getLasers: ICoLaserCollection;
begin
  Result := DefaultInterface.getLasers;
end;

function TCCoLaserProvider.getNumberOfEnabledLasers: Integer;
begin
  Result := DefaultInterface.getNumberOfEnabledLasers;
end;

function TCCoLaserProvider.getNumberOfSupportedLasers: Integer;
begin
  Result := DefaultInterface.getNumberOfSupportedLasers;
end;

procedure TCCoLaserProvider.setNumberOfSupportedLasers(COM_param0: Integer);
begin
  DefaultInterface.setNumberOfSupportedLasers(COM_param0);
end;

procedure TCCoLaserProvider.getLaserInfo(COM_param0: Integer);
begin
  DefaultInterface.getLaserInfo(COM_param0);
end;

procedure TCCoLaserProvider.setLaserInfo(COM_param0: Integer);
begin
  DefaultInterface.setLaserInfo(COM_param0);
end;

procedure TCCoLaserProvider.setDefaultLaser(COM_param0: Integer);
begin
  DefaultInterface.setDefaultLaser(COM_param0);
end;

function TCCoLaserProvider.getDefaultLaser: Integer;
begin
  Result := DefaultInterface.getDefaultLaser;
end;

function TCCoLaserProvider.isLaserTemperatureRegulation: WordBool;
begin
  Result := DefaultInterface.isLaserTemperatureRegulation;
end;

procedure TCCoLaserProvider.setLaserTemperatureRegulation(COM_param0: WordBool);
begin
  DefaultInterface.setLaserTemperatureRegulation(COM_param0);
end;

procedure TCCoLaserProvider.getLaserTemperatureInfo;
begin
  DefaultInterface.getLaserTemperatureInfo;
end;

procedure TCCoLaserProvider.setLaserTemperatureInfo;
begin
  DefaultInterface.setLaserTemperatureInfo;
end;

function TCCoLaserProvider.getMinimumLaserSetpoint: Integer;
begin
  Result := DefaultInterface.getMinimumLaserSetpoint;
end;

procedure TCCoLaserProvider.setMinimumLaserSetpoint(COM_param0: Integer);
begin
  DefaultInterface.setMinimumLaserSetpoint(COM_param0);
end;

function TCCoLaserProvider.getMaximumLaserSetpoint: Integer;
begin
  Result := DefaultInterface.getMaximumLaserSetpoint;
end;

procedure TCCoLaserProvider.setMaximumLaserSetpoint(COM_param0: Integer);
begin
  DefaultInterface.setMaximumLaserSetpoint(COM_param0);
end;

function TCCoLaserProvider.getLaserPowerInfo: Integer;
begin
  Result := DefaultInterface.getLaserPowerInfo;
end;

procedure TCCoLaserProvider.setLaserPowerInfo(COM_param0: Integer);
begin
  DefaultInterface.setLaserPowerInfo(COM_param0);
end;

function TCCoLaserProvider.isLaserPowerRegulation: WordBool;
begin
  Result := DefaultInterface.isLaserPowerRegulation;
end;

procedure TCCoLaserProvider.setLaserPowerRegulation(COM_param0: WordBool);
begin
  DefaultInterface.setLaserPowerRegulation(COM_param0);
end;

function TCCoLaserProvider.getMinimumLaserPowerSetpoint: Integer;
begin
  Result := DefaultInterface.getMinimumLaserPowerSetpoint;
end;

procedure TCCoLaserProvider.setMinimumLaserPowerSetpoint(COM_param0: Integer);
begin
  DefaultInterface.setMinimumLaserPowerSetpoint(COM_param0);
end;

function TCCoLaserProvider.getMaximumLaserPowerSetpoint: Integer;
begin
  Result := DefaultInterface.getMaximumLaserPowerSetpoint;
end;

procedure TCCoLaserProvider.setMaximumLaserPowerSetpoint(COM_param0: Integer);
begin
  DefaultInterface.setMaximumLaserPowerSetpoint(COM_param0);
end;

function TCCoLaserProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoLaserProviderProperties.Create(AServer: TCCoLaserProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoLaserProviderProperties.GetDefaultInterface: ICoLaserProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoLaserProviderImpl.Create: ICoLaserProviderImpl;
begin
  Result := CreateComObject(CLASS_CCoLaserProviderImpl) as ICoLaserProviderImpl;
end;

class function CoCCoLaserProviderImpl.CreateRemote(const MachineName: string): ICoLaserProviderImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoLaserProviderImpl) as ICoLaserProviderImpl;
end;

procedure TCCoLaserProviderImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C317A625-287E-554E-9024-545958B4277E}';
    IntfIID:   '{D4269F9B-638C-5E0C-8050-A93DD0A4C3FC}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoLaserProviderImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoLaserProviderImpl;
  end;
end;

procedure TCCoLaserProviderImpl.ConnectTo(svrIntf: ICoLaserProviderImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoLaserProviderImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoLaserProviderImpl.GetDefaultInterface: ICoLaserProviderImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoLaserProviderImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoLaserProviderImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoLaserProviderImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoLaserProviderImpl.GetServerProperties: TCCoLaserProviderImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoLaserProviderImpl.CreateLaserProviderImplB(const COM_usbInt: ICoUSBInterface; 
                                                         const COM_spec: ICoMMSRamanSpectrometer);
begin
  DefaultInterface.CreateLaserProviderImplB(COM_usbInt, COM_spec);
end;

function TCCoLaserProviderImpl.getLaser(COM_laserIndex: Integer): ICoLaser;
begin
  Result := DefaultInterface.getLaser(COM_laserIndex);
end;

function TCCoLaserProviderImpl.getLasers: ICoLaserCollection;
begin
  Result := DefaultInterface.getLasers;
end;

function TCCoLaserProviderImpl.getNumberOfEnabledLasers: Integer;
begin
  Result := DefaultInterface.getNumberOfEnabledLasers;
end;

function TCCoLaserProviderImpl.getNumberOfSupportedLasers: Integer;
begin
  Result := DefaultInterface.getNumberOfSupportedLasers;
end;

procedure TCCoLaserProviderImpl.setNumberOfSupportedLasers(COM_numLasers: Integer);
begin
  DefaultInterface.setNumberOfSupportedLasers(COM_numLasers);
end;

procedure TCCoLaserProviderImpl.getLaserInfo(COM_laserIndex: Integer);
begin
  DefaultInterface.getLaserInfo(COM_laserIndex);
end;

procedure TCCoLaserProviderImpl.setLaserInfo(COM_laserIndex: Integer);
begin
  DefaultInterface.setLaserInfo(COM_laserIndex);
end;

function TCCoLaserProviderImpl.getDefaultLaser: Integer;
begin
  Result := DefaultInterface.getDefaultLaser;
end;

procedure TCCoLaserProviderImpl.setDefaultLaser(COM_defaultLaser: Integer);
begin
  DefaultInterface.setDefaultLaser(COM_defaultLaser);
end;

procedure TCCoLaserProviderImpl.setLaserTemperatureRegulation(COM_laserTemperatureRegulation: WordBool);
begin
  DefaultInterface.setLaserTemperatureRegulation(COM_laserTemperatureRegulation);
end;

procedure TCCoLaserProviderImpl.getLaserTemperatureInfo;
begin
  DefaultInterface.getLaserTemperatureInfo;
end;

procedure TCCoLaserProviderImpl.setLaserTemperatureInfo;
begin
  DefaultInterface.setLaserTemperatureInfo;
end;

function TCCoLaserProviderImpl.isLaserTemperatureRegulation: WordBool;
begin
  Result := DefaultInterface.isLaserTemperatureRegulation;
end;

function TCCoLaserProviderImpl.getMinimumLaserSetpoint: Integer;
begin
  Result := DefaultInterface.getMinimumLaserSetpoint;
end;

procedure TCCoLaserProviderImpl.setMinimumLaserSetpoint(COM_minimumLaserSetpoint: Integer);
begin
  DefaultInterface.setMinimumLaserSetpoint(COM_minimumLaserSetpoint);
end;

function TCCoLaserProviderImpl.getMaximumLaserSetpoint: Integer;
begin
  Result := DefaultInterface.getMaximumLaserSetpoint;
end;

procedure TCCoLaserProviderImpl.setMaximumLaserSetpoint(COM_maximumLaserSetpoint: Integer);
begin
  DefaultInterface.setMaximumLaserSetpoint(COM_maximumLaserSetpoint);
end;

procedure TCCoLaserProviderImpl.setLaserPowerRegulation(COM_laserPowerRegulation: WordBool);
begin
  DefaultInterface.setLaserPowerRegulation(COM_laserPowerRegulation);
end;

function TCCoLaserProviderImpl.getLaserPowerInfo: Integer;
begin
  Result := DefaultInterface.getLaserPowerInfo;
end;

procedure TCCoLaserProviderImpl.setLaserPowerInfo(COM_power: Integer);
begin
  DefaultInterface.setLaserPowerInfo(COM_power);
end;

function TCCoLaserProviderImpl.isLaserPowerRegulation: WordBool;
begin
  Result := DefaultInterface.isLaserPowerRegulation;
end;

function TCCoLaserProviderImpl.getMinimumLaserPowerSetpoint: Integer;
begin
  Result := DefaultInterface.getMinimumLaserPowerSetpoint;
end;

procedure TCCoLaserProviderImpl.setMinimumLaserPowerSetpoint(COM_minimumLaserPowerSetpoint: Integer);
begin
  DefaultInterface.setMinimumLaserPowerSetpoint(COM_minimumLaserPowerSetpoint);
end;

function TCCoLaserProviderImpl.getMaximumLaserPowerSetpoint: Integer;
begin
  Result := DefaultInterface.getMaximumLaserPowerSetpoint;
end;

procedure TCCoLaserProviderImpl.setMaximumLaserPowerSetpoint(COM_maximumLaserPowerSetpoint: Integer);
begin
  DefaultInterface.setMaximumLaserPowerSetpoint(COM_maximumLaserPowerSetpoint);
end;

function TCCoLaserProviderImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoLaserProviderImplProperties.Create(AServer: TCCoLaserProviderImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoLaserProviderImplProperties.GetDefaultInterface: ICoLaserProviderImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoListIterator.Create: ICoListIterator;
begin
  Result := CreateComObject(CLASS_CCoListIterator) as ICoListIterator;
end;

class function CoCCoListIterator.CreateRemote(const MachineName: string): ICoListIterator;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoListIterator) as ICoListIterator;
end;

procedure TCCoListIterator.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E34CACA6-C72B-584B-80DD-238823835C93}';
    IntfIID:   '{EE8130ED-924F-51BA-8157-68BA084110E6}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoListIterator.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoListIterator;
  end;
end;

procedure TCCoListIterator.ConnectTo(svrIntf: ICoListIterator);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoListIterator.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoListIterator.GetDefaultInterface: ICoListIterator;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoListIterator.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoListIteratorProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoListIterator.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoListIterator.GetServerProperties: TCCoListIteratorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoListIterator.CreateListIterator;
begin
  DefaultInterface.CreateListIterator;
end;

function TCCoListIterator.nextIndex: Integer;
begin
  Result := DefaultInterface.nextIndex;
end;

function TCCoListIterator.previousIndex: Integer;
begin
  Result := DefaultInterface.previousIndex;
end;

procedure TCCoListIterator.Remove;
begin
  DefaultInterface.Remove;
end;

function TCCoListIterator.hasNext: WordBool;
begin
  Result := DefaultInterface.hasNext;
end;

function TCCoListIterator.hasPrevious: WordBool;
begin
  Result := DefaultInterface.hasPrevious;
end;

function TCCoListIterator.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoListIteratorProperties.Create(AServer: TCCoListIterator);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoListIteratorProperties.GetDefaultInterface: ICoListIterator;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoList.Create: ICoList;
begin
  Result := CreateComObject(CLASS_CCoList) as ICoList;
end;

class function CoCCoList.CreateRemote(const MachineName: string): ICoList;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoList) as ICoList;
end;

procedure TCCoList.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{90FFFE14-C044-57D6-9176-F6A00D586979}';
    IntfIID:   '{503C0A3C-7F79-5910-800C-65B5CDF903D6}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoList.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoList;
  end;
end;

procedure TCCoList.ConnectTo(svrIntf: ICoList);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoList.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoList.GetDefaultInterface: ICoList;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoList.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoListProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoList.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoList.GetServerProperties: TCCoListProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoList.CreateList;
begin
  DefaultInterface.CreateList;
end;

function TCCoList.hashCode: Integer;
begin
  Result := DefaultInterface.hashCode;
end;

function TCCoList.size: Integer;
begin
  Result := DefaultInterface.size;
end;

procedure TCCoList.clear;
begin
  DefaultInterface.clear;
end;

function TCCoList.isEmpty: WordBool;
begin
  Result := DefaultInterface.isEmpty;
end;

function TCCoList.addAll(COM_param0: Integer; const COM_param1: ICoCollection): WordBool;
begin
  Result := DefaultInterface.addAll(COM_param0, COM_param1);
end;

function TCCoList.addAllB(const COM_param0: ICoCollection): WordBool;
begin
  Result := DefaultInterface.addAllB(COM_param0);
end;

function TCCoList.containsAll(const COM_param0: ICoCollection): WordBool;
begin
  Result := DefaultInterface.containsAll(COM_param0);
end;

function TCCoList.removeAll(const COM_param0: ICoCollection): WordBool;
begin
  Result := DefaultInterface.removeAll(COM_param0);
end;

function TCCoList.retainAll(const COM_param0: ICoCollection): WordBool;
begin
  Result := DefaultInterface.retainAll(COM_param0);
end;

function TCCoList.iterator: ICoIterator;
begin
  Result := DefaultInterface.iterator;
end;

function TCCoList.subList(COM_param0: Integer; COM_param1: Integer): ICoList;
begin
  Result := DefaultInterface.subList(COM_param0, COM_param1);
end;

function TCCoList.listIterator: ICoListIterator;
begin
  Result := DefaultInterface.listIterator;
end;

function TCCoList.listIteratorB(COM_param0: Integer): ICoListIterator;
begin
  Result := DefaultInterface.listIteratorB(COM_param0);
end;

function TCCoList.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoListProperties.Create(AServer: TCCoList);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoListProperties.GetDefaultInterface: ICoList;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMMSRamanChannel.Create: ICoMMSRamanChannel;
begin
  Result := CreateComObject(CLASS_CCoMMSRamanChannel) as ICoMMSRamanChannel;
end;

class function CoCCoMMSRamanChannel.CreateRemote(const MachineName: string): ICoMMSRamanChannel;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMMSRamanChannel) as ICoMMSRamanChannel;
end;

procedure TCCoMMSRamanChannel.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{241BFA58-072B-5933-8131-6CA784864C5B}';
    IntfIID:   '{B8EE5E9D-8D20-56B2-8170-637813EB93C1}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMMSRamanChannel.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMMSRamanChannel;
  end;
end;

procedure TCCoMMSRamanChannel.ConnectTo(svrIntf: ICoMMSRamanChannel);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMMSRamanChannel.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMMSRamanChannel.GetDefaultInterface: ICoMMSRamanChannel;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMMSRamanChannel.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMMSRamanChannelProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoMMSRamanChannel.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMMSRamanChannel.GetServerProperties: TCCoMMSRamanChannelProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMMSRamanChannel.CreateMMSRamanChannelB(const COM_spectrometer: ICoMMSRaman; 
                                                     const COM_coefficients: ICoCoefficients; 
                                                     COM_channel: Integer);
begin
  DefaultInterface.CreateMMSRamanChannelB(COM_spectrometer, COM_coefficients, COM_channel);
end;

procedure TCCoMMSRamanChannel.generateMetadata(const COM_sb: ICoSpectrometerInfo; COM_index: Integer);
begin
  DefaultInterface.generateMetadata(COM_sb, COM_index);
end;

procedure TCCoMMSRamanChannel.getCoefficientsFromSpectrometer;
begin
  DefaultInterface.getCoefficientsFromSpectrometer;
end;

function TCCoMMSRamanChannel.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMMSRamanChannelProperties.Create(AServer: TCCoMMSRamanChannel);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMMSRamanChannelProperties.GetDefaultInterface: ICoMMSRamanChannel;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMMSRamanConstants.Create: ICoMMSRamanConstants;
begin
  Result := CreateComObject(CLASS_CCoMMSRamanConstants) as ICoMMSRamanConstants;
end;

class function CoCCoMMSRamanConstants.CreateRemote(const MachineName: string): ICoMMSRamanConstants;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMMSRamanConstants) as ICoMMSRamanConstants;
end;

procedure TCCoMMSRamanConstants.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{794BEA61-70AA-5BBC-90B1-6F3AB5735881}';
    IntfIID:   '{2ED2724E-A40E-5D54-9129-5C964648B6F3}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMMSRamanConstants.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMMSRamanConstants;
  end;
end;

procedure TCCoMMSRamanConstants.ConnectTo(svrIntf: ICoMMSRamanConstants);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMMSRamanConstants.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMMSRamanConstants.GetDefaultInterface: ICoMMSRamanConstants;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMMSRamanConstants.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMMSRamanConstantsProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoMMSRamanConstants.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMMSRamanConstants.GetServerProperties: TCCoMMSRamanConstantsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMMSRamanConstants.CreateMMSRamanConstants;
begin
  DefaultInterface.CreateMMSRamanConstants;
end;

function TCCoMMSRamanConstants.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMMSRamanConstantsProperties.Create(AServer: TCCoMMSRamanConstants);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMMSRamanConstantsProperties.GetDefaultInterface: ICoMMSRamanConstants;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMasterClockDivisor.Create: ICoMasterClockDivisor;
begin
  Result := CreateComObject(CLASS_CCoMasterClockDivisor) as ICoMasterClockDivisor;
end;

class function CoCCoMasterClockDivisor.CreateRemote(const MachineName: string): ICoMasterClockDivisor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMasterClockDivisor) as ICoMasterClockDivisor;
end;

procedure TCCoMasterClockDivisor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3F6121D7-DD57-5CF8-80F2-C38992C6A1CA}';
    IntfIID:   '{606DB847-95E6-5EA8-81AE-774CB83900BD}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMasterClockDivisor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMasterClockDivisor;
  end;
end;

procedure TCCoMasterClockDivisor.ConnectTo(svrIntf: ICoMasterClockDivisor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMasterClockDivisor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMasterClockDivisor.GetDefaultInterface: ICoMasterClockDivisor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMasterClockDivisor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMasterClockDivisorProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoMasterClockDivisor.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMasterClockDivisor.GetServerProperties: TCCoMasterClockDivisorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMasterClockDivisor.CreateMasterClockDivisor;
begin
  DefaultInterface.CreateMasterClockDivisor;
end;

function TCCoMasterClockDivisor.getMasterClockDivisor: Integer;
begin
  Result := DefaultInterface.getMasterClockDivisor;
end;

procedure TCCoMasterClockDivisor.setMasterClockDivisor(COM_param0: Integer);
begin
  DefaultInterface.setMasterClockDivisor(COM_param0);
end;

function TCCoMasterClockDivisor.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMasterClockDivisorProperties.Create(AServer: TCCoMasterClockDivisor);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMasterClockDivisorProperties.GetDefaultInterface: ICoMasterClockDivisor;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMasterClockDivisorImpl.Create: ICoMasterClockDivisorImpl;
begin
  Result := CreateComObject(CLASS_CCoMasterClockDivisorImpl) as ICoMasterClockDivisorImpl;
end;

class function CoCCoMasterClockDivisorImpl.CreateRemote(const MachineName: string): ICoMasterClockDivisorImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMasterClockDivisorImpl) as ICoMasterClockDivisorImpl;
end;

procedure TCCoMasterClockDivisorImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{634AD2DE-7086-583E-9154-3689C7B5DADC}';
    IntfIID:   '{2C874B89-034C-50F0-8194-8855A0527FD6}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMasterClockDivisorImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMasterClockDivisorImpl;
  end;
end;

procedure TCCoMasterClockDivisorImpl.ConnectTo(svrIntf: ICoMasterClockDivisorImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMasterClockDivisorImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMasterClockDivisorImpl.GetDefaultInterface: ICoMasterClockDivisorImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMasterClockDivisorImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMasterClockDivisorImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoMasterClockDivisorImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMasterClockDivisorImpl.GetServerProperties: TCCoMasterClockDivisorImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMasterClockDivisorImpl.CreateMasterClockDivisorImplB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateMasterClockDivisorImplB(COM_usbInt);
end;

function TCCoMasterClockDivisorImpl.getMasterClockDivisor: Integer;
begin
  Result := DefaultInterface.getMasterClockDivisor;
end;

procedure TCCoMasterClockDivisorImpl.setMasterClockDivisor(COM_value: Integer);
begin
  DefaultInterface.setMasterClockDivisor(COM_value);
end;

function TCCoMasterClockDivisorImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMasterClockDivisorImplProperties.Create(AServer: TCCoMasterClockDivisorImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMasterClockDivisorImplProperties.GetDefaultInterface: ICoMasterClockDivisorImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMasterClockDivisorListener.Create: ICoMasterClockDivisorListener;
begin
  Result := CreateComObject(CLASS_CCoMasterClockDivisorListener) as ICoMasterClockDivisorListener;
end;

class function CoCCoMasterClockDivisorListener.CreateRemote(const MachineName: string): ICoMasterClockDivisorListener;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMasterClockDivisorListener) as ICoMasterClockDivisorListener;
end;

procedure TCCoMasterClockDivisorListener.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8ED81694-17C9-5E03-91CC-5B853E5058F0}';
    IntfIID:   '{39708381-AD50-5164-90F1-49750684A42E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMasterClockDivisorListener.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMasterClockDivisorListener;
  end;
end;

procedure TCCoMasterClockDivisorListener.ConnectTo(svrIntf: ICoMasterClockDivisorListener);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMasterClockDivisorListener.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMasterClockDivisorListener.GetDefaultInterface: ICoMasterClockDivisorListener;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMasterClockDivisorListener.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMasterClockDivisorListenerProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoMasterClockDivisorListener.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMasterClockDivisorListener.GetServerProperties: TCCoMasterClockDivisorListenerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMasterClockDivisorListener.CreateMasterClockDivisorListener;
begin
  DefaultInterface.CreateMasterClockDivisorListener;
end;

procedure TCCoMasterClockDivisorListener.masterClockChanged(COM_param0: Integer);
begin
  DefaultInterface.masterClockChanged(COM_param0);
end;

function TCCoMasterClockDivisorListener.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMasterClockDivisorListenerProperties.Create(AServer: TCCoMasterClockDivisorListener);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMasterClockDivisorListenerProperties.GetDefaultInterface: ICoMasterClockDivisorListener;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMasterClockRate.Create: ICoMasterClockRate;
begin
  Result := CreateComObject(CLASS_CCoMasterClockRate) as ICoMasterClockRate;
end;

class function CoCCoMasterClockRate.CreateRemote(const MachineName: string): ICoMasterClockRate;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMasterClockRate) as ICoMasterClockRate;
end;

procedure TCCoMasterClockRate.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DCC5A38B-4081-59C1-9070-970DFEF26307}';
    IntfIID:   '{67058E79-062D-5F6A-808C-49CB51FE4D34}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMasterClockRate.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMasterClockRate;
  end;
end;

procedure TCCoMasterClockRate.ConnectTo(svrIntf: ICoMasterClockRate);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMasterClockRate.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMasterClockRate.GetDefaultInterface: ICoMasterClockRate;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMasterClockRate.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMasterClockRateProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoMasterClockRate.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMasterClockRate.GetServerProperties: TCCoMasterClockRateProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMasterClockRate.CreateMasterClockRate;
begin
  DefaultInterface.CreateMasterClockRate;
end;

procedure TCCoMasterClockRate.setMasterClock(COM_param0: Integer);
begin
  DefaultInterface.setMasterClock(COM_param0);
end;

function TCCoMasterClockRate.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMasterClockRateProperties.Create(AServer: TCCoMasterClockRate);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMasterClockRateProperties.GetDefaultInterface: ICoMasterClockRate;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMasterClockRateImpl.Create: ICoMasterClockRateImpl;
begin
  Result := CreateComObject(CLASS_CCoMasterClockRateImpl) as ICoMasterClockRateImpl;
end;

class function CoCCoMasterClockRateImpl.CreateRemote(const MachineName: string): ICoMasterClockRateImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMasterClockRateImpl) as ICoMasterClockRateImpl;
end;

procedure TCCoMasterClockRateImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{69638BE3-4DD2-544E-9115-211AFC2FECF9}';
    IntfIID:   '{6D7C615C-3E77-5D2C-9060-972425312EBD}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMasterClockRateImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMasterClockRateImpl;
  end;
end;

procedure TCCoMasterClockRateImpl.ConnectTo(svrIntf: ICoMasterClockRateImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMasterClockRateImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMasterClockRateImpl.GetDefaultInterface: ICoMasterClockRateImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMasterClockRateImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMasterClockRateImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoMasterClockRateImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMasterClockRateImpl.GetServerProperties: TCCoMasterClockRateImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMasterClockRateImpl.CreateMasterClockRateImplB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateMasterClockRateImplB(COM_usbInt);
end;

procedure TCCoMasterClockRateImpl.setMasterClock(COM_param0: Integer);
begin
  DefaultInterface.setMasterClock(COM_param0);
end;

function TCCoMasterClockRateImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMasterClockRateImplProperties.Create(AServer: TCCoMasterClockRateImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMasterClockRateImplProperties.GetDefaultInterface: ICoMasterClockRateImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMasterClockRateImpl_2000.Create: ICoMasterClockRateImpl_2000;
begin
  Result := CreateComObject(CLASS_CCoMasterClockRateImpl_2000) as ICoMasterClockRateImpl_2000;
end;

class function CoCCoMasterClockRateImpl_2000.CreateRemote(const MachineName: string): ICoMasterClockRateImpl_2000;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMasterClockRateImpl_2000) as ICoMasterClockRateImpl_2000;
end;

procedure TCCoMasterClockRateImpl_2000.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{1D2A2473-2FE1-5EC5-81C3-3413CD1C6435}';
    IntfIID:   '{4B3B48EC-ABE7-50F3-90D2-6FA3EFED896F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMasterClockRateImpl_2000.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMasterClockRateImpl_2000;
  end;
end;

procedure TCCoMasterClockRateImpl_2000.ConnectTo(svrIntf: ICoMasterClockRateImpl_2000);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMasterClockRateImpl_2000.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMasterClockRateImpl_2000.GetDefaultInterface: ICoMasterClockRateImpl_2000;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMasterClockRateImpl_2000.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMasterClockRateImpl_2000Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoMasterClockRateImpl_2000.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMasterClockRateImpl_2000.GetServerProperties: TCCoMasterClockRateImpl_2000Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMasterClockRateImpl_2000.CreateMasterClockRateImpl_2000B(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateMasterClockRateImpl_2000B(COM_usbInt);
end;

procedure TCCoMasterClockRateImpl_2000.setMasterClock(COM_rate: Integer);
begin
  DefaultInterface.setMasterClock(COM_rate);
end;

function TCCoMasterClockRateImpl_2000.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMasterClockRateImpl_2000Properties.Create(AServer: TCCoMasterClockRateImpl_2000);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMasterClockRateImpl_2000Properties.GetDefaultInterface: ICoMasterClockRateImpl_2000;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMasterClockRateImpl_ADC.Create: ICoMasterClockRateImpl_ADC;
begin
  Result := CreateComObject(CLASS_CCoMasterClockRateImpl_ADC) as ICoMasterClockRateImpl_ADC;
end;

class function CoCCoMasterClockRateImpl_ADC.CreateRemote(const MachineName: string): ICoMasterClockRateImpl_ADC;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMasterClockRateImpl_ADC) as ICoMasterClockRateImpl_ADC;
end;

procedure TCCoMasterClockRateImpl_ADC.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4F969393-72EB-58F1-812E-B4C1EF624C72}';
    IntfIID:   '{90171331-9C25-5B31-8140-82352EF9C75F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMasterClockRateImpl_ADC.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMasterClockRateImpl_ADC;
  end;
end;

procedure TCCoMasterClockRateImpl_ADC.ConnectTo(svrIntf: ICoMasterClockRateImpl_ADC);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMasterClockRateImpl_ADC.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMasterClockRateImpl_ADC.GetDefaultInterface: ICoMasterClockRateImpl_ADC;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMasterClockRateImpl_ADC.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMasterClockRateImpl_ADCProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoMasterClockRateImpl_ADC.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMasterClockRateImpl_ADC.GetServerProperties: TCCoMasterClockRateImpl_ADCProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMasterClockRateImpl_ADC.CreateMasterClockRateImpl_ADCB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateMasterClockRateImpl_ADCB(COM_usbInt);
end;

procedure TCCoMasterClockRateImpl_ADC.setMasterClock(COM_rate: Integer);
begin
  DefaultInterface.setMasterClock(COM_rate);
end;

function TCCoMasterClockRateImpl_ADC.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMasterClockRateImpl_ADCProperties.Create(AServer: TCCoMasterClockRateImpl_ADC);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMasterClockRateImpl_ADCProperties.GetDefaultInterface: ICoMasterClockRateImpl_ADC;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMasterClockRateImpl_MMSRaman.Create: ICoMasterClockRateImpl_MMSRaman;
begin
  Result := CreateComObject(CLASS_CCoMasterClockRateImpl_MMSRaman) as ICoMasterClockRateImpl_MMSRaman;
end;

class function CoCCoMasterClockRateImpl_MMSRaman.CreateRemote(const MachineName: string): ICoMasterClockRateImpl_MMSRaman;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMasterClockRateImpl_MMSRaman) as ICoMasterClockRateImpl_MMSRaman;
end;

procedure TCCoMasterClockRateImpl_MMSRaman.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7E0F351A-A90F-5A9A-80A4-0993C5D5CAD3}';
    IntfIID:   '{59199C6E-A878-5F8A-9199-437D7E92F994}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMasterClockRateImpl_MMSRaman.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMasterClockRateImpl_MMSRaman;
  end;
end;

procedure TCCoMasterClockRateImpl_MMSRaman.ConnectTo(svrIntf: ICoMasterClockRateImpl_MMSRaman);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMasterClockRateImpl_MMSRaman.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMasterClockRateImpl_MMSRaman.GetDefaultInterface: ICoMasterClockRateImpl_MMSRaman;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMasterClockRateImpl_MMSRaman.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMasterClockRateImpl_MMSRamanProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoMasterClockRateImpl_MMSRaman.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMasterClockRateImpl_MMSRaman.GetServerProperties: TCCoMasterClockRateImpl_MMSRamanProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMasterClockRateImpl_MMSRaman.CreateMasterClockRateImpl_MMSRamanB(const COM_usbInt: ICoUSBInterface; 
                                                                               const COM_spec: ICoMMSRaman);
begin
  DefaultInterface.CreateMasterClockRateImpl_MMSRamanB(COM_usbInt, COM_spec);
end;

procedure TCCoMasterClockRateImpl_MMSRaman.setMasterClock(COM_rate: Integer);
begin
  DefaultInterface.setMasterClock(COM_rate);
end;

function TCCoMasterClockRateImpl_MMSRaman.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMasterClockRateImpl_MMSRamanProperties.Create(AServer: TCCoMasterClockRateImpl_MMSRaman);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMasterClockRateImpl_MMSRamanProperties.GetDefaultInterface: ICoMasterClockRateImpl_MMSRaman;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMaya2000.Create: ICoMaya2000;
begin
  Result := CreateComObject(CLASS_CCoMaya2000) as ICoMaya2000;
end;

class function CoCCoMaya2000.CreateRemote(const MachineName: string): ICoMaya2000;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMaya2000) as ICoMaya2000;
end;

procedure TCCoMaya2000.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{17C09544-4B41-57E5-8050-6D1CD4AC7800}';
    IntfIID:   '{C9CBA76E-87B6-5F66-8082-D7BC06946B91}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMaya2000.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMaya2000;
  end;
end;

procedure TCCoMaya2000.ConnectTo(svrIntf: ICoMaya2000);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMaya2000.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMaya2000.GetDefaultInterface: ICoMaya2000;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMaya2000.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMaya2000Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoMaya2000.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMaya2000.GetServerProperties: TCCoMaya2000Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMaya2000.CreateMaya2000;
begin
  DefaultInterface.CreateMaya2000;
end;

procedure TCCoMaya2000.CreateMaya2000B(COM_i: Integer);
begin
  DefaultInterface.CreateMaya2000B(COM_i);
end;

procedure TCCoMaya2000.setEndpoints;
begin
  DefaultInterface.setEndpoints;
end;

function TCCoMaya2000.getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getEndpoint(COM_endPoint);
end;

procedure TCCoMaya2000.openSpectrometer(COM_index: Integer);
begin
  DefaultInterface.openSpectrometer(COM_index);
end;

function TCCoMaya2000.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

procedure TCCoMaya2000.setStrobeDelay(COM_delay: Integer);
begin
  DefaultInterface.setStrobeDelay(COM_delay);
end;

function TCCoMaya2000.getActualIntegrationTime: Integer;
begin
  Result := DefaultInterface.getActualIntegrationTime;
end;

function TCCoMaya2000.getPlugIns: ICoSpectrometerPlugInCollection;
begin
  Result := DefaultInterface.getPlugIns;
end;

function TCCoMaya2000.getNumberOfPlugIns: Integer;
begin
  Result := DefaultInterface.getNumberOfPlugIns;
end;

function TCCoMaya2000.isPlugInDetected(COM_id: Integer): WordBool;
begin
  Result := DefaultInterface.isPlugInDetected(COM_id);
end;

function TCCoMaya2000.initializePlugIns: OleVariant;
begin
  Result := DefaultInterface.initializePlugIns;
end;

procedure TCCoMaya2000.detectPlugIns;
begin
  DefaultInterface.detectPlugIns;
end;

function TCCoMaya2000.setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer;
begin
  Result := DefaultInterface.setI2CBytes(COM_address, COM_numBytes, COM_i2C);
end;

function TCCoMaya2000.getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
begin
  Result := DefaultInterface.getI2CBytes(COM_address, COM_numBytes);
end;

function TCCoMaya2000.getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
begin
  Result := DefaultInterface.getSPIBytes(COM_message, COM_length);
end;

function TCCoMaya2000.getPSOCVersion: WideString;
begin
  Result := DefaultInterface.getPSOCVersion;
end;

function TCCoMaya2000.getFPGAFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFPGAFirmwareVersion;
end;

function TCCoMaya2000.continuousStrobeCountsToMicros(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.continuousStrobeCountsToMicros(COM_counts);
end;

procedure TCCoMaya2000.setContinuousStrobeDelay(COM_delayMicros: Integer);
begin
  DefaultInterface.setContinuousStrobeDelay(COM_delayMicros);
end;

function TCCoMaya2000.getContinuousStrobeDelayMinimum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMinimum;
end;

function TCCoMaya2000.getContinuousStrobeDelayMaximum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMaximum;
end;

function TCCoMaya2000.getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayIncrement(COM_magnitude);
end;

procedure TCCoMaya2000.setAdvancedIntegrationTime(COM_delayMicros: Integer);
begin
  DefaultInterface.setAdvancedIntegrationTime(COM_delayMicros);
end;

function TCCoMaya2000.getIntegrationTimeBaseClock: Integer;
begin
  Result := DefaultInterface.getIntegrationTimeBaseClock;
end;

function TCCoMaya2000.getIntegrationClockTimer: Integer;
begin
  Result := DefaultInterface.getIntegrationClockTimer;
end;

function TCCoMaya2000.getAdvancedIntegrationTimeMinimum: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeMinimum;
end;

function TCCoMaya2000.getAdvancedIntegrationTimeMaximum: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeMaximum;
end;

function TCCoMaya2000.getAdvancedIntegrationTimeIncrement: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeIncrement;
end;

procedure TCCoMaya2000.setExternalTriggerMode(COM_mode: Integer);
begin
  DefaultInterface.setExternalTriggerMode(COM_mode);
end;

function TCCoMaya2000.getExternalTriggerModes: ICoExternalTriggerModeCollection;
begin
  Result := DefaultInterface.getExternalTriggerModes;
end;

procedure TCCoMaya2000.setShutterClock(COM_value: Integer);
begin
  DefaultInterface.setShutterClock(COM_value);
end;

function TCCoMaya2000.getShutterClock: Integer;
begin
  Result := DefaultInterface.getShutterClock;
end;

procedure TCCoMaya2000.setSingleStrobeLow(COM_value: Integer);
begin
  DefaultInterface.setSingleStrobeLow(COM_value);
end;

procedure TCCoMaya2000.setSingleStrobeHigh(COM_value: Integer);
begin
  DefaultInterface.setSingleStrobeHigh(COM_value);
end;

function TCCoMaya2000.getSingleStrobeCountsToMicros(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.getSingleStrobeCountsToMicros(COM_counts);
end;

function TCCoMaya2000.getSingleStrobeLow: Integer;
begin
  Result := DefaultInterface.getSingleStrobeLow;
end;

function TCCoMaya2000.getSingleStrobeHigh: Integer;
begin
  Result := DefaultInterface.getSingleStrobeHigh;
end;

function TCCoMaya2000.getSingleStrobeMinimum: Integer;
begin
  Result := DefaultInterface.getSingleStrobeMinimum;
end;

function TCCoMaya2000.getSingleStrobeMaximum: Integer;
begin
  Result := DefaultInterface.getSingleStrobeMaximum;
end;

function TCCoMaya2000.getSingleStrobeIncrement: Integer;
begin
  Result := DefaultInterface.getSingleStrobeIncrement;
end;

procedure TCCoMaya2000.setDirectionAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setDirectionAllBits(COM_bitSet);
end;

procedure TCCoMaya2000.setMuxAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setMuxAllBits(COM_bitSet);
end;

procedure TCCoMaya2000.setValueAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setValueAllBits(COM_bitSet);
end;

procedure TCCoMaya2000.setDirectionBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setDirectionBitmask(COM_bitmask);
end;

procedure TCCoMaya2000.setMuxBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setMuxBitmask(COM_bitmask);
end;

procedure TCCoMaya2000.setValueBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setValueBitmask(COM_bitmask);
end;

procedure TCCoMaya2000.setDirectionBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setDirectionBit(COM_bit, COM_value);
end;

procedure TCCoMaya2000.setMuxBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setMuxBit(COM_bit, COM_value);
end;

procedure TCCoMaya2000.setValueBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setValueBit(COM_bit, COM_value);
end;

function TCCoMaya2000.getTotalGPIOBits: Integer;
begin
  Result := DefaultInterface.getTotalGPIOBits;
end;

function TCCoMaya2000.getDirectionBits: ICoBitSet;
begin
  Result := DefaultInterface.getDirectionBits;
end;

function TCCoMaya2000.getMuxBits: ICoBitSet;
begin
  Result := DefaultInterface.getMuxBits;
end;

function TCCoMaya2000.getValueBits: ICoBitSet;
begin
  Result := DefaultInterface.getValueBits;
end;

function TCCoMaya2000.getValueBit(COM_bitNumber: Integer): Integer;
begin
  Result := DefaultInterface.getValueBit(COM_bitNumber);
end;

function TCCoMaya2000.getNumberOfPins: Integer;
begin
  Result := DefaultInterface.getNumberOfPins;
end;

function TCCoMaya2000.getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
begin
  Result := DefaultInterface.getIrradianceCalibrationFactors(COM_address);
end;

procedure TCCoMaya2000.setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant);
begin
  DefaultInterface.setIrradianceCalibrationFactors(COM_address, COM_data);
end;

procedure TCCoMaya2000.setMasterClockDivisor(COM_value: Integer);
begin
  DefaultInterface.setMasterClockDivisor(COM_value);
end;

function TCCoMaya2000.getMasterClockDivisor: Integer;
begin
  Result := DefaultInterface.getMasterClockDivisor;
end;

procedure TCCoMaya2000.setExternalTriggerDelay(COM_counts: Integer);
begin
  DefaultInterface.setExternalTriggerDelay(COM_counts);
end;

function TCCoMaya2000.triggerDelayCountsToMicroseconds(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.triggerDelayCountsToMicroseconds(COM_counts);
end;

function TCCoMaya2000.getExternalTriggerDelayMinimum: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayMinimum;
end;

function TCCoMaya2000.getExternalTriggerDelayMaximum: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayMaximum;
end;

function TCCoMaya2000.getExternalTriggerDelayIncrement: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayIncrement;
end;

function TCCoMaya2000.readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readNonlinearityCoefficientsFromSpectrometer;
end;

function TCCoMaya2000.getNonlinearityCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getNonlinearityCoefficients;
end;

function TCCoMaya2000.getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getNonlinearityCoefficientsSingleChannel(COM_index);
end;

procedure TCCoMaya2000.setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; 
                                                                COM_index: Integer);
begin
  DefaultInterface.setNonlinearityCoefficientsSingleChannel(COM_nl, COM_index);
end;

function TCCoMaya2000.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoMaya2000.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoMaya2000.getWavelengths(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_index);
end;

procedure TCCoMaya2000.setWavelengths(COM_wl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setWavelengths(COM_wl, COM_index);
end;

function TCCoMaya2000.readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readStrayLightCorrectionCoefficientFromSpectrometer;
end;

function TCCoMaya2000.getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getStrayLightCorrectionCoefficient;
end;

procedure TCCoMaya2000.setStrayLight(COM_strayLight: Double; COM_index: Integer);
begin
  DefaultInterface.setStrayLight(COM_strayLight, COM_index);
end;

function TCCoMaya2000.getStrayLight(COM_index: Integer): Double;
begin
  Result := DefaultInterface.getStrayLight(COM_index);
end;

function TCCoMaya2000.isAdvancedVersion: WordBool;
begin
  Result := DefaultInterface.isAdvancedVersion;
end;

procedure TCCoMaya2000.addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.addAcquisitionListener(COM_listener);
end;

procedure TCCoMaya2000.removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.removeAcquisitionListener(COM_listener);
end;

function TCCoMaya2000.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMaya2000Properties.Create(AServer: TCCoMaya2000);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMaya2000Properties.GetDefaultInterface: ICoMaya2000;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMayaPro2000.Create: ICoMayaPro2000;
begin
  Result := CreateComObject(CLASS_CCoMayaPro2000) as ICoMayaPro2000;
end;

class function CoCCoMayaPro2000.CreateRemote(const MachineName: string): ICoMayaPro2000;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMayaPro2000) as ICoMayaPro2000;
end;

procedure TCCoMayaPro2000.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D90FBD94-2DD3-5AD2-8124-50F03471D77B}';
    IntfIID:   '{13E74ED1-B93F-56C5-9049-ED54011CEE9C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMayaPro2000.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMayaPro2000;
  end;
end;

procedure TCCoMayaPro2000.ConnectTo(svrIntf: ICoMayaPro2000);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMayaPro2000.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMayaPro2000.GetDefaultInterface: ICoMayaPro2000;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMayaPro2000.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMayaPro2000Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoMayaPro2000.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMayaPro2000.GetServerProperties: TCCoMayaPro2000Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMayaPro2000.CreateMayaPro2000;
begin
  DefaultInterface.CreateMayaPro2000;
end;

procedure TCCoMayaPro2000.CreateMayaPro2000B(COM_i: Integer);
begin
  DefaultInterface.CreateMayaPro2000B(COM_i);
end;

procedure TCCoMayaPro2000.setEndpoints;
begin
  DefaultInterface.setEndpoints;
end;

function TCCoMayaPro2000.getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getEndpoint(COM_endPoint);
end;

procedure TCCoMayaPro2000.openSpectrometer(COM_index: Integer);
begin
  DefaultInterface.openSpectrometer(COM_index);
end;

function TCCoMayaPro2000.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

procedure TCCoMayaPro2000.setStrobeDelay(COM_delay: Integer);
begin
  DefaultInterface.setStrobeDelay(COM_delay);
end;

function TCCoMayaPro2000.getActualIntegrationTime: Integer;
begin
  Result := DefaultInterface.getActualIntegrationTime;
end;

function TCCoMayaPro2000.getPlugIns: ICoSpectrometerPlugInCollection;
begin
  Result := DefaultInterface.getPlugIns;
end;

function TCCoMayaPro2000.getNumberOfPlugIns: Integer;
begin
  Result := DefaultInterface.getNumberOfPlugIns;
end;

function TCCoMayaPro2000.isPlugInDetected(COM_id: Integer): WordBool;
begin
  Result := DefaultInterface.isPlugInDetected(COM_id);
end;

function TCCoMayaPro2000.initializePlugIns: OleVariant;
begin
  Result := DefaultInterface.initializePlugIns;
end;

procedure TCCoMayaPro2000.detectPlugIns;
begin
  DefaultInterface.detectPlugIns;
end;

function TCCoMayaPro2000.setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; 
                                     COM_i2C: OleVariant): Integer;
begin
  Result := DefaultInterface.setI2CBytes(COM_address, COM_numBytes, COM_i2C);
end;

function TCCoMayaPro2000.getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
begin
  Result := DefaultInterface.getI2CBytes(COM_address, COM_numBytes);
end;

function TCCoMayaPro2000.getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
begin
  Result := DefaultInterface.getSPIBytes(COM_message, COM_length);
end;

function TCCoMayaPro2000.getPSOCVersion: WideString;
begin
  Result := DefaultInterface.getPSOCVersion;
end;

function TCCoMayaPro2000.getFPGAFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFPGAFirmwareVersion;
end;

function TCCoMayaPro2000.continuousStrobeCountsToMicros(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.continuousStrobeCountsToMicros(COM_counts);
end;

procedure TCCoMayaPro2000.setContinuousStrobeDelay(COM_delayMicros: Integer);
begin
  DefaultInterface.setContinuousStrobeDelay(COM_delayMicros);
end;

function TCCoMayaPro2000.getContinuousStrobeDelayMinimum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMinimum;
end;

function TCCoMayaPro2000.getContinuousStrobeDelayMaximum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMaximum;
end;

function TCCoMayaPro2000.getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayIncrement(COM_magnitude);
end;

procedure TCCoMayaPro2000.setAdvancedIntegrationTime(COM_delayMicros: Integer);
begin
  DefaultInterface.setAdvancedIntegrationTime(COM_delayMicros);
end;

function TCCoMayaPro2000.getIntegrationTimeBaseClock: Integer;
begin
  Result := DefaultInterface.getIntegrationTimeBaseClock;
end;

function TCCoMayaPro2000.getIntegrationClockTimer: Integer;
begin
  Result := DefaultInterface.getIntegrationClockTimer;
end;

function TCCoMayaPro2000.getAdvancedIntegrationTimeMinimum: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeMinimum;
end;

function TCCoMayaPro2000.getAdvancedIntegrationTimeMaximum: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeMaximum;
end;

function TCCoMayaPro2000.getAdvancedIntegrationTimeIncrement: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeIncrement;
end;

procedure TCCoMayaPro2000.setExternalTriggerMode(COM_mode: Integer);
begin
  DefaultInterface.setExternalTriggerMode(COM_mode);
end;

function TCCoMayaPro2000.getExternalTriggerModes: ICoExternalTriggerModeCollection;
begin
  Result := DefaultInterface.getExternalTriggerModes;
end;

procedure TCCoMayaPro2000.setShutterClock(COM_value: Integer);
begin
  DefaultInterface.setShutterClock(COM_value);
end;

function TCCoMayaPro2000.getShutterClock: Integer;
begin
  Result := DefaultInterface.getShutterClock;
end;

procedure TCCoMayaPro2000.setSingleStrobeLow(COM_value: Integer);
begin
  DefaultInterface.setSingleStrobeLow(COM_value);
end;

procedure TCCoMayaPro2000.setSingleStrobeHigh(COM_value: Integer);
begin
  DefaultInterface.setSingleStrobeHigh(COM_value);
end;

function TCCoMayaPro2000.getSingleStrobeCountsToMicros(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.getSingleStrobeCountsToMicros(COM_counts);
end;

function TCCoMayaPro2000.getSingleStrobeLow: Integer;
begin
  Result := DefaultInterface.getSingleStrobeLow;
end;

function TCCoMayaPro2000.getSingleStrobeHigh: Integer;
begin
  Result := DefaultInterface.getSingleStrobeHigh;
end;

function TCCoMayaPro2000.getSingleStrobeMinimum: Integer;
begin
  Result := DefaultInterface.getSingleStrobeMinimum;
end;

function TCCoMayaPro2000.getSingleStrobeMaximum: Integer;
begin
  Result := DefaultInterface.getSingleStrobeMaximum;
end;

function TCCoMayaPro2000.getSingleStrobeIncrement: Integer;
begin
  Result := DefaultInterface.getSingleStrobeIncrement;
end;

procedure TCCoMayaPro2000.setDirectionAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setDirectionAllBits(COM_bitSet);
end;

procedure TCCoMayaPro2000.setMuxAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setMuxAllBits(COM_bitSet);
end;

procedure TCCoMayaPro2000.setValueAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setValueAllBits(COM_bitSet);
end;

procedure TCCoMayaPro2000.setDirectionBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setDirectionBitmask(COM_bitmask);
end;

procedure TCCoMayaPro2000.setMuxBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setMuxBitmask(COM_bitmask);
end;

procedure TCCoMayaPro2000.setValueBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setValueBitmask(COM_bitmask);
end;

procedure TCCoMayaPro2000.setDirectionBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setDirectionBit(COM_bit, COM_value);
end;

procedure TCCoMayaPro2000.setMuxBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setMuxBit(COM_bit, COM_value);
end;

procedure TCCoMayaPro2000.setValueBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setValueBit(COM_bit, COM_value);
end;

function TCCoMayaPro2000.getTotalGPIOBits: Integer;
begin
  Result := DefaultInterface.getTotalGPIOBits;
end;

function TCCoMayaPro2000.getDirectionBits: ICoBitSet;
begin
  Result := DefaultInterface.getDirectionBits;
end;

function TCCoMayaPro2000.getMuxBits: ICoBitSet;
begin
  Result := DefaultInterface.getMuxBits;
end;

function TCCoMayaPro2000.getValueBits: ICoBitSet;
begin
  Result := DefaultInterface.getValueBits;
end;

function TCCoMayaPro2000.getValueBit(COM_bitNumber: Integer): Integer;
begin
  Result := DefaultInterface.getValueBit(COM_bitNumber);
end;

function TCCoMayaPro2000.getNumberOfPins: Integer;
begin
  Result := DefaultInterface.getNumberOfPins;
end;

function TCCoMayaPro2000.getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
begin
  Result := DefaultInterface.getIrradianceCalibrationFactors(COM_address);
end;

procedure TCCoMayaPro2000.setIrradianceCalibrationFactors(COM_address: Shortint; 
                                                          COM_data: OleVariant);
begin
  DefaultInterface.setIrradianceCalibrationFactors(COM_address, COM_data);
end;

procedure TCCoMayaPro2000.setMasterClockDivisor(COM_value: Integer);
begin
  DefaultInterface.setMasterClockDivisor(COM_value);
end;

function TCCoMayaPro2000.getMasterClockDivisor: Integer;
begin
  Result := DefaultInterface.getMasterClockDivisor;
end;

procedure TCCoMayaPro2000.setExternalTriggerDelay(COM_counts: Integer);
begin
  DefaultInterface.setExternalTriggerDelay(COM_counts);
end;

function TCCoMayaPro2000.triggerDelayCountsToMicroseconds(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.triggerDelayCountsToMicroseconds(COM_counts);
end;

function TCCoMayaPro2000.getExternalTriggerDelayMinimum: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayMinimum;
end;

function TCCoMayaPro2000.getExternalTriggerDelayMaximum: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayMaximum;
end;

function TCCoMayaPro2000.getExternalTriggerDelayIncrement: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayIncrement;
end;

function TCCoMayaPro2000.readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readNonlinearityCoefficientsFromSpectrometer;
end;

function TCCoMayaPro2000.getNonlinearityCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getNonlinearityCoefficients;
end;

function TCCoMayaPro2000.getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getNonlinearityCoefficientsSingleChannel(COM_index);
end;

procedure TCCoMayaPro2000.setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; 
                                                                   COM_index: Integer);
begin
  DefaultInterface.setNonlinearityCoefficientsSingleChannel(COM_nl, COM_index);
end;

function TCCoMayaPro2000.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoMayaPro2000.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoMayaPro2000.getWavelengths(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_index);
end;

procedure TCCoMayaPro2000.setWavelengths(COM_wl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setWavelengths(COM_wl, COM_index);
end;

function TCCoMayaPro2000.readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readStrayLightCorrectionCoefficientFromSpectrometer;
end;

function TCCoMayaPro2000.getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getStrayLightCorrectionCoefficient;
end;

procedure TCCoMayaPro2000.setStrayLight(COM_strayLight: Double; COM_index: Integer);
begin
  DefaultInterface.setStrayLight(COM_strayLight, COM_index);
end;

function TCCoMayaPro2000.getStrayLight(COM_index: Integer): Double;
begin
  Result := DefaultInterface.getStrayLight(COM_index);
end;

function TCCoMayaPro2000.isAdvancedVersion: WordBool;
begin
  Result := DefaultInterface.isAdvancedVersion;
end;

procedure TCCoMayaPro2000.addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.addAcquisitionListener(COM_listener);
end;

procedure TCCoMayaPro2000.removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.removeAcquisitionListener(COM_listener);
end;

function TCCoMayaPro2000.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMayaPro2000Properties.Create(AServer: TCCoMayaPro2000);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMayaPro2000Properties.GetDefaultInterface: ICoMayaPro2000;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMethodDescriptorCollection.Create: ICoMethodDescriptorCollection;
begin
  Result := CreateComObject(CLASS_CCoMethodDescriptorCollection) as ICoMethodDescriptorCollection;
end;

class function CoCCoMethodDescriptorCollection.CreateRemote(const MachineName: string): ICoMethodDescriptorCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMethodDescriptorCollection) as ICoMethodDescriptorCollection;
end;

procedure TCCoMethodDescriptorCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{B793242B-5E10-5C84-9183-003DCC5A492D}';
    IntfIID:   '{0208E80C-9077-5034-90F3-EC97D0394316}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMethodDescriptorCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMethodDescriptorCollection;
  end;
end;

procedure TCCoMethodDescriptorCollection.ConnectTo(svrIntf: ICoMethodDescriptorCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMethodDescriptorCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMethodDescriptorCollection.GetDefaultInterface: ICoMethodDescriptorCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMethodDescriptorCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMethodDescriptorCollectionProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoMethodDescriptorCollection.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMethodDescriptorCollection.GetServerProperties: TCCoMethodDescriptorCollectionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCCoMethodDescriptorCollection.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TCCoMethodDescriptorCollection.Item(index: OleVariant): OleVariant;
begin
  Result := DefaultInterface.Item(index);
end;

procedure TCCoMethodDescriptorCollection.Add(const pnewMethodDescriptorCollection: IDispatch);
begin
  DefaultInterface.Add(pnewMethodDescriptorCollection);
end;

procedure TCCoMethodDescriptorCollection.Remove(index: Integer);
begin
  DefaultInterface.Remove(index);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMethodDescriptorCollectionProperties.Create(AServer: TCCoMethodDescriptorCollection);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMethodDescriptorCollectionProperties.GetDefaultInterface: ICoMethodDescriptorCollection;
begin
  Result := FServer.DefaultInterface;
end;

function TCCoMethodDescriptorCollectionProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoCCoMultiChannelGUIProvider.Create: ICoMultiChannelGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoMultiChannelGUIProvider) as ICoMultiChannelGUIProvider;
end;

class function CoCCoMultiChannelGUIProvider.CreateRemote(const MachineName: string): ICoMultiChannelGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMultiChannelGUIProvider) as ICoMultiChannelGUIProvider;
end;

procedure TCCoMultiChannelGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{6BECE0FB-5B78-598B-90D5-9B2711C3FDA2}';
    IntfIID:   '{9182B44D-97AE-5D5C-8012-2668E3FF1FE7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMultiChannelGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMultiChannelGUIProvider;
  end;
end;

procedure TCCoMultiChannelGUIProvider.ConnectTo(svrIntf: ICoMultiChannelGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMultiChannelGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMultiChannelGUIProvider.GetDefaultInterface: ICoMultiChannelGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMultiChannelGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMultiChannelGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoMultiChannelGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMultiChannelGUIProvider.GetServerProperties: TCCoMultiChannelGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMultiChannelGUIProvider.CreateMultiChannelGUIProvider;
begin
  DefaultInterface.CreateMultiChannelGUIProvider;
end;

function TCCoMultiChannelGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMultiChannelGUIProviderProperties.Create(AServer: TCCoMultiChannelGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMultiChannelGUIProviderProperties.GetDefaultInterface: ICoMultiChannelGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMultiChannelImpl.Create: ICoMultiChannelImpl;
begin
  Result := CreateComObject(CLASS_CCoMultiChannelImpl) as ICoMultiChannelImpl;
end;

class function CoCCoMultiChannelImpl.CreateRemote(const MachineName: string): ICoMultiChannelImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMultiChannelImpl) as ICoMultiChannelImpl;
end;

procedure TCCoMultiChannelImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5C99BC33-2DD7-567D-91F7-A790E0748215}';
    IntfIID:   '{9B1EAE05-9BA3-527C-8156-2034F81800AC}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMultiChannelImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMultiChannelImpl;
  end;
end;

procedure TCCoMultiChannelImpl.ConnectTo(svrIntf: ICoMultiChannelImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMultiChannelImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMultiChannelImpl.GetDefaultInterface: ICoMultiChannelImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMultiChannelImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMultiChannelImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoMultiChannelImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMultiChannelImpl.GetServerProperties: TCCoMultiChannelImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMultiChannelImpl.CreateMultiChannelImplB(const COM_usbInt: ICoUSBInterface; 
                                                       const COM_s: ICoADC1000USB; 
                                                       COM_numChans: Integer);
begin
  DefaultInterface.CreateMultiChannelImplB(COM_usbInt, COM_s, COM_numChans);
end;

function TCCoMultiChannelImpl.getNumberOfChannels: Integer;
begin
  Result := DefaultInterface.getNumberOfChannels;
end;

function TCCoMultiChannelImpl.getChannelsPresent: OleVariant;
begin
  Result := DefaultInterface.getChannelsPresent;
end;

procedure TCCoMultiChannelImpl.setChannelStatus(COM_index: Integer; COM_status: WordBool);
begin
  DefaultInterface.setChannelStatus(COM_index, COM_status);
end;

function TCCoMultiChannelImpl.isChannelPresent(COM_index: Integer): WordBool;
begin
  Result := DefaultInterface.isChannelPresent(COM_index);
end;

function TCCoMultiChannelImpl.getNumberOfEnabledChannels: Integer;
begin
  Result := DefaultInterface.getNumberOfEnabledChannels;
end;

procedure TCCoMultiChannelImpl.setChannelMux(COM_index: Integer);
begin
  DefaultInterface.setChannelMux(COM_index);
end;

procedure TCCoMultiChannelImpl.setChannelPresent(COM_index: Integer; COM_present: WordBool);
begin
  DefaultInterface.setChannelPresent(COM_index, COM_present);
end;

procedure TCCoMultiChannelImpl.setDeepWellStatus(COM_present: WordBool);
begin
  DefaultInterface.setDeepWellStatus(COM_present);
end;

function TCCoMultiChannelImpl.getChannelIndices: OleVariant;
begin
  Result := DefaultInterface.getChannelIndices;
end;

function TCCoMultiChannelImpl.isDeepWell: WordBool;
begin
  Result := DefaultInterface.isDeepWell;
end;

function TCCoMultiChannelImpl.isRotatorEnabled: WordBool;
begin
  Result := DefaultInterface.isRotatorEnabled;
end;

procedure TCCoMultiChannelImpl.setRotatorEnabled(COM_rotatorEnabled: WordBool);
begin
  DefaultInterface.setRotatorEnabled(COM_rotatorEnabled);
end;

function TCCoMultiChannelImpl.isInterpolationEnabled: WordBool;
begin
  Result := DefaultInterface.isInterpolationEnabled;
end;

procedure TCCoMultiChannelImpl.setInterpolationEnabled(COM_interpolationEnabled: WordBool);
begin
  DefaultInterface.setInterpolationEnabled(COM_interpolationEnabled);
end;

procedure TCCoMultiChannelImpl.addChannelListener(const COM_listener: ICoMultiChannelListener);
begin
  DefaultInterface.addChannelListener(COM_listener);
end;

procedure TCCoMultiChannelImpl.removeChannelListener(const COM_listener: ICoMultiChannelListener);
begin
  DefaultInterface.removeChannelListener(COM_listener);
end;

function TCCoMultiChannelImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMultiChannelImplProperties.Create(AServer: TCCoMultiChannelImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMultiChannelImplProperties.GetDefaultInterface: ICoMultiChannelImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMultiChannelImpl_JazNetwork.Create: ICoMultiChannelImpl_JazNetwork;
begin
  Result := CreateComObject(CLASS_CCoMultiChannelImpl_JazNetwork) as ICoMultiChannelImpl_JazNetwork;
end;

class function CoCCoMultiChannelImpl_JazNetwork.CreateRemote(const MachineName: string): ICoMultiChannelImpl_JazNetwork;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMultiChannelImpl_JazNetwork) as ICoMultiChannelImpl_JazNetwork;
end;

procedure TCCoMultiChannelImpl_JazNetwork.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CBF5F6B0-99D2-5ADB-8044-7CE9AF2DDB29}';
    IntfIID:   '{29F6DAE1-B3ED-5124-8068-62FBA4C95B39}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMultiChannelImpl_JazNetwork.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMultiChannelImpl_JazNetwork;
  end;
end;

procedure TCCoMultiChannelImpl_JazNetwork.ConnectTo(svrIntf: ICoMultiChannelImpl_JazNetwork);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMultiChannelImpl_JazNetwork.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMultiChannelImpl_JazNetwork.GetDefaultInterface: ICoMultiChannelImpl_JazNetwork;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMultiChannelImpl_JazNetwork.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMultiChannelImpl_JazNetworkProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoMultiChannelImpl_JazNetwork.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMultiChannelImpl_JazNetwork.GetServerProperties: TCCoMultiChannelImpl_JazNetworkProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMultiChannelImpl_JazNetwork.CreateMultiChannelImpl_JazNetworkB(const COM_jaz: ICoJazNetwork);
begin
  DefaultInterface.CreateMultiChannelImpl_JazNetworkB(COM_jaz);
end;

function TCCoMultiChannelImpl_JazNetwork.getNumberOfChannels: Integer;
begin
  Result := DefaultInterface.getNumberOfChannels;
end;

function TCCoMultiChannelImpl_JazNetwork.getChannelsPresent: OleVariant;
begin
  Result := DefaultInterface.getChannelsPresent;
end;

function TCCoMultiChannelImpl_JazNetwork.isChannelPresent(COM_index: Integer): WordBool;
begin
  Result := DefaultInterface.isChannelPresent(COM_index);
end;

function TCCoMultiChannelImpl_JazNetwork.getNumberOfEnabledChannels: Integer;
begin
  Result := DefaultInterface.getNumberOfEnabledChannels;
end;

function TCCoMultiChannelImpl_JazNetwork.getChannelIndices: OleVariant;
begin
  Result := DefaultInterface.getChannelIndices;
end;

procedure TCCoMultiChannelImpl_JazNetwork.setChannelMux(COM_index: Integer);
begin
  DefaultInterface.setChannelMux(COM_index);
end;

procedure TCCoMultiChannelImpl_JazNetwork.setChannelStatus(COM_index: Integer; COM_status: WordBool);
begin
  DefaultInterface.setChannelStatus(COM_index, COM_status);
end;

procedure TCCoMultiChannelImpl_JazNetwork.setDeepWellStatus(COM_status: WordBool);
begin
  DefaultInterface.setDeepWellStatus(COM_status);
end;

procedure TCCoMultiChannelImpl_JazNetwork.setChannelPresent(COM_index: Integer; 
                                                            COM_present: WordBool);
begin
  DefaultInterface.setChannelPresent(COM_index, COM_present);
end;

function TCCoMultiChannelImpl_JazNetwork.isRotatorEnabled: WordBool;
begin
  Result := DefaultInterface.isRotatorEnabled;
end;

function TCCoMultiChannelImpl_JazNetwork.isDeepWell: WordBool;
begin
  Result := DefaultInterface.isDeepWell;
end;

procedure TCCoMultiChannelImpl_JazNetwork.setRotatorEnabled(COM_enabled: WordBool);
begin
  DefaultInterface.setRotatorEnabled(COM_enabled);
end;

function TCCoMultiChannelImpl_JazNetwork.isInterpolationEnabled: WordBool;
begin
  Result := DefaultInterface.isInterpolationEnabled;
end;

procedure TCCoMultiChannelImpl_JazNetwork.setInterpolationEnabled(COM_enabled: WordBool);
begin
  DefaultInterface.setInterpolationEnabled(COM_enabled);
end;

procedure TCCoMultiChannelImpl_JazNetwork.addChannelListener(const COM_listener: ICoMultiChannelListener);
begin
  DefaultInterface.addChannelListener(COM_listener);
end;

procedure TCCoMultiChannelImpl_JazNetwork.removeChannelListener(const COM_listener: ICoMultiChannelListener);
begin
  DefaultInterface.removeChannelListener(COM_listener);
end;

function TCCoMultiChannelImpl_JazNetwork.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMultiChannelImpl_JazNetworkProperties.Create(AServer: TCCoMultiChannelImpl_JazNetwork);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMultiChannelImpl_JazNetworkProperties.GetDefaultInterface: ICoMultiChannelImpl_JazNetwork;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMultiChannelImpl_JazUSB.Create: ICoMultiChannelImpl_JazUSB;
begin
  Result := CreateComObject(CLASS_CCoMultiChannelImpl_JazUSB) as ICoMultiChannelImpl_JazUSB;
end;

class function CoCCoMultiChannelImpl_JazUSB.CreateRemote(const MachineName: string): ICoMultiChannelImpl_JazUSB;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMultiChannelImpl_JazUSB) as ICoMultiChannelImpl_JazUSB;
end;

procedure TCCoMultiChannelImpl_JazUSB.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8C929FB5-4A75-5486-818A-DCCD89397A02}';
    IntfIID:   '{5571E8B5-ECAB-5B5C-80DA-DB4132CE7767}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMultiChannelImpl_JazUSB.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMultiChannelImpl_JazUSB;
  end;
end;

procedure TCCoMultiChannelImpl_JazUSB.ConnectTo(svrIntf: ICoMultiChannelImpl_JazUSB);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMultiChannelImpl_JazUSB.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMultiChannelImpl_JazUSB.GetDefaultInterface: ICoMultiChannelImpl_JazUSB;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMultiChannelImpl_JazUSB.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMultiChannelImpl_JazUSBProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoMultiChannelImpl_JazUSB.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMultiChannelImpl_JazUSB.GetServerProperties: TCCoMultiChannelImpl_JazUSBProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMultiChannelImpl_JazUSB.CreateMultiChannelImpl_JazUSBB(const COM_usbInterface: ICoUSBInterface; 
                                                                     const COM_jaz: ICoJazUSB);
begin
  DefaultInterface.CreateMultiChannelImpl_JazUSBB(COM_usbInterface, COM_jaz);
end;

function TCCoMultiChannelImpl_JazUSB.getNumberOfChannels: Integer;
begin
  Result := DefaultInterface.getNumberOfChannels;
end;

function TCCoMultiChannelImpl_JazUSB.getChannelsPresent: OleVariant;
begin
  Result := DefaultInterface.getChannelsPresent;
end;

function TCCoMultiChannelImpl_JazUSB.isChannelPresent(COM_index: Integer): WordBool;
begin
  Result := DefaultInterface.isChannelPresent(COM_index);
end;

function TCCoMultiChannelImpl_JazUSB.getNumberOfEnabledChannels: Integer;
begin
  Result := DefaultInterface.getNumberOfEnabledChannels;
end;

function TCCoMultiChannelImpl_JazUSB.getChannelIndices: OleVariant;
begin
  Result := DefaultInterface.getChannelIndices;
end;

procedure TCCoMultiChannelImpl_JazUSB.setChannelMux(COM_index: Integer);
begin
  DefaultInterface.setChannelMux(COM_index);
end;

procedure TCCoMultiChannelImpl_JazUSB.setChannelStatus(COM_index: Integer; COM_status: WordBool);
begin
  DefaultInterface.setChannelStatus(COM_index, COM_status);
end;

procedure TCCoMultiChannelImpl_JazUSB.setDeepWellStatus(COM_status: WordBool);
begin
  DefaultInterface.setDeepWellStatus(COM_status);
end;

procedure TCCoMultiChannelImpl_JazUSB.setChannelPresent(COM_index: Integer; COM_present: WordBool);
begin
  DefaultInterface.setChannelPresent(COM_index, COM_present);
end;

function TCCoMultiChannelImpl_JazUSB.isRotatorEnabled: WordBool;
begin
  Result := DefaultInterface.isRotatorEnabled;
end;

function TCCoMultiChannelImpl_JazUSB.isDeepWell: WordBool;
begin
  Result := DefaultInterface.isDeepWell;
end;

procedure TCCoMultiChannelImpl_JazUSB.setRotatorEnabled(COM_enabled: WordBool);
begin
  DefaultInterface.setRotatorEnabled(COM_enabled);
end;

function TCCoMultiChannelImpl_JazUSB.isInterpolationEnabled: WordBool;
begin
  Result := DefaultInterface.isInterpolationEnabled;
end;

procedure TCCoMultiChannelImpl_JazUSB.setInterpolationEnabled(COM_enabled: WordBool);
begin
  DefaultInterface.setInterpolationEnabled(COM_enabled);
end;

procedure TCCoMultiChannelImpl_JazUSB.addChannelListener(const COM_listener: ICoMultiChannelListener);
begin
  DefaultInterface.addChannelListener(COM_listener);
end;

procedure TCCoMultiChannelImpl_JazUSB.removeChannelListener(const COM_listener: ICoMultiChannelListener);
begin
  DefaultInterface.removeChannelListener(COM_listener);
end;

function TCCoMultiChannelImpl_JazUSB.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMultiChannelImpl_JazUSBProperties.Create(AServer: TCCoMultiChannelImpl_JazUSB);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMultiChannelImpl_JazUSBProperties.GetDefaultInterface: ICoMultiChannelImpl_JazUSB;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoMultiChannelProvider.Create: ICoMultiChannelProvider;
begin
  Result := CreateComObject(CLASS_CCoMultiChannelProvider) as ICoMultiChannelProvider;
end;

class function CoCCoMultiChannelProvider.CreateRemote(const MachineName: string): ICoMultiChannelProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoMultiChannelProvider) as ICoMultiChannelProvider;
end;

procedure TCCoMultiChannelProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{B5F3B11E-7478-5B69-90FA-C917CC8A0BDC}';
    IntfIID:   '{C3AAAA6A-1D1A-5145-91B2-A08748468AAB}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoMultiChannelProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoMultiChannelProvider;
  end;
end;

procedure TCCoMultiChannelProvider.ConnectTo(svrIntf: ICoMultiChannelProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoMultiChannelProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoMultiChannelProvider.GetDefaultInterface: ICoMultiChannelProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoMultiChannelProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoMultiChannelProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoMultiChannelProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoMultiChannelProvider.GetServerProperties: TCCoMultiChannelProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoMultiChannelProvider.CreateMultiChannelProvider;
begin
  DefaultInterface.CreateMultiChannelProvider;
end;

function TCCoMultiChannelProvider.getNumberOfChannels: Integer;
begin
  Result := DefaultInterface.getNumberOfChannels;
end;

function TCCoMultiChannelProvider.getChannelsPresent: OleVariant;
begin
  Result := DefaultInterface.getChannelsPresent;
end;

function TCCoMultiChannelProvider.isChannelPresent(COM_param0: Integer): WordBool;
begin
  Result := DefaultInterface.isChannelPresent(COM_param0);
end;

function TCCoMultiChannelProvider.getNumberOfEnabledChannels: Integer;
begin
  Result := DefaultInterface.getNumberOfEnabledChannels;
end;

function TCCoMultiChannelProvider.getChannelIndices: OleVariant;
begin
  Result := DefaultInterface.getChannelIndices;
end;

procedure TCCoMultiChannelProvider.setChannelMux(COM_param0: Integer);
begin
  DefaultInterface.setChannelMux(COM_param0);
end;

procedure TCCoMultiChannelProvider.setChannelStatus(COM_param0: Integer; COM_param1: WordBool);
begin
  DefaultInterface.setChannelStatus(COM_param0, COM_param1);
end;

procedure TCCoMultiChannelProvider.setDeepWellStatus(COM_param0: WordBool);
begin
  DefaultInterface.setDeepWellStatus(COM_param0);
end;

procedure TCCoMultiChannelProvider.setChannelPresent(COM_param0: Integer; COM_param1: WordBool);
begin
  DefaultInterface.setChannelPresent(COM_param0, COM_param1);
end;

function TCCoMultiChannelProvider.isRotatorEnabled: WordBool;
begin
  Result := DefaultInterface.isRotatorEnabled;
end;

function TCCoMultiChannelProvider.isDeepWell: WordBool;
begin
  Result := DefaultInterface.isDeepWell;
end;

procedure TCCoMultiChannelProvider.setRotatorEnabled(COM_param0: WordBool);
begin
  DefaultInterface.setRotatorEnabled(COM_param0);
end;

function TCCoMultiChannelProvider.isInterpolationEnabled: WordBool;
begin
  Result := DefaultInterface.isInterpolationEnabled;
end;

procedure TCCoMultiChannelProvider.setInterpolationEnabled(COM_param0: WordBool);
begin
  DefaultInterface.setInterpolationEnabled(COM_param0);
end;

procedure TCCoMultiChannelProvider.addChannelListener(const COM_param0: ICoMultiChannelListener);
begin
  DefaultInterface.addChannelListener(COM_param0);
end;

procedure TCCoMultiChannelProvider.removeChannelListener(const COM_param0: ICoMultiChannelListener);
begin
  DefaultInterface.removeChannelListener(COM_param0);
end;

function TCCoMultiChannelProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoMultiChannelProviderProperties.Create(AServer: TCCoMultiChannelProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoMultiChannelProviderProperties.GetDefaultInterface: ICoMultiChannelProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoNIR.Create: ICoNIR;
begin
  Result := CreateComObject(CLASS_CCoNIR) as ICoNIR;
end;

class function CoCCoNIR.CreateRemote(const MachineName: string): ICoNIR;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoNIR) as ICoNIR;
end;

procedure TCCoNIR.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DB5796F2-16AF-5056-9062-3F7CA5A0B74E}';
    IntfIID:   '{41C53C71-15DE-51C9-9108-5AD662916C6A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoNIR.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoNIR;
  end;
end;

procedure TCCoNIR.ConnectTo(svrIntf: ICoNIR);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoNIR.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoNIR.GetDefaultInterface: ICoNIR;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoNIR.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoNIRProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoNIR.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoNIR.GetServerProperties: TCCoNIRProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoNIR.setEndpoints;
begin
  DefaultInterface.setEndpoints;
end;

function TCCoNIR.getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getEndpoint(COM_endPoint);
end;

procedure TCCoNIR.CreateNIR;
begin
  DefaultInterface.CreateNIR;
end;

function TCCoNIR.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

function TCCoNIR.readStatus: ICoSpectrometerStatus;
begin
  Result := DefaultInterface.readStatus;
end;

function TCCoNIR.readIntegrationTime: Integer;
begin
  Result := DefaultInterface.readIntegrationTime;
end;

procedure TCCoNIR.setIntegrationTime(COM_intTime: Integer);
begin
  DefaultInterface.setIntegrationTime(COM_intTime);
end;

function TCCoNIR.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

procedure TCCoNIR.setHighGain(COM_gain: WordBool);
begin
  DefaultInterface.setHighGain(COM_gain);
end;

procedure TCCoNIR.setHighGainDefault(COM_gain: WordBool);
begin
  DefaultInterface.setHighGainDefault(COM_gain);
end;

function TCCoNIR.getHighGainDefault: WordBool;
begin
  Result := DefaultInterface.getHighGainDefault;
end;

procedure TCCoNIR.setExternalTriggerMode(COM_mode: Integer);
begin
  DefaultInterface.setExternalTriggerMode(COM_mode);
end;

function TCCoNIR.getExternalTriggerModes: ICoExternalTriggerModeCollection;
begin
  Result := DefaultInterface.getExternalTriggerModes;
end;

procedure TCCoNIR.setTECEnable(COM_enable: WordBool);
begin
  DefaultInterface.setTECEnable(COM_enable);
end;

procedure TCCoNIR.setFanEnable(COM_enable: WordBool);
begin
  DefaultInterface.setFanEnable(COM_enable);
end;

function TCCoNIR.getDetectorTemperatureCelsius: Double;
begin
  Result := DefaultInterface.getDetectorTemperatureCelsius;
end;

function TCCoNIR.getDetectorTemperatureSetPointCelsius: Double;
begin
  Result := DefaultInterface.getDetectorTemperatureSetPointCelsius;
end;

procedure TCCoNIR.setDetectorSetPointCelsius(COM_point: Double);
begin
  DefaultInterface.setDetectorSetPointCelsius(COM_point);
end;

function TCCoNIR.getSetPointMinimumCelsius: Double;
begin
  Result := DefaultInterface.getSetPointMinimumCelsius;
end;

function TCCoNIR.getSetPointMaximumCelsius: Double;
begin
  Result := DefaultInterface.getSetPointMaximumCelsius;
end;

function TCCoNIR.getSetPointIncrementCelsius: Double;
begin
  Result := DefaultInterface.getSetPointIncrementCelsius;
end;

function TCCoNIR.isSaveTECStateEnabled: WordBool;
begin
  Result := DefaultInterface.isSaveTECStateEnabled;
end;

procedure TCCoNIR.saveTECState;
begin
  DefaultInterface.saveTECState;
end;

function TCCoNIR.readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readNonlinearityCoefficientsFromSpectrometer;
end;

function TCCoNIR.getNonlinearityCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getNonlinearityCoefficients;
end;

function TCCoNIR.getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getNonlinearityCoefficientsSingleChannel(COM_index);
end;

procedure TCCoNIR.setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setNonlinearityCoefficientsSingleChannel(COM_nl, COM_index);
end;

function TCCoNIR.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoNIR.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoNIR.getWavelengths(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_index);
end;

procedure TCCoNIR.setWavelengths(COM_wl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setWavelengths(COM_wl, COM_index);
end;

function TCCoNIR.readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readStrayLightCorrectionCoefficientFromSpectrometer;
end;

function TCCoNIR.getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getStrayLightCorrectionCoefficient;
end;

procedure TCCoNIR.setStrayLight(COM_strayLight: Double; COM_index: Integer);
begin
  DefaultInterface.setStrayLight(COM_strayLight, COM_index);
end;

function TCCoNIR.getStrayLight(COM_index: Integer): Double;
begin
  Result := DefaultInterface.getStrayLight(COM_index);
end;

function TCCoNIR.getBadPixels: OleVariant;
begin
  Result := DefaultInterface.getBadPixels;
end;

procedure TCCoNIR.setBadPixels(COM_pixels: OleVariant);
begin
  DefaultInterface.setBadPixels(COM_pixels);
end;

function TCCoNIR.removeBadPixels(const COM_spectrum: ICoSpectrum): ICoSpectrum;
begin
  Result := DefaultInterface.removeBadPixels(COM_spectrum);
end;

function TCCoNIR.getNumberOfBadPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfBadPixels;
end;

function TCCoNIR.getAllPixels: OleVariant;
begin
  Result := DefaultInterface.getAllPixels;
end;

procedure TCCoNIR.setBadPixelsToSpectrometer;
begin
  DefaultInterface.setBadPixelsToSpectrometer;
end;

function TCCoNIR.getBadPixelsFromSpectrometer: OleVariant;
begin
  Result := DefaultInterface.getBadPixelsFromSpectrometer;
end;

function TCCoNIR.isAdvancedVersion: WordBool;
begin
  Result := DefaultInterface.isAdvancedVersion;
end;

procedure TCCoNIR.addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.addAcquisitionListener(COM_listener);
end;

procedure TCCoNIR.removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.removeAcquisitionListener(COM_listener);
end;

function TCCoNIR.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoNIRProperties.Create(AServer: TCCoNIR);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoNIRProperties.GetDefaultInterface: ICoNIR;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoNIR256.Create: ICoNIR256;
begin
  Result := CreateComObject(CLASS_CCoNIR256) as ICoNIR256;
end;

class function CoCCoNIR256.CreateRemote(const MachineName: string): ICoNIR256;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoNIR256) as ICoNIR256;
end;

procedure TCCoNIR256.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{361862DE-970C-5F54-91AA-905FED44DD45}';
    IntfIID:   '{AFA47AE3-ADE7-5E78-80CC-733933EC2947}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoNIR256.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoNIR256;
  end;
end;

procedure TCCoNIR256.ConnectTo(svrIntf: ICoNIR256);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoNIR256.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoNIR256.GetDefaultInterface: ICoNIR256;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoNIR256.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoNIR256Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoNIR256.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoNIR256.GetServerProperties: TCCoNIR256Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoNIR256.CreateNIR256;
begin
  DefaultInterface.CreateNIR256;
end;

procedure TCCoNIR256.CreateNIR256B(COM_i: Integer);
begin
  DefaultInterface.CreateNIR256B(COM_i);
end;

procedure TCCoNIR256.openSpectrometer(COM_index: Integer);
begin
  DefaultInterface.openSpectrometer(COM_index);
end;

function TCCoNIR256.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoNIR256Properties.Create(AServer: TCCoNIR256);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoNIR256Properties.GetDefaultInterface: ICoNIR256;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoNIR512.Create: ICoNIR512;
begin
  Result := CreateComObject(CLASS_CCoNIR512) as ICoNIR512;
end;

class function CoCCoNIR512.CreateRemote(const MachineName: string): ICoNIR512;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoNIR512) as ICoNIR512;
end;

procedure TCCoNIR512.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{35493FBB-E91F-5680-9152-2D43B14D748A}';
    IntfIID:   '{4BA509C6-5C1F-5C82-81EF-0E4173BF415C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoNIR512.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoNIR512;
  end;
end;

procedure TCCoNIR512.ConnectTo(svrIntf: ICoNIR512);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoNIR512.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoNIR512.GetDefaultInterface: ICoNIR512;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoNIR512.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoNIR512Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoNIR512.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoNIR512.GetServerProperties: TCCoNIR512Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoNIR512.CreateNIR512;
begin
  DefaultInterface.CreateNIR512;
end;

procedure TCCoNIR512.CreateNIR512B(COM_i: Integer);
begin
  DefaultInterface.CreateNIR512B(COM_i);
end;

procedure TCCoNIR512.openSpectrometer(COM_index: Integer);
begin
  DefaultInterface.openSpectrometer(COM_index);
end;

function TCCoNIR512.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoNIR512Properties.Create(AServer: TCCoNIR512);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoNIR512Properties.GetDefaultInterface: ICoNIR512;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoNIRStatus.Create: ICoNIRStatus;
begin
  Result := CreateComObject(CLASS_CCoNIRStatus) as ICoNIRStatus;
end;

class function CoCCoNIRStatus.CreateRemote(const MachineName: string): ICoNIRStatus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoNIRStatus) as ICoNIRStatus;
end;

procedure TCCoNIRStatus.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0EDBADDC-71EE-5B74-91D3-ED68D60D4290}';
    IntfIID:   '{85640759-9082-5696-91AA-6B9A8F1AA86D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoNIRStatus.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoNIRStatus;
  end;
end;

procedure TCCoNIRStatus.ConnectTo(svrIntf: ICoNIRStatus);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoNIRStatus.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoNIRStatus.GetDefaultInterface: ICoNIRStatus;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoNIRStatus.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoNIRStatusProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoNIRStatus.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoNIRStatus.GetServerProperties: TCCoNIRStatusProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoNIRStatus.CreateNIRStatus;
begin
  DefaultInterface.CreateNIRStatus;
end;

function TCCoNIRStatus.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoNIRStatus.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoNIRStatusProperties.Create(AServer: TCCoNIRStatus);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoNIRStatusProperties.GetDefaultInterface: ICoNIRStatus;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoNetworkSource.Create: ICoNetworkSource;
begin
  Result := CreateComObject(CLASS_CCoNetworkSource) as ICoNetworkSource;
end;

class function CoCCoNetworkSource.CreateRemote(const MachineName: string): ICoNetworkSource;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoNetworkSource) as ICoNetworkSource;
end;

procedure TCCoNetworkSource.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D0D8933F-ED0E-55C2-81F6-3ACB7EDB07A3}';
    IntfIID:   '{B9D41F53-7C60-5A79-9029-2B7ECC62CA95}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoNetworkSource.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoNetworkSource;
  end;
end;

procedure TCCoNetworkSource.ConnectTo(svrIntf: ICoNetworkSource);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoNetworkSource.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoNetworkSource.GetDefaultInterface: ICoNetworkSource;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoNetworkSource.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoNetworkSourceProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoNetworkSource.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoNetworkSource.GetServerProperties: TCCoNetworkSourceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoNetworkSource.CreateNetworkSource;
begin
  DefaultInterface.CreateNetworkSource;
end;

procedure TCCoNetworkSource.connectToSource(const COM_param0: WideString; COM_param1: Integer);
begin
  DefaultInterface.connectToSource(COM_param0, COM_param1);
end;

function TCCoNetworkSource.isConnected: WordBool;
begin
  Result := DefaultInterface.isConnected;
end;

procedure TCCoNetworkSource.disconnect1;
begin
  DefaultInterface.disconnect;
end;

procedure TCCoNetworkSource.reconnect;
begin
  DefaultInterface.reconnect;
end;

function TCCoNetworkSource.getAddress: WideString;
begin
  Result := DefaultInterface.getAddress;
end;

function TCCoNetworkSource.getPort: Integer;
begin
  Result := DefaultInterface.getPort;
end;

function TCCoNetworkSource.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoNetworkSourceProperties.Create(AServer: TCCoNetworkSource);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoNetworkSourceProperties.GetDefaultInterface: ICoNetworkSource;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoNetworkSourceGUIProvider.Create: ICoNetworkSourceGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoNetworkSourceGUIProvider) as ICoNetworkSourceGUIProvider;
end;

class function CoCCoNetworkSourceGUIProvider.CreateRemote(const MachineName: string): ICoNetworkSourceGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoNetworkSourceGUIProvider) as ICoNetworkSourceGUIProvider;
end;

procedure TCCoNetworkSourceGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{FF728358-6A2E-54FC-8088-4880981DB228}';
    IntfIID:   '{A3691349-112F-5BA6-8066-87149E72D6A0}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoNetworkSourceGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoNetworkSourceGUIProvider;
  end;
end;

procedure TCCoNetworkSourceGUIProvider.ConnectTo(svrIntf: ICoNetworkSourceGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoNetworkSourceGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoNetworkSourceGUIProvider.GetDefaultInterface: ICoNetworkSourceGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoNetworkSourceGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoNetworkSourceGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoNetworkSourceGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoNetworkSourceGUIProvider.GetServerProperties: TCCoNetworkSourceGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoNetworkSourceGUIProvider.CreateNetworkSourceGUIProvider;
begin
  DefaultInterface.CreateNetworkSourceGUIProvider;
end;

function TCCoNetworkSourceGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoNetworkSourceGUIProviderProperties.Create(AServer: TCCoNetworkSourceGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoNetworkSourceGUIProviderProperties.GetDefaultInterface: ICoNetworkSourceGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoNetworkSpectrometer.Create: ICoNetworkSpectrometer;
begin
  Result := CreateComObject(CLASS_CCoNetworkSpectrometer) as ICoNetworkSpectrometer;
end;

class function CoCCoNetworkSpectrometer.CreateRemote(const MachineName: string): ICoNetworkSpectrometer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoNetworkSpectrometer) as ICoNetworkSpectrometer;
end;

procedure TCCoNetworkSpectrometer.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{95ACFFCD-3EEA-5E93-91F8-710381623E88}';
    IntfIID:   '{1192C9B1-F263-51AF-81AC-57219033B9DC}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoNetworkSpectrometer.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoNetworkSpectrometer;
  end;
end;

procedure TCCoNetworkSpectrometer.ConnectTo(svrIntf: ICoNetworkSpectrometer);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoNetworkSpectrometer.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoNetworkSpectrometer.GetDefaultInterface: ICoNetworkSpectrometer;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoNetworkSpectrometer.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoNetworkSpectrometerProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoNetworkSpectrometer.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoNetworkSpectrometer.GetServerProperties: TCCoNetworkSpectrometerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoNetworkSpectrometer.CreateNetworkSpectrometer;
begin
  DefaultInterface.CreateNetworkSpectrometer;
end;

function TCCoNetworkSpectrometer.getAddress: WideString;
begin
  Result := DefaultInterface.getAddress;
end;

function TCCoNetworkSpectrometer.getPort: Integer;
begin
  Result := DefaultInterface.getPort;
end;

function TCCoNetworkSpectrometer.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoNetworkSpectrometerProperties.Create(AServer: TCCoNetworkSpectrometer);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoNetworkSpectrometerProperties.GetDefaultInterface: ICoNetworkSpectrometer;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoNetworkSourceImpl.Create: ICoNetworkSourceImpl;
begin
  Result := CreateComObject(CLASS_CCoNetworkSourceImpl) as ICoNetworkSourceImpl;
end;

class function CoCCoNetworkSourceImpl.CreateRemote(const MachineName: string): ICoNetworkSourceImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoNetworkSourceImpl) as ICoNetworkSourceImpl;
end;

procedure TCCoNetworkSourceImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{04D4763E-9B3A-5372-81DF-54721FBDEEA3}';
    IntfIID:   '{EA4CB78D-4D2F-55E7-8105-DD2A8B90FDD9}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoNetworkSourceImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoNetworkSourceImpl;
  end;
end;

procedure TCCoNetworkSourceImpl.ConnectTo(svrIntf: ICoNetworkSourceImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoNetworkSourceImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoNetworkSourceImpl.GetDefaultInterface: ICoNetworkSourceImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoNetworkSourceImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoNetworkSourceImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoNetworkSourceImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoNetworkSourceImpl.GetServerProperties: TCCoNetworkSourceImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoNetworkSourceImpl.CreateNetworkSourceImplB(const COM_usb: ICoUSBInterface; 
                                                         const COM_spec: ICoNetworkSpectrometer);
begin
  DefaultInterface.CreateNetworkSourceImplB(COM_usb, COM_spec);
end;

procedure TCCoNetworkSourceImpl.connectToSource(const COM_address: WideString; COM_port: Integer);
begin
  DefaultInterface.connectToSource(COM_address, COM_port);
end;

function TCCoNetworkSourceImpl.isConnected: WordBool;
begin
  Result := DefaultInterface.isConnected;
end;

procedure TCCoNetworkSourceImpl.disconnect1;
begin
  DefaultInterface.disconnect;
end;

procedure TCCoNetworkSourceImpl.reconnect;
begin
  DefaultInterface.reconnect;
end;

function TCCoNetworkSourceImpl.getAddress: WideString;
begin
  Result := DefaultInterface.getAddress;
end;

function TCCoNetworkSourceImpl.getPort: Integer;
begin
  Result := DefaultInterface.getPort;
end;

function TCCoNetworkSourceImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoNetworkSourceImplProperties.Create(AServer: TCCoNetworkSourceImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoNetworkSourceImplProperties.GetDefaultInterface: ICoNetworkSourceImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoNodeGraphCertificate.Create: ICoNodeGraphCertificate;
begin
  Result := CreateComObject(CLASS_CCoNodeGraphCertificate) as ICoNodeGraphCertificate;
end;

class function CoCCoNodeGraphCertificate.CreateRemote(const MachineName: string): ICoNodeGraphCertificate;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoNodeGraphCertificate) as ICoNodeGraphCertificate;
end;

procedure TCCoNodeGraphCertificate.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CB441D09-AA4E-56C4-91BB-037B282C092E}';
    IntfIID:   '{862DF15F-B678-57FB-9098-42E6D4E58235}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoNodeGraphCertificate.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoNodeGraphCertificate;
  end;
end;

procedure TCCoNodeGraphCertificate.ConnectTo(svrIntf: ICoNodeGraphCertificate);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoNodeGraphCertificate.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoNodeGraphCertificate.GetDefaultInterface: ICoNodeGraphCertificate;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoNodeGraphCertificate.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoNodeGraphCertificateProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoNodeGraphCertificate.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoNodeGraphCertificate.GetServerProperties: TCCoNodeGraphCertificateProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoNodeGraphCertificate.CreateNodeGraphCertificateB(COM_isTransient: WordBool);
begin
  DefaultInterface.CreateNodeGraphCertificateB(COM_isTransient);
end;

function TCCoNodeGraphCertificate.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoNodeGraphCertificateProperties.Create(AServer: TCCoNodeGraphCertificate);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoNodeGraphCertificateProperties.GetDefaultInterface: ICoNodeGraphCertificate;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoNonlinearityCorrectionGUIProvider.Create: ICoNonlinearityCorrectionGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoNonlinearityCorrectionGUIProvider) as ICoNonlinearityCorrectionGUIProvider;
end;

class function CoCCoNonlinearityCorrectionGUIProvider.CreateRemote(const MachineName: string): ICoNonlinearityCorrectionGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoNonlinearityCorrectionGUIProvider) as ICoNonlinearityCorrectionGUIProvider;
end;

procedure TCCoNonlinearityCorrectionGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A3E95E5D-92F5-5F00-90EC-DCF35DA275B0}';
    IntfIID:   '{5D35F6C2-485A-5B95-8101-4D3891ECA855}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoNonlinearityCorrectionGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoNonlinearityCorrectionGUIProvider;
  end;
end;

procedure TCCoNonlinearityCorrectionGUIProvider.ConnectTo(svrIntf: ICoNonlinearityCorrectionGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoNonlinearityCorrectionGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoNonlinearityCorrectionGUIProvider.GetDefaultInterface: ICoNonlinearityCorrectionGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoNonlinearityCorrectionGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoNonlinearityCorrectionGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoNonlinearityCorrectionGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoNonlinearityCorrectionGUIProvider.GetServerProperties: TCCoNonlinearityCorrectionGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoNonlinearityCorrectionGUIProvider.CreateNonlinearityCorrectionGUIProvider;
begin
  DefaultInterface.CreateNonlinearityCorrectionGUIProvider;
end;

function TCCoNonlinearityCorrectionGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoNonlinearityCorrectionGUIProviderProperties.Create(AServer: TCCoNonlinearityCorrectionGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoNonlinearityCorrectionGUIProviderProperties.GetDefaultInterface: ICoNonlinearityCorrectionGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoNonlinearityCorrectionImpl.Create: ICoNonlinearityCorrectionImpl;
begin
  Result := CreateComObject(CLASS_CCoNonlinearityCorrectionImpl) as ICoNonlinearityCorrectionImpl;
end;

class function CoCCoNonlinearityCorrectionImpl.CreateRemote(const MachineName: string): ICoNonlinearityCorrectionImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoNonlinearityCorrectionImpl) as ICoNonlinearityCorrectionImpl;
end;

procedure TCCoNonlinearityCorrectionImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{74F8360F-9D9E-5C69-802E-A0F5D62D4170}';
    IntfIID:   '{6C533F7E-EA4A-5992-9006-1EADA53180E4}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoNonlinearityCorrectionImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoNonlinearityCorrectionImpl;
  end;
end;

procedure TCCoNonlinearityCorrectionImpl.ConnectTo(svrIntf: ICoNonlinearityCorrectionImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoNonlinearityCorrectionImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoNonlinearityCorrectionImpl.GetDefaultInterface: ICoNonlinearityCorrectionImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoNonlinearityCorrectionImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoNonlinearityCorrectionImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoNonlinearityCorrectionImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoNonlinearityCorrectionImpl.GetServerProperties: TCCoNonlinearityCorrectionImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoNonlinearityCorrectionImpl.CreateNonlinearityCorrectionImplB(const COM_usbInt: ICoUSBInterface; 
                                                                           const COM_s: ICoSpectrometer);
begin
  DefaultInterface.CreateNonlinearityCorrectionImplB(COM_usbInt, COM_s);
end;

function TCCoNonlinearityCorrectionImpl.readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readNonlinearityCoefficientsFromSpectrometer;
end;

function TCCoNonlinearityCorrectionImpl.getNonlinearityCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getNonlinearityCoefficients;
end;

function TCCoNonlinearityCorrectionImpl.getNonlinearityCoefficientsSingleChannel(COM_channelIndex: Integer): OleVariant;
begin
  Result := DefaultInterface.getNonlinearityCoefficientsSingleChannel(COM_channelIndex);
end;

procedure TCCoNonlinearityCorrectionImpl.setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; 
                                                                                  COM_channelIndex: Integer);
begin
  DefaultInterface.setNonlinearityCoefficientsSingleChannel(COM_nl, COM_channelIndex);
end;

function TCCoNonlinearityCorrectionImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoNonlinearityCorrectionImplProperties.Create(AServer: TCCoNonlinearityCorrectionImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoNonlinearityCorrectionImplProperties.GetDefaultInterface: ICoNonlinearityCorrectionImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoNonlinearityCorrectionProvider.Create: ICoNonlinearityCorrectionProvider;
begin
  Result := CreateComObject(CLASS_CCoNonlinearityCorrectionProvider) as ICoNonlinearityCorrectionProvider;
end;

class function CoCCoNonlinearityCorrectionProvider.CreateRemote(const MachineName: string): ICoNonlinearityCorrectionProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoNonlinearityCorrectionProvider) as ICoNonlinearityCorrectionProvider;
end;

procedure TCCoNonlinearityCorrectionProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{574D6FAF-6D71-5242-904C-7335F03A3691}';
    IntfIID:   '{EF32F8F3-1554-50C8-9166-03248E3B5C68}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoNonlinearityCorrectionProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoNonlinearityCorrectionProvider;
  end;
end;

procedure TCCoNonlinearityCorrectionProvider.ConnectTo(svrIntf: ICoNonlinearityCorrectionProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoNonlinearityCorrectionProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoNonlinearityCorrectionProvider.GetDefaultInterface: ICoNonlinearityCorrectionProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoNonlinearityCorrectionProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoNonlinearityCorrectionProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoNonlinearityCorrectionProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoNonlinearityCorrectionProvider.GetServerProperties: TCCoNonlinearityCorrectionProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoNonlinearityCorrectionProvider.CreateNonlinearityCorrectionProvider;
begin
  DefaultInterface.CreateNonlinearityCorrectionProvider;
end;

function TCCoNonlinearityCorrectionProvider.readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readNonlinearityCoefficientsFromSpectrometer;
end;

function TCCoNonlinearityCorrectionProvider.getNonlinearityCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getNonlinearityCoefficients;
end;

function TCCoNonlinearityCorrectionProvider.getNonlinearityCoefficientsSingleChannel(COM_param0: Integer): OleVariant;
begin
  Result := DefaultInterface.getNonlinearityCoefficientsSingleChannel(COM_param0);
end;

procedure TCCoNonlinearityCorrectionProvider.setNonlinearityCoefficientsSingleChannel(COM_param0: OleVariant; 
                                                                                      COM_param1: Integer);
begin
  DefaultInterface.setNonlinearityCoefficientsSingleChannel(COM_param0, COM_param1);
end;

function TCCoNonlinearityCorrectionProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoNonlinearityCorrectionProviderProperties.Create(AServer: TCCoNonlinearityCorrectionProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoNonlinearityCorrectionProviderProperties.GetDefaultInterface: ICoNonlinearityCorrectionProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoVector.Create: ICoVector;
begin
  Result := CreateComObject(CLASS_CCoVector) as ICoVector;
end;

class function CoCCoVector.CreateRemote(const MachineName: string): ICoVector;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoVector) as ICoVector;
end;

procedure TCCoVector.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{FB3BC38C-C850-546E-8073-CB63291D566F}';
    IntfIID:   '{9536B4C2-4A00-5D9B-9024-4D9D6274BF5C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoVector.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoVector;
  end;
end;

procedure TCCoVector.ConnectTo(svrIntf: ICoVector);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoVector.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoVector.GetDefaultInterface: ICoVector;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoVector.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoVectorProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoVector.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoVector.GetServerProperties: TCCoVectorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCCoVector.capacity: Integer;
begin
  Result := DefaultInterface.capacity;
end;

function TCCoVector.hashCode: Integer;
begin
  Result := DefaultInterface.hashCode;
end;

function TCCoVector.size: Integer;
begin
  Result := DefaultInterface.size;
end;

procedure TCCoVector.CreateVector;
begin
  DefaultInterface.CreateVector;
end;

procedure TCCoVector.clear;
begin
  DefaultInterface.clear;
end;

procedure TCCoVector.removeAllElements;
begin
  DefaultInterface.removeAllElements;
end;

procedure TCCoVector.trimToSize;
begin
  DefaultInterface.trimToSize;
end;

function TCCoVector.isEmpty: WordBool;
begin
  Result := DefaultInterface.isEmpty;
end;

procedure TCCoVector.CreateVectorB(COM_param0: Integer);
begin
  DefaultInterface.CreateVectorB(COM_param0);
end;

procedure TCCoVector.ensureCapacity(COM_param0: Integer);
begin
  DefaultInterface.ensureCapacity(COM_param0);
end;

procedure TCCoVector.removeElementAt(COM_param0: Integer);
begin
  DefaultInterface.removeElementAt(COM_param0);
end;

procedure TCCoVector.setSize(COM_param0: Integer);
begin
  DefaultInterface.setSize(COM_param0);
end;

procedure TCCoVector.CreateVectorC(COM_param0: Integer; COM_param1: Integer);
begin
  DefaultInterface.CreateVectorC(COM_param0, COM_param1);
end;

function TCCoVector.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoVector.addAll(COM_param0: Integer; const COM_param1: ICoCollection): WordBool;
begin
  Result := DefaultInterface.addAll(COM_param0, COM_param1);
end;

procedure TCCoVector.CreateVectorD(const COM_param0: ICoCollection);
begin
  DefaultInterface.CreateVectorD(COM_param0);
end;

function TCCoVector.addAllB(const COM_param0: ICoCollection): WordBool;
begin
  Result := DefaultInterface.addAllB(COM_param0);
end;

function TCCoVector.containsAll(const COM_param0: ICoCollection): WordBool;
begin
  Result := DefaultInterface.containsAll(COM_param0);
end;

function TCCoVector.removeAll(const COM_param0: ICoCollection): WordBool;
begin
  Result := DefaultInterface.removeAll(COM_param0);
end;

function TCCoVector.retainAll(const COM_param0: ICoCollection): WordBool;
begin
  Result := DefaultInterface.retainAll(COM_param0);
end;

function TCCoVector.elements: ICoEnumeration;
begin
  Result := DefaultInterface.elements;
end;

function TCCoVector.subList(COM_param0: Integer; COM_param1: Integer): ICoList;
begin
  Result := DefaultInterface.subList(COM_param0, COM_param1);
end;

function TCCoVector.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoVectorProperties.Create(AServer: TCCoVector);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoVectorProperties.GetDefaultInterface: ICoVector;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectrumCertificate.Create: ICoSpectrumCertificate;
begin
  Result := CreateComObject(CLASS_CCoSpectrumCertificate) as ICoSpectrumCertificate;
end;

class function CoCCoSpectrumCertificate.CreateRemote(const MachineName: string): ICoSpectrumCertificate;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrumCertificate) as ICoSpectrumCertificate;
end;

procedure TCCoSpectrumCertificate.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2D0301AB-E7DD-54BD-811C-1AB3EA641152}';
    IntfIID:   '{4B64E62D-FDDE-5759-8138-AC34EE15C9EE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrumCertificate.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrumCertificate;
  end;
end;

procedure TCCoSpectrumCertificate.ConnectTo(svrIntf: ICoSpectrumCertificate);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrumCertificate.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrumCertificate.GetDefaultInterface: ICoSpectrumCertificate;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrumCertificate.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrumCertificateProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrumCertificate.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrumCertificate.GetServerProperties: TCCoSpectrumCertificateProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSpectrumCertificate.CreateSpectrumCertificateC(const COM_that: ICoSpectrumCertificate);
begin
  DefaultInterface.CreateSpectrumCertificateC(COM_that);
end;

function TCCoSpectrumCertificate.getSourceID: Integer;
begin
  Result := DefaultInterface.getSourceID;
end;

function TCCoSpectrumCertificate.getTimestamp: ICoHighResTimeStamp;
begin
  Result := DefaultInterface.getTimestamp;
end;

function TCCoSpectrumCertificate.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrumCertificateProperties.Create(AServer: TCCoSpectrumCertificate);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrumCertificateProperties.GetDefaultInterface: ICoSpectrumCertificate;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoOmniSpectrum.Create: ICoOmniSpectrum;
begin
  Result := CreateComObject(CLASS_CCoOmniSpectrum) as ICoOmniSpectrum;
end;

class function CoCCoOmniSpectrum.CreateRemote(const MachineName: string): ICoOmniSpectrum;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoOmniSpectrum) as ICoOmniSpectrum;
end;

procedure TCCoOmniSpectrum.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{345A8C37-DB62-5851-819C-6132DF2C206F}';
    IntfIID:   '{1F7B97F9-4446-59F5-80B4-7B99C0F74302}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoOmniSpectrum.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoOmniSpectrum;
  end;
end;

procedure TCCoOmniSpectrum.ConnectTo(svrIntf: ICoOmniSpectrum);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoOmniSpectrum.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoOmniSpectrum.GetDefaultInterface: ICoOmniSpectrum;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoOmniSpectrum.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoOmniSpectrumProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoOmniSpectrum.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoOmniSpectrum.GetServerProperties: TCCoOmniSpectrumProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoOmniSpectrum.CreateOmniSpectrumB(const COM_omniSpectrum: ICoOmniSpectrum);
begin
  DefaultInterface.CreateOmniSpectrumB(COM_omniSpectrum);
end;

procedure TCCoOmniSpectrum.CreateOmniSpectrumC(const COM_spectrometerChannelInfo: ICoSpectrometerChannelInfo);
begin
  DefaultInterface.CreateOmniSpectrumC(COM_spectrometerChannelInfo);
end;

procedure TCCoOmniSpectrum.CreateOmniSpectrumD(const COM_spectrometerChannelInfo: ICoSpectrometerChannelInfo; 
                                               COM_spectrum: OleVariant; COM_saturated: WordBool; 
                                               COM_integrationTime: Integer; 
                                               const COM_acquisitionTime: ICoHighResTimeStamp; 
                                               COM_boxcarWidth: Integer; 
                                               COM_scansToAverage: Integer; 
                                               COM_correctForElectricalDark: WordBool; 
                                               COM_correctForNonLinearity: WordBool; 
                                               COM_correctForStrayLight: WordBool; 
                                               COM_strobeEnabled: WordBool; 
                                               COM_strobeDelay: Integer; 
                                               COM_rotationEnabled: WordBool; 
                                               const COM_userName: WideString);
begin
  DefaultInterface.CreateOmniSpectrumD(COM_spectrometerChannelInfo, COM_spectrum, COM_saturated, 
                                       COM_integrationTime, COM_acquisitionTime, COM_boxcarWidth, 
                                       COM_scansToAverage, COM_correctForElectricalDark, 
                                       COM_correctForNonLinearity, COM_correctForStrayLight, 
                                       COM_strobeEnabled, COM_strobeDelay, COM_rotationEnabled, 
                                       COM_userName);
end;

function TCCoOmniSpectrum.getCopyWithUniqueCertificates: ICoOmniSpectrum;
begin
  Result := DefaultInterface.getCopyWithUniqueCertificates;
end;

function TCCoOmniSpectrum.isSaturated: WordBool;
begin
  Result := DefaultInterface.isSaturated;
end;

procedure TCCoOmniSpectrum.setSaturated(COM_saturated: WordBool);
begin
  DefaultInterface.setSaturated(COM_saturated);
end;

function TCCoOmniSpectrum.getIntegrationTime: Integer;
begin
  Result := DefaultInterface.getIntegrationTime;
end;

procedure TCCoOmniSpectrum.setIntegrationTime(COM_integrationTime: Integer);
begin
  DefaultInterface.setIntegrationTime(COM_integrationTime);
end;

function TCCoOmniSpectrum.isStrobeEnabled: WordBool;
begin
  Result := DefaultInterface.isStrobeEnabled;
end;

procedure TCCoOmniSpectrum.setStrobeEnabled(COM_strobeEnabled: WordBool);
begin
  DefaultInterface.setStrobeEnabled(COM_strobeEnabled);
end;

function TCCoOmniSpectrum.getStrobeDelay: Integer;
begin
  Result := DefaultInterface.getStrobeDelay;
end;

procedure TCCoOmniSpectrum.setStrobeDelay(COM_strobeDelay: Integer);
begin
  DefaultInterface.setStrobeDelay(COM_strobeDelay);
end;

function TCCoOmniSpectrum.getPixelValues: OleVariant;
begin
  Result := DefaultInterface.getPixelValues;
end;

procedure TCCoOmniSpectrum.setPixelValues(COM_pixelValues: OleVariant);
begin
  DefaultInterface.setPixelValues(COM_pixelValues);
end;

function TCCoOmniSpectrum.getAcquisitionTime: ICoHighResTimeStamp;
begin
  Result := DefaultInterface.getAcquisitionTime;
end;

procedure TCCoOmniSpectrum.setAcquisitionTime(const COM_acquisitionTime: ICoHighResTimeStamp);
begin
  DefaultInterface.setAcquisitionTime(COM_acquisitionTime);
end;

function TCCoOmniSpectrum.getBoxcarWidth: Integer;
begin
  Result := DefaultInterface.getBoxcarWidth;
end;

procedure TCCoOmniSpectrum.setBoxcarWidth(COM_boxcarWidth: Integer);
begin
  DefaultInterface.setBoxcarWidth(COM_boxcarWidth);
end;

function TCCoOmniSpectrum.getScansToAverage: Integer;
begin
  Result := DefaultInterface.getScansToAverage;
end;

procedure TCCoOmniSpectrum.setScanToAverage(COM_scansToAverage: Integer);
begin
  DefaultInterface.setScanToAverage(COM_scansToAverage);
end;

function TCCoOmniSpectrum.isCorrectForElectricalDark: WordBool;
begin
  Result := DefaultInterface.isCorrectForElectricalDark;
end;

procedure TCCoOmniSpectrum.setCorrectForElectricalDark(COM_correctForElectricalDark: WordBool);
begin
  DefaultInterface.setCorrectForElectricalDark(COM_correctForElectricalDark);
end;

function TCCoOmniSpectrum.isCorrectForNonLinearity: WordBool;
begin
  Result := DefaultInterface.isCorrectForNonLinearity;
end;

procedure TCCoOmniSpectrum.setCorrectForNonLinearity(COM_correctForNonLinearity: WordBool);
begin
  DefaultInterface.setCorrectForNonLinearity(COM_correctForNonLinearity);
end;

function TCCoOmniSpectrum.isCorrectForStrayLight: WordBool;
begin
  Result := DefaultInterface.isCorrectForStrayLight;
end;

procedure TCCoOmniSpectrum.setCorrectForStrayLight(COM_correctForStrayLight: WordBool);
begin
  DefaultInterface.setCorrectForStrayLight(COM_correctForStrayLight);
end;

function TCCoOmniSpectrum.isRotationEnabled: WordBool;
begin
  Result := DefaultInterface.isRotationEnabled;
end;

procedure TCCoOmniSpectrum.setRotationEnabled(COM_rotationEnabled: WordBool);
begin
  DefaultInterface.setRotationEnabled(COM_rotationEnabled);
end;

function TCCoOmniSpectrum.getUserName: WideString;
begin
  Result := DefaultInterface.getUserName;
end;

procedure TCCoOmniSpectrum.setUserName(const COM_userName: WideString);
begin
  DefaultInterface.setUserName(COM_userName);
end;

function TCCoOmniSpectrum.getCertificates: ICoVector;
begin
  Result := DefaultInterface.getCertificates;
end;

procedure TCCoOmniSpectrum.addCertificate(const COM_certificate: ICoSpectrumCertificate);
begin
  DefaultInterface.addCertificate(COM_certificate);
end;

function TCCoOmniSpectrum.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoOmniSpectrum.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoOmniSpectrumProperties.Create(AServer: TCCoOmniSpectrum);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoOmniSpectrumProperties.GetDefaultInterface: ICoOmniSpectrum;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoOpCodes.Create: ICoOpCodes;
begin
  Result := CreateComObject(CLASS_CCoOpCodes) as ICoOpCodes;
end;

class function CoCCoOpCodes.CreateRemote(const MachineName: string): ICoOpCodes;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoOpCodes) as ICoOpCodes;
end;

procedure TCCoOpCodes.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{195C0334-1982-5E58-8162-DF8A6CFA402F}';
    IntfIID:   '{CE335C38-FE52-5CCF-81CC-E5F9468CC8D1}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoOpCodes.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoOpCodes;
  end;
end;

procedure TCCoOpCodes.ConnectTo(svrIntf: ICoOpCodes);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoOpCodes.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoOpCodes.GetDefaultInterface: ICoOpCodes;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoOpCodes.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoOpCodesProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoOpCodes.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoOpCodes.GetServerProperties: TCCoOpCodesProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoOpCodes.CreateOpCodes;
begin
  DefaultInterface.CreateOpCodes;
end;

function TCCoOpCodes.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoOpCodesProperties.Create(AServer: TCCoOpCodes);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoOpCodesProperties.GetDefaultInterface: ICoOpCodes;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoPlugInProvider.Create: ICoPlugInProvider;
begin
  Result := CreateComObject(CLASS_CCoPlugInProvider) as ICoPlugInProvider;
end;

class function CoCCoPlugInProvider.CreateRemote(const MachineName: string): ICoPlugInProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoPlugInProvider) as ICoPlugInProvider;
end;

procedure TCCoPlugInProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E1C769FA-ED83-565B-81F9-FBA7E6134C82}';
    IntfIID:   '{BA05620E-002E-5031-9186-00659D3D0D44}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoPlugInProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoPlugInProvider;
  end;
end;

procedure TCCoPlugInProvider.ConnectTo(svrIntf: ICoPlugInProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoPlugInProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoPlugInProvider.GetDefaultInterface: ICoPlugInProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoPlugInProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoPlugInProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoPlugInProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoPlugInProvider.GetServerProperties: TCCoPlugInProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoPlugInProvider.CreatePlugInProvider;
begin
  DefaultInterface.CreatePlugInProvider;
end;

function TCCoPlugInProvider.getPlugIns: ICoSpectrometerPlugInCollection;
begin
  Result := DefaultInterface.getPlugIns;
end;

function TCCoPlugInProvider.initializePlugIns: OleVariant;
begin
  Result := DefaultInterface.initializePlugIns;
end;

procedure TCCoPlugInProvider.detectPlugIns;
begin
  DefaultInterface.detectPlugIns;
end;

function TCCoPlugInProvider.isPlugInDetected(COM_param0: Integer): WordBool;
begin
  Result := DefaultInterface.isPlugInDetected(COM_param0);
end;

function TCCoPlugInProvider.getNumberOfPlugIns: Integer;
begin
  Result := DefaultInterface.getNumberOfPlugIns;
end;

function TCCoPlugInProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoPlugInProviderProperties.Create(AServer: TCCoPlugInProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoPlugInProviderProperties.GetDefaultInterface: ICoPlugInProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoPlugInProviderImpl.Create: ICoPlugInProviderImpl;
begin
  Result := CreateComObject(CLASS_CCoPlugInProviderImpl) as ICoPlugInProviderImpl;
end;

class function CoCCoPlugInProviderImpl.CreateRemote(const MachineName: string): ICoPlugInProviderImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoPlugInProviderImpl) as ICoPlugInProviderImpl;
end;

procedure TCCoPlugInProviderImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{95C4B982-5AA0-551C-80C7-52E15782DC76}';
    IntfIID:   '{10CDF3FA-265B-5540-9009-D06919A56D60}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoPlugInProviderImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoPlugInProviderImpl;
  end;
end;

procedure TCCoPlugInProviderImpl.ConnectTo(svrIntf: ICoPlugInProviderImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoPlugInProviderImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoPlugInProviderImpl.GetDefaultInterface: ICoPlugInProviderImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoPlugInProviderImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoPlugInProviderImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoPlugInProviderImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoPlugInProviderImpl.GetServerProperties: TCCoPlugInProviderImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoPlugInProviderImpl.CreatePlugInProviderImplB(const COM_usbInt: ICoUSBInterface; 
                                                           const COM_spec: ICoSpectrometer);
begin
  DefaultInterface.CreatePlugInProviderImplB(COM_usbInt, COM_spec);
end;

procedure TCCoPlugInProviderImpl.detectPlugIns;
begin
  DefaultInterface.detectPlugIns;
end;

function TCCoPlugInProviderImpl.getNumberOfPlugIns: Integer;
begin
  Result := DefaultInterface.getNumberOfPlugIns;
end;

function TCCoPlugInProviderImpl.initializePlugIns: OleVariant;
begin
  Result := DefaultInterface.initializePlugIns;
end;

function TCCoPlugInProviderImpl.isPlugInDetected(COM_id: Integer): WordBool;
begin
  Result := DefaultInterface.isPlugInDetected(COM_id);
end;

function TCCoPlugInProviderImpl.getPlugIns: ICoSpectrometerPlugInCollection;
begin
  Result := DefaultInterface.getPlugIns;
end;

function TCCoPlugInProviderImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoPlugInProviderImplProperties.Create(AServer: TCCoPlugInProviderImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoPlugInProviderImplProperties.GetDefaultInterface: ICoPlugInProviderImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoPlugInProviderImplFPGA.Create: ICoPlugInProviderImplFPGA;
begin
  Result := CreateComObject(CLASS_CCoPlugInProviderImplFPGA) as ICoPlugInProviderImplFPGA;
end;

class function CoCCoPlugInProviderImplFPGA.CreateRemote(const MachineName: string): ICoPlugInProviderImplFPGA;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoPlugInProviderImplFPGA) as ICoPlugInProviderImplFPGA;
end;

procedure TCCoPlugInProviderImplFPGA.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{540F4125-47C0-5FE8-9121-CC05DA09B70F}';
    IntfIID:   '{94F32959-DA59-5995-8003-61F995A945F5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoPlugInProviderImplFPGA.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoPlugInProviderImplFPGA;
  end;
end;

procedure TCCoPlugInProviderImplFPGA.ConnectTo(svrIntf: ICoPlugInProviderImplFPGA);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoPlugInProviderImplFPGA.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoPlugInProviderImplFPGA.GetDefaultInterface: ICoPlugInProviderImplFPGA;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoPlugInProviderImplFPGA.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoPlugInProviderImplFPGAProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoPlugInProviderImplFPGA.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoPlugInProviderImplFPGA.GetServerProperties: TCCoPlugInProviderImplFPGAProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoPlugInProviderImplFPGA.CreatePlugInProviderImplFPGAB(const COM_usbInt: ICoUSBInterface; 
                                                                   const COM_spec: ICoSpectrometer);
begin
  DefaultInterface.CreatePlugInProviderImplFPGAB(COM_usbInt, COM_spec);
end;

function TCCoPlugInProviderImplFPGA.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoPlugInProviderImplFPGAProperties.Create(AServer: TCCoPlugInProviderImplFPGA);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoPlugInProviderImplFPGAProperties.GetDefaultInterface: ICoPlugInProviderImplFPGA;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoPlugInProviderImplNonFPGA.Create: ICoPlugInProviderImplNonFPGA;
begin
  Result := CreateComObject(CLASS_CCoPlugInProviderImplNonFPGA) as ICoPlugInProviderImplNonFPGA;
end;

class function CoCCoPlugInProviderImplNonFPGA.CreateRemote(const MachineName: string): ICoPlugInProviderImplNonFPGA;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoPlugInProviderImplNonFPGA) as ICoPlugInProviderImplNonFPGA;
end;

procedure TCCoPlugInProviderImplNonFPGA.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{25B2F7B8-9537-5A37-90FB-F4D7EBE95F6E}';
    IntfIID:   '{1210590D-22B7-5F2E-81D1-17F9A6FBD036}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoPlugInProviderImplNonFPGA.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoPlugInProviderImplNonFPGA;
  end;
end;

procedure TCCoPlugInProviderImplNonFPGA.ConnectTo(svrIntf: ICoPlugInProviderImplNonFPGA);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoPlugInProviderImplNonFPGA.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoPlugInProviderImplNonFPGA.GetDefaultInterface: ICoPlugInProviderImplNonFPGA;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoPlugInProviderImplNonFPGA.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoPlugInProviderImplNonFPGAProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoPlugInProviderImplNonFPGA.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoPlugInProviderImplNonFPGA.GetServerProperties: TCCoPlugInProviderImplNonFPGAProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoPlugInProviderImplNonFPGA.CreatePlugInProviderImplNonFPGAB(const COM_usbInt: ICoUSBInterface; 
                                                                         const COM_spec: ICoSpectrometer);
begin
  DefaultInterface.CreatePlugInProviderImplNonFPGAB(COM_usbInt, COM_spec);
end;

function TCCoPlugInProviderImplNonFPGA.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoPlugInProviderImplNonFPGAProperties.Create(AServer: TCCoPlugInProviderImplNonFPGA);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoPlugInProviderImplNonFPGAProperties.GetDefaultInterface: ICoPlugInProviderImplNonFPGA;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoPollingTest.Create: ICoPollingTest;
begin
  Result := CreateComObject(CLASS_CCoPollingTest) as ICoPollingTest;
end;

class function CoCCoPollingTest.CreateRemote(const MachineName: string): ICoPollingTest;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoPollingTest) as ICoPollingTest;
end;

procedure TCCoPollingTest.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C1A37B70-2259-5DC6-8091-3B6385B04C54}';
    IntfIID:   '{47E5B508-0437-5381-913E-2EFDA7CD6C44}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoPollingTest.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoPollingTest;
  end;
end;

procedure TCCoPollingTest.ConnectTo(svrIntf: ICoPollingTest);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoPollingTest.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoPollingTest.GetDefaultInterface: ICoPollingTest;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoPollingTest.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoPollingTestProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoPollingTest.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoPollingTest.GetServerProperties: TCCoPollingTestProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoPollingTest.CreatePollingTest;
begin
  DefaultInterface.CreatePollingTest;
end;

function TCCoPollingTest.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoPollingTestProperties.Create(AServer: TCCoPollingTest);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoPollingTestProperties.GetDefaultInterface: ICoPollingTest;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoQE65000.Create: ICoQE65000;
begin
  Result := CreateComObject(CLASS_CCoQE65000) as ICoQE65000;
end;

class function CoCCoQE65000.CreateRemote(const MachineName: string): ICoQE65000;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoQE65000) as ICoQE65000;
end;

procedure TCCoQE65000.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D96555EF-B05E-53E2-8033-E646812D456C}';
    IntfIID:   '{D014CDA0-509A-5093-9110-1DE328D403DA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoQE65000.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoQE65000;
  end;
end;

procedure TCCoQE65000.ConnectTo(svrIntf: ICoQE65000);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoQE65000.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoQE65000.GetDefaultInterface: ICoQE65000;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoQE65000.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoQE65000Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoQE65000.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoQE65000.GetServerProperties: TCCoQE65000Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoQE65000.CreateQE65000;
begin
  DefaultInterface.CreateQE65000;
end;

procedure TCCoQE65000.CreateQE65000B(COM_i: Integer);
begin
  DefaultInterface.CreateQE65000B(COM_i);
end;

procedure TCCoQE65000.setEndpoints;
begin
  DefaultInterface.setEndpoints;
end;

function TCCoQE65000.getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getEndpoint(COM_endPoint);
end;

procedure TCCoQE65000.openSpectrometer(COM_index: Integer);
begin
  DefaultInterface.openSpectrometer(COM_index);
end;

function TCCoQE65000.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

procedure TCCoQE65000.setStrobeDelay(COM_delay: Integer);
begin
  DefaultInterface.setStrobeDelay(COM_delay);
end;

function TCCoQE65000.getActualIntegrationTime: Integer;
begin
  Result := DefaultInterface.getActualIntegrationTime;
end;

function TCCoQE65000.getPlugIns: ICoSpectrometerPlugInCollection;
begin
  Result := DefaultInterface.getPlugIns;
end;

function TCCoQE65000.getNumberOfPlugIns: Integer;
begin
  Result := DefaultInterface.getNumberOfPlugIns;
end;

function TCCoQE65000.isPlugInDetected(COM_id: Integer): WordBool;
begin
  Result := DefaultInterface.isPlugInDetected(COM_id);
end;

function TCCoQE65000.initializePlugIns: OleVariant;
begin
  Result := DefaultInterface.initializePlugIns;
end;

procedure TCCoQE65000.detectPlugIns;
begin
  DefaultInterface.detectPlugIns;
end;

function TCCoQE65000.setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer;
begin
  Result := DefaultInterface.setI2CBytes(COM_address, COM_numBytes, COM_i2C);
end;

function TCCoQE65000.getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
begin
  Result := DefaultInterface.getI2CBytes(COM_address, COM_numBytes);
end;

function TCCoQE65000.getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
begin
  Result := DefaultInterface.getSPIBytes(COM_message, COM_length);
end;

function TCCoQE65000.getPSOCVersion: WideString;
begin
  Result := DefaultInterface.getPSOCVersion;
end;

function TCCoQE65000.getFPGAFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFPGAFirmwareVersion;
end;

function TCCoQE65000.continuousStrobeCountsToMicros(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.continuousStrobeCountsToMicros(COM_counts);
end;

procedure TCCoQE65000.setContinuousStrobeDelay(COM_delayMicros: Integer);
begin
  DefaultInterface.setContinuousStrobeDelay(COM_delayMicros);
end;

function TCCoQE65000.getContinuousStrobeDelayMinimum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMinimum;
end;

function TCCoQE65000.getContinuousStrobeDelayMaximum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMaximum;
end;

function TCCoQE65000.getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayIncrement(COM_magnitude);
end;

procedure TCCoQE65000.setAdvancedIntegrationTime(COM_delayMicros: Integer);
begin
  DefaultInterface.setAdvancedIntegrationTime(COM_delayMicros);
end;

function TCCoQE65000.getIntegrationTimeBaseClock: Integer;
begin
  Result := DefaultInterface.getIntegrationTimeBaseClock;
end;

function TCCoQE65000.getIntegrationClockTimer: Integer;
begin
  Result := DefaultInterface.getIntegrationClockTimer;
end;

function TCCoQE65000.getAdvancedIntegrationTimeMinimum: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeMinimum;
end;

function TCCoQE65000.getAdvancedIntegrationTimeMaximum: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeMaximum;
end;

function TCCoQE65000.getAdvancedIntegrationTimeIncrement: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeIncrement;
end;

procedure TCCoQE65000.setExternalTriggerMode(COM_mode: Integer);
begin
  DefaultInterface.setExternalTriggerMode(COM_mode);
end;

function TCCoQE65000.getExternalTriggerModes: ICoExternalTriggerModeCollection;
begin
  Result := DefaultInterface.getExternalTriggerModes;
end;

procedure TCCoQE65000.setShutterClock(COM_value: Integer);
begin
  DefaultInterface.setShutterClock(COM_value);
end;

function TCCoQE65000.getShutterClock: Integer;
begin
  Result := DefaultInterface.getShutterClock;
end;

procedure TCCoQE65000.setSingleStrobeLow(COM_value: Integer);
begin
  DefaultInterface.setSingleStrobeLow(COM_value);
end;

procedure TCCoQE65000.setSingleStrobeHigh(COM_value: Integer);
begin
  DefaultInterface.setSingleStrobeHigh(COM_value);
end;

function TCCoQE65000.getSingleStrobeCountsToMicros(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.getSingleStrobeCountsToMicros(COM_counts);
end;

function TCCoQE65000.getSingleStrobeLow: Integer;
begin
  Result := DefaultInterface.getSingleStrobeLow;
end;

function TCCoQE65000.getSingleStrobeHigh: Integer;
begin
  Result := DefaultInterface.getSingleStrobeHigh;
end;

function TCCoQE65000.getSingleStrobeMinimum: Integer;
begin
  Result := DefaultInterface.getSingleStrobeMinimum;
end;

function TCCoQE65000.getSingleStrobeMaximum: Integer;
begin
  Result := DefaultInterface.getSingleStrobeMaximum;
end;

function TCCoQE65000.getSingleStrobeIncrement: Integer;
begin
  Result := DefaultInterface.getSingleStrobeIncrement;
end;

procedure TCCoQE65000.setDirectionAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setDirectionAllBits(COM_bitSet);
end;

procedure TCCoQE65000.setMuxAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setMuxAllBits(COM_bitSet);
end;

procedure TCCoQE65000.setValueAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setValueAllBits(COM_bitSet);
end;

procedure TCCoQE65000.setDirectionBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setDirectionBitmask(COM_bitmask);
end;

procedure TCCoQE65000.setMuxBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setMuxBitmask(COM_bitmask);
end;

procedure TCCoQE65000.setValueBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setValueBitmask(COM_bitmask);
end;

procedure TCCoQE65000.setDirectionBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setDirectionBit(COM_bit, COM_value);
end;

procedure TCCoQE65000.setMuxBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setMuxBit(COM_bit, COM_value);
end;

procedure TCCoQE65000.setValueBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setValueBit(COM_bit, COM_value);
end;

function TCCoQE65000.getTotalGPIOBits: Integer;
begin
  Result := DefaultInterface.getTotalGPIOBits;
end;

function TCCoQE65000.getDirectionBits: ICoBitSet;
begin
  Result := DefaultInterface.getDirectionBits;
end;

function TCCoQE65000.getMuxBits: ICoBitSet;
begin
  Result := DefaultInterface.getMuxBits;
end;

function TCCoQE65000.getValueBits: ICoBitSet;
begin
  Result := DefaultInterface.getValueBits;
end;

function TCCoQE65000.getValueBit(COM_bitNumber: Integer): Integer;
begin
  Result := DefaultInterface.getValueBit(COM_bitNumber);
end;

function TCCoQE65000.getNumberOfPins: Integer;
begin
  Result := DefaultInterface.getNumberOfPins;
end;

function TCCoQE65000.getBoardTemperatureCelsius: Double;
begin
  Result := DefaultInterface.getBoardTemperatureCelsius;
end;

function TCCoQE65000.getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
begin
  Result := DefaultInterface.getIrradianceCalibrationFactors(COM_address);
end;

procedure TCCoQE65000.setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant);
begin
  DefaultInterface.setIrradianceCalibrationFactors(COM_address, COM_data);
end;

procedure TCCoQE65000.setMasterClockDivisor(COM_value: Integer);
begin
  DefaultInterface.setMasterClockDivisor(COM_value);
end;

function TCCoQE65000.getMasterClockDivisor: Integer;
begin
  Result := DefaultInterface.getMasterClockDivisor;
end;

procedure TCCoQE65000.setExternalTriggerDelay(COM_counts: Integer);
begin
  DefaultInterface.setExternalTriggerDelay(COM_counts);
end;

function TCCoQE65000.triggerDelayCountsToMicroseconds(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.triggerDelayCountsToMicroseconds(COM_counts);
end;

function TCCoQE65000.getExternalTriggerDelayMinimum: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayMinimum;
end;

function TCCoQE65000.getExternalTriggerDelayMaximum: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayMaximum;
end;

function TCCoQE65000.getExternalTriggerDelayIncrement: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayIncrement;
end;

procedure TCCoQE65000.setTECEnable(COM_enable: WordBool);
begin
  DefaultInterface.setTECEnable(COM_enable);
end;

procedure TCCoQE65000.setFanEnable(COM_enable: WordBool);
begin
  DefaultInterface.setFanEnable(COM_enable);
end;

function TCCoQE65000.getDetectorTemperatureCelsius: Double;
begin
  Result := DefaultInterface.getDetectorTemperatureCelsius;
end;

function TCCoQE65000.getDetectorTemperatureSetPointCelsius: Double;
begin
  Result := DefaultInterface.getDetectorTemperatureSetPointCelsius;
end;

procedure TCCoQE65000.setDetectorSetPointCelsius(COM_point: Double);
begin
  DefaultInterface.setDetectorSetPointCelsius(COM_point);
end;

function TCCoQE65000.getSetPointMinimumCelsius: Double;
begin
  Result := DefaultInterface.getSetPointMinimumCelsius;
end;

function TCCoQE65000.getSetPointMaximumCelsius: Double;
begin
  Result := DefaultInterface.getSetPointMaximumCelsius;
end;

function TCCoQE65000.getSetPointIncrementCelsius: Double;
begin
  Result := DefaultInterface.getSetPointIncrementCelsius;
end;

function TCCoQE65000.isSaveTECStateEnabled: WordBool;
begin
  Result := DefaultInterface.isSaveTECStateEnabled;
end;

procedure TCCoQE65000.saveTECState;
begin
  DefaultInterface.saveTECState;
end;

function TCCoQE65000.readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readNonlinearityCoefficientsFromSpectrometer;
end;

function TCCoQE65000.getNonlinearityCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getNonlinearityCoefficients;
end;

function TCCoQE65000.getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getNonlinearityCoefficientsSingleChannel(COM_index);
end;

procedure TCCoQE65000.setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; 
                                                               COM_index: Integer);
begin
  DefaultInterface.setNonlinearityCoefficientsSingleChannel(COM_nl, COM_index);
end;

function TCCoQE65000.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoQE65000.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoQE65000.getWavelengths(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_index);
end;

procedure TCCoQE65000.setWavelengths(COM_wl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setWavelengths(COM_wl, COM_index);
end;

function TCCoQE65000.readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readStrayLightCorrectionCoefficientFromSpectrometer;
end;

function TCCoQE65000.getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getStrayLightCorrectionCoefficient;
end;

procedure TCCoQE65000.setStrayLight(COM_strayLight: Double; COM_index: Integer);
begin
  DefaultInterface.setStrayLight(COM_strayLight, COM_index);
end;

function TCCoQE65000.getStrayLight(COM_index: Integer): Double;
begin
  Result := DefaultInterface.getStrayLight(COM_index);
end;

function TCCoQE65000.isAdvancedVersion: WordBool;
begin
  Result := DefaultInterface.isAdvancedVersion;
end;

procedure TCCoQE65000.addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.addAcquisitionListener(COM_listener);
end;

procedure TCCoQE65000.removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.removeAcquisitionListener(COM_listener);
end;

function TCCoQE65000.getSpectrometer: ICoQE65000;
begin
  Result := DefaultInterface.getSpectrometer;
end;

procedure TCCoQE65000.addExposureListener(const COM_listener: ICoExposureListener);
begin
  DefaultInterface.addExposureListener(COM_listener);
end;

function TCCoQE65000.getCcdWidth: Integer;
begin
  Result := DefaultInterface.getCcdWidth;
end;

function TCCoQE65000.getCcdHeight: Integer;
begin
  Result := DefaultInterface.getCcdHeight;
end;

function TCCoQE65000.getLastExposure: ICoSpectrometerExposure;
begin
  Result := DefaultInterface.getLastExposure;
end;

procedure TCCoQE65000.removeExposureListener(const COM_listener: ICoExposureListener);
begin
  DefaultInterface.removeExposureListener(COM_listener);
end;

function TCCoQE65000.getQE65000Exposure(const COM_spectrum: ICoSpectrum): ICoSpectrometerExposure;
begin
  Result := DefaultInterface.getQE65000Exposure(COM_spectrum);
end;

procedure TCCoQE65000.set2DMode(COM_channelIndex: Integer);
begin
  DefaultInterface.set2DMode(COM_channelIndex);
end;

procedure TCCoQE65000.set1DMode(COM_channelIndex: Integer);
begin
  DefaultInterface.set1DMode(COM_channelIndex);
end;

function TCCoQE65000.getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
begin
  Result := DefaultInterface.getSpectrum(COM_spectrum);
end;

function TCCoQE65000.has1DMode: WordBool;
begin
  Result := DefaultInterface.has1DMode;
end;

function TCCoQE65000.is1DMode: WordBool;
begin
  Result := DefaultInterface.is1DMode;
end;

function TCCoQE65000.is2DMode: WordBool;
begin
  Result := DefaultInterface.is2DMode;
end;

function TCCoQE65000.get2DintegrationTime: Integer;
begin
  Result := DefaultInterface.get2DintegrationTime;
end;

procedure TCCoQE65000.addIntegrationTimeChangeListener(const COM_listener: ICoIntegrationTimeChangeListener);
begin
  DefaultInterface.addIntegrationTimeChangeListener(COM_listener);
end;

procedure TCCoQE65000.removeIntegrationTimeChangeListener(const COM_listener: ICoIntegrationTimeChangeListener);
begin
  DefaultInterface.removeIntegrationTimeChangeListener(COM_listener);
end;

function TCCoQE65000.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoQE65000Properties.Create(AServer: TCCoQE65000);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoQE65000Properties.GetDefaultInterface: ICoQE65000;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoRamanExposure.Create: ICoRamanExposure;
begin
  Result := CreateComObject(CLASS_CCoRamanExposure) as ICoRamanExposure;
end;

class function CoCCoRamanExposure.CreateRemote(const MachineName: string): ICoRamanExposure;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoRamanExposure) as ICoRamanExposure;
end;

procedure TCCoRamanExposure.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8A54C083-1A53-5648-9064-DE57370745F4}';
    IntfIID:   '{69CDC3E8-3D8B-5036-812A-7BBCBAA07E3B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoRamanExposure.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoRamanExposure;
  end;
end;

procedure TCCoRamanExposure.ConnectTo(svrIntf: ICoRamanExposure);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoRamanExposure.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoRamanExposure.GetDefaultInterface: ICoRamanExposure;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoRamanExposure.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoRamanExposureProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoRamanExposure.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoRamanExposure.GetServerProperties: TCCoRamanExposureProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoRamanExposure.CreateRamanExposureB(const COM_source: ICoMMSRaman);
begin
  DefaultInterface.CreateRamanExposureB(COM_source);
end;

function TCCoRamanExposure.getShutterState: Shortint;
begin
  Result := DefaultInterface.getShutterState;
end;

procedure TCCoRamanExposure.setShutterState(COM_shutterState: Shortint);
begin
  DefaultInterface.setShutterState(COM_shutterState);
end;

function TCCoRamanExposure.getExposureType: Shortint;
begin
  Result := DefaultInterface.getExposureType;
end;

procedure TCCoRamanExposure.setExposureType(COM_exposureType: Shortint);
begin
  DefaultInterface.setExposureType(COM_exposureType);
end;

function TCCoRamanExposure.getExposuresToAverage: Smallint;
begin
  Result := DefaultInterface.getExposuresToAverage;
end;

procedure TCCoRamanExposure.setExposuresToAverage(COM_exposuresToAverage: Smallint);
begin
  DefaultInterface.setExposuresToAverage(COM_exposuresToAverage);
end;

function TCCoRamanExposure.getStrExposureType: WideString;
begin
  Result := DefaultInterface.getStrExposureType;
end;

function TCCoRamanExposure.getBitsPerPixel: Integer;
begin
  Result := DefaultInterface.getBitsPerPixel;
end;

procedure TCCoRamanExposure.setBitsPerPixel(COM_bitsPerPixel: Integer);
begin
  DefaultInterface.setBitsPerPixel(COM_bitsPerPixel);
end;

function TCCoRamanExposure.getExposureTime: Integer;
begin
  Result := DefaultInterface.getExposureTime;
end;

procedure TCCoRamanExposure.setExposureTime(COM_exposureTime: Integer);
begin
  DefaultInterface.setExposureTime(COM_exposureTime);
end;

function TCCoRamanExposure.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoRamanExposureProperties.Create(AServer: TCCoRamanExposure);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoRamanExposureProperties.GetDefaultInterface: ICoRamanExposure;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoRamanReconstruction.Create: ICoRamanReconstruction;
begin
  Result := CreateComObject(CLASS_CCoRamanReconstruction) as ICoRamanReconstruction;
end;

class function CoCCoRamanReconstruction.CreateRemote(const MachineName: string): ICoRamanReconstruction;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoRamanReconstruction) as ICoRamanReconstruction;
end;

procedure TCCoRamanReconstruction.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3085E13E-017F-5A3C-91C7-CC9026F5294A}';
    IntfIID:   '{F79FA1CF-503A-53D3-81A7-A7E540A2D095}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoRamanReconstruction.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoRamanReconstruction;
  end;
end;

procedure TCCoRamanReconstruction.ConnectTo(svrIntf: ICoRamanReconstruction);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoRamanReconstruction.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoRamanReconstruction.GetDefaultInterface: ICoRamanReconstruction;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoRamanReconstruction.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoRamanReconstructionProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoRamanReconstruction.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoRamanReconstruction.GetServerProperties: TCCoRamanReconstructionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoRamanReconstruction.CreateRamanReconstruction;
begin
  DefaultInterface.CreateRamanReconstruction;
end;

function TCCoRamanReconstruction.getAlgorithm: Shortint;
begin
  Result := DefaultInterface.getAlgorithm;
end;

procedure TCCoRamanReconstruction.setAlgorithm(COM_algorithm: Shortint);
begin
  DefaultInterface.setAlgorithm(COM_algorithm);
end;

function TCCoRamanReconstruction.getReconstructionType: Shortint;
begin
  Result := DefaultInterface.getReconstructionType;
end;

procedure TCCoRamanReconstruction.setReconstructionType(COM_reconstructionType: Shortint);
begin
  DefaultInterface.setReconstructionType(COM_reconstructionType);
end;

function TCCoRamanReconstruction.isSaturated: WordBool;
begin
  Result := DefaultInterface.isSaturated;
end;

procedure TCCoRamanReconstruction.setSaturated(COM_saturated: WordBool);
begin
  DefaultInterface.setSaturated(COM_saturated);
end;

function TCCoRamanReconstruction.getIntensities: OleVariant;
begin
  Result := DefaultInterface.getIntensities;
end;

procedure TCCoRamanReconstruction.setIntensities(COM_intensities: OleVariant);
begin
  DefaultInterface.setIntensities(COM_intensities);
end;

function TCCoRamanReconstruction.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoRamanReconstructionProperties.Create(AServer: TCCoRamanReconstruction);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoRamanReconstructionProperties.GetDefaultInterface: ICoRamanReconstruction;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoRawData.Create: ICoRawData;
begin
  Result := CreateComObject(CLASS_CCoRawData) as ICoRawData;
end;

class function CoCCoRawData.CreateRemote(const MachineName: string): ICoRawData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoRawData) as ICoRawData;
end;

procedure TCCoRawData.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{28577DB2-521B-596F-90BB-0A38EBB53F72}';
    IntfIID:   '{DD079D1B-2F76-5870-91FE-BEB990D8B826}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoRawData.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoRawData;
  end;
end;

procedure TCCoRawData.ConnectTo(svrIntf: ICoRawData);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoRawData.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoRawData.GetDefaultInterface: ICoRawData;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoRawData.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoRawDataProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoRawData.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoRawData.GetServerProperties: TCCoRawDataProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoRawData.CreateRawDataB(COM_numBytes: Integer);
begin
  DefaultInterface.CreateRawDataB(COM_numBytes);
end;

function TCCoRawData.getData: OleVariant;
begin
  Result := DefaultInterface.getData;
end;

procedure TCCoRawData.setData(COM_data: OleVariant);
begin
  DefaultInterface.setData(COM_data);
end;

function TCCoRawData.getStartTime: Integer;
begin
  Result := DefaultInterface.getStartTime;
end;

procedure TCCoRawData.setStartTime(COM_startTime: Integer);
begin
  DefaultInterface.setStartTime(COM_startTime);
end;

function TCCoRawData.getEndTime: Integer;
begin
  Result := DefaultInterface.getEndTime;
end;

procedure TCCoRawData.setEndTime(COM_endTime: Integer);
begin
  DefaultInterface.setEndTime(COM_endTime);
end;

function TCCoRawData.getRequestingChannel: Integer;
begin
  Result := DefaultInterface.getRequestingChannel;
end;

procedure TCCoRawData.setRequestingChannel(COM_requestingChannel: Integer);
begin
  DefaultInterface.setRequestingChannel(COM_requestingChannel);
end;

function TCCoRawData.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoRawDataProperties.Create(AServer: TCCoRawData);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoRawDataProperties.GetDefaultInterface: ICoRawData;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSAS.Create: ICoSAS;
begin
  Result := CreateComObject(CLASS_CCoSAS) as ICoSAS;
end;

class function CoCCoSAS.CreateRemote(const MachineName: string): ICoSAS;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSAS) as ICoSAS;
end;

procedure TCCoSAS.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{47682248-0E10-5210-91B1-B51565D05854}';
    IntfIID:   '{F4688BAB-EBBE-56FE-906B-0883E463072F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSAS.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSAS;
  end;
end;

procedure TCCoSAS.ConnectTo(svrIntf: ICoSAS);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSAS.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSAS.GetDefaultInterface: ICoSAS;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSAS.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSASProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSAS.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSAS.GetServerProperties: TCCoSASProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSAS.CreateSAS;
begin
  DefaultInterface.CreateSAS;
end;

procedure TCCoSAS.CreateSASB(COM_i: Integer);
begin
  DefaultInterface.CreateSASB(COM_i);
end;

procedure TCCoSAS.setEndpoints;
begin
  DefaultInterface.setEndpoints;
end;

function TCCoSAS.getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getEndpoint(COM_endPoint);
end;

procedure TCCoSAS.openSpectrometer(COM_index: Integer);
begin
  DefaultInterface.openSpectrometer(COM_index);
end;

function TCCoSAS.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

function TCCoSAS.getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
begin
  Result := DefaultInterface.getSpectrum(COM_spectrum);
end;

function TCCoSAS.getSpectrumB: ICoSpectrum;
begin
  Result := DefaultInterface.getSpectrumB;
end;

function TCCoSAS.getStatus: ICoSpectrometerStatus;
begin
  Result := DefaultInterface.getStatus;
end;

function TCCoSAS.readIntegrationTime: Integer;
begin
  Result := DefaultInterface.readIntegrationTime;
end;

function TCCoSAS.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

procedure TCCoSAS.setExternalTriggerMode(COM_mode: Integer);
begin
  DefaultInterface.setExternalTriggerMode(COM_mode);
end;

function TCCoSAS.getExternalTriggerModes: ICoExternalTriggerModeCollection;
begin
  Result := DefaultInterface.getExternalTriggerModes;
end;

function TCCoSAS.readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readNonlinearityCoefficientsFromSpectrometer;
end;

function TCCoSAS.getNonlinearityCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getNonlinearityCoefficients;
end;

function TCCoSAS.getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getNonlinearityCoefficientsSingleChannel(COM_index);
end;

procedure TCCoSAS.setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setNonlinearityCoefficientsSingleChannel(COM_nl, COM_index);
end;

function TCCoSAS.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoSAS.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoSAS.getWavelengths(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_index);
end;

procedure TCCoSAS.setWavelengths(COM_wl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setWavelengths(COM_wl, COM_index);
end;

function TCCoSAS.readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readStrayLightCorrectionCoefficientFromSpectrometer;
end;

function TCCoSAS.getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getStrayLightCorrectionCoefficient;
end;

procedure TCCoSAS.setStrayLight(COM_strayLight: Double; COM_index: Integer);
begin
  DefaultInterface.setStrayLight(COM_strayLight, COM_index);
end;

function TCCoSAS.getStrayLight(COM_index: Integer): Double;
begin
  Result := DefaultInterface.getStrayLight(COM_index);
end;

function TCCoSAS.isAdvancedVersion: WordBool;
begin
  Result := DefaultInterface.isAdvancedVersion;
end;

procedure TCCoSAS.addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.addAcquisitionListener(COM_listener);
end;

procedure TCCoSAS.removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.removeAcquisitionListener(COM_listener);
end;

function TCCoSAS.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSASProperties.Create(AServer: TCCoSAS);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSASProperties.GetDefaultInterface: ICoSAS;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSASChannel.Create: ICoSASChannel;
begin
  Result := CreateComObject(CLASS_CCoSASChannel) as ICoSASChannel;
end;

class function CoCCoSASChannel.CreateRemote(const MachineName: string): ICoSASChannel;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSASChannel) as ICoSASChannel;
end;

procedure TCCoSASChannel.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0E7BDB14-60CE-5327-90E8-DAB340D392FC}';
    IntfIID:   '{D3C1BA2E-2EC6-5F48-8000-2D5DA1388A2A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSASChannel.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSASChannel;
  end;
end;

procedure TCCoSASChannel.ConnectTo(svrIntf: ICoSASChannel);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSASChannel.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSASChannel.GetDefaultInterface: ICoSASChannel;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSASChannel.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSASChannelProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSASChannel.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSASChannel.GetServerProperties: TCCoSASChannelProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSASChannel.CreateSASChannelB(const COM_spectrometer: ICoSpectrometer; 
                                           const COM_coefficients: ICoCoefficients; 
                                           COM_channel: Integer);
begin
  DefaultInterface.CreateSASChannelB(COM_spectrometer, COM_coefficients, COM_channel);
end;

procedure TCCoSASChannel.getCoefficientsFromSpectrometer;
begin
  DefaultInterface.getCoefficientsFromSpectrometer;
end;

procedure TCCoSASChannel.setCoefficients;
begin
  DefaultInterface.setCoefficients;
end;

procedure TCCoSASChannel.setWavelengthCalibration;
begin
  DefaultInterface.setWavelengthCalibration;
end;

function TCCoSASChannel.getEndingWavelength: Double;
begin
  Result := DefaultInterface.getEndingWavelength;
end;

function TCCoSASChannel.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSASChannelProperties.Create(AServer: TCCoSASChannel);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSASChannelProperties.GetDefaultInterface: ICoSASChannel;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSHA.Create: ICoSHA;
begin
  Result := CreateComObject(CLASS_CCoSHA) as ICoSHA;
end;

class function CoCCoSHA.CreateRemote(const MachineName: string): ICoSHA;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSHA) as ICoSHA;
end;

procedure TCCoSHA.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C1266C19-00B8-5E02-90FC-CEDD992C60C6}';
    IntfIID:   '{9EC03059-14A0-55F6-9156-EE43EEA2E59E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSHA.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSHA;
  end;
end;

procedure TCCoSHA.ConnectTo(svrIntf: ICoSHA);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSHA.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSHA.GetDefaultInterface: ICoSHA;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSHA.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSHAProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSHA.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSHA.GetServerProperties: TCCoSHAProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSHA.CreateSHA;
begin
  DefaultInterface.CreateSHA;
end;

function TCCoSHA.isHyperAdapterPresent: WordBool;
begin
  Result := DefaultInterface.isHyperAdapterPresent;
end;

function TCCoSHA.setHyperAdapterDAC(COM_param0: Double): Integer;
begin
  Result := DefaultInterface.setHyperAdapterDAC(COM_param0);
end;

function TCCoSHA.readHyperAdapterEEPROM(COM_param0: OleVariant; COM_param1: Integer; 
                                        COM_param2: Integer): Integer;
begin
  Result := DefaultInterface.readHyperAdapterEEPROM(COM_param0, COM_param1, COM_param2);
end;

function TCCoSHA.writeHyperAdapterEEPROM(COM_param0: OleVariant; COM_param1: Integer; 
                                         COM_param2: Integer): Integer;
begin
  Result := DefaultInterface.writeHyperAdapterEEPROM(COM_param0, COM_param1, COM_param2);
end;

procedure TCCoSHA.initSHA(const COM_param0: ICoSHAChannel);
begin
  DefaultInterface.initSHA(COM_param0);
end;

procedure TCCoSHA.calibrate;
begin
  DefaultInterface.calibrate;
end;

function TCCoSHA.getCalibrationTime: Double;
begin
  Result := DefaultInterface.getCalibrationTime;
end;

procedure TCCoSHA.restoreCalibration;
begin
  DefaultInterface.restoreCalibration;
end;

function TCCoSHA.getSHAChannel: ICoSHAChannel;
begin
  Result := DefaultInterface.getSHAChannel;
end;

function TCCoSHA.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSHAProperties.Create(AServer: TCCoSHA);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSHAProperties.GetDefaultInterface: ICoSHA;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSHAConstants.Create: ICoSHAConstants;
begin
  Result := CreateComObject(CLASS_CCoSHAConstants) as ICoSHAConstants;
end;

class function CoCCoSHAConstants.CreateRemote(const MachineName: string): ICoSHAConstants;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSHAConstants) as ICoSHAConstants;
end;

procedure TCCoSHAConstants.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C372BA9F-1E08-5299-90F3-9B62E08124E3}';
    IntfIID:   '{E2CB4AC8-03D2-51A4-904B-395C0C7D32AD}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSHAConstants.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSHAConstants;
  end;
end;

procedure TCCoSHAConstants.ConnectTo(svrIntf: ICoSHAConstants);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSHAConstants.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSHAConstants.GetDefaultInterface: ICoSHAConstants;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSHAConstants.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSHAConstantsProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSHAConstants.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSHAConstants.GetServerProperties: TCCoSHAConstantsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSHAConstants.CreateSHAConstants;
begin
  DefaultInterface.CreateSHAConstants;
end;

function TCCoSHAConstants.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSHAConstantsProperties.Create(AServer: TCCoSHAConstants);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSHAConstantsProperties.GetDefaultInterface: ICoSHAConstants;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSHAGUIProvider.Create: ICoSHAGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoSHAGUIProvider) as ICoSHAGUIProvider;
end;

class function CoCCoSHAGUIProvider.CreateRemote(const MachineName: string): ICoSHAGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSHAGUIProvider) as ICoSHAGUIProvider;
end;

procedure TCCoSHAGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E979F3DA-33E5-58E8-80A3-A063EEE1F831}';
    IntfIID:   '{155CA90B-643F-5CD8-906A-02BEF31B1C1D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSHAGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSHAGUIProvider;
  end;
end;

procedure TCCoSHAGUIProvider.ConnectTo(svrIntf: ICoSHAGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSHAGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSHAGUIProvider.GetDefaultInterface: ICoSHAGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSHAGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSHAGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSHAGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSHAGUIProvider.GetServerProperties: TCCoSHAGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSHAGUIProvider.CreateSHAGUIProvider;
begin
  DefaultInterface.CreateSHAGUIProvider;
end;

function TCCoSHAGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSHAGUIProviderProperties.Create(AServer: TCCoSHAGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSHAGUIProviderProperties.GetDefaultInterface: ICoSHAGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSHAImpl.Create: ICoSHAImpl;
begin
  Result := CreateComObject(CLASS_CCoSHAImpl) as ICoSHAImpl;
end;

class function CoCCoSHAImpl.CreateRemote(const MachineName: string): ICoSHAImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSHAImpl) as ICoSHAImpl;
end;

procedure TCCoSHAImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E4F0E76F-FEA0-5E9C-8038-8F4BFBEA0979}';
    IntfIID:   '{7527BE21-E906-5F50-91BD-DBA03303CE69}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSHAImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSHAImpl;
  end;
end;

procedure TCCoSHAImpl.ConnectTo(svrIntf: ICoSHAImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSHAImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSHAImpl.GetDefaultInterface: ICoSHAImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSHAImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSHAImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSHAImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSHAImpl.GetServerProperties: TCCoSHAImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSHAImpl.CreateSHAImplB(const COM_usbInt: ICoUSBInterface; 
                                     const COM_spectrometer: ICoSpectrometer);
begin
  DefaultInterface.CreateSHAImplB(COM_usbInt, COM_spectrometer);
end;

function TCCoSHAImpl.isHyperAdapterPresent: WordBool;
begin
  Result := DefaultInterface.isHyperAdapterPresent;
end;

procedure TCCoSHAImpl.initSHA(const COM_channel: ICoSHAChannel);
begin
  DefaultInterface.initSHA(COM_channel);
end;

function TCCoSHAImpl.setHyperAdapterDAC(COM_voltage: Double): Integer;
begin
  Result := DefaultInterface.setHyperAdapterDAC(COM_voltage);
end;

function TCCoSHAImpl.readHyperAdapterEEPROM(COM_data: OleVariant; COM_start: Integer; 
                                            COM_length: Integer): Integer;
begin
  Result := DefaultInterface.readHyperAdapterEEPROM(COM_data, COM_start, COM_length);
end;

function TCCoSHAImpl.writeHyperAdapterEEPROM(COM_data: OleVariant; COM_start: Integer; 
                                             COM_length: Integer): Integer;
begin
  Result := DefaultInterface.writeHyperAdapterEEPROM(COM_data, COM_start, COM_length);
end;

procedure TCCoSHAImpl.calibrate;
begin
  DefaultInterface.calibrate;
end;

procedure TCCoSHAImpl.restoreCalibration;
begin
  DefaultInterface.restoreCalibration;
end;

function TCCoSHAImpl.getCalibrationTime: Double;
begin
  Result := DefaultInterface.getCalibrationTime;
end;

function TCCoSHAImpl.getSHAChannel: ICoSHAChannel;
begin
  Result := DefaultInterface.getSHAChannel;
end;

function TCCoSHAImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSHAImplProperties.Create(AServer: TCCoSHAImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSHAImplProperties.GetDefaultInterface: ICoSHAImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSPIBus.Create: ICoSPIBus;
begin
  Result := CreateComObject(CLASS_CCoSPIBus) as ICoSPIBus;
end;

class function CoCCoSPIBus.CreateRemote(const MachineName: string): ICoSPIBus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSPIBus) as ICoSPIBus;
end;

procedure TCCoSPIBus.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{33E762E9-60CA-5867-91EE-65D54D8E6BE1}';
    IntfIID:   '{71A80A36-04A8-5747-91C9-42651B1B46AE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSPIBus.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSPIBus;
  end;
end;

procedure TCCoSPIBus.ConnectTo(svrIntf: ICoSPIBus);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSPIBus.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSPIBus.GetDefaultInterface: ICoSPIBus;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSPIBus.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSPIBusProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSPIBus.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSPIBus.GetServerProperties: TCCoSPIBusProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSPIBus.CreateSPIBus;
begin
  DefaultInterface.CreateSPIBus;
end;

function TCCoSPIBus.getSPIBytes(COM_param0: OleVariant; COM_param1: Integer): OleVariant;
begin
  Result := DefaultInterface.getSPIBytes(COM_param0, COM_param1);
end;

function TCCoSPIBus.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSPIBusProperties.Create(AServer: TCCoSPIBus);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSPIBusProperties.GetDefaultInterface: ICoSPIBus;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSPIBusGUIProvider.Create: ICoSPIBusGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoSPIBusGUIProvider) as ICoSPIBusGUIProvider;
end;

class function CoCCoSPIBusGUIProvider.CreateRemote(const MachineName: string): ICoSPIBusGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSPIBusGUIProvider) as ICoSPIBusGUIProvider;
end;

procedure TCCoSPIBusGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E843AFA8-3D21-5A56-9049-CB1E8BC19887}';
    IntfIID:   '{1CFFD3AA-C819-5548-9151-60A1E3C59B54}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSPIBusGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSPIBusGUIProvider;
  end;
end;

procedure TCCoSPIBusGUIProvider.ConnectTo(svrIntf: ICoSPIBusGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSPIBusGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSPIBusGUIProvider.GetDefaultInterface: ICoSPIBusGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSPIBusGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSPIBusGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSPIBusGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSPIBusGUIProvider.GetServerProperties: TCCoSPIBusGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSPIBusGUIProvider.CreateSPIBusGUIProvider;
begin
  DefaultInterface.CreateSPIBusGUIProvider;
end;

function TCCoSPIBusGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSPIBusGUIProviderProperties.Create(AServer: TCCoSPIBusGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSPIBusGUIProviderProperties.GetDefaultInterface: ICoSPIBusGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSPIBusImpl.Create: ICoSPIBusImpl;
begin
  Result := CreateComObject(CLASS_CCoSPIBusImpl) as ICoSPIBusImpl;
end;

class function CoCCoSPIBusImpl.CreateRemote(const MachineName: string): ICoSPIBusImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSPIBusImpl) as ICoSPIBusImpl;
end;

procedure TCCoSPIBusImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A11F3E47-7F18-502C-81D2-C78C49DFBF95}';
    IntfIID:   '{E0E698A5-2594-53E6-9013-B2B9A5250DE2}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSPIBusImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSPIBusImpl;
  end;
end;

procedure TCCoSPIBusImpl.ConnectTo(svrIntf: ICoSPIBusImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSPIBusImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSPIBusImpl.GetDefaultInterface: ICoSPIBusImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSPIBusImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSPIBusImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSPIBusImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSPIBusImpl.GetServerProperties: TCCoSPIBusImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSPIBusImpl.CreateSPIBusImplB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateSPIBusImplB(COM_usbInt);
end;

function TCCoSPIBusImpl.getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
begin
  Result := DefaultInterface.getSPIBytes(COM_message, COM_length);
end;

function TCCoSPIBusImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSPIBusImplProperties.Create(AServer: TCCoSPIBusImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSPIBusImplProperties.GetDefaultInterface: ICoSPIBusImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSPIBusImplFPGA.Create: ICoSPIBusImplFPGA;
begin
  Result := CreateComObject(CLASS_CCoSPIBusImplFPGA) as ICoSPIBusImplFPGA;
end;

class function CoCCoSPIBusImplFPGA.CreateRemote(const MachineName: string): ICoSPIBusImplFPGA;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSPIBusImplFPGA) as ICoSPIBusImplFPGA;
end;

procedure TCCoSPIBusImplFPGA.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{1BF82871-7F1F-52C5-9019-C43446452C23}';
    IntfIID:   '{AD6703AA-5F53-550E-91E3-8946270E6657}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSPIBusImplFPGA.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSPIBusImplFPGA;
  end;
end;

procedure TCCoSPIBusImplFPGA.ConnectTo(svrIntf: ICoSPIBusImplFPGA);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSPIBusImplFPGA.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSPIBusImplFPGA.GetDefaultInterface: ICoSPIBusImplFPGA;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSPIBusImplFPGA.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSPIBusImplFPGAProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSPIBusImplFPGA.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSPIBusImplFPGA.GetServerProperties: TCCoSPIBusImplFPGAProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSPIBusImplFPGA.CreateSPIBusImplFPGAB(const COM_usb: ICoUSBInterface);
begin
  DefaultInterface.CreateSPIBusImplFPGAB(COM_usb);
end;

function TCCoSPIBusImplFPGA.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSPIBusImplFPGAProperties.Create(AServer: TCCoSPIBusImplFPGA);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSPIBusImplFPGAProperties.GetDefaultInterface: ICoSPIBusImplFPGA;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSPIBusImplNonFPGA.Create: ICoSPIBusImplNonFPGA;
begin
  Result := CreateComObject(CLASS_CCoSPIBusImplNonFPGA) as ICoSPIBusImplNonFPGA;
end;

class function CoCCoSPIBusImplNonFPGA.CreateRemote(const MachineName: string): ICoSPIBusImplNonFPGA;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSPIBusImplNonFPGA) as ICoSPIBusImplNonFPGA;
end;

procedure TCCoSPIBusImplNonFPGA.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{02858A57-0258-550D-800A-F60E2B6C7BDB}';
    IntfIID:   '{29964F0D-DA69-5F19-8176-A7382D1FCA6F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSPIBusImplNonFPGA.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSPIBusImplNonFPGA;
  end;
end;

procedure TCCoSPIBusImplNonFPGA.ConnectTo(svrIntf: ICoSPIBusImplNonFPGA);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSPIBusImplNonFPGA.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSPIBusImplNonFPGA.GetDefaultInterface: ICoSPIBusImplNonFPGA;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSPIBusImplNonFPGA.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSPIBusImplNonFPGAProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSPIBusImplNonFPGA.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSPIBusImplNonFPGA.GetServerProperties: TCCoSPIBusImplNonFPGAProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSPIBusImplNonFPGA.CreateSPIBusImplNonFPGAB(const COM_usb: ICoUSBInterface);
begin
  DefaultInterface.CreateSPIBusImplNonFPGAB(COM_usb);
end;

function TCCoSPIBusImplNonFPGA.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSPIBusImplNonFPGAProperties.Create(AServer: TCCoSPIBusImplNonFPGA);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSPIBusImplNonFPGAProperties.GetDefaultInterface: ICoSPIBusImplNonFPGA;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoShutterClock.Create: ICoShutterClock;
begin
  Result := CreateComObject(CLASS_CCoShutterClock) as ICoShutterClock;
end;

class function CoCCoShutterClock.CreateRemote(const MachineName: string): ICoShutterClock;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoShutterClock) as ICoShutterClock;
end;

procedure TCCoShutterClock.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D92F3A4A-0CCA-581B-811D-CCDC62DC8891}';
    IntfIID:   '{4E8D34A9-55A5-5AF6-8182-014DB346B329}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoShutterClock.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoShutterClock;
  end;
end;

procedure TCCoShutterClock.ConnectTo(svrIntf: ICoShutterClock);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoShutterClock.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoShutterClock.GetDefaultInterface: ICoShutterClock;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoShutterClock.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoShutterClockProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoShutterClock.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoShutterClock.GetServerProperties: TCCoShutterClockProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoShutterClock.CreateShutterClock;
begin
  DefaultInterface.CreateShutterClock;
end;

function TCCoShutterClock.getShutterClock: Integer;
begin
  Result := DefaultInterface.getShutterClock;
end;

procedure TCCoShutterClock.setShutterClock(COM_param0: Integer);
begin
  DefaultInterface.setShutterClock(COM_param0);
end;

function TCCoShutterClock.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoShutterClockProperties.Create(AServer: TCCoShutterClock);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoShutterClockProperties.GetDefaultInterface: ICoShutterClock;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoShutterClockImpl.Create: ICoShutterClockImpl;
begin
  Result := CreateComObject(CLASS_CCoShutterClockImpl) as ICoShutterClockImpl;
end;

class function CoCCoShutterClockImpl.CreateRemote(const MachineName: string): ICoShutterClockImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoShutterClockImpl) as ICoShutterClockImpl;
end;

procedure TCCoShutterClockImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{59736222-AF46-5F99-80CF-C8FE79E484B8}';
    IntfIID:   '{0337B03A-5AE8-5A11-90A5-8B480D65FCAD}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoShutterClockImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoShutterClockImpl;
  end;
end;

procedure TCCoShutterClockImpl.ConnectTo(svrIntf: ICoShutterClockImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoShutterClockImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoShutterClockImpl.GetDefaultInterface: ICoShutterClockImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoShutterClockImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoShutterClockImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoShutterClockImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoShutterClockImpl.GetServerProperties: TCCoShutterClockImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoShutterClockImpl.CreateShutterClockImplB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateShutterClockImplB(COM_usbInt);
end;

function TCCoShutterClockImpl.getShutterClock: Integer;
begin
  Result := DefaultInterface.getShutterClock;
end;

procedure TCCoShutterClockImpl.setShutterClock(COM_value: Integer);
begin
  DefaultInterface.setShutterClock(COM_value);
end;

function TCCoShutterClockImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoShutterClockImplProperties.Create(AServer: TCCoShutterClockImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoShutterClockImplProperties.GetDefaultInterface: ICoShutterClockImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSimulation.Create: ICoSimulation;
begin
  Result := CreateComObject(CLASS_CCoSimulation) as ICoSimulation;
end;

class function CoCCoSimulation.CreateRemote(const MachineName: string): ICoSimulation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSimulation) as ICoSimulation;
end;

procedure TCCoSimulation.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{62F7E16A-14EA-5878-8011-8769DD9D81C9}';
    IntfIID:   '{CBD7A4D7-F502-5A5A-80E7-8EB77987257B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSimulation.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSimulation;
  end;
end;

procedure TCCoSimulation.ConnectTo(svrIntf: ICoSimulation);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSimulation.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSimulation.GetDefaultInterface: ICoSimulation;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSimulation.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSimulationProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSimulation.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSimulation.GetServerProperties: TCCoSimulationProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSimulation.CreateSimulationB(COM_i: Integer);
begin
  DefaultInterface.CreateSimulationB(COM_i);
end;

procedure TCCoSimulation.openSpectrometer(COM_index: Integer);
begin
  DefaultInterface.openSpectrometer(COM_index);
end;

function TCCoSimulation.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

function TCCoSimulation.getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
begin
  Result := DefaultInterface.getSpectrum(COM_spectrum);
end;

procedure TCCoSimulation.setNumberOfPixels(COM_pixels: Integer; COM_dark: Integer);
begin
  DefaultInterface.setNumberOfPixels(COM_pixels, COM_dark);
end;

procedure TCCoSimulation.setSpectrumType(COM_type: Integer);
begin
  DefaultInterface.setSpectrumType(COM_type);
end;

function TCCoSimulation.getTest(const COM_test: WideString): WideString;
begin
  Result := DefaultInterface.getTest(COM_test);
end;

function TCCoSimulation.getSerialNumber: WideString;
begin
  Result := DefaultInterface.getSerialNumber;
end;

function TCCoSimulation.getFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFirmwareVersion;
end;

procedure TCCoSimulation.setStrobeEnable(COM_strobe: WordBool);
begin
  DefaultInterface.setStrobeEnable(COM_strobe);
end;

procedure TCCoSimulation.setIntegrationTime(COM_intTime: Integer);
begin
  DefaultInterface.setIntegrationTime(COM_intTime);
end;

procedure TCCoSimulation.closeSpectrometer;
begin
  DefaultInterface.closeSpectrometer;
end;

function TCCoSimulation.getInfo(COM_slot: Integer): WideString;
begin
  Result := DefaultInterface.getInfo(COM_slot);
end;

function TCCoSimulation.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoSimulation.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoSimulation.getWavelengths(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_index);
end;

procedure TCCoSimulation.setWavelengths(COM_wl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setWavelengths(COM_wl, COM_index);
end;

function TCCoSimulation.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSimulationProperties.Create(AServer: TCCoSimulation);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSimulationProperties.GetDefaultInterface: ICoSimulation;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSimulationChannel.Create: ICoSimulationChannel;
begin
  Result := CreateComObject(CLASS_CCoSimulationChannel) as ICoSimulationChannel;
end;

class function CoCCoSimulationChannel.CreateRemote(const MachineName: string): ICoSimulationChannel;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSimulationChannel) as ICoSimulationChannel;
end;

procedure TCCoSimulationChannel.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3771844F-DECC-5211-8039-CD3EFB643B4C}';
    IntfIID:   '{52D2C5EB-FCC8-5E52-81F9-9021AF1C8BEB}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSimulationChannel.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSimulationChannel;
  end;
end;

procedure TCCoSimulationChannel.ConnectTo(svrIntf: ICoSimulationChannel);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSimulationChannel.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSimulationChannel.GetDefaultInterface: ICoSimulationChannel;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSimulationChannel.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSimulationChannelProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSimulationChannel.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSimulationChannel.GetServerProperties: TCCoSimulationChannelProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSimulationChannel.CreateSimulationChannelB(const COM_s: ICoSpectrometer; 
                                                         const COM_c: ICoCoefficients; 
                                                         COM_i: Integer);
begin
  DefaultInterface.CreateSimulationChannelB(COM_s, COM_c, COM_i);
end;

procedure TCCoSimulationChannel.getCoefficientsFromSpectrometer;
begin
  DefaultInterface.getCoefficientsFromSpectrometer;
end;

procedure TCCoSimulationChannel.fixNumberOfPixels;
begin
  DefaultInterface.fixNumberOfPixels;
end;

function TCCoSimulationChannel.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSimulationChannelProperties.Create(AServer: TCCoSimulationChannel);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSimulationChannelProperties.GetDefaultInterface: ICoSimulationChannel;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSimulationGUIProvider.Create: ICoSimulationGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoSimulationGUIProvider) as ICoSimulationGUIProvider;
end;

class function CoCCoSimulationGUIProvider.CreateRemote(const MachineName: string): ICoSimulationGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSimulationGUIProvider) as ICoSimulationGUIProvider;
end;

procedure TCCoSimulationGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CB86EF72-9C7D-5073-8127-D3DDC515CAEA}';
    IntfIID:   '{00152669-793A-5EB1-9079-7386D2E1A966}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSimulationGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSimulationGUIProvider;
  end;
end;

procedure TCCoSimulationGUIProvider.ConnectTo(svrIntf: ICoSimulationGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSimulationGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSimulationGUIProvider.GetDefaultInterface: ICoSimulationGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSimulationGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSimulationGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSimulationGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSimulationGUIProvider.GetServerProperties: TCCoSimulationGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSimulationGUIProvider.CreateSimulationGUIProvider;
begin
  DefaultInterface.CreateSimulationGUIProvider;
end;

function TCCoSimulationGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSimulationGUIProviderProperties.Create(AServer: TCCoSimulationGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSimulationGUIProviderProperties.GetDefaultInterface: ICoSimulationGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSimulationImpl.Create: ICoSimulationImpl;
begin
  Result := CreateComObject(CLASS_CCoSimulationImpl) as ICoSimulationImpl;
end;

class function CoCCoSimulationImpl.CreateRemote(const MachineName: string): ICoSimulationImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSimulationImpl) as ICoSimulationImpl;
end;

procedure TCCoSimulationImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{6910288F-9191-5034-8086-DEDD8F114F52}';
    IntfIID:   '{D9BED1D4-F814-509D-90A7-6ED7E35BD7DF}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSimulationImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSimulationImpl;
  end;
end;

procedure TCCoSimulationImpl.ConnectTo(svrIntf: ICoSimulationImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSimulationImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSimulationImpl.GetDefaultInterface: ICoSimulationImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSimulationImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSimulationImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSimulationImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSimulationImpl.GetServerProperties: TCCoSimulationImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSimulationImpl.CreateSimulationImplB(const COM_s: ICoSimulation);
begin
  DefaultInterface.CreateSimulationImplB(COM_s);
end;

procedure TCCoSimulationImpl.setNumberOfPixels(COM_pixels: Integer; COM_dark: Integer);
begin
  DefaultInterface.setNumberOfPixels(COM_pixels, COM_dark);
end;

procedure TCCoSimulationImpl.setSpectrumType(COM_type: Integer);
begin
  DefaultInterface.setSpectrumType(COM_type);
end;

function TCCoSimulationImpl.getNumberOfPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfPixels;
end;

function TCCoSimulationImpl.getNumberOfDarkPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfDarkPixels;
end;

function TCCoSimulationImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSimulationImplProperties.Create(AServer: TCCoSimulationImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSimulationImplProperties.GetDefaultInterface: ICoSimulationImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSimulationProvider.Create: ICoSimulationProvider;
begin
  Result := CreateComObject(CLASS_CCoSimulationProvider) as ICoSimulationProvider;
end;

class function CoCCoSimulationProvider.CreateRemote(const MachineName: string): ICoSimulationProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSimulationProvider) as ICoSimulationProvider;
end;

procedure TCCoSimulationProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3192205D-BAC4-5626-91B4-53288879D297}';
    IntfIID:   '{7BEB43FA-9C11-588D-8091-46E672BB6BC9}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSimulationProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSimulationProvider;
  end;
end;

procedure TCCoSimulationProvider.ConnectTo(svrIntf: ICoSimulationProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSimulationProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSimulationProvider.GetDefaultInterface: ICoSimulationProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSimulationProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSimulationProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSimulationProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSimulationProvider.GetServerProperties: TCCoSimulationProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSimulationProvider.CreateSimulationProvider;
begin
  DefaultInterface.CreateSimulationProvider;
end;

procedure TCCoSimulationProvider.setNumberOfPixels(COM_param0: Integer; COM_param1: Integer);
begin
  DefaultInterface.setNumberOfPixels(COM_param0, COM_param1);
end;

procedure TCCoSimulationProvider.setSpectrumType(COM_param0: Integer);
begin
  DefaultInterface.setSpectrumType(COM_param0);
end;

function TCCoSimulationProvider.getNumberOfPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfPixels;
end;

function TCCoSimulationProvider.getNumberOfDarkPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfDarkPixels;
end;

function TCCoSimulationProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSimulationProviderProperties.Create(AServer: TCCoSimulationProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSimulationProviderProperties.GetDefaultInterface: ICoSimulationProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSingleStrobe.Create: ICoSingleStrobe;
begin
  Result := CreateComObject(CLASS_CCoSingleStrobe) as ICoSingleStrobe;
end;

class function CoCCoSingleStrobe.CreateRemote(const MachineName: string): ICoSingleStrobe;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSingleStrobe) as ICoSingleStrobe;
end;

procedure TCCoSingleStrobe.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5047A797-1114-5F50-80D1-6A3A152739E4}';
    IntfIID:   '{10ACB7B6-A940-5C4D-9067-E7FE66F4CBFC}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSingleStrobe.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSingleStrobe;
  end;
end;

procedure TCCoSingleStrobe.ConnectTo(svrIntf: ICoSingleStrobe);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSingleStrobe.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSingleStrobe.GetDefaultInterface: ICoSingleStrobe;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSingleStrobe.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSingleStrobeProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSingleStrobe.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSingleStrobe.GetServerProperties: TCCoSingleStrobeProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSingleStrobe.CreateSingleStrobe;
begin
  DefaultInterface.CreateSingleStrobe;
end;

function TCCoSingleStrobe.getSingleStrobeHigh: Integer;
begin
  Result := DefaultInterface.getSingleStrobeHigh;
end;

procedure TCCoSingleStrobe.setSingleStrobeHigh(COM_param0: Integer);
begin
  DefaultInterface.setSingleStrobeHigh(COM_param0);
end;

function TCCoSingleStrobe.getSingleStrobeLow: Integer;
begin
  Result := DefaultInterface.getSingleStrobeLow;
end;

procedure TCCoSingleStrobe.setSingleStrobeLow(COM_param0: Integer);
begin
  DefaultInterface.setSingleStrobeLow(COM_param0);
end;

function TCCoSingleStrobe.getSingleStrobeMinimum: Integer;
begin
  Result := DefaultInterface.getSingleStrobeMinimum;
end;

function TCCoSingleStrobe.getSingleStrobeMaximum: Integer;
begin
  Result := DefaultInterface.getSingleStrobeMaximum;
end;

function TCCoSingleStrobe.getSingleStrobeIncrement: Integer;
begin
  Result := DefaultInterface.getSingleStrobeIncrement;
end;

function TCCoSingleStrobe.getSingleStrobeCountsToMicros(COM_param0: Integer): Double;
begin
  Result := DefaultInterface.getSingleStrobeCountsToMicros(COM_param0);
end;

function TCCoSingleStrobe.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSingleStrobeProperties.Create(AServer: TCCoSingleStrobe);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSingleStrobeProperties.GetDefaultInterface: ICoSingleStrobe;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSingleStrobeGUIProvider.Create: ICoSingleStrobeGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoSingleStrobeGUIProvider) as ICoSingleStrobeGUIProvider;
end;

class function CoCCoSingleStrobeGUIProvider.CreateRemote(const MachineName: string): ICoSingleStrobeGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSingleStrobeGUIProvider) as ICoSingleStrobeGUIProvider;
end;

procedure TCCoSingleStrobeGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{ECA21665-9A1B-56B2-8121-465DF76F84F1}';
    IntfIID:   '{4995AAF7-CCD7-5FC6-9005-8C65548592E7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSingleStrobeGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSingleStrobeGUIProvider;
  end;
end;

procedure TCCoSingleStrobeGUIProvider.ConnectTo(svrIntf: ICoSingleStrobeGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSingleStrobeGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSingleStrobeGUIProvider.GetDefaultInterface: ICoSingleStrobeGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSingleStrobeGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSingleStrobeGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSingleStrobeGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSingleStrobeGUIProvider.GetServerProperties: TCCoSingleStrobeGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSingleStrobeGUIProvider.CreateSingleStrobeGUIProvider;
begin
  DefaultInterface.CreateSingleStrobeGUIProvider;
end;

function TCCoSingleStrobeGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSingleStrobeGUIProviderProperties.Create(AServer: TCCoSingleStrobeGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSingleStrobeGUIProviderProperties.GetDefaultInterface: ICoSingleStrobeGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSingleStrobeImpl.Create: ICoSingleStrobeImpl;
begin
  Result := CreateComObject(CLASS_CCoSingleStrobeImpl) as ICoSingleStrobeImpl;
end;

class function CoCCoSingleStrobeImpl.CreateRemote(const MachineName: string): ICoSingleStrobeImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSingleStrobeImpl) as ICoSingleStrobeImpl;
end;

procedure TCCoSingleStrobeImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EB8F5A05-42C5-581D-9121-10DC38A3BFAD}';
    IntfIID:   '{1E307F05-9DFA-595B-81B6-59923DB58E72}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSingleStrobeImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSingleStrobeImpl;
  end;
end;

procedure TCCoSingleStrobeImpl.ConnectTo(svrIntf: ICoSingleStrobeImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSingleStrobeImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSingleStrobeImpl.GetDefaultInterface: ICoSingleStrobeImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSingleStrobeImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSingleStrobeImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSingleStrobeImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSingleStrobeImpl.GetServerProperties: TCCoSingleStrobeImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSingleStrobeImpl.CreateSingleStrobeImplB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateSingleStrobeImplB(COM_usbInt);
end;

function TCCoSingleStrobeImpl.getSingleStrobeHigh: Integer;
begin
  Result := DefaultInterface.getSingleStrobeHigh;
end;

function TCCoSingleStrobeImpl.getSingleStrobeLow: Integer;
begin
  Result := DefaultInterface.getSingleStrobeLow;
end;

procedure TCCoSingleStrobeImpl.setSingleStrobeHigh(COM_value: Integer);
begin
  DefaultInterface.setSingleStrobeHigh(COM_value);
end;

procedure TCCoSingleStrobeImpl.setSingleStrobeLow(COM_value: Integer);
begin
  DefaultInterface.setSingleStrobeLow(COM_value);
end;

function TCCoSingleStrobeImpl.getSingleStrobeCountsToMicros(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.getSingleStrobeCountsToMicros(COM_counts);
end;

function TCCoSingleStrobeImpl.getSingleStrobeIncrement: Integer;
begin
  Result := DefaultInterface.getSingleStrobeIncrement;
end;

function TCCoSingleStrobeImpl.getSingleStrobeMaximum: Integer;
begin
  Result := DefaultInterface.getSingleStrobeMaximum;
end;

function TCCoSingleStrobeImpl.getSingleStrobeMinimum: Integer;
begin
  Result := DefaultInterface.getSingleStrobeMinimum;
end;

procedure TCCoSingleStrobeImpl.masterClockChanged(COM_newValue: Integer);
begin
  DefaultInterface.masterClockChanged(COM_newValue);
end;

function TCCoSingleStrobeImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSingleStrobeImplProperties.Create(AServer: TCCoSingleStrobeImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSingleStrobeImplProperties.GetDefaultInterface: ICoSingleStrobeImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectrumListener.Create: ICoSpectrumListener;
begin
  Result := CreateComObject(CLASS_CCoSpectrumListener) as ICoSpectrumListener;
end;

class function CoCCoSpectrumListener.CreateRemote(const MachineName: string): ICoSpectrumListener;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrumListener) as ICoSpectrumListener;
end;

procedure TCCoSpectrumListener.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4610467B-4F17-53CA-91F0-C709996C5F4B}';
    IntfIID:   '{B97C3247-573E-562A-91B7-208374E8B74D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrumListener.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrumListener;
  end;
end;

procedure TCCoSpectrumListener.ConnectTo(svrIntf: ICoSpectrumListener);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrumListener.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrumListener.GetDefaultInterface: ICoSpectrumListener;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrumListener.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrumListenerProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrumListener.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrumListener.GetServerProperties: TCCoSpectrumListenerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSpectrumListener.CreateSpectrumListener;
begin
  DefaultInterface.CreateSpectrumListener;
end;

procedure TCCoSpectrumListener.newSpectrum(const COM_param0: ICoSpectrum);
begin
  DefaultInterface.newSpectrum(COM_param0);
end;

function TCCoSpectrumListener.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrumListenerProperties.Create(AServer: TCCoSpectrumListener);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrumListenerProperties.GetDefaultInterface: ICoSpectrumListener;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectrumProducer.Create: ICoSpectrumProducer;
begin
  Result := CreateComObject(CLASS_CCoSpectrumProducer) as ICoSpectrumProducer;
end;

class function CoCCoSpectrumProducer.CreateRemote(const MachineName: string): ICoSpectrumProducer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrumProducer) as ICoSpectrumProducer;
end;

procedure TCCoSpectrumProducer.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3FB73E97-716C-512A-8170-64C548BB4FBF}';
    IntfIID:   '{24ECF802-2C5A-5853-918B-940E3A6C80A5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrumProducer.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrumProducer;
  end;
end;

procedure TCCoSpectrumProducer.ConnectTo(svrIntf: ICoSpectrumProducer);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrumProducer.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrumProducer.GetDefaultInterface: ICoSpectrumProducer;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrumProducer.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrumProducerProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrumProducer.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrumProducer.GetServerProperties: TCCoSpectrumProducerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSpectrumProducer.CreateSpectrumProducer;
begin
  DefaultInterface.CreateSpectrumProducer;
end;

procedure TCCoSpectrumProducer.addSpectrumListener(const COM_param0: ICoSpectrumListener);
begin
  DefaultInterface.addSpectrumListener(COM_param0);
end;

procedure TCCoSpectrumProducer.removeSpectrumListener(const COM_param0: ICoSpectrumListener);
begin
  DefaultInterface.removeSpectrumListener(COM_param0);
end;

function TCCoSpectrumProducer.getSpectrum(const COM_param0: ICoSpectrum): ICoSpectrum;
begin
  Result := DefaultInterface.getSpectrum(COM_param0);
end;

function TCCoSpectrumProducer.getNumberOfPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfPixels;
end;

function TCCoSpectrumProducer.getNumberOfDarkPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfDarkPixels;
end;

function TCCoSpectrumProducer.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrumProducerProperties.Create(AServer: TCCoSpectrumProducer);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrumProducerProperties.GetDefaultInterface: ICoSpectrumProducer;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectrumHandler.Create: ICoSpectrumHandler;
begin
  Result := CreateComObject(CLASS_CCoSpectrumHandler) as ICoSpectrumHandler;
end;

class function CoCCoSpectrumHandler.CreateRemote(const MachineName: string): ICoSpectrumHandler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrumHandler) as ICoSpectrumHandler;
end;

procedure TCCoSpectrumHandler.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{96D1FFC7-D689-53AE-8112-ABF91E81894E}';
    IntfIID:   '{04DDEF76-081F-5F81-81B4-9AE8CB2AC482}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrumHandler.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrumHandler;
  end;
end;

procedure TCCoSpectrumHandler.ConnectTo(svrIntf: ICoSpectrumHandler);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrumHandler.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrumHandler.GetDefaultInterface: ICoSpectrumHandler;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrumHandler.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrumHandlerProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrumHandler.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrumHandler.GetServerProperties: TCCoSpectrumHandlerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSpectrumHandler.CreateSpectrumHandler;
begin
  DefaultInterface.CreateSpectrumHandler;
end;

procedure TCCoSpectrumHandler.CreateSpectrumHandlerB(COM_numLightPixels: Integer; 
                                                     COM_numDarkPixels: Integer);
begin
  DefaultInterface.CreateSpectrumHandlerB(COM_numLightPixels, COM_numDarkPixels);
end;

function TCCoSpectrumHandler.getMaximumQueueSize: Integer;
begin
  Result := DefaultInterface.getMaximumQueueSize;
end;

procedure TCCoSpectrumHandler.setMaximumQueueSize(COM_maximumQueueSize: Integer);
begin
  DefaultInterface.setMaximumQueueSize(COM_maximumQueueSize);
end;

function TCCoSpectrumHandler.getProcessingMode: Integer;
begin
  Result := DefaultInterface.getProcessingMode;
end;

procedure TCCoSpectrumHandler.setProcessingMode(COM_processingMode: Integer);
begin
  DefaultInterface.setProcessingMode(COM_processingMode);
end;

procedure TCCoSpectrumHandler.newSpectrum(const COM_spectrum: ICoSpectrum);
begin
  DefaultInterface.newSpectrum(COM_spectrum);
end;

procedure TCCoSpectrumHandler.setSource(const COM_producer: ICoSpectrumProducer);
begin
  DefaultInterface.setSource(COM_producer);
end;

procedure TCCoSpectrumHandler.removeSource(const COM_producer: ICoSpectrumProducer);
begin
  DefaultInterface.removeSource(COM_producer);
end;

function TCCoSpectrumHandler.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrumHandlerProperties.Create(AServer: TCCoSpectrumHandler);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrumHandlerProperties.GetDefaultInterface: ICoSpectrumHandler;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectralProcessor.Create: ICoSpectralProcessor;
begin
  Result := CreateComObject(CLASS_CCoSpectralProcessor) as ICoSpectralProcessor;
end;

class function CoCCoSpectralProcessor.CreateRemote(const MachineName: string): ICoSpectralProcessor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectralProcessor) as ICoSpectralProcessor;
end;

procedure TCCoSpectralProcessor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CF3B2D28-F662-5680-9062-1DA876CE9ADC}';
    IntfIID:   '{0323DA99-3493-586A-80F3-60A320B96758}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectralProcessor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectralProcessor;
  end;
end;

procedure TCCoSpectralProcessor.ConnectTo(svrIntf: ICoSpectralProcessor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectralProcessor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectralProcessor.GetDefaultInterface: ICoSpectralProcessor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectralProcessor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectralProcessorProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectralProcessor.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectralProcessor.GetServerProperties: TCCoSpectralProcessorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSpectralProcessor.CreateSpectralProcessorB(const COM_channel: ICoSpectrometerChannel; 
                                                         COM_daemon: WordBool);
begin
  DefaultInterface.CreateSpectralProcessorB(COM_channel, COM_daemon);
end;

procedure TCCoSpectralProcessor.destroyProcessor;
begin
  DefaultInterface.destroyProcessor;
end;

function TCCoSpectralProcessor.getOmniSpectrum: ICoOmniSpectrum;
begin
  Result := DefaultInterface.getOmniSpectrum;
end;

function TCCoSpectralProcessor.getSpectrum(const COM_spectrum: ICoSpectrum): ICoSpectrum;
begin
  Result := DefaultInterface.getSpectrum(COM_spectrum);
end;

procedure TCCoSpectralProcessor.processSpectrum(const COM_spectrum: ICoSpectrum);
begin
  DefaultInterface.processSpectrum(COM_spectrum);
end;

procedure TCCoSpectralProcessor.stopAveraging;
begin
  DefaultInterface.stopAveraging;
end;

procedure TCCoSpectralProcessor.boxcarAverage(const COM_spectrum: ICoSpectrum);
begin
  DefaultInterface.boxcarAverage(COM_spectrum);
end;

procedure TCCoSpectralProcessor.correctForStrayLight(const COM_spectrum: ICoSpectrum);
begin
  DefaultInterface.correctForStrayLight(COM_spectrum);
end;

procedure TCCoSpectralProcessor.correctForElectricalDarkSignal(const COM_spectrum: ICoSpectrum);
begin
  DefaultInterface.correctForElectricalDarkSignal(COM_spectrum);
end;

procedure TCCoSpectralProcessor.correctForDetectorNonlinearity(const COM_spectrum: ICoSpectrum);
begin
  DefaultInterface.correctForDetectorNonlinearity(COM_spectrum);
end;

function TCCoSpectralProcessor.getScansToAverage: Integer;
begin
  Result := DefaultInterface.getScansToAverage;
end;

procedure TCCoSpectralProcessor.setScansToAverage(COM_scansToAverage: Integer);
begin
  DefaultInterface.setScansToAverage(COM_scansToAverage);
end;

function TCCoSpectralProcessor.isCorrectForDetectorNonlinearity: WordBool;
begin
  Result := DefaultInterface.isCorrectForDetectorNonlinearity;
end;

procedure TCCoSpectralProcessor.setCorrectForDetectorNonlinearity(COM_correctForDetectorNonlinearity: WordBool);
begin
  DefaultInterface.setCorrectForDetectorNonlinearity(COM_correctForDetectorNonlinearity);
end;

function TCCoSpectralProcessor.getSmoothingWindowSize: Integer;
begin
  Result := DefaultInterface.getSmoothingWindowSize;
end;

procedure TCCoSpectralProcessor.setSmoothingWindowSize(COM_newSmoothingWindowSize: Integer);
begin
  DefaultInterface.setSmoothingWindowSize(COM_newSmoothingWindowSize);
end;

function TCCoSpectralProcessor.isCorrectForElectricalDark: WordBool;
begin
  Result := DefaultInterface.isCorrectForElectricalDark;
end;

procedure TCCoSpectralProcessor.setCorrectForElectricalDark(COM_correctForElectricalDark: WordBool);
begin
  DefaultInterface.setCorrectForElectricalDark(COM_correctForElectricalDark);
end;

function TCCoSpectralProcessor.isCorrectForStrayLight: WordBool;
begin
  Result := DefaultInterface.isCorrectForStrayLight;
end;

procedure TCCoSpectralProcessor.setCorrectForStrayLight(COM_correctForStrayLight: WordBool);
begin
  DefaultInterface.setCorrectForStrayLight(COM_correctForStrayLight);
end;

function TCCoSpectralProcessor.getSmoothingWindowWeights: OleVariant;
begin
  Result := DefaultInterface.getSmoothingWindowWeights;
end;

procedure TCCoSpectralProcessor.setSmoothingWindowWeights(COM_smoothingWindowWeights: OleVariant);
begin
  DefaultInterface.setSmoothingWindowWeights(COM_smoothingWindowWeights);
end;

procedure TCCoSpectralProcessor.setDarkSpectrum(const COM_dark: ICoOmniSpectrum);
begin
  DefaultInterface.setDarkSpectrum(COM_dark);
end;

function TCCoSpectralProcessor.getExternalTriggerMode: Integer;
begin
  Result := DefaultInterface.getExternalTriggerMode;
end;

procedure TCCoSpectralProcessor.setExternalTriggerMode(COM_mode: Integer);
begin
  DefaultInterface.setExternalTriggerMode(COM_mode);
end;

function TCCoSpectralProcessor.getIntegrationTime: Integer;
begin
  Result := DefaultInterface.getIntegrationTime;
end;

procedure TCCoSpectralProcessor.setIntegrationTime(COM_newIntegrationTime: Integer);
begin
  DefaultInterface.setIntegrationTime(COM_newIntegrationTime);
end;

function TCCoSpectralProcessor.getStrobeEnable: WordBool;
begin
  Result := DefaultInterface.getStrobeEnable;
end;

function TCCoSpectralProcessor.getAutoToggleStrobeLampEnable: WordBool;
begin
  Result := DefaultInterface.getAutoToggleStrobeLampEnable;
end;

procedure TCCoSpectralProcessor.setStrobeEnable(COM_enable: WordBool);
begin
  DefaultInterface.setStrobeEnable(COM_enable);
end;

procedure TCCoSpectralProcessor.setAutoToggleStrobeLampEnable(COM_enable: WordBool);
begin
  DefaultInterface.setAutoToggleStrobeLampEnable(COM_enable);
end;

function TCCoSpectralProcessor.getStrobeDelay: Integer;
begin
  Result := DefaultInterface.getStrobeDelay;
end;

procedure TCCoSpectralProcessor.setStrobeDelay(COM_newDelay: Integer);
begin
  DefaultInterface.setStrobeDelay(COM_newDelay);
end;

procedure TCCoSpectralProcessor.setParameters(COM_sta: Integer; COM_ced: WordBool; 
                                              COM_cnl: WordBool; COM_csl: WordBool; 
                                              COM_bcw: Integer; COM_it: Integer; COM_se: WordBool; 
                                              COM_sd: Integer; COM_etm: Integer; COM_atl: WordBool);
begin
  DefaultInterface.setParameters(COM_sta, COM_ced, COM_cnl, COM_csl, COM_bcw, COM_it, COM_se, 
                                 COM_sd, COM_etm, COM_atl);
end;

function TCCoSpectralProcessor.getSpectrometerChannel: ICoSpectrometerChannel;
begin
  Result := DefaultInterface.getSpectrometerChannel;
end;

procedure TCCoSpectralProcessor.attachSource(const COM_source: ICoSpectrumHandler);
begin
  DefaultInterface.attachSource(COM_source);
end;

procedure TCCoSpectralProcessor.detachSource;
begin
  DefaultInterface.detachSource;
end;

procedure TCCoSpectralProcessor.stop;
begin
  DefaultInterface.stop;
end;

procedure TCCoSpectralProcessor.finalize;
begin
  DefaultInterface.finalize;
end;

function TCCoSpectralProcessor.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectralProcessorProperties.Create(AServer: TCCoSpectralProcessor);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectralProcessorProperties.GetDefaultInterface: ICoSpectralProcessor;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectrometerAssembly.Create: ICoSpectrometerAssembly;
begin
  Result := CreateComObject(CLASS_CCoSpectrometerAssembly) as ICoSpectrometerAssembly;
end;

class function CoCCoSpectrometerAssembly.CreateRemote(const MachineName: string): ICoSpectrometerAssembly;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrometerAssembly) as ICoSpectrometerAssembly;
end;

procedure TCCoSpectrometerAssembly.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D5D1CCE6-4810-5345-8032-AB55BC3F8C78}';
    IntfIID:   '{CF0B23E7-EDAC-51F2-80FB-815DF8344C51}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrometerAssembly.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrometerAssembly;
  end;
end;

procedure TCCoSpectrometerAssembly.ConnectTo(svrIntf: ICoSpectrometerAssembly);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrometerAssembly.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrometerAssembly.GetDefaultInterface: ICoSpectrometerAssembly;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrometerAssembly.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrometerAssemblyProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrometerAssembly.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrometerAssembly.GetServerProperties: TCCoSpectrometerAssemblyProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSpectrometerAssembly.CreateSpectrometerAssemblyB(const COM_spectrometerObject: ICoSpectrometer);
begin
  DefaultInterface.CreateSpectrometerAssemblyB(COM_spectrometerObject);
end;

procedure TCCoSpectrometerAssembly.closeSpectrometer;
begin
  DefaultInterface.closeSpectrometer;
end;

function TCCoSpectrometerAssembly.getChannel(COM_channelIndex: Integer): ICoSpectrometerChannel;
begin
  Result := DefaultInterface.getChannel(COM_channelIndex);
end;

function TCCoSpectrometerAssembly.getSpectralProcessor(COM_channelIndex: Integer): ICoSpectralProcessor;
begin
  Result := DefaultInterface.getSpectralProcessor(COM_channelIndex);
end;

function TCCoSpectrometerAssembly.getSpectrometer: ICoSpectrometer;
begin
  Result := DefaultInterface.getSpectrometer;
end;

procedure TCCoSpectrometerAssembly.setSaturationState(COM_channelIndex: Integer; 
                                                      COM_saturationFlag: WordBool);
begin
  DefaultInterface.setSaturationState(COM_channelIndex, COM_saturationFlag);
end;

function TCCoSpectrometerAssembly.getSaturationState(COM_channelIndex: Integer): WordBool;
begin
  Result := DefaultInterface.getSaturationState(COM_channelIndex);
end;

function TCCoSpectrometerAssembly.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrometerAssemblyProperties.Create(AServer: TCCoSpectrometerAssembly);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrometerAssemblyProperties.GetDefaultInterface: ICoSpectrometerAssembly;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectrometerCollection.Create: ICoSpectrometerCollection;
begin
  Result := CreateComObject(CLASS_CCoSpectrometerCollection) as ICoSpectrometerCollection;
end;

class function CoCCoSpectrometerCollection.CreateRemote(const MachineName: string): ICoSpectrometerCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrometerCollection) as ICoSpectrometerCollection;
end;

procedure TCCoSpectrometerCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E7ADAFA3-476D-59B6-8163-5672FDE1BD6C}';
    IntfIID:   '{AD7728B2-6007-5641-903C-498F3795A197}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrometerCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrometerCollection;
  end;
end;

procedure TCCoSpectrometerCollection.ConnectTo(svrIntf: ICoSpectrometerCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrometerCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrometerCollection.GetDefaultInterface: ICoSpectrometerCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrometerCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrometerCollectionProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrometerCollection.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrometerCollection.GetServerProperties: TCCoSpectrometerCollectionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCCoSpectrometerCollection.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TCCoSpectrometerCollection.Item(index: OleVariant): OleVariant;
begin
  Result := DefaultInterface.Item(index);
end;

procedure TCCoSpectrometerCollection.Add(const pnewSpectrometerCollection: IDispatch);
begin
  DefaultInterface.Add(pnewSpectrometerCollection);
end;

procedure TCCoSpectrometerCollection.Remove(index: Integer);
begin
  DefaultInterface.Remove(index);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrometerCollectionProperties.Create(AServer: TCCoSpectrometerCollection);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrometerCollectionProperties.GetDefaultInterface: ICoSpectrometerCollection;
begin
  Result := FServer.DefaultInterface;
end;

function TCCoSpectrometerCollectionProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoCCoSpectrometerFactory.Create: ICoSpectrometerFactory;
begin
  Result := CreateComObject(CLASS_CCoSpectrometerFactory) as ICoSpectrometerFactory;
end;

class function CoCCoSpectrometerFactory.CreateRemote(const MachineName: string): ICoSpectrometerFactory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrometerFactory) as ICoSpectrometerFactory;
end;

procedure TCCoSpectrometerFactory.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{10495366-11B4-53D5-812B-902220E57E69}';
    IntfIID:   '{DA28657B-1ED3-5C17-8102-9796729D8D0E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrometerFactory.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrometerFactory;
  end;
end;

procedure TCCoSpectrometerFactory.ConnectTo(svrIntf: ICoSpectrometerFactory);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrometerFactory.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrometerFactory.GetDefaultInterface: ICoSpectrometerFactory;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrometerFactory.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrometerFactoryProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrometerFactory.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrometerFactory.GetServerProperties: TCCoSpectrometerFactoryProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSpectrometerFactory.CreateSpectrometerFactory;
begin
  DefaultInterface.CreateSpectrometerFactory;
end;

procedure TCCoSpectrometerFactory.closeSpectrometer(const COM_spectrometer: ICoSpectrometer);
begin
  DefaultInterface.closeSpectrometer(COM_spectrometer);
end;

procedure TCCoSpectrometerFactory.closeSpectrometer_NOT_USED_YET(const COM_spectrometer: ICoSpectrometer);
begin
  DefaultInterface.closeSpectrometer_NOT_USED_YET(COM_spectrometer);
end;

function TCCoSpectrometerFactory.getAllAttachedSpectrometers_NOT_USED_YET: ICoSpectrometerCollection;
begin
  Result := DefaultInterface.getAllAttachedSpectrometers_NOT_USED_YET;
end;

function TCCoSpectrometerFactory.getAllSpectrometers: ICoSpectrometerCollection;
begin
  Result := DefaultInterface.getAllSpectrometers;
end;

function TCCoSpectrometerFactory.getAllUnclaimedSpectrometers: ICoSpectrometerCollection;
begin
  Result := DefaultInterface.getAllUnclaimedSpectrometers;
end;

function TCCoSpectrometerFactory.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrometerFactoryProperties.Create(AServer: TCCoSpectrometerFactory);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrometerFactoryProperties.GetDefaultInterface: ICoSpectrometerFactory;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectrometerPlugInInfo.Create: ICoSpectrometerPlugInInfo;
begin
  Result := CreateComObject(CLASS_CCoSpectrometerPlugInInfo) as ICoSpectrometerPlugInInfo;
end;

class function CoCCoSpectrometerPlugInInfo.CreateRemote(const MachineName: string): ICoSpectrometerPlugInInfo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrometerPlugInInfo) as ICoSpectrometerPlugInInfo;
end;

procedure TCCoSpectrometerPlugInInfo.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C00F7D85-F1F1-5AAE-9073-A322C56B72A0}';
    IntfIID:   '{8B65395B-1EF2-5B94-8132-519F353C25C4}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrometerPlugInInfo.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrometerPlugInInfo;
  end;
end;

procedure TCCoSpectrometerPlugInInfo.ConnectTo(svrIntf: ICoSpectrometerPlugInInfo);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrometerPlugInInfo.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrometerPlugInInfo.GetDefaultInterface: ICoSpectrometerPlugInInfo;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrometerPlugInInfo.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrometerPlugInInfoProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrometerPlugInInfo.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrometerPlugInInfo.GetServerProperties: TCCoSpectrometerPlugInInfoProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSpectrometerPlugInInfo.CreateSpectrometerPlugInInfo;
begin
  DefaultInterface.CreateSpectrometerPlugInInfo;
end;

function TCCoSpectrometerPlugInInfo.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoSpectrometerPlugInInfo.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrometerPlugInInfoProperties.Create(AServer: TCCoSpectrometerPlugInInfo);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrometerPlugInInfoProperties.GetDefaultInterface: ICoSpectrometerPlugInInfo;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectrumConsumer.Create: ICoSpectrumConsumer;
begin
  Result := CreateComObject(CLASS_CCoSpectrumConsumer) as ICoSpectrumConsumer;
end;

class function CoCCoSpectrumConsumer.CreateRemote(const MachineName: string): ICoSpectrumConsumer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrumConsumer) as ICoSpectrumConsumer;
end;

procedure TCCoSpectrumConsumer.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E558D82D-4986-5CAF-91DF-1C268E92C7FA}';
    IntfIID:   '{39414217-CE28-5B82-8154-F2A285F55F12}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrumConsumer.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrumConsumer;
  end;
end;

procedure TCCoSpectrumConsumer.ConnectTo(svrIntf: ICoSpectrumConsumer);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrumConsumer.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrumConsumer.GetDefaultInterface: ICoSpectrumConsumer;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrumConsumer.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrumConsumerProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrumConsumer.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrumConsumer.GetServerProperties: TCCoSpectrumConsumerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSpectrumConsumer.CreateSpectrumConsumer;
begin
  DefaultInterface.CreateSpectrumConsumer;
end;

procedure TCCoSpectrumConsumer.setSource(const COM_param0: ICoSpectrumProducer);
begin
  DefaultInterface.setSource(COM_param0);
end;

function TCCoSpectrumConsumer.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrumConsumerProperties.Create(AServer: TCCoSpectrumConsumer);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrumConsumerProperties.GetDefaultInterface: ICoSpectrumConsumer;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoSpectrumProducerBase.Create: ICoSpectrumProducerBase;
begin
  Result := CreateComObject(CLASS_CCoSpectrumProducerBase) as ICoSpectrumProducerBase;
end;

class function CoCCoSpectrumProducerBase.CreateRemote(const MachineName: string): ICoSpectrumProducerBase;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSpectrumProducerBase) as ICoSpectrumProducerBase;
end;

procedure TCCoSpectrumProducerBase.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{FC02C308-FD9F-56DE-815D-A8E57C0C23DC}';
    IntfIID:   '{61BB1A46-1DD7-5B8E-8039-ECE041C528BF}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSpectrumProducerBase.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSpectrumProducerBase;
  end;
end;

procedure TCCoSpectrumProducerBase.ConnectTo(svrIntf: ICoSpectrumProducerBase);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSpectrumProducerBase.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSpectrumProducerBase.GetDefaultInterface: ICoSpectrumProducerBase;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSpectrumProducerBase.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSpectrumProducerBaseProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSpectrumProducerBase.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSpectrumProducerBase.GetServerProperties: TCCoSpectrumProducerBaseProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSpectrumProducerBase.CreateSpectrumProducerBase;
begin
  DefaultInterface.CreateSpectrumProducerBase;
end;

procedure TCCoSpectrumProducerBase.CreateSpectrumProducerBaseB(COM_numPixels: Integer; 
                                                               COM_numDarkPixels: Integer);
begin
  DefaultInterface.CreateSpectrumProducerBaseB(COM_numPixels, COM_numDarkPixels);
end;

procedure TCCoSpectrumProducerBase.addSpectrumListener(const COM_listener: ICoSpectrumListener);
begin
  DefaultInterface.addSpectrumListener(COM_listener);
end;

procedure TCCoSpectrumProducerBase.removeSpectrumListener(const COM_listener: ICoSpectrumListener);
begin
  DefaultInterface.removeSpectrumListener(COM_listener);
end;

function TCCoSpectrumProducerBase.getUnfilledSpectrum: ICoSpectrum;
begin
  Result := DefaultInterface.getUnfilledSpectrum;
end;

function TCCoSpectrumProducerBase.getUnfilledSpectrumB(COM_pixels: Integer; COM_dark: Integer): ICoSpectrum;
begin
  Result := DefaultInterface.getUnfilledSpectrumB(COM_pixels, COM_dark);
end;

function TCCoSpectrumProducerBase.getNumberOfPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfPixels;
end;

function TCCoSpectrumProducerBase.getNumberOfDarkPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfDarkPixels;
end;

function TCCoSpectrumProducerBase.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSpectrumProducerBaseProperties.Create(AServer: TCCoSpectrumProducerBase);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSpectrumProducerBaseProperties.GetDefaultInterface: ICoSpectrumProducerBase;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoStatus.Create: ICoStatus;
begin
  Result := CreateComObject(CLASS_CCoStatus) as ICoStatus;
end;

class function CoCCoStatus.CreateRemote(const MachineName: string): ICoStatus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoStatus) as ICoStatus;
end;

procedure TCCoStatus.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A8E9AE2A-68C0-531E-8101-7033B6AC6F74}';
    IntfIID:   '{1D370D9D-55D2-590B-81BF-B6FB49ECBF97}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoStatus.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoStatus;
  end;
end;

procedure TCCoStatus.ConnectTo(svrIntf: ICoStatus);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoStatus.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoStatus.GetDefaultInterface: ICoStatus;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoStatus.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoStatusProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoStatus.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoStatus.GetServerProperties: TCCoStatusProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoStatus.CreateStatus;
begin
  DefaultInterface.CreateStatus;
end;

function TCCoStatus.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoStatusProperties.Create(AServer: TCCoStatus);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoStatusProperties.GetDefaultInterface: ICoStatus;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoStatusGUIProvider.Create: ICoStatusGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoStatusGUIProvider) as ICoStatusGUIProvider;
end;

class function CoCCoStatusGUIProvider.CreateRemote(const MachineName: string): ICoStatusGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoStatusGUIProvider) as ICoStatusGUIProvider;
end;

procedure TCCoStatusGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5B418E22-D47E-50B8-8062-3F609AA0BCFF}';
    IntfIID:   '{8923A441-5E81-5A8F-90CC-F03191FAB1DE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoStatusGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoStatusGUIProvider;
  end;
end;

procedure TCCoStatusGUIProvider.ConnectTo(svrIntf: ICoStatusGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoStatusGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoStatusGUIProvider.GetDefaultInterface: ICoStatusGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoStatusGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoStatusGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoStatusGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoStatusGUIProvider.GetServerProperties: TCCoStatusGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoStatusGUIProvider.CreateStatusGUIProvider;
begin
  DefaultInterface.CreateStatusGUIProvider;
end;

function TCCoStatusGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoStatusGUIProviderProperties.Create(AServer: TCCoStatusGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoStatusGUIProviderProperties.GetDefaultInterface: ICoStatusGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoStatusImpl.Create: ICoStatusImpl;
begin
  Result := CreateComObject(CLASS_CCoStatusImpl) as ICoStatusImpl;
end;

class function CoCCoStatusImpl.CreateRemote(const MachineName: string): ICoStatusImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoStatusImpl) as ICoStatusImpl;
end;

procedure TCCoStatusImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{D6B2BB30-3D7F-5845-912F-67788B545F69}';
    IntfIID:   '{E3A61053-AACB-524F-8116-8B7C28700A97}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoStatusImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoStatusImpl;
  end;
end;

procedure TCCoStatusImpl.ConnectTo(svrIntf: ICoStatusImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoStatusImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoStatusImpl.GetDefaultInterface: ICoStatusImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoStatusImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoStatusImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoStatusImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoStatusImpl.GetServerProperties: TCCoStatusImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoStatusImpl.CreateStatusImpl;
begin
  DefaultInterface.CreateStatusImpl;
end;

function TCCoStatusImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoStatusImplProperties.Create(AServer: TCCoStatusImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoStatusImplProperties.GetDefaultInterface: ICoStatusImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoStatusProvider.Create: ICoStatusProvider;
begin
  Result := CreateComObject(CLASS_CCoStatusProvider) as ICoStatusProvider;
end;

class function CoCCoStatusProvider.CreateRemote(const MachineName: string): ICoStatusProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoStatusProvider) as ICoStatusProvider;
end;

procedure TCCoStatusProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{03C3762A-DD09-537C-900A-5DC8C80F5349}';
    IntfIID:   '{AA9C37C9-4D0E-57F8-9181-9A03E4FA33F7}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoStatusProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoStatusProvider;
  end;
end;

procedure TCCoStatusProvider.ConnectTo(svrIntf: ICoStatusProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoStatusProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoStatusProvider.GetDefaultInterface: ICoStatusProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoStatusProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoStatusProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoStatusProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoStatusProvider.GetServerProperties: TCCoStatusProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoStatusProvider.CreateStatusProvider;
begin
  DefaultInterface.CreateStatusProvider;
end;

function TCCoStatusProvider.getStatus: ICoSpectrometerStatus;
begin
  Result := DefaultInterface.getStatus;
end;

function TCCoStatusProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoStatusProviderProperties.Create(AServer: TCCoStatusProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoStatusProviderProperties.GetDefaultInterface: ICoStatusProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoStopSpectrum.Create: ICoStopSpectrum;
begin
  Result := CreateComObject(CLASS_CCoStopSpectrum) as ICoStopSpectrum;
end;

class function CoCCoStopSpectrum.CreateRemote(const MachineName: string): ICoStopSpectrum;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoStopSpectrum) as ICoStopSpectrum;
end;

procedure TCCoStopSpectrum.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3A05567A-EE54-57CF-9131-86A1A5652BD8}';
    IntfIID:   '{B2B8507C-C278-5447-9106-F79F72E07F8F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoStopSpectrum.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoStopSpectrum;
  end;
end;

procedure TCCoStopSpectrum.ConnectTo(svrIntf: ICoStopSpectrum);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoStopSpectrum.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoStopSpectrum.GetDefaultInterface: ICoStopSpectrum;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoStopSpectrum.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoStopSpectrumProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoStopSpectrum.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoStopSpectrum.GetServerProperties: TCCoStopSpectrumProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoStopSpectrum.CreateStopSpectrum;
begin
  DefaultInterface.CreateStopSpectrum;
end;

procedure TCCoStopSpectrum.stopSpectralAcquisition;
begin
  DefaultInterface.stopSpectralAcquisition;
end;

function TCCoStopSpectrum.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoStopSpectrumProperties.Create(AServer: TCCoStopSpectrum);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoStopSpectrumProperties.GetDefaultInterface: ICoStopSpectrum;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoStopSpectrumGUIProvider.Create: ICoStopSpectrumGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoStopSpectrumGUIProvider) as ICoStopSpectrumGUIProvider;
end;

class function CoCCoStopSpectrumGUIProvider.CreateRemote(const MachineName: string): ICoStopSpectrumGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoStopSpectrumGUIProvider) as ICoStopSpectrumGUIProvider;
end;

procedure TCCoStopSpectrumGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{367EC0B9-33A5-5DBA-80AD-CE38A9728C26}';
    IntfIID:   '{CC474DCD-95BA-51CF-91EF-0D59E1491AF8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoStopSpectrumGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoStopSpectrumGUIProvider;
  end;
end;

procedure TCCoStopSpectrumGUIProvider.ConnectTo(svrIntf: ICoStopSpectrumGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoStopSpectrumGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoStopSpectrumGUIProvider.GetDefaultInterface: ICoStopSpectrumGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoStopSpectrumGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoStopSpectrumGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoStopSpectrumGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoStopSpectrumGUIProvider.GetServerProperties: TCCoStopSpectrumGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoStopSpectrumGUIProvider.CreateStopSpectrumGUIProvider;
begin
  DefaultInterface.CreateStopSpectrumGUIProvider;
end;

function TCCoStopSpectrumGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoStopSpectrumGUIProviderProperties.Create(AServer: TCCoStopSpectrumGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoStopSpectrumGUIProviderProperties.GetDefaultInterface: ICoStopSpectrumGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoStopSpectrumImpl.Create: ICoStopSpectrumImpl;
begin
  Result := CreateComObject(CLASS_CCoStopSpectrumImpl) as ICoStopSpectrumImpl;
end;

class function CoCCoStopSpectrumImpl.CreateRemote(const MachineName: string): ICoStopSpectrumImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoStopSpectrumImpl) as ICoStopSpectrumImpl;
end;

procedure TCCoStopSpectrumImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{918A4971-BAAF-51A2-9189-3B2F234A862A}';
    IntfIID:   '{EF27F2D0-BEA3-5AC0-8058-2106F83D81E4}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoStopSpectrumImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoStopSpectrumImpl;
  end;
end;

procedure TCCoStopSpectrumImpl.ConnectTo(svrIntf: ICoStopSpectrumImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoStopSpectrumImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoStopSpectrumImpl.GetDefaultInterface: ICoStopSpectrumImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoStopSpectrumImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoStopSpectrumImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoStopSpectrumImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoStopSpectrumImpl.GetServerProperties: TCCoStopSpectrumImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoStopSpectrumImpl.CreateStopSpectrumImplB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateStopSpectrumImplB(COM_usbInt);
end;

procedure TCCoStopSpectrumImpl.stopSpectralAcquisition;
begin
  DefaultInterface.stopSpectralAcquisition;
end;

function TCCoStopSpectrumImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoStopSpectrumImplProperties.Create(AServer: TCCoStopSpectrumImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoStopSpectrumImplProperties.GetDefaultInterface: ICoStopSpectrumImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoStrayLightCorrection.Create: ICoStrayLightCorrection;
begin
  Result := CreateComObject(CLASS_CCoStrayLightCorrection) as ICoStrayLightCorrection;
end;

class function CoCCoStrayLightCorrection.CreateRemote(const MachineName: string): ICoStrayLightCorrection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoStrayLightCorrection) as ICoStrayLightCorrection;
end;

procedure TCCoStrayLightCorrection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3AA88C3C-2258-5B06-817C-21537FF9AC5C}';
    IntfIID:   '{7A615C60-E197-5912-90F7-630B3D3DB721}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoStrayLightCorrection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoStrayLightCorrection;
  end;
end;

procedure TCCoStrayLightCorrection.ConnectTo(svrIntf: ICoStrayLightCorrection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoStrayLightCorrection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoStrayLightCorrection.GetDefaultInterface: ICoStrayLightCorrection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoStrayLightCorrection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoStrayLightCorrectionProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoStrayLightCorrection.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoStrayLightCorrection.GetServerProperties: TCCoStrayLightCorrectionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoStrayLightCorrection.CreateStrayLightCorrection;
begin
  DefaultInterface.CreateStrayLightCorrection;
end;

function TCCoStrayLightCorrection.readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readStrayLightCorrectionCoefficientFromSpectrometer;
end;

function TCCoStrayLightCorrection.getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getStrayLightCorrectionCoefficient;
end;

function TCCoStrayLightCorrection.getStrayLight(COM_param0: Integer): Double;
begin
  Result := DefaultInterface.getStrayLight(COM_param0);
end;

procedure TCCoStrayLightCorrection.setStrayLight(COM_param0: Double; COM_param1: Integer);
begin
  DefaultInterface.setStrayLight(COM_param0, COM_param1);
end;

function TCCoStrayLightCorrection.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoStrayLightCorrectionProperties.Create(AServer: TCCoStrayLightCorrection);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoStrayLightCorrectionProperties.GetDefaultInterface: ICoStrayLightCorrection;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoStrayLightCorrectionGUIProvider.Create: ICoStrayLightCorrectionGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoStrayLightCorrectionGUIProvider) as ICoStrayLightCorrectionGUIProvider;
end;

class function CoCCoStrayLightCorrectionGUIProvider.CreateRemote(const MachineName: string): ICoStrayLightCorrectionGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoStrayLightCorrectionGUIProvider) as ICoStrayLightCorrectionGUIProvider;
end;

procedure TCCoStrayLightCorrectionGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{23E0A1BF-F82E-589C-80C4-2BE5B7FBF8D0}';
    IntfIID:   '{2895D36A-5645-5E83-9175-EBF93A2ABCB2}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoStrayLightCorrectionGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoStrayLightCorrectionGUIProvider;
  end;
end;

procedure TCCoStrayLightCorrectionGUIProvider.ConnectTo(svrIntf: ICoStrayLightCorrectionGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoStrayLightCorrectionGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoStrayLightCorrectionGUIProvider.GetDefaultInterface: ICoStrayLightCorrectionGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoStrayLightCorrectionGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoStrayLightCorrectionGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoStrayLightCorrectionGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoStrayLightCorrectionGUIProvider.GetServerProperties: TCCoStrayLightCorrectionGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoStrayLightCorrectionGUIProvider.CreateStrayLightCorrectionGUIProvider;
begin
  DefaultInterface.CreateStrayLightCorrectionGUIProvider;
end;

function TCCoStrayLightCorrectionGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoStrayLightCorrectionGUIProviderProperties.Create(AServer: TCCoStrayLightCorrectionGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoStrayLightCorrectionGUIProviderProperties.GetDefaultInterface: ICoStrayLightCorrectionGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoStrayLightCorrectionImpl.Create: ICoStrayLightCorrectionImpl;
begin
  Result := CreateComObject(CLASS_CCoStrayLightCorrectionImpl) as ICoStrayLightCorrectionImpl;
end;

class function CoCCoStrayLightCorrectionImpl.CreateRemote(const MachineName: string): ICoStrayLightCorrectionImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoStrayLightCorrectionImpl) as ICoStrayLightCorrectionImpl;
end;

procedure TCCoStrayLightCorrectionImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9E8760B6-A863-52A4-917F-8F34F7395725}';
    IntfIID:   '{9C9E8CEF-E467-53A2-9096-10A59344C8BE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoStrayLightCorrectionImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoStrayLightCorrectionImpl;
  end;
end;

procedure TCCoStrayLightCorrectionImpl.ConnectTo(svrIntf: ICoStrayLightCorrectionImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoStrayLightCorrectionImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoStrayLightCorrectionImpl.GetDefaultInterface: ICoStrayLightCorrectionImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoStrayLightCorrectionImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoStrayLightCorrectionImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoStrayLightCorrectionImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoStrayLightCorrectionImpl.GetServerProperties: TCCoStrayLightCorrectionImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoStrayLightCorrectionImpl.CreateStrayLightCorrectionImplB(const COM_usbInt: ICoUSBInterface; 
                                                                       const COM_s: ICoSpectrometer);
begin
  DefaultInterface.CreateStrayLightCorrectionImplB(COM_usbInt, COM_s);
end;

function TCCoStrayLightCorrectionImpl.readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readStrayLightCorrectionCoefficientFromSpectrometer;
end;

function TCCoStrayLightCorrectionImpl.getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getStrayLightCorrectionCoefficient;
end;

function TCCoStrayLightCorrectionImpl.getStrayLight(COM_channel: Integer): Double;
begin
  Result := DefaultInterface.getStrayLight(COM_channel);
end;

function TCCoStrayLightCorrectionImpl.getStrayLightSlope(COM_channel: Integer): Double;
begin
  Result := DefaultInterface.getStrayLightSlope(COM_channel);
end;

procedure TCCoStrayLightCorrectionImpl.setStrayLight(COM_sl: Double; COM_channel: Integer);
begin
  DefaultInterface.setStrayLight(COM_sl, COM_channel);
end;

procedure TCCoStrayLightCorrectionImpl.setStrayLightB(COM_intercept: Double; COM_slope: Double; 
                                                      COM_channel: Integer);
begin
  DefaultInterface.setStrayLightB(COM_intercept, COM_slope, COM_channel);
end;

function TCCoStrayLightCorrectionImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoStrayLightCorrectionImplProperties.Create(AServer: TCCoStrayLightCorrectionImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoStrayLightCorrectionImplProperties.GetDefaultInterface: ICoStrayLightCorrectionImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoStringCollection.Create: ICoStringCollection;
begin
  Result := CreateComObject(CLASS_CCoStringCollection) as ICoStringCollection;
end;

class function CoCCoStringCollection.CreateRemote(const MachineName: string): ICoStringCollection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoStringCollection) as ICoStringCollection;
end;

procedure TCCoStringCollection.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{F6A3A2DD-B2AD-5D54-90CB-729BAADEB1BA}';
    IntfIID:   '{25485A5E-462A-58C1-912D-4B0B7DFE31CE}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoStringCollection.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoStringCollection;
  end;
end;

procedure TCCoStringCollection.ConnectTo(svrIntf: ICoStringCollection);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoStringCollection.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoStringCollection.GetDefaultInterface: ICoStringCollection;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoStringCollection.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoStringCollectionProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoStringCollection.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoStringCollection.GetServerProperties: TCCoStringCollectionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

function TCCoStringCollection.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

function TCCoStringCollection.Item(index: OleVariant): OleVariant;
begin
  Result := DefaultInterface.Item(index);
end;

procedure TCCoStringCollection.Add(const pnewStringCollection: IDispatch);
begin
  DefaultInterface.Add(pnewStringCollection);
end;

procedure TCCoStringCollection.Remove(index: Integer);
begin
  DefaultInterface.Remove(index);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoStringCollectionProperties.Create(AServer: TCCoStringCollection);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoStringCollectionProperties.GetDefaultInterface: ICoStringCollection;
begin
  Result := FServer.DefaultInterface;
end;

function TCCoStringCollectionProperties.Get_Count: Integer;
begin
    Result := DefaultInterface.Count;
end;

{$ENDIF}

class function CoCCoSupportStatus.Create: ICoSupportStatus;
begin
  Result := CreateComObject(CLASS_CCoSupportStatus) as ICoSupportStatus;
end;

class function CoCCoSupportStatus.CreateRemote(const MachineName: string): ICoSupportStatus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoSupportStatus) as ICoSupportStatus;
end;

procedure TCCoSupportStatus.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5122094C-5DD8-56D7-908E-2EC75A6B811A}';
    IntfIID:   '{786DCE1D-4279-5409-81A1-7FB92DE8CDA0}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoSupportStatus.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoSupportStatus;
  end;
end;

procedure TCCoSupportStatus.ConnectTo(svrIntf: ICoSupportStatus);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoSupportStatus.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoSupportStatus.GetDefaultInterface: ICoSupportStatus;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoSupportStatus.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoSupportStatusProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoSupportStatus.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoSupportStatus.GetServerProperties: TCCoSupportStatusProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoSupportStatus.CreateSupportStatus;
begin
  DefaultInterface.CreateSupportStatus;
end;

function TCCoSupportStatus.isSupported: WordBool;
begin
  Result := DefaultInterface.isSupported;
end;

procedure TCCoSupportStatus.setSupportedStatus(COM_supportedStatus: WordBool);
begin
  DefaultInterface.setSupportedStatus(COM_supportedStatus);
end;

function TCCoSupportStatus.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoSupportStatusProperties.Create(AServer: TCCoSupportStatus);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoSupportStatusProperties.GetDefaultInterface: ICoSupportStatus;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoThermoElectric.Create: ICoThermoElectric;
begin
  Result := CreateComObject(CLASS_CCoThermoElectric) as ICoThermoElectric;
end;

class function CoCCoThermoElectric.CreateRemote(const MachineName: string): ICoThermoElectric;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoThermoElectric) as ICoThermoElectric;
end;

procedure TCCoThermoElectric.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{59BCB3CA-FBF9-5A5C-802F-E9DCEEE9E8A8}';
    IntfIID:   '{77D0D72C-06B2-5119-81EE-6753F6DD706D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoThermoElectric.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoThermoElectric;
  end;
end;

procedure TCCoThermoElectric.ConnectTo(svrIntf: ICoThermoElectric);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoThermoElectric.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoThermoElectric.GetDefaultInterface: ICoThermoElectric;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoThermoElectric.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoThermoElectricProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoThermoElectric.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoThermoElectric.GetServerProperties: TCCoThermoElectricProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoThermoElectric.CreateThermoElectric;
begin
  DefaultInterface.CreateThermoElectric;
end;

procedure TCCoThermoElectric.setTECEnable(COM_param0: WordBool);
begin
  DefaultInterface.setTECEnable(COM_param0);
end;

procedure TCCoThermoElectric.setFanEnable(COM_param0: WordBool);
begin
  DefaultInterface.setFanEnable(COM_param0);
end;

function TCCoThermoElectric.getDetectorTemperatureCelsius: Double;
begin
  Result := DefaultInterface.getDetectorTemperatureCelsius;
end;

function TCCoThermoElectric.getDetectorTemperatureSetPointCelsius: Double;
begin
  Result := DefaultInterface.getDetectorTemperatureSetPointCelsius;
end;

procedure TCCoThermoElectric.setDetectorSetPointCelsius(COM_param0: Double);
begin
  DefaultInterface.setDetectorSetPointCelsius(COM_param0);
end;

function TCCoThermoElectric.getSetPointMinimumCelsius: Double;
begin
  Result := DefaultInterface.getSetPointMinimumCelsius;
end;

function TCCoThermoElectric.getSetPointMaximumCelsius: Double;
begin
  Result := DefaultInterface.getSetPointMaximumCelsius;
end;

function TCCoThermoElectric.getSetPointIncrementCelsius: Double;
begin
  Result := DefaultInterface.getSetPointIncrementCelsius;
end;

function TCCoThermoElectric.isSaveTECStateEnabled: WordBool;
begin
  Result := DefaultInterface.isSaveTECStateEnabled;
end;

procedure TCCoThermoElectric.saveTECState;
begin
  DefaultInterface.saveTECState;
end;

function TCCoThermoElectric.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoThermoElectricProperties.Create(AServer: TCCoThermoElectric);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoThermoElectricProperties.GetDefaultInterface: ICoThermoElectric;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoThermoElectricGUIProvider.Create: ICoThermoElectricGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoThermoElectricGUIProvider) as ICoThermoElectricGUIProvider;
end;

class function CoCCoThermoElectricGUIProvider.CreateRemote(const MachineName: string): ICoThermoElectricGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoThermoElectricGUIProvider) as ICoThermoElectricGUIProvider;
end;

procedure TCCoThermoElectricGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EFCD8EC2-752E-548B-81FF-3B704F024ED8}';
    IntfIID:   '{D48499F0-2027-59C0-90C6-1BAC72FD252F}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoThermoElectricGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoThermoElectricGUIProvider;
  end;
end;

procedure TCCoThermoElectricGUIProvider.ConnectTo(svrIntf: ICoThermoElectricGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoThermoElectricGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoThermoElectricGUIProvider.GetDefaultInterface: ICoThermoElectricGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoThermoElectricGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoThermoElectricGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoThermoElectricGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoThermoElectricGUIProvider.GetServerProperties: TCCoThermoElectricGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoThermoElectricGUIProvider.CreateThermoElectricGUIProvider;
begin
  DefaultInterface.CreateThermoElectricGUIProvider;
end;

function TCCoThermoElectricGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoThermoElectricGUIProviderProperties.Create(AServer: TCCoThermoElectricGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoThermoElectricGUIProviderProperties.GetDefaultInterface: ICoThermoElectricGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoThermoElectricImpl.Create: ICoThermoElectricImpl;
begin
  Result := CreateComObject(CLASS_CCoThermoElectricImpl) as ICoThermoElectricImpl;
end;

class function CoCCoThermoElectricImpl.CreateRemote(const MachineName: string): ICoThermoElectricImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoThermoElectricImpl) as ICoThermoElectricImpl;
end;

procedure TCCoThermoElectricImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EF95A203-A2E1-584E-8130-D0885F9AA28A}';
    IntfIID:   '{C2DB7893-1F39-5574-91EF-73BD965E46ED}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoThermoElectricImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoThermoElectricImpl;
  end;
end;

procedure TCCoThermoElectricImpl.ConnectTo(svrIntf: ICoThermoElectricImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoThermoElectricImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoThermoElectricImpl.GetDefaultInterface: ICoThermoElectricImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoThermoElectricImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoThermoElectricImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoThermoElectricImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoThermoElectricImpl.GetServerProperties: TCCoThermoElectricImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoThermoElectricImpl.CreateThermoElectricImplB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateThermoElectricImplB(COM_usbInt);
end;

procedure TCCoThermoElectricImpl.setTECEnable(COM_param0: WordBool);
begin
  DefaultInterface.setTECEnable(COM_param0);
end;

procedure TCCoThermoElectricImpl.setFanEnable(COM_param0: WordBool);
begin
  DefaultInterface.setFanEnable(COM_param0);
end;

function TCCoThermoElectricImpl.getDetectorTemperatureCelsius: Double;
begin
  Result := DefaultInterface.getDetectorTemperatureCelsius;
end;

function TCCoThermoElectricImpl.getDetectorTemperatureSetPointCelsius: Double;
begin
  Result := DefaultInterface.getDetectorTemperatureSetPointCelsius;
end;

procedure TCCoThermoElectricImpl.setDetectorSetPointCelsius(COM_param0: Double);
begin
  DefaultInterface.setDetectorSetPointCelsius(COM_param0);
end;

function TCCoThermoElectricImpl.getSetPointMinimumCelsius: Double;
begin
  Result := DefaultInterface.getSetPointMinimumCelsius;
end;

function TCCoThermoElectricImpl.getSetPointMaximumCelsius: Double;
begin
  Result := DefaultInterface.getSetPointMaximumCelsius;
end;

function TCCoThermoElectricImpl.getSetPointIncrementCelsius: Double;
begin
  Result := DefaultInterface.getSetPointIncrementCelsius;
end;

function TCCoThermoElectricImpl.isSaveTECStateEnabled: WordBool;
begin
  Result := DefaultInterface.isSaveTECStateEnabled;
end;

procedure TCCoThermoElectricImpl.saveTECState;
begin
  DefaultInterface.saveTECState;
end;

function TCCoThermoElectricImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoThermoElectricImplProperties.Create(AServer: TCCoThermoElectricImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoThermoElectricImplProperties.GetDefaultInterface: ICoThermoElectricImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoThermoElectricImpl_NIR.Create: ICoThermoElectricImpl_NIR;
begin
  Result := CreateComObject(CLASS_CCoThermoElectricImpl_NIR) as ICoThermoElectricImpl_NIR;
end;

class function CoCCoThermoElectricImpl_NIR.CreateRemote(const MachineName: string): ICoThermoElectricImpl_NIR;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoThermoElectricImpl_NIR) as ICoThermoElectricImpl_NIR;
end;

procedure TCCoThermoElectricImpl_NIR.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{9C4E243F-0835-53B9-8064-96C9311FB314}';
    IntfIID:   '{7868676B-70D4-5E14-8195-C1AE51CC028E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoThermoElectricImpl_NIR.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoThermoElectricImpl_NIR;
  end;
end;

procedure TCCoThermoElectricImpl_NIR.ConnectTo(svrIntf: ICoThermoElectricImpl_NIR);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoThermoElectricImpl_NIR.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoThermoElectricImpl_NIR.GetDefaultInterface: ICoThermoElectricImpl_NIR;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoThermoElectricImpl_NIR.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoThermoElectricImpl_NIRProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoThermoElectricImpl_NIR.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoThermoElectricImpl_NIR.GetServerProperties: TCCoThermoElectricImpl_NIRProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoThermoElectricImpl_NIR.CreateThermoElectricImpl_NIRB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateThermoElectricImpl_NIRB(COM_usbInt);
end;

procedure TCCoThermoElectricImpl_NIR.setFanEnable(COM_enable: WordBool);
begin
  DefaultInterface.setFanEnable(COM_enable);
end;

procedure TCCoThermoElectricImpl_NIR.setTECEnable(COM_enable: WordBool);
begin
  DefaultInterface.setTECEnable(COM_enable);
end;

function TCCoThermoElectricImpl_NIR.getDetectorTemperatureCelsius: Double;
begin
  Result := DefaultInterface.getDetectorTemperatureCelsius;
end;

function TCCoThermoElectricImpl_NIR.getDetectorTemperatureSetPointCelsius: Double;
begin
  Result := DefaultInterface.getDetectorTemperatureSetPointCelsius;
end;

procedure TCCoThermoElectricImpl_NIR.setDetectorSetPointCelsius(COM_tempCelsius: Double);
begin
  DefaultInterface.setDetectorSetPointCelsius(COM_tempCelsius);
end;

function TCCoThermoElectricImpl_NIR.getSetPointMinimumCelsius: Double;
begin
  Result := DefaultInterface.getSetPointMinimumCelsius;
end;

function TCCoThermoElectricImpl_NIR.getSetPointMaximumCelsius: Double;
begin
  Result := DefaultInterface.getSetPointMaximumCelsius;
end;

function TCCoThermoElectricImpl_NIR.getSetPointIncrementCelsius: Double;
begin
  Result := DefaultInterface.getSetPointIncrementCelsius;
end;

function TCCoThermoElectricImpl_NIR.isSaveTECStateEnabled: WordBool;
begin
  Result := DefaultInterface.isSaveTECStateEnabled;
end;

procedure TCCoThermoElectricImpl_NIR.saveTECState;
begin
  DefaultInterface.saveTECState;
end;

function TCCoThermoElectricImpl_NIR.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoThermoElectricImpl_NIRProperties.Create(AServer: TCCoThermoElectricImpl_NIR);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoThermoElectricImpl_NIRProperties.GetDefaultInterface: ICoThermoElectricImpl_NIR;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoThermoElectricImpl_QE65000.Create: ICoThermoElectricImpl_QE65000;
begin
  Result := CreateComObject(CLASS_CCoThermoElectricImpl_QE65000) as ICoThermoElectricImpl_QE65000;
end;

class function CoCCoThermoElectricImpl_QE65000.CreateRemote(const MachineName: string): ICoThermoElectricImpl_QE65000;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoThermoElectricImpl_QE65000) as ICoThermoElectricImpl_QE65000;
end;

procedure TCCoThermoElectricImpl_QE65000.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2108F4F2-BAED-5033-80EA-C5BECCD2FBB7}';
    IntfIID:   '{93A38CC1-D1A1-55F3-8008-880795793245}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoThermoElectricImpl_QE65000.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoThermoElectricImpl_QE65000;
  end;
end;

procedure TCCoThermoElectricImpl_QE65000.ConnectTo(svrIntf: ICoThermoElectricImpl_QE65000);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoThermoElectricImpl_QE65000.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoThermoElectricImpl_QE65000.GetDefaultInterface: ICoThermoElectricImpl_QE65000;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoThermoElectricImpl_QE65000.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoThermoElectricImpl_QE65000Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoThermoElectricImpl_QE65000.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoThermoElectricImpl_QE65000.GetServerProperties: TCCoThermoElectricImpl_QE65000Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoThermoElectricImpl_QE65000.CreateThermoElectricImpl_QE65000B(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateThermoElectricImpl_QE65000B(COM_usbInt);
end;

procedure TCCoThermoElectricImpl_QE65000.setTECEnable(COM_enable: WordBool);
begin
  DefaultInterface.setTECEnable(COM_enable);
end;

procedure TCCoThermoElectricImpl_QE65000.setFanEnable(COM_enable: WordBool);
begin
  DefaultInterface.setFanEnable(COM_enable);
end;

function TCCoThermoElectricImpl_QE65000.getDetectorTemperatureCelsius: Double;
begin
  Result := DefaultInterface.getDetectorTemperatureCelsius;
end;

function TCCoThermoElectricImpl_QE65000.getDetectorTemperatureSetPointCelsius: Double;
begin
  Result := DefaultInterface.getDetectorTemperatureSetPointCelsius;
end;

procedure TCCoThermoElectricImpl_QE65000.setDetectorSetPointCelsius(COM_tempCelsius: Double);
begin
  DefaultInterface.setDetectorSetPointCelsius(COM_tempCelsius);
end;

function TCCoThermoElectricImpl_QE65000.getSetPointMinimumCelsius: Double;
begin
  Result := DefaultInterface.getSetPointMinimumCelsius;
end;

function TCCoThermoElectricImpl_QE65000.getSetPointMaximumCelsius: Double;
begin
  Result := DefaultInterface.getSetPointMaximumCelsius;
end;

function TCCoThermoElectricImpl_QE65000.getSetPointIncrementCelsius: Double;
begin
  Result := DefaultInterface.getSetPointIncrementCelsius;
end;

function TCCoThermoElectricImpl_QE65000.isSaveTECStateEnabled: WordBool;
begin
  Result := DefaultInterface.isSaveTECStateEnabled;
end;

procedure TCCoThermoElectricImpl_QE65000.saveTECState;
begin
  DefaultInterface.saveTECState;
end;

function TCCoThermoElectricImpl_QE65000.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoThermoElectricImpl_QE65000Properties.Create(AServer: TCCoThermoElectricImpl_QE65000);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoThermoElectricImpl_QE65000Properties.GetDefaultInterface: ICoThermoElectricImpl_QE65000;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoThermoElectricShowFanControl.Create: ICoThermoElectricShowFanControl;
begin
  Result := CreateComObject(CLASS_CCoThermoElectricShowFanControl) as ICoThermoElectricShowFanControl;
end;

class function CoCCoThermoElectricShowFanControl.CreateRemote(const MachineName: string): ICoThermoElectricShowFanControl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoThermoElectricShowFanControl) as ICoThermoElectricShowFanControl;
end;

procedure TCCoThermoElectricShowFanControl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0062B2D1-F7CD-5230-806E-93931442B059}';
    IntfIID:   '{928F0FB8-3908-5D50-8123-CDBF23ABBC71}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoThermoElectricShowFanControl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoThermoElectricShowFanControl;
  end;
end;

procedure TCCoThermoElectricShowFanControl.ConnectTo(svrIntf: ICoThermoElectricShowFanControl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoThermoElectricShowFanControl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoThermoElectricShowFanControl.GetDefaultInterface: ICoThermoElectricShowFanControl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoThermoElectricShowFanControl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoThermoElectricShowFanControlProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoThermoElectricShowFanControl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoThermoElectricShowFanControl.GetServerProperties: TCCoThermoElectricShowFanControlProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoThermoElectricShowFanControl.CreateThermoElectricShowFanControl;
begin
  DefaultInterface.CreateThermoElectricShowFanControl;
end;

function TCCoThermoElectricShowFanControl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoThermoElectricShowFanControlProperties.Create(AServer: TCCoThermoElectricShowFanControl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoThermoElectricShowFanControlProperties.GetDefaultInterface: ICoThermoElectricShowFanControl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSB2000Plus.Create: ICoUSB2000Plus;
begin
  Result := CreateComObject(CLASS_CCoUSB2000Plus) as ICoUSB2000Plus;
end;

class function CoCCoUSB2000Plus.CreateRemote(const MachineName: string): ICoUSB2000Plus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSB2000Plus) as ICoUSB2000Plus;
end;

procedure TCCoUSB2000Plus.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7ACADB89-BD37-5C80-8169-33F19D993754}';
    IntfIID:   '{1971D913-20C2-51F7-8080-BD2CE86AEDF8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSB2000Plus.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSB2000Plus;
  end;
end;

procedure TCCoUSB2000Plus.ConnectTo(svrIntf: ICoUSB2000Plus);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSB2000Plus.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSB2000Plus.GetDefaultInterface: ICoUSB2000Plus;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSB2000Plus.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSB2000PlusProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSB2000Plus.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSB2000Plus.GetServerProperties: TCCoUSB2000PlusProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSB2000Plus.CreateUSB2000Plus;
begin
  DefaultInterface.CreateUSB2000Plus;
end;

procedure TCCoUSB2000Plus.CreateUSB2000PlusB(COM_i: Integer);
begin
  DefaultInterface.CreateUSB2000PlusB(COM_i);
end;

procedure TCCoUSB2000Plus.setEndpoints;
begin
  DefaultInterface.setEndpoints;
end;

function TCCoUSB2000Plus.getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getEndpoint(COM_endPoint);
end;

procedure TCCoUSB2000Plus.openSpectrometer(COM_index: Integer);
begin
  DefaultInterface.openSpectrometer(COM_index);
end;

function TCCoUSB2000Plus.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

function TCCoUSB2000Plus.getStatus: ICoSpectrometerStatus;
begin
  Result := DefaultInterface.getStatus;
end;

function TCCoUSB2000Plus.readIntegrationTime: Integer;
begin
  Result := DefaultInterface.readIntegrationTime;
end;

procedure TCCoUSB2000Plus.setStrobeDelay(COM_delay: Integer);
begin
  DefaultInterface.setStrobeDelay(COM_delay);
end;

function TCCoUSB2000Plus.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoUSB2000Plus.getPlugIns: ICoSpectrometerPlugInCollection;
begin
  Result := DefaultInterface.getPlugIns;
end;

function TCCoUSB2000Plus.getNumberOfPlugIns: Integer;
begin
  Result := DefaultInterface.getNumberOfPlugIns;
end;

function TCCoUSB2000Plus.isPlugInDetected(COM_id: Integer): WordBool;
begin
  Result := DefaultInterface.isPlugInDetected(COM_id);
end;

function TCCoUSB2000Plus.initializePlugIns: OleVariant;
begin
  Result := DefaultInterface.initializePlugIns;
end;

procedure TCCoUSB2000Plus.detectPlugIns;
begin
  DefaultInterface.detectPlugIns;
end;

function TCCoUSB2000Plus.setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; 
                                     COM_i2C: OleVariant): Integer;
begin
  Result := DefaultInterface.setI2CBytes(COM_address, COM_numBytes, COM_i2C);
end;

function TCCoUSB2000Plus.getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
begin
  Result := DefaultInterface.getI2CBytes(COM_address, COM_numBytes);
end;

function TCCoUSB2000Plus.getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
begin
  Result := DefaultInterface.getSPIBytes(COM_message, COM_length);
end;

function TCCoUSB2000Plus.getPSOCVersion: WideString;
begin
  Result := DefaultInterface.getPSOCVersion;
end;

function TCCoUSB2000Plus.getFPGAFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFPGAFirmwareVersion;
end;

function TCCoUSB2000Plus.continuousStrobeCountsToMicros(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.continuousStrobeCountsToMicros(COM_counts);
end;

procedure TCCoUSB2000Plus.setContinuousStrobeDelay(COM_delayMicros: Integer);
begin
  DefaultInterface.setContinuousStrobeDelay(COM_delayMicros);
end;

function TCCoUSB2000Plus.getContinuousStrobeDelayMinimum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMinimum;
end;

function TCCoUSB2000Plus.getContinuousStrobeDelayMaximum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMaximum;
end;

function TCCoUSB2000Plus.getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayIncrement(COM_magnitude);
end;

procedure TCCoUSB2000Plus.setAdvancedIntegrationTime(COM_delayMicros: Integer);
begin
  DefaultInterface.setAdvancedIntegrationTime(COM_delayMicros);
end;

function TCCoUSB2000Plus.getIntegrationTimeBaseClock: Integer;
begin
  Result := DefaultInterface.getIntegrationTimeBaseClock;
end;

function TCCoUSB2000Plus.getIntegrationClockTimer: Integer;
begin
  Result := DefaultInterface.getIntegrationClockTimer;
end;

function TCCoUSB2000Plus.getAdvancedIntegrationTimeMinimum: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeMinimum;
end;

function TCCoUSB2000Plus.getAdvancedIntegrationTimeMaximum: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeMaximum;
end;

function TCCoUSB2000Plus.getAdvancedIntegrationTimeIncrement: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeIncrement;
end;

procedure TCCoUSB2000Plus.setExternalTriggerMode(COM_mode: Integer);
begin
  DefaultInterface.setExternalTriggerMode(COM_mode);
end;

function TCCoUSB2000Plus.getExternalTriggerModes: ICoExternalTriggerModeCollection;
begin
  Result := DefaultInterface.getExternalTriggerModes;
end;

procedure TCCoUSB2000Plus.setShutterClock(COM_value: Integer);
begin
  DefaultInterface.setShutterClock(COM_value);
end;

function TCCoUSB2000Plus.getShutterClock: Integer;
begin
  Result := DefaultInterface.getShutterClock;
end;

procedure TCCoUSB2000Plus.setSingleStrobeLow(COM_value: Integer);
begin
  DefaultInterface.setSingleStrobeLow(COM_value);
end;

procedure TCCoUSB2000Plus.setSingleStrobeHigh(COM_value: Integer);
begin
  DefaultInterface.setSingleStrobeHigh(COM_value);
end;

function TCCoUSB2000Plus.getSingleStrobeCountsToMicros(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.getSingleStrobeCountsToMicros(COM_counts);
end;

function TCCoUSB2000Plus.getSingleStrobeLow: Integer;
begin
  Result := DefaultInterface.getSingleStrobeLow;
end;

function TCCoUSB2000Plus.getSingleStrobeHigh: Integer;
begin
  Result := DefaultInterface.getSingleStrobeHigh;
end;

function TCCoUSB2000Plus.getSingleStrobeMinimum: Integer;
begin
  Result := DefaultInterface.getSingleStrobeMinimum;
end;

function TCCoUSB2000Plus.getSingleStrobeMaximum: Integer;
begin
  Result := DefaultInterface.getSingleStrobeMaximum;
end;

function TCCoUSB2000Plus.getSingleStrobeIncrement: Integer;
begin
  Result := DefaultInterface.getSingleStrobeIncrement;
end;

procedure TCCoUSB2000Plus.setDirectionAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setDirectionAllBits(COM_bitSet);
end;

procedure TCCoUSB2000Plus.setMuxAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setMuxAllBits(COM_bitSet);
end;

procedure TCCoUSB2000Plus.setValueAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setValueAllBits(COM_bitSet);
end;

procedure TCCoUSB2000Plus.setDirectionBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setDirectionBitmask(COM_bitmask);
end;

procedure TCCoUSB2000Plus.setMuxBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setMuxBitmask(COM_bitmask);
end;

procedure TCCoUSB2000Plus.setValueBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setValueBitmask(COM_bitmask);
end;

procedure TCCoUSB2000Plus.setDirectionBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setDirectionBit(COM_bit, COM_value);
end;

procedure TCCoUSB2000Plus.setMuxBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setMuxBit(COM_bit, COM_value);
end;

procedure TCCoUSB2000Plus.setValueBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setValueBit(COM_bit, COM_value);
end;

function TCCoUSB2000Plus.getTotalGPIOBits: Integer;
begin
  Result := DefaultInterface.getTotalGPIOBits;
end;

function TCCoUSB2000Plus.getDirectionBits: ICoBitSet;
begin
  Result := DefaultInterface.getDirectionBits;
end;

function TCCoUSB2000Plus.getMuxBits: ICoBitSet;
begin
  Result := DefaultInterface.getMuxBits;
end;

function TCCoUSB2000Plus.getValueBit(COM_bitNumber: Integer): Integer;
begin
  Result := DefaultInterface.getValueBit(COM_bitNumber);
end;

function TCCoUSB2000Plus.getValueBits: ICoBitSet;
begin
  Result := DefaultInterface.getValueBits;
end;

function TCCoUSB2000Plus.getNumberOfPins: Integer;
begin
  Result := DefaultInterface.getNumberOfPins;
end;

function TCCoUSB2000Plus.getBoardTemperatureCelsius: Double;
begin
  Result := DefaultInterface.getBoardTemperatureCelsius;
end;

function TCCoUSB2000Plus.getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
begin
  Result := DefaultInterface.getIrradianceCalibrationFactors(COM_address);
end;

procedure TCCoUSB2000Plus.setIrradianceCalibrationFactors(COM_address: Shortint; 
                                                          COM_data: OleVariant);
begin
  DefaultInterface.setIrradianceCalibrationFactors(COM_address, COM_data);
end;

procedure TCCoUSB2000Plus.setMasterClockDivisor(COM_value: Integer);
begin
  DefaultInterface.setMasterClockDivisor(COM_value);
end;

function TCCoUSB2000Plus.getMasterClockDivisor: Integer;
begin
  Result := DefaultInterface.getMasterClockDivisor;
end;

procedure TCCoUSB2000Plus.setExternalTriggerDelay(COM_counts: Integer);
begin
  DefaultInterface.setExternalTriggerDelay(COM_counts);
end;

function TCCoUSB2000Plus.triggerDelayCountsToMicroseconds(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.triggerDelayCountsToMicroseconds(COM_counts);
end;

function TCCoUSB2000Plus.getExternalTriggerDelayMinimum: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayMinimum;
end;

function TCCoUSB2000Plus.getExternalTriggerDelayMaximum: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayMaximum;
end;

function TCCoUSB2000Plus.getExternalTriggerDelayIncrement: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayIncrement;
end;

function TCCoUSB2000Plus.readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readNonlinearityCoefficientsFromSpectrometer;
end;

function TCCoUSB2000Plus.getNonlinearityCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getNonlinearityCoefficients;
end;

function TCCoUSB2000Plus.getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getNonlinearityCoefficientsSingleChannel(COM_index);
end;

procedure TCCoUSB2000Plus.setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; 
                                                                   COM_index: Integer);
begin
  DefaultInterface.setNonlinearityCoefficientsSingleChannel(COM_nl, COM_index);
end;

function TCCoUSB2000Plus.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoUSB2000Plus.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoUSB2000Plus.getWavelengths(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_index);
end;

procedure TCCoUSB2000Plus.setWavelengths(COM_wl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setWavelengths(COM_wl, COM_index);
end;

function TCCoUSB2000Plus.readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readStrayLightCorrectionCoefficientFromSpectrometer;
end;

function TCCoUSB2000Plus.getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getStrayLightCorrectionCoefficient;
end;

procedure TCCoUSB2000Plus.setStrayLight(COM_strayLight: Double; COM_index: Integer);
begin
  DefaultInterface.setStrayLight(COM_strayLight, COM_index);
end;

function TCCoUSB2000Plus.getStrayLight(COM_index: Integer): Double;
begin
  Result := DefaultInterface.getStrayLight(COM_index);
end;

function TCCoUSB2000Plus.getAutonullingScanStatus: Integer;
begin
  Result := DefaultInterface.getAutonullingScanStatus;
end;

function TCCoUSB2000Plus.getAutonullingScanValue: Integer;
begin
  Result := DefaultInterface.getAutonullingScanValue;
end;

procedure TCCoUSB2000Plus.setAutonullingScanStatus(COM_value: Integer);
begin
  DefaultInterface.setAutonullingScanStatus(COM_value);
end;

procedure TCCoUSB2000Plus.setAutonullingScanValue(COM_value: Integer);
begin
  DefaultInterface.setAutonullingScanValue(COM_value);
end;

function TCCoUSB2000Plus.getAutonullingConfiguration: ICoAutonullingConfiguration;
begin
  Result := DefaultInterface.getAutonullingConfiguration;
end;

procedure TCCoUSB2000Plus.setAutonullingConfiguration(const COM_cfg: ICoAutonullingConfiguration);
begin
  DefaultInterface.setAutonullingConfiguration(COM_cfg);
end;

procedure TCCoUSB2000Plus.writeAutonullingConfigurationToSpectrometer;
begin
  DefaultInterface.writeAutonullingConfigurationToSpectrometer;
end;

function TCCoUSB2000Plus.readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration;
begin
  Result := DefaultInterface.readAutonullingConfigurationFromSpectrometer;
end;

function TCCoUSB2000Plus.isAdvancedVersion: WordBool;
begin
  Result := DefaultInterface.isAdvancedVersion;
end;

procedure TCCoUSB2000Plus.addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.addAcquisitionListener(COM_listener);
end;

procedure TCCoUSB2000Plus.removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.removeAcquisitionListener(COM_listener);
end;

function TCCoUSB2000Plus.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSB2000PlusProperties.Create(AServer: TCCoUSB2000Plus);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSB2000PlusProperties.GetDefaultInterface: ICoUSB2000Plus;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSB2000PlusStatus.Create: ICoUSB2000PlusStatus;
begin
  Result := CreateComObject(CLASS_CCoUSB2000PlusStatus) as ICoUSB2000PlusStatus;
end;

class function CoCCoUSB2000PlusStatus.CreateRemote(const MachineName: string): ICoUSB2000PlusStatus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSB2000PlusStatus) as ICoUSB2000PlusStatus;
end;

procedure TCCoUSB2000PlusStatus.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{BE568CBE-AFF2-528F-9026-A7502CA9084B}';
    IntfIID:   '{CB2E15E7-CBFC-5C4D-807D-00D5318AD5F0}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSB2000PlusStatus.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSB2000PlusStatus;
  end;
end;

procedure TCCoUSB2000PlusStatus.ConnectTo(svrIntf: ICoUSB2000PlusStatus);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSB2000PlusStatus.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSB2000PlusStatus.GetDefaultInterface: ICoUSB2000PlusStatus;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSB2000PlusStatus.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSB2000PlusStatusProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSB2000PlusStatus.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSB2000PlusStatus.GetServerProperties: TCCoUSB2000PlusStatusProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSB2000PlusStatus.CreateUSB2000PlusStatus;
begin
  DefaultInterface.CreateUSB2000PlusStatus;
end;

function TCCoUSB2000PlusStatus.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoUSB2000PlusStatus.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSB2000PlusStatusProperties.Create(AServer: TCCoUSB2000PlusStatus);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSB2000PlusStatusProperties.GetDefaultInterface: ICoUSB2000PlusStatus;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSB325.Create: ICoUSB325;
begin
  Result := CreateComObject(CLASS_CCoUSB325) as ICoUSB325;
end;

class function CoCCoUSB325.CreateRemote(const MachineName: string): ICoUSB325;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSB325) as ICoUSB325;
end;

procedure TCCoUSB325.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{AFCA569C-FA6E-598C-80CE-8E59EF9EBAC7}';
    IntfIID:   '{FD14D082-43F1-5634-800B-4A7141158A56}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSB325.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSB325;
  end;
end;

procedure TCCoUSB325.ConnectTo(svrIntf: ICoUSB325);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSB325.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSB325.GetDefaultInterface: ICoUSB325;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSB325.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSB325Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSB325.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSB325.GetServerProperties: TCCoUSB325Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSB325.CreateUSB325;
begin
  DefaultInterface.CreateUSB325;
end;

procedure TCCoUSB325.CreateUSB325B(COM_i: Integer);
begin
  DefaultInterface.CreateUSB325B(COM_i);
end;

function TCCoUSB325.getNumberOfPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfPixels;
end;

function TCCoUSB325.getNumberOfDarkPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfDarkPixels;
end;

procedure TCCoUSB325.setEndpoints;
begin
  DefaultInterface.setEndpoints;
end;

function TCCoUSB325.getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getEndpoint(COM_endPoint);
end;

procedure TCCoUSB325.openSpectrometer(COM_index: Integer);
begin
  DefaultInterface.openSpectrometer(COM_index);
end;

function TCCoUSB325.getChannels: ICoSpectrometerChannelCollection;
begin
  Result := DefaultInterface.getChannels;
end;

function TCCoUSB325.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

function TCCoUSB325.getStatus: ICoSpectrometerStatus;
begin
  Result := DefaultInterface.getStatus;
end;

function TCCoUSB325.readIntegrationTime: Integer;
begin
  Result := DefaultInterface.readIntegrationTime;
end;

procedure TCCoUSB325.setMasterClock(COM_freq: Integer);
begin
  DefaultInterface.setMasterClock(COM_freq);
end;

function TCCoUSB325.getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
begin
  Result := DefaultInterface.getIrradianceCalibrationFactors(COM_address);
end;

procedure TCCoUSB325.setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant);
begin
  DefaultInterface.setIrradianceCalibrationFactors(COM_address, COM_data);
end;

function TCCoUSB325.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoUSB325.getActualIntegrationTime: Integer;
begin
  Result := DefaultInterface.getActualIntegrationTime;
end;

function TCCoUSB325.getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
begin
  Result := DefaultInterface.getSPIBytes(COM_message, COM_length);
end;

procedure TCCoUSB325.setExternalTriggerMode(COM_mode: Integer);
begin
  DefaultInterface.setExternalTriggerMode(COM_mode);
end;

function TCCoUSB325.getExternalTriggerModes: ICoExternalTriggerModeCollection;
begin
  Result := DefaultInterface.getExternalTriggerModes;
end;

function TCCoUSB325.isPlugInDetected(COM_id: Integer): WordBool;
begin
  Result := DefaultInterface.isPlugInDetected(COM_id);
end;

function TCCoUSB325.getPlugIns: ICoSpectrometerPlugInCollection;
begin
  Result := DefaultInterface.getPlugIns;
end;

function TCCoUSB325.getNumberOfPlugIns: Integer;
begin
  Result := DefaultInterface.getNumberOfPlugIns;
end;

function TCCoUSB325.initializePlugIns: OleVariant;
begin
  Result := DefaultInterface.initializePlugIns;
end;

procedure TCCoUSB325.detectPlugIns;
begin
  DefaultInterface.detectPlugIns;
end;

function TCCoUSB325.readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readNonlinearityCoefficientsFromSpectrometer;
end;

function TCCoUSB325.getNonlinearityCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getNonlinearityCoefficients;
end;

function TCCoUSB325.getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getNonlinearityCoefficientsSingleChannel(COM_index);
end;

procedure TCCoUSB325.setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setNonlinearityCoefficientsSingleChannel(COM_nl, COM_index);
end;

function TCCoUSB325.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoUSB325.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoUSB325.getWavelengths(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_index);
end;

procedure TCCoUSB325.setWavelengths(COM_wl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setWavelengths(COM_wl, COM_index);
end;

function TCCoUSB325.readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readStrayLightCorrectionCoefficientFromSpectrometer;
end;

function TCCoUSB325.getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getStrayLightCorrectionCoefficient;
end;

procedure TCCoUSB325.setStrayLight(COM_strayLight: Double; COM_index: Integer);
begin
  DefaultInterface.setStrayLight(COM_strayLight, COM_index);
end;

function TCCoUSB325.getStrayLight(COM_index: Integer): Double;
begin
  Result := DefaultInterface.getStrayLight(COM_index);
end;

function TCCoUSB325.isAdvancedVersion: WordBool;
begin
  Result := DefaultInterface.isAdvancedVersion;
end;

procedure TCCoUSB325.addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.addAcquisitionListener(COM_listener);
end;

procedure TCCoUSB325.removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.removeAcquisitionListener(COM_listener);
end;

function TCCoUSB325.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSB325Properties.Create(AServer: TCCoUSB325);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSB325Properties.GetDefaultInterface: ICoUSB325;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSB4000.Create: ICoUSB4000;
begin
  Result := CreateComObject(CLASS_CCoUSB4000) as ICoUSB4000;
end;

class function CoCCoUSB4000.CreateRemote(const MachineName: string): ICoUSB4000;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSB4000) as ICoUSB4000;
end;

procedure TCCoUSB4000.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{EC100B9C-9EAF-58F3-91B7-8CE8823AC980}';
    IntfIID:   '{6BFC2AE4-C9B4-59F2-8046-45F44B66425B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSB4000.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSB4000;
  end;
end;

procedure TCCoUSB4000.ConnectTo(svrIntf: ICoUSB4000);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSB4000.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSB4000.GetDefaultInterface: ICoUSB4000;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSB4000.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSB4000Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSB4000.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSB4000.GetServerProperties: TCCoUSB4000Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSB4000.CreateUSB4000;
begin
  DefaultInterface.CreateUSB4000;
end;

procedure TCCoUSB4000.CreateUSB4000B(COM_i: Integer);
begin
  DefaultInterface.CreateUSB4000B(COM_i);
end;

procedure TCCoUSB4000.setEndpoints;
begin
  DefaultInterface.setEndpoints;
end;

function TCCoUSB4000.getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getEndpoint(COM_endPoint);
end;

procedure TCCoUSB4000.openSpectrometer(COM_index: Integer);
begin
  DefaultInterface.openSpectrometer(COM_index);
end;

function TCCoUSB4000.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

procedure TCCoUSB4000.readSpectrum(COM_data: OleVariant);
begin
  DefaultInterface.readSpectrum(COM_data);
end;

procedure TCCoUSB4000.readSpectrumB;
begin
  DefaultInterface.readSpectrumB;
end;

function TCCoUSB4000.getStatus: ICoSpectrometerStatus;
begin
  Result := DefaultInterface.getStatus;
end;

function TCCoUSB4000.readIntegrationTime: Integer;
begin
  Result := DefaultInterface.readIntegrationTime;
end;

procedure TCCoUSB4000.setIntegrationTime(COM_intTime: Integer);
begin
  DefaultInterface.setIntegrationTime(COM_intTime);
end;

function TCCoUSB4000.getGatingModeIntegrationTime: Integer;
begin
  Result := DefaultInterface.getGatingModeIntegrationTime;
end;

procedure TCCoUSB4000.addOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
begin
  DefaultInterface.addOmniDriverDispatchListener(COM_listener);
end;

procedure TCCoUSB4000.removeOmniDriverDispatchListener(const COM_listener: ICoOmniDriverDispatchListener);
begin
  DefaultInterface.removeOmniDriverDispatchListener(COM_listener);
end;

procedure TCCoUSB4000.setStrobeDelay(COM_delay: Integer);
begin
  DefaultInterface.setStrobeDelay(COM_delay);
end;

function TCCoUSB4000.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoUSB4000.getPlugIns: ICoSpectrometerPlugInCollection;
begin
  Result := DefaultInterface.getPlugIns;
end;

function TCCoUSB4000.getNumberOfPlugIns: Integer;
begin
  Result := DefaultInterface.getNumberOfPlugIns;
end;

function TCCoUSB4000.isPlugInDetected(COM_id: Integer): WordBool;
begin
  Result := DefaultInterface.isPlugInDetected(COM_id);
end;

function TCCoUSB4000.initializePlugIns: OleVariant;
begin
  Result := DefaultInterface.initializePlugIns;
end;

procedure TCCoUSB4000.detectPlugIns;
begin
  DefaultInterface.detectPlugIns;
end;

function TCCoUSB4000.setI2CBytes(COM_address: Shortint; COM_numBytes: Shortint; COM_i2C: OleVariant): Integer;
begin
  Result := DefaultInterface.setI2CBytes(COM_address, COM_numBytes, COM_i2C);
end;

function TCCoUSB4000.getI2CBytes(COM_address: Shortint; COM_numBytes: Shortint): OleVariant;
begin
  Result := DefaultInterface.getI2CBytes(COM_address, COM_numBytes);
end;

function TCCoUSB4000.getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
begin
  Result := DefaultInterface.getSPIBytes(COM_message, COM_length);
end;

function TCCoUSB4000.getPSOCVersion: WideString;
begin
  Result := DefaultInterface.getPSOCVersion;
end;

function TCCoUSB4000.getFPGAFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFPGAFirmwareVersion;
end;

function TCCoUSB4000.continuousStrobeCountsToMicros(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.continuousStrobeCountsToMicros(COM_counts);
end;

procedure TCCoUSB4000.setContinuousStrobeDelay(COM_delayMicros: Integer);
begin
  DefaultInterface.setContinuousStrobeDelay(COM_delayMicros);
end;

function TCCoUSB4000.getContinuousStrobeDelayMinimum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMinimum;
end;

function TCCoUSB4000.getContinuousStrobeDelayMaximum: Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayMaximum;
end;

function TCCoUSB4000.getContinuousStrobeDelayIncrement(COM_magnitude: Integer): Integer;
begin
  Result := DefaultInterface.getContinuousStrobeDelayIncrement(COM_magnitude);
end;

procedure TCCoUSB4000.setAdvancedIntegrationTime(COM_delayMicros: Integer);
begin
  DefaultInterface.setAdvancedIntegrationTime(COM_delayMicros);
end;

function TCCoUSB4000.getIntegrationTimeBaseClock: Integer;
begin
  Result := DefaultInterface.getIntegrationTimeBaseClock;
end;

function TCCoUSB4000.getIntegrationClockTimer: Integer;
begin
  Result := DefaultInterface.getIntegrationClockTimer;
end;

function TCCoUSB4000.getAdvancedIntegrationTimeMinimum: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeMinimum;
end;

function TCCoUSB4000.getAdvancedIntegrationTimeMaximum: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeMaximum;
end;

function TCCoUSB4000.getAdvancedIntegrationTimeIncrement: Integer;
begin
  Result := DefaultInterface.getAdvancedIntegrationTimeIncrement;
end;

procedure TCCoUSB4000.setExternalTriggerMode(COM_mode: Integer);
begin
  DefaultInterface.setExternalTriggerMode(COM_mode);
end;

function TCCoUSB4000.getExternalTriggerModes: ICoExternalTriggerModeCollection;
begin
  Result := DefaultInterface.getExternalTriggerModes;
end;

procedure TCCoUSB4000.setShutterClock(COM_value: Integer);
begin
  DefaultInterface.setShutterClock(COM_value);
end;

function TCCoUSB4000.getShutterClock: Integer;
begin
  Result := DefaultInterface.getShutterClock;
end;

procedure TCCoUSB4000.setSingleStrobeLow(COM_value: Integer);
begin
  DefaultInterface.setSingleStrobeLow(COM_value);
end;

procedure TCCoUSB4000.setSingleStrobeHigh(COM_value: Integer);
begin
  DefaultInterface.setSingleStrobeHigh(COM_value);
end;

function TCCoUSB4000.getSingleStrobeCountsToMicros(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.getSingleStrobeCountsToMicros(COM_counts);
end;

function TCCoUSB4000.getSingleStrobeLow: Integer;
begin
  Result := DefaultInterface.getSingleStrobeLow;
end;

function TCCoUSB4000.getSingleStrobeHigh: Integer;
begin
  Result := DefaultInterface.getSingleStrobeHigh;
end;

function TCCoUSB4000.getSingleStrobeMinimum: Integer;
begin
  Result := DefaultInterface.getSingleStrobeMinimum;
end;

function TCCoUSB4000.getSingleStrobeMaximum: Integer;
begin
  Result := DefaultInterface.getSingleStrobeMaximum;
end;

function TCCoUSB4000.getSingleStrobeIncrement: Integer;
begin
  Result := DefaultInterface.getSingleStrobeIncrement;
end;

procedure TCCoUSB4000.setDirectionAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setDirectionAllBits(COM_bitSet);
end;

procedure TCCoUSB4000.setMuxAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setMuxAllBits(COM_bitSet);
end;

procedure TCCoUSB4000.setValueAllBits(const COM_bitSet: ICoBitSet);
begin
  DefaultInterface.setValueAllBits(COM_bitSet);
end;

procedure TCCoUSB4000.setDirectionBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setDirectionBitmask(COM_bitmask);
end;

procedure TCCoUSB4000.setMuxBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setMuxBitmask(COM_bitmask);
end;

procedure TCCoUSB4000.setValueBitmask(COM_bitmask: Smallint);
begin
  DefaultInterface.setValueBitmask(COM_bitmask);
end;

procedure TCCoUSB4000.setDirectionBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setDirectionBit(COM_bit, COM_value);
end;

procedure TCCoUSB4000.setMuxBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setMuxBit(COM_bit, COM_value);
end;

procedure TCCoUSB4000.setValueBit(COM_bit: Integer; COM_value: WordBool);
begin
  DefaultInterface.setValueBit(COM_bit, COM_value);
end;

function TCCoUSB4000.getTotalGPIOBits: Integer;
begin
  Result := DefaultInterface.getTotalGPIOBits;
end;

function TCCoUSB4000.getDirectionBits: ICoBitSet;
begin
  Result := DefaultInterface.getDirectionBits;
end;

function TCCoUSB4000.getMuxBits: ICoBitSet;
begin
  Result := DefaultInterface.getMuxBits;
end;

function TCCoUSB4000.getValueBit(COM_bitNumber: Integer): Integer;
begin
  Result := DefaultInterface.getValueBit(COM_bitNumber);
end;

function TCCoUSB4000.getValueBits: ICoBitSet;
begin
  Result := DefaultInterface.getValueBits;
end;

function TCCoUSB4000.getNumberOfPins: Integer;
begin
  Result := DefaultInterface.getNumberOfPins;
end;

function TCCoUSB4000.getBoardTemperatureCelsius: Double;
begin
  Result := DefaultInterface.getBoardTemperatureCelsius;
end;

function TCCoUSB4000.getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
begin
  Result := DefaultInterface.getIrradianceCalibrationFactors(COM_address);
end;

procedure TCCoUSB4000.setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant);
begin
  DefaultInterface.setIrradianceCalibrationFactors(COM_address, COM_data);
end;

procedure TCCoUSB4000.setMasterClockDivisor(COM_value: Integer);
begin
  DefaultInterface.setMasterClockDivisor(COM_value);
end;

function TCCoUSB4000.getMasterClockDivisor: Integer;
begin
  Result := DefaultInterface.getMasterClockDivisor;
end;

procedure TCCoUSB4000.setExternalTriggerDelay(COM_counts: Integer);
begin
  DefaultInterface.setExternalTriggerDelay(COM_counts);
end;

function TCCoUSB4000.triggerDelayCountsToMicroseconds(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.triggerDelayCountsToMicroseconds(COM_counts);
end;

function TCCoUSB4000.getExternalTriggerDelayMinimum: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayMinimum;
end;

function TCCoUSB4000.getExternalTriggerDelayMaximum: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayMaximum;
end;

function TCCoUSB4000.getExternalTriggerDelayIncrement: Integer;
begin
  Result := DefaultInterface.getExternalTriggerDelayIncrement;
end;

function TCCoUSB4000.readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readNonlinearityCoefficientsFromSpectrometer;
end;

function TCCoUSB4000.getNonlinearityCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getNonlinearityCoefficients;
end;

function TCCoUSB4000.getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getNonlinearityCoefficientsSingleChannel(COM_index);
end;

procedure TCCoUSB4000.setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; 
                                                               COM_index: Integer);
begin
  DefaultInterface.setNonlinearityCoefficientsSingleChannel(COM_nl, COM_index);
end;

function TCCoUSB4000.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoUSB4000.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoUSB4000.getWavelengths(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_index);
end;

procedure TCCoUSB4000.setWavelengths(COM_wl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setWavelengths(COM_wl, COM_index);
end;

function TCCoUSB4000.readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readStrayLightCorrectionCoefficientFromSpectrometer;
end;

function TCCoUSB4000.getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getStrayLightCorrectionCoefficient;
end;

procedure TCCoUSB4000.setStrayLight(COM_strayLight: Double; COM_index: Integer);
begin
  DefaultInterface.setStrayLight(COM_strayLight, COM_index);
end;

function TCCoUSB4000.getStrayLight(COM_index: Integer): Double;
begin
  Result := DefaultInterface.getStrayLight(COM_index);
end;

function TCCoUSB4000.getAutonullingScanStatus: Integer;
begin
  Result := DefaultInterface.getAutonullingScanStatus;
end;

function TCCoUSB4000.getAutonullingScanValue: Integer;
begin
  Result := DefaultInterface.getAutonullingScanValue;
end;

procedure TCCoUSB4000.setAutonullingScanStatus(COM_value: Integer);
begin
  DefaultInterface.setAutonullingScanStatus(COM_value);
end;

procedure TCCoUSB4000.setAutonullingScanValue(COM_value: Integer);
begin
  DefaultInterface.setAutonullingScanValue(COM_value);
end;

function TCCoUSB4000.getAutonullingConfiguration: ICoAutonullingConfiguration;
begin
  Result := DefaultInterface.getAutonullingConfiguration;
end;

procedure TCCoUSB4000.setAutonullingConfiguration(const COM_cfg: ICoAutonullingConfiguration);
begin
  DefaultInterface.setAutonullingConfiguration(COM_cfg);
end;

procedure TCCoUSB4000.writeAutonullingConfigurationToSpectrometer;
begin
  DefaultInterface.writeAutonullingConfigurationToSpectrometer;
end;

function TCCoUSB4000.readAutonullingConfigurationFromSpectrometer: ICoAutonullingConfiguration;
begin
  Result := DefaultInterface.readAutonullingConfigurationFromSpectrometer;
end;

function TCCoUSB4000.isAdvancedVersion: WordBool;
begin
  Result := DefaultInterface.isAdvancedVersion;
end;

procedure TCCoUSB4000.addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.addAcquisitionListener(COM_listener);
end;

procedure TCCoUSB4000.removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.removeAcquisitionListener(COM_listener);
end;

function TCCoUSB4000.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSB4000Properties.Create(AServer: TCCoUSB4000);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSB4000Properties.GetDefaultInterface: ICoUSB4000;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSB4000Status.Create: ICoUSB4000Status;
begin
  Result := CreateComObject(CLASS_CCoUSB4000Status) as ICoUSB4000Status;
end;

class function CoCCoUSB4000Status.CreateRemote(const MachineName: string): ICoUSB4000Status;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSB4000Status) as ICoUSB4000Status;
end;

procedure TCCoUSB4000Status.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0A2EF2AA-1327-5753-91FB-BD972F10C17F}';
    IntfIID:   '{E5E69CAA-1D6A-5C43-80CB-715EE316E467}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSB4000Status.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSB4000Status;
  end;
end;

procedure TCCoUSB4000Status.ConnectTo(svrIntf: ICoUSB4000Status);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSB4000Status.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSB4000Status.GetDefaultInterface: ICoUSB4000Status;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSB4000Status.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSB4000StatusProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSB4000Status.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSB4000Status.GetServerProperties: TCCoUSB4000StatusProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSB4000Status.CreateUSB4000Status;
begin
  DefaultInterface.CreateUSB4000Status;
end;

function TCCoUSB4000Status.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoUSB4000Status.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSB4000StatusProperties.Create(AServer: TCCoUSB4000Status);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSB4000StatusProperties.GetDefaultInterface: ICoUSB4000Status;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSB650.Create: ICoUSB650;
begin
  Result := CreateComObject(CLASS_CCoUSB650) as ICoUSB650;
end;

class function CoCCoUSB650.CreateRemote(const MachineName: string): ICoUSB650;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSB650) as ICoUSB650;
end;

procedure TCCoUSB650.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{1A73B544-2D00-586C-8012-F96D7CA28167}';
    IntfIID:   '{FDF32347-263A-5A43-81C2-B65B7B32A6B8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSB650.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSB650;
  end;
end;

procedure TCCoUSB650.ConnectTo(svrIntf: ICoUSB650);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSB650.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSB650.GetDefaultInterface: ICoUSB650;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSB650.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSB650Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSB650.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSB650.GetServerProperties: TCCoUSB650Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSB650.CreateUSB650;
begin
  DefaultInterface.CreateUSB650;
end;

procedure TCCoUSB650.CreateUSB650B(COM_i: Integer);
begin
  DefaultInterface.CreateUSB650B(COM_i);
end;

function TCCoUSB650.getNumberOfPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfPixels;
end;

function TCCoUSB650.getNumberOfDarkPixels: Integer;
begin
  Result := DefaultInterface.getNumberOfDarkPixels;
end;

procedure TCCoUSB650.setEndpoints;
begin
  DefaultInterface.setEndpoints;
end;

function TCCoUSB650.getEndpoint(COM_endPoint: Integer): ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getEndpoint(COM_endPoint);
end;

procedure TCCoUSB650.openSpectrometer(COM_index: Integer);
begin
  DefaultInterface.openSpectrometer(COM_index);
end;

function TCCoUSB650.getChannels: ICoSpectrometerChannelCollection;
begin
  Result := DefaultInterface.getChannels;
end;

function TCCoUSB650.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

function TCCoUSB650.getStatus: ICoSpectrometerStatus;
begin
  Result := DefaultInterface.getStatus;
end;

function TCCoUSB650.readIntegrationTime: Integer;
begin
  Result := DefaultInterface.readIntegrationTime;
end;

procedure TCCoUSB650.setMasterClock(COM_freq: Integer);
begin
  DefaultInterface.setMasterClock(COM_freq);
end;

function TCCoUSB650.getIrradianceCalibrationFactors(COM_address: Shortint): OleVariant;
begin
  Result := DefaultInterface.getIrradianceCalibrationFactors(COM_address);
end;

procedure TCCoUSB650.setIrradianceCalibrationFactors(COM_address: Shortint; COM_data: OleVariant);
begin
  DefaultInterface.setIrradianceCalibrationFactors(COM_address, COM_data);
end;

function TCCoUSB650.getActualIntegrationTime: Integer;
begin
  Result := DefaultInterface.getActualIntegrationTime;
end;

function TCCoUSB650.getSPIBytes(COM_message: OleVariant; COM_length: Integer): OleVariant;
begin
  Result := DefaultInterface.getSPIBytes(COM_message, COM_length);
end;

procedure TCCoUSB650.setExternalTriggerMode(COM_mode: Integer);
begin
  DefaultInterface.setExternalTriggerMode(COM_mode);
end;

function TCCoUSB650.getExternalTriggerModes: ICoExternalTriggerModeCollection;
begin
  Result := DefaultInterface.getExternalTriggerModes;
end;

function TCCoUSB650.isPlugInDetected(COM_id: Integer): WordBool;
begin
  Result := DefaultInterface.isPlugInDetected(COM_id);
end;

function TCCoUSB650.getPlugIns: ICoSpectrometerPlugInCollection;
begin
  Result := DefaultInterface.getPlugIns;
end;

function TCCoUSB650.getNumberOfPlugIns: Integer;
begin
  Result := DefaultInterface.getNumberOfPlugIns;
end;

function TCCoUSB650.initializePlugIns: OleVariant;
begin
  Result := DefaultInterface.initializePlugIns;
end;

procedure TCCoUSB650.detectPlugIns;
begin
  DefaultInterface.detectPlugIns;
end;

function TCCoUSB650.readNonlinearityCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readNonlinearityCoefficientsFromSpectrometer;
end;

function TCCoUSB650.getNonlinearityCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getNonlinearityCoefficients;
end;

function TCCoUSB650.getNonlinearityCoefficientsSingleChannel(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getNonlinearityCoefficientsSingleChannel(COM_index);
end;

procedure TCCoUSB650.setNonlinearityCoefficientsSingleChannel(COM_nl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setNonlinearityCoefficientsSingleChannel(COM_nl, COM_index);
end;

function TCCoUSB650.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoUSB650.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoUSB650.getWavelengths(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_index);
end;

procedure TCCoUSB650.setWavelengths(COM_wl: OleVariant; COM_index: Integer);
begin
  DefaultInterface.setWavelengths(COM_wl, COM_index);
end;

function TCCoUSB650.readStrayLightCorrectionCoefficientFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readStrayLightCorrectionCoefficientFromSpectrometer;
end;

function TCCoUSB650.getStrayLightCorrectionCoefficient: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getStrayLightCorrectionCoefficient;
end;

procedure TCCoUSB650.setStrayLight(COM_strayLight: Double; COM_index: Integer);
begin
  DefaultInterface.setStrayLight(COM_strayLight, COM_index);
end;

function TCCoUSB650.getStrayLight(COM_index: Integer): Double;
begin
  Result := DefaultInterface.getStrayLight(COM_index);
end;

function TCCoUSB650.isAdvancedVersion: WordBool;
begin
  Result := DefaultInterface.isAdvancedVersion;
end;

procedure TCCoUSB650.addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.addAcquisitionListener(COM_listener);
end;

procedure TCCoUSB650.removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.removeAcquisitionListener(COM_listener);
end;

function TCCoUSB650.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoUSB650.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSB650Properties.Create(AServer: TCCoUSB650);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSB650Properties.GetDefaultInterface: ICoUSB650;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSBCommonDescriptor.Create: ICoUSBCommonDescriptor;
begin
  Result := CreateComObject(CLASS_CCoUSBCommonDescriptor) as ICoUSBCommonDescriptor;
end;

class function CoCCoUSBCommonDescriptor.CreateRemote(const MachineName: string): ICoUSBCommonDescriptor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSBCommonDescriptor) as ICoUSBCommonDescriptor;
end;

procedure TCCoUSBCommonDescriptor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{005FAB77-FF13-551A-8184-2BA295FB28B9}';
    IntfIID:   '{4086EF88-3BEA-5656-9137-AD42F97B28B5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSBCommonDescriptor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSBCommonDescriptor;
  end;
end;

procedure TCCoUSBCommonDescriptor.ConnectTo(svrIntf: ICoUSBCommonDescriptor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSBCommonDescriptor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSBCommonDescriptor.GetDefaultInterface: ICoUSBCommonDescriptor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSBCommonDescriptor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSBCommonDescriptorProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSBCommonDescriptor.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSBCommonDescriptor.GetServerProperties: TCCoUSBCommonDescriptorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSBCommonDescriptor.CreateUSBCommonDescriptor;
begin
  DefaultInterface.CreateUSBCommonDescriptor;
end;

function TCCoUSBCommonDescriptor.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSBCommonDescriptorProperties.Create(AServer: TCCoUSBCommonDescriptor);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSBCommonDescriptorProperties.GetDefaultInterface: ICoUSBCommonDescriptor;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSBConfigurationDescriptor.Create: ICoUSBConfigurationDescriptor;
begin
  Result := CreateComObject(CLASS_CCoUSBConfigurationDescriptor) as ICoUSBConfigurationDescriptor;
end;

class function CoCCoUSBConfigurationDescriptor.CreateRemote(const MachineName: string): ICoUSBConfigurationDescriptor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSBConfigurationDescriptor) as ICoUSBConfigurationDescriptor;
end;

procedure TCCoUSBConfigurationDescriptor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{7A384276-EF43-5A8C-9124-A788C706C945}';
    IntfIID:   '{46BD006A-80A1-527C-9085-3987B589EB2C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSBConfigurationDescriptor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSBConfigurationDescriptor;
  end;
end;

procedure TCCoUSBConfigurationDescriptor.ConnectTo(svrIntf: ICoUSBConfigurationDescriptor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSBConfigurationDescriptor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSBConfigurationDescriptor.GetDefaultInterface: ICoUSBConfigurationDescriptor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSBConfigurationDescriptor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSBConfigurationDescriptorProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSBConfigurationDescriptor.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSBConfigurationDescriptor.GetServerProperties: TCCoUSBConfigurationDescriptorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSBConfigurationDescriptor.CreateUSBConfigurationDescriptor;
begin
  DefaultInterface.CreateUSBConfigurationDescriptor;
end;

function TCCoUSBConfigurationDescriptor.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoUSBConfigurationDescriptor.getLength: Shortint;
begin
  Result := DefaultInterface.getLength;
end;

function TCCoUSBConfigurationDescriptor.getDescriptorType: Shortint;
begin
  Result := DefaultInterface.getDescriptorType;
end;

function TCCoUSBConfigurationDescriptor.getTotalLength: Smallint;
begin
  Result := DefaultInterface.getTotalLength;
end;

function TCCoUSBConfigurationDescriptor.getNumInterfaces: Shortint;
begin
  Result := DefaultInterface.getNumInterfaces;
end;

function TCCoUSBConfigurationDescriptor.getConfigurationValue: Shortint;
begin
  Result := DefaultInterface.getConfigurationValue;
end;

function TCCoUSBConfigurationDescriptor.getConfiguration: Shortint;
begin
  Result := DefaultInterface.getConfiguration;
end;

function TCCoUSBConfigurationDescriptor.getAttributes: Shortint;
begin
  Result := DefaultInterface.getAttributes;
end;

function TCCoUSBConfigurationDescriptor.getMaxPower: Shortint;
begin
  Result := DefaultInterface.getMaxPower;
end;

function TCCoUSBConfigurationDescriptor.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSBConfigurationDescriptorProperties.Create(AServer: TCCoUSBConfigurationDescriptor);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSBConfigurationDescriptorProperties.GetDefaultInterface: ICoUSBConfigurationDescriptor;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSBConstants.Create: ICoUSBConstants;
begin
  Result := CreateComObject(CLASS_CCoUSBConstants) as ICoUSBConstants;
end;

class function CoCCoUSBConstants.CreateRemote(const MachineName: string): ICoUSBConstants;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSBConstants) as ICoUSBConstants;
end;

procedure TCCoUSBConstants.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{243C028E-2637-52E7-909A-CA218D92A1F1}';
    IntfIID:   '{25133B83-3272-5E1F-81DE-9832F1CF5936}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSBConstants.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSBConstants;
  end;
end;

procedure TCCoUSBConstants.ConnectTo(svrIntf: ICoUSBConstants);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSBConstants.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSBConstants.GetDefaultInterface: ICoUSBConstants;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSBConstants.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSBConstantsProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSBConstants.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSBConstants.GetServerProperties: TCCoUSBConstantsProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSBConstants.CreateUSBConstants;
begin
  DefaultInterface.CreateUSBConstants;
end;

function TCCoUSBConstants.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSBConstantsProperties.Create(AServer: TCCoUSBConstants);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSBConstantsProperties.GetDefaultInterface: ICoUSBConstants;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSBDeviceDescriptor.Create: ICoUSBDeviceDescriptor;
begin
  Result := CreateComObject(CLASS_CCoUSBDeviceDescriptor) as ICoUSBDeviceDescriptor;
end;

class function CoCCoUSBDeviceDescriptor.CreateRemote(const MachineName: string): ICoUSBDeviceDescriptor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSBDeviceDescriptor) as ICoUSBDeviceDescriptor;
end;

procedure TCCoUSBDeviceDescriptor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{990D1619-719C-5498-9053-F653348DAFA1}';
    IntfIID:   '{C05F6210-7572-52E8-916A-8909C420D427}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSBDeviceDescriptor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSBDeviceDescriptor;
  end;
end;

procedure TCCoUSBDeviceDescriptor.ConnectTo(svrIntf: ICoUSBDeviceDescriptor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSBDeviceDescriptor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSBDeviceDescriptor.GetDefaultInterface: ICoUSBDeviceDescriptor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSBDeviceDescriptor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSBDeviceDescriptorProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSBDeviceDescriptor.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSBDeviceDescriptor.GetServerProperties: TCCoUSBDeviceDescriptorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSBDeviceDescriptor.CreateUSBDeviceDescriptor;
begin
  DefaultInterface.CreateUSBDeviceDescriptor;
end;

function TCCoUSBDeviceDescriptor.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoUSBDeviceDescriptor.getLength: Shortint;
begin
  Result := DefaultInterface.getLength;
end;

function TCCoUSBDeviceDescriptor.getDescriptorType: Shortint;
begin
  Result := DefaultInterface.getDescriptorType;
end;

function TCCoUSBDeviceDescriptor.getbcdUSB: Smallint;
begin
  Result := DefaultInterface.getbcdUSB;
end;

function TCCoUSBDeviceDescriptor.getDeviceClass: Shortint;
begin
  Result := DefaultInterface.getDeviceClass;
end;

function TCCoUSBDeviceDescriptor.getDeviceSubClass: Shortint;
begin
  Result := DefaultInterface.getDeviceSubClass;
end;

function TCCoUSBDeviceDescriptor.getDeviceProtocol: Shortint;
begin
  Result := DefaultInterface.getDeviceProtocol;
end;

function TCCoUSBDeviceDescriptor.getMaxPacketSize0: Smallint;
begin
  Result := DefaultInterface.getMaxPacketSize0;
end;

function TCCoUSBDeviceDescriptor.getVendorID: Smallint;
begin
  Result := DefaultInterface.getVendorID;
end;

function TCCoUSBDeviceDescriptor.getProductID: Smallint;
begin
  Result := DefaultInterface.getProductID;
end;

function TCCoUSBDeviceDescriptor.getbcdDevice: Smallint;
begin
  Result := DefaultInterface.getbcdDevice;
end;

function TCCoUSBDeviceDescriptor.getManufacturer: Shortint;
begin
  Result := DefaultInterface.getManufacturer;
end;

function TCCoUSBDeviceDescriptor.getProduct: Shortint;
begin
  Result := DefaultInterface.getProduct;
end;

function TCCoUSBDeviceDescriptor.getSerialNumber: Shortint;
begin
  Result := DefaultInterface.getSerialNumber;
end;

function TCCoUSBDeviceDescriptor.getNumConfigurations: Shortint;
begin
  Result := DefaultInterface.getNumConfigurations;
end;

function TCCoUSBDeviceDescriptor.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSBDeviceDescriptorProperties.Create(AServer: TCCoUSBDeviceDescriptor);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSBDeviceDescriptorProperties.GetDefaultInterface: ICoUSBDeviceDescriptor;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSBEndpointDevice.Create: ICoUSBEndpointDevice;
begin
  Result := CreateComObject(CLASS_CCoUSBEndpointDevice) as ICoUSBEndpointDevice;
end;

class function CoCCoUSBEndpointDevice.CreateRemote(const MachineName: string): ICoUSBEndpointDevice;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSBEndpointDevice) as ICoUSBEndpointDevice;
end;

procedure TCCoUSBEndpointDevice.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{CA85A82F-D049-555B-913C-412479C8424F}';
    IntfIID:   '{3BAA6767-9F60-530D-90E1-03AEF0C7F389}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSBEndpointDevice.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSBEndpointDevice;
  end;
end;

procedure TCCoUSBEndpointDevice.ConnectTo(svrIntf: ICoUSBEndpointDevice);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSBEndpointDevice.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSBEndpointDevice.GetDefaultInterface: ICoUSBEndpointDevice;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSBEndpointDevice.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSBEndpointDeviceProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSBEndpointDevice.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSBEndpointDevice.GetServerProperties: TCCoUSBEndpointDeviceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSBEndpointDevice.CreateUSBEndpointDevice;
begin
  DefaultInterface.CreateUSBEndpointDevice;
end;

function TCCoUSBEndpointDevice.getEndpoint(COM_param0: Integer): ICoUSBEndpointDescriptor;
begin
  Result := DefaultInterface.getEndpoint(COM_param0);
end;

function TCCoUSBEndpointDevice.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSBEndpointDeviceProperties.Create(AServer: TCCoUSBEndpointDevice);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSBEndpointDeviceProperties.GetDefaultInterface: ICoUSBEndpointDevice;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSBImpl.Create: ICoUSBImpl;
begin
  Result := CreateComObject(CLASS_CCoUSBImpl) as ICoUSBImpl;
end;

class function CoCCoUSBImpl.CreateRemote(const MachineName: string): ICoUSBImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSBImpl) as ICoUSBImpl;
end;

procedure TCCoUSBImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{5D4BF02F-B9C1-5968-90B7-44082D917EFC}';
    IntfIID:   '{C2C7116B-6346-5BD9-8081-BDC1CCB4758D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSBImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSBImpl;
  end;
end;

procedure TCCoUSBImpl.ConnectTo(svrIntf: ICoUSBImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSBImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSBImpl.GetDefaultInterface: ICoUSBImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSBImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSBImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSBImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSBImpl.GetServerProperties: TCCoUSBImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSBImpl.CreateUSBImpl;
begin
  DefaultInterface.CreateUSBImpl;
end;

function TCCoUSBImpl.getInputBuffer: OleVariant;
begin
  Result := DefaultInterface.getInputBuffer;
end;

function TCCoUSBImpl.getOutputBuffer: OleVariant;
begin
  Result := DefaultInterface.getOutputBuffer;
end;

procedure TCCoUSBImpl.increaseInputBufferSize(COM_size: Integer);
begin
  DefaultInterface.increaseInputBufferSize(COM_size);
end;

procedure TCCoUSBImpl.increaseOutputBufferSize(COM_size: Integer);
begin
  DefaultInterface.increaseOutputBufferSize(COM_size);
end;

procedure TCCoUSBImpl.bulkIn(const COM_endPointDescriptor: ICoUSBEndpointDescriptor; 
                             COM_data: OleVariant; COM_length: Integer);
begin
  DefaultInterface.bulkIn(COM_endPointDescriptor, COM_data, COM_length);
end;

procedure TCCoUSBImpl.bulkOut(const COM_endPointDescriptor: ICoUSBEndpointDescriptor; 
                              COM_data: OleVariant; COM_length: Integer);
begin
  DefaultInterface.bulkOut(COM_endPointDescriptor, COM_data, COM_length);
end;

function TCCoUSBImpl.readUSBStringDescriptor(COM_num: Integer): WideString;
begin
  Result := DefaultInterface.readUSBStringDescriptor(COM_num);
end;

procedure TCCoUSBImpl.openDevice(COM_vendorID: Integer; COM_prodID: Integer; COM_index: Integer);
begin
  DefaultInterface.openDevice(COM_vendorID, COM_prodID, COM_index);
end;

procedure TCCoUSBImpl.closeDevice;
begin
  DefaultInterface.closeDevice;
end;

function TCCoUSBImpl.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoUSBImpl.getUSBStringDescriptor(COM_index: Integer): WideString;
begin
  Result := DefaultInterface.getUSBStringDescriptor(COM_index);
end;

function TCCoUSBImpl.isUSB2Mode: WordBool;
begin
  Result := DefaultInterface.isUSB2Mode;
end;

function TCCoUSBImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSBImplProperties.Create(AServer: TCCoUSBImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSBImplProperties.GetDefaultInterface: ICoUSBImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSBInterfaceDescriptor.Create: ICoUSBInterfaceDescriptor;
begin
  Result := CreateComObject(CLASS_CCoUSBInterfaceDescriptor) as ICoUSBInterfaceDescriptor;
end;

class function CoCCoUSBInterfaceDescriptor.CreateRemote(const MachineName: string): ICoUSBInterfaceDescriptor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSBInterfaceDescriptor) as ICoUSBInterfaceDescriptor;
end;

procedure TCCoUSBInterfaceDescriptor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{B9FD2041-F99F-590B-9176-97103C779756}';
    IntfIID:   '{A6E5B74A-1967-511F-814B-25ADC84B59BA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSBInterfaceDescriptor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSBInterfaceDescriptor;
  end;
end;

procedure TCCoUSBInterfaceDescriptor.ConnectTo(svrIntf: ICoUSBInterfaceDescriptor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSBInterfaceDescriptor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSBInterfaceDescriptor.GetDefaultInterface: ICoUSBInterfaceDescriptor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSBInterfaceDescriptor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSBInterfaceDescriptorProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSBInterfaceDescriptor.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSBInterfaceDescriptor.GetServerProperties: TCCoUSBInterfaceDescriptorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSBInterfaceDescriptor.CreateUSBInterfaceDescriptor;
begin
  DefaultInterface.CreateUSBInterfaceDescriptor;
end;

function TCCoUSBInterfaceDescriptor.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoUSBInterfaceDescriptor.getLength: Shortint;
begin
  Result := DefaultInterface.getLength;
end;

function TCCoUSBInterfaceDescriptor.getDescriptorType: Shortint;
begin
  Result := DefaultInterface.getDescriptorType;
end;

function TCCoUSBInterfaceDescriptor.getInterfaceNumber: Shortint;
begin
  Result := DefaultInterface.getInterfaceNumber;
end;

function TCCoUSBInterfaceDescriptor.getAlternateSetting: Shortint;
begin
  Result := DefaultInterface.getAlternateSetting;
end;

function TCCoUSBInterfaceDescriptor.getNumEndpoints: Shortint;
begin
  Result := DefaultInterface.getNumEndpoints;
end;

function TCCoUSBInterfaceDescriptor.getInterfaceClass: Shortint;
begin
  Result := DefaultInterface.getInterfaceClass;
end;

function TCCoUSBInterfaceDescriptor.getInterfaceSubClass: Shortint;
begin
  Result := DefaultInterface.getInterfaceSubClass;
end;

function TCCoUSBInterfaceDescriptor.getInterfaceProtocol: Shortint;
begin
  Result := DefaultInterface.getInterfaceProtocol;
end;

function TCCoUSBInterfaceDescriptor.getInterface: Shortint;
begin
  Result := DefaultInterface.getInterface;
end;

function TCCoUSBInterfaceDescriptor.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSBInterfaceDescriptorProperties.Create(AServer: TCCoUSBInterfaceDescriptor);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSBInterfaceDescriptorProperties.GetDefaultInterface: ICoUSBInterfaceDescriptor;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSBLogicalPortStatus.Create: ICoUSBLogicalPortStatus;
begin
  Result := CreateComObject(CLASS_CCoUSBLogicalPortStatus) as ICoUSBLogicalPortStatus;
end;

class function CoCCoUSBLogicalPortStatus.CreateRemote(const MachineName: string): ICoUSBLogicalPortStatus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSBLogicalPortStatus) as ICoUSBLogicalPortStatus;
end;

procedure TCCoUSBLogicalPortStatus.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{27492E9B-8ECA-5A8B-80BF-98EEEC677F1B}';
    IntfIID:   '{38A725E5-9D9F-5094-8077-CB3AAE8F40ED}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSBLogicalPortStatus.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSBLogicalPortStatus;
  end;
end;

procedure TCCoUSBLogicalPortStatus.ConnectTo(svrIntf: ICoUSBLogicalPortStatus);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSBLogicalPortStatus.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSBLogicalPortStatus.GetDefaultInterface: ICoUSBLogicalPortStatus;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSBLogicalPortStatus.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSBLogicalPortStatusProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSBLogicalPortStatus.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSBLogicalPortStatus.GetServerProperties: TCCoUSBLogicalPortStatusProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSBLogicalPortStatus.CreateUSBLogicalPortStatus;
begin
  DefaultInterface.CreateUSBLogicalPortStatus;
end;

function TCCoUSBLogicalPortStatus.getSpectrometer: ICoSpectrometer;
begin
  Result := DefaultInterface.getSpectrometer;
end;

function TCCoUSBLogicalPortStatus.isDevicePresent: WordBool;
begin
  Result := DefaultInterface.isDevicePresent;
end;

procedure TCCoUSBLogicalPortStatus.setDeviceNotPresent;
begin
  DefaultInterface.setDeviceNotPresent;
end;

procedure TCCoUSBLogicalPortStatus.setDevicePresent(const COM_spectrometer: ICoSpectrometer);
begin
  DefaultInterface.setDevicePresent(COM_spectrometer);
end;

function TCCoUSBLogicalPortStatus.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSBLogicalPortStatusProperties.Create(AServer: TCCoUSBLogicalPortStatus);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSBLogicalPortStatusProperties.GetDefaultInterface: ICoUSBLogicalPortStatus;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSBProductInfo.Create: ICoUSBProductInfo;
begin
  Result := CreateComObject(CLASS_CCoUSBProductInfo) as ICoUSBProductInfo;
end;

class function CoCCoUSBProductInfo.CreateRemote(const MachineName: string): ICoUSBProductInfo;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSBProductInfo) as ICoUSBProductInfo;
end;

procedure TCCoUSBProductInfo.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{4A97F9A2-A6A5-5096-906C-EE64ECA964DE}';
    IntfIID:   '{BA7F3CEB-83A9-5289-90E0-452F4CC5A5F1}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSBProductInfo.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSBProductInfo;
  end;
end;

procedure TCCoUSBProductInfo.ConnectTo(svrIntf: ICoUSBProductInfo);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSBProductInfo.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSBProductInfo.GetDefaultInterface: ICoUSBProductInfo;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSBProductInfo.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSBProductInfoProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSBProductInfo.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSBProductInfo.GetServerProperties: TCCoUSBProductInfoProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSBProductInfo.CreateUSBProductInfoB(const COM_name: WideString; 
                                                   const COM_className: WideString; 
                                                   COM_vendorID: Integer; COM_productID: Integer);
begin
  DefaultInterface.CreateUSBProductInfoB(COM_name, COM_className, COM_vendorID, COM_productID);
end;

function TCCoUSBProductInfo.getProductInfo(COM_vendorID: Integer; COM_productID: Integer): ICoUSBProductInfo;
begin
  Result := DefaultInterface.getProductInfo(COM_vendorID, COM_productID);
end;

function TCCoUSBProductInfo.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSBProductInfoProperties.Create(AServer: TCCoUSBProductInfo);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSBProductInfoProperties.GetDefaultInterface: ICoUSBProductInfo;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSBStringDescriptor.Create: ICoUSBStringDescriptor;
begin
  Result := CreateComObject(CLASS_CCoUSBStringDescriptor) as ICoUSBStringDescriptor;
end;

class function CoCCoUSBStringDescriptor.CreateRemote(const MachineName: string): ICoUSBStringDescriptor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSBStringDescriptor) as ICoUSBStringDescriptor;
end;

procedure TCCoUSBStringDescriptor.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{8DC64E9B-6EF4-5825-812B-C99B15792649}';
    IntfIID:   '{AACF7B8F-7F48-5D88-90BC-3475FA40EF8C}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSBStringDescriptor.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSBStringDescriptor;
  end;
end;

procedure TCCoUSBStringDescriptor.ConnectTo(svrIntf: ICoUSBStringDescriptor);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSBStringDescriptor.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSBStringDescriptor.GetDefaultInterface: ICoUSBStringDescriptor;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSBStringDescriptor.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSBStringDescriptorProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSBStringDescriptor.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSBStringDescriptor.GetServerProperties: TCCoUSBStringDescriptorProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSBStringDescriptor.CreateUSBStringDescriptor;
begin
  DefaultInterface.CreateUSBStringDescriptor;
end;

function TCCoUSBStringDescriptor.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSBStringDescriptorProperties.Create(AServer: TCCoUSBStringDescriptor);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSBStringDescriptorProperties.GetDefaultInterface: ICoUSBStringDescriptor;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSB_ISS.Create: ICoUSB_ISS;
begin
  Result := CreateComObject(CLASS_CCoUSB_ISS) as ICoUSB_ISS;
end;

class function CoCCoUSB_ISS.CreateRemote(const MachineName: string): ICoUSB_ISS;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSB_ISS) as ICoUSB_ISS;
end;

procedure TCCoUSB_ISS.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{073ADBA8-418E-5A4C-81C9-9A9A34337F96}';
    IntfIID:   '{1E5F9031-811E-5FEC-813C-FA108AD43BAF}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSB_ISS.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSB_ISS;
  end;
end;

procedure TCCoUSB_ISS.ConnectTo(svrIntf: ICoUSB_ISS);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSB_ISS.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSB_ISS.GetDefaultInterface: ICoUSB_ISS;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSB_ISS.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSB_ISSProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSB_ISS.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSB_ISS.GetServerProperties: TCCoUSB_ISSProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSB_ISS.CreateUSB_ISSB(const COM_spectrometer: ICoUSBSpectrometer; 
                                     const COM_usb: ICoUSBInterface);
begin
  DefaultInterface.CreateUSB_ISSB(COM_spectrometer, COM_usb);
end;

function TCCoUSB_ISS.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

function TCCoUSB_ISS.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSB_ISSProperties.Create(AServer: TCCoUSB_ISS);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSB_ISSProperties.GetDefaultInterface: ICoUSB_ISS;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSB_ISS_UV.Create: ICoUSB_ISS_UV;
begin
  Result := CreateComObject(CLASS_CCoUSB_ISS_UV) as ICoUSB_ISS_UV;
end;

class function CoCCoUSB_ISS_UV.CreateRemote(const MachineName: string): ICoUSB_ISS_UV;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSB_ISS_UV) as ICoUSB_ISS_UV;
end;

procedure TCCoUSB_ISS_UV.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{79C06AD6-5D98-5B72-91BE-8889C0671BB0}';
    IntfIID:   '{2B8934A6-666D-59D2-8007-74684B3D07B5}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSB_ISS_UV.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSB_ISS_UV;
  end;
end;

procedure TCCoUSB_ISS_UV.ConnectTo(svrIntf: ICoUSB_ISS_UV);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSB_ISS_UV.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSB_ISS_UV.GetDefaultInterface: ICoUSB_ISS_UV;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSB_ISS_UV.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSB_ISS_UVProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSB_ISS_UV.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSB_ISS_UV.GetServerProperties: TCCoUSB_ISS_UVProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSB_ISS_UV.CreateUSB_ISS_UVB(const COM_spectrometer: ICoUSBSpectrometer; 
                                           const COM_usb: ICoUSBInterface);
begin
  DefaultInterface.CreateUSB_ISS_UVB(COM_spectrometer, COM_usb);
end;

function TCCoUSB_ISS_UV.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

procedure TCCoUSB_ISS_UV.setPowerUpPOTValues;
begin
  DefaultInterface.setPowerUpPOTValues;
end;

procedure TCCoUSB_ISS_UV.setPOTValue(COM_pot: Integer; COM_value: Integer);
begin
  DefaultInterface.setPOTValue(COM_pot, COM_value);
end;

function TCCoUSB_ISS_UV.getPOTValues: OleVariant;
begin
  Result := DefaultInterface.getPOTValues;
end;

procedure TCCoUSB_ISS_UV.setLampOn(COM_lampOn: WordBool);
begin
  DefaultInterface.setLampOn(COM_lampOn);
end;

function TCCoUSB_ISS_UV.isLampOn: WordBool;
begin
  Result := DefaultInterface.isLampOn;
end;

procedure TCCoUSB_ISS_UV.setVisLampOn(COM_lampOn: WordBool);
begin
  DefaultInterface.setVisLampOn(COM_lampOn);
end;

function TCCoUSB_ISS_UV.isVisLampOn: WordBool;
begin
  Result := DefaultInterface.isVisLampOn;
end;

procedure TCCoUSB_ISS_UV.setVisLampIntensity(COM_intens: Smallint);
begin
  DefaultInterface.setVisLampIntensity(COM_intens);
end;

function TCCoUSB_ISS_UV.getVisLampIntensity: Smallint;
begin
  Result := DefaultInterface.getVisLampIntensity;
end;

procedure TCCoUSB_ISS_UV.setUVLampIntensity(COM_intens: Smallint);
begin
  DefaultInterface.setUVLampIntensity(COM_intens);
end;

function TCCoUSB_ISS_UV.getUVLampIntensity: Smallint;
begin
  Result := DefaultInterface.getUVLampIntensity;
end;

function TCCoUSB_ISS_UV.getLampIntensityMinimum: Integer;
begin
  Result := DefaultInterface.getLampIntensityMinimum;
end;

function TCCoUSB_ISS_UV.getLampIntensityMaximum: Integer;
begin
  Result := DefaultInterface.getLampIntensityMaximum;
end;

function TCCoUSB_ISS_UV.getLampIntensityIncrement: Integer;
begin
  Result := DefaultInterface.getLampIntensityIncrement;
end;

function TCCoUSB_ISS_UV.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

function TCCoUSB_ISS_UV.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSB_ISS_UVProperties.Create(AServer: TCCoUSB_ISS_UV);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSB_ISS_UVProperties.GetDefaultInterface: ICoUSB_ISS_UV;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUSB_LS450.Create: ICoUSB_LS450;
begin
  Result := CreateComObject(CLASS_CCoUSB_LS450) as ICoUSB_LS450;
end;

class function CoCCoUSB_LS450.CreateRemote(const MachineName: string): ICoUSB_LS450;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUSB_LS450) as ICoUSB_LS450;
end;

procedure TCCoUSB_LS450.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{71447CF2-BC4A-5E00-90E7-7A30D16B8FD0}';
    IntfIID:   '{7F864876-AB8F-5690-911F-EBE8C6D71452}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUSB_LS450.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUSB_LS450;
  end;
end;

procedure TCCoUSB_LS450.ConnectTo(svrIntf: ICoUSB_LS450);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUSB_LS450.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUSB_LS450.GetDefaultInterface: ICoUSB_LS450;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUSB_LS450.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUSB_LS450Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoUSB_LS450.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUSB_LS450.GetServerProperties: TCCoUSB_LS450Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUSB_LS450.CreateUSB_LS450B(const COM_spectrometer: ICoUSBSpectrometer; 
                                         const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateUSB_LS450B(COM_spectrometer, COM_usbInt);
end;

function TCCoUSB_LS450.getGUIFeatures: ICoGUIProviderCollection;
begin
  Result := DefaultInterface.getGUIFeatures;
end;

function TCCoUSB_LS450.toString: WideString;
begin
  Result := DefaultInterface.toString;
end;

procedure TCCoUSB_LS450.setLEDMode(COM_pulsed: WordBool);
begin
  DefaultInterface.setLEDMode(COM_pulsed);
end;

function TCCoUSB_LS450.getLS450Coefficients: ICoLS450Coefficients;
begin
  Result := DefaultInterface.getLS450Coefficients;
end;

procedure TCCoUSB_LS450.setLS450Coefficients(const COM_coeffs: ICoLS450Coefficients);
begin
  DefaultInterface.setLS450Coefficients(COM_coeffs);
end;

procedure TCCoUSB_LS450.setLS450Info(COM_index: Integer; const COM_str: WideString);
begin
  DefaultInterface.setLS450Info(COM_index, COM_str);
end;

function TCCoUSB_LS450.getLS450Info(COM_index: Integer): WideString;
begin
  Result := DefaultInterface.getLS450Info(COM_index);
end;

procedure TCCoUSB_LS450.saveInfo;
begin
  DefaultInterface.saveInfo;
end;

procedure TCCoUSB_LS450.loadInfo;
begin
  DefaultInterface.loadInfo;
end;

procedure TCCoUSB_LS450.setAllLS450Info(const COM_ls450Coefficients: ICoLS450Coefficients);
begin
  DefaultInterface.setAllLS450Info(COM_ls450Coefficients);
end;

function TCCoUSB_LS450.getAllLS450Info: ICoLS450Coefficients;
begin
  Result := DefaultInterface.getAllLS450Info;
end;

procedure TCCoUSB_LS450.loadLS450CoefficientsFromEEPROM;
begin
  DefaultInterface.loadLS450CoefficientsFromEEPROM;
end;

function TCCoUSB_LS450.getO2ProbeCalibrationCoefficients: OleVariant;
begin
  Result := DefaultInterface.getO2ProbeCalibrationCoefficients;
end;

procedure TCCoUSB_LS450.setO2ProbeCalibrationCoefficients(COM_coefficients: OleVariant);
begin
  DefaultInterface.setO2ProbeCalibrationCoefficients(COM_coefficients);
end;

procedure TCCoUSB_LS450.setDACCounts(COM_counts: Integer);
begin
  DefaultInterface.setDACCounts(COM_counts);
end;

function TCCoUSB_LS450.analogOutCountsToMilliamps(COM_counts: Integer): Double;
begin
  Result := DefaultInterface.analogOutCountsToMilliamps(COM_counts);
end;

function TCCoUSB_LS450.getDACMinimum: Integer;
begin
  Result := DefaultInterface.getDACMinimum;
end;

function TCCoUSB_LS450.getDACMaximum: Integer;
begin
  Result := DefaultInterface.getDACMaximum;
end;

function TCCoUSB_LS450.getDACIncrement: Integer;
begin
  Result := DefaultInterface.getDACIncrement;
end;

function TCCoUSB_LS450.getExternalTemperatureCelsius: Double;
begin
  Result := DefaultInterface.getExternalTemperatureCelsius;
end;

function TCCoUSB_LS450.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUSB_LS450Properties.Create(AServer: TCCoUSB_LS450);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUSB_LS450Properties.GetDefaultInterface: ICoUSB_LS450;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUV_VIS_LightSource.Create: ICoUV_VIS_LightSource;
begin
  Result := CreateComObject(CLASS_CCoUV_VIS_LightSource) as ICoUV_VIS_LightSource;
end;

class function CoCCoUV_VIS_LightSource.CreateRemote(const MachineName: string): ICoUV_VIS_LightSource;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUV_VIS_LightSource) as ICoUV_VIS_LightSource;
end;

procedure TCCoUV_VIS_LightSource.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{96E60BF4-E533-5972-9015-A738B374C81F}';
    IntfIID:   '{63D8AFBE-B6E7-54CE-8128-630E86FA0D6B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUV_VIS_LightSource.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUV_VIS_LightSource;
  end;
end;

procedure TCCoUV_VIS_LightSource.ConnectTo(svrIntf: ICoUV_VIS_LightSource);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUV_VIS_LightSource.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUV_VIS_LightSource.GetDefaultInterface: ICoUV_VIS_LightSource;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUV_VIS_LightSource.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUV_VIS_LightSourceProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUV_VIS_LightSource.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUV_VIS_LightSource.GetServerProperties: TCCoUV_VIS_LightSourceProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUV_VIS_LightSource.CreateUV_VIS_LightSource;
begin
  DefaultInterface.CreateUV_VIS_LightSource;
end;

procedure TCCoUV_VIS_LightSource.setPowerUpPOTValues;
begin
  DefaultInterface.setPowerUpPOTValues;
end;

procedure TCCoUV_VIS_LightSource.setPOTValue(COM_param0: Integer; COM_param1: Integer);
begin
  DefaultInterface.setPOTValue(COM_param0, COM_param1);
end;

function TCCoUV_VIS_LightSource.getPOTValues: OleVariant;
begin
  Result := DefaultInterface.getPOTValues;
end;

procedure TCCoUV_VIS_LightSource.setLampOn(COM_param0: WordBool);
begin
  DefaultInterface.setLampOn(COM_param0);
end;

function TCCoUV_VIS_LightSource.isLampOn: WordBool;
begin
  Result := DefaultInterface.isLampOn;
end;

procedure TCCoUV_VIS_LightSource.setVisLampOn(COM_param0: WordBool);
begin
  DefaultInterface.setVisLampOn(COM_param0);
end;

function TCCoUV_VIS_LightSource.isVisLampOn: WordBool;
begin
  Result := DefaultInterface.isVisLampOn;
end;

procedure TCCoUV_VIS_LightSource.setVisLampIntensity(COM_param0: Smallint);
begin
  DefaultInterface.setVisLampIntensity(COM_param0);
end;

function TCCoUV_VIS_LightSource.getVisLampIntensity: Smallint;
begin
  Result := DefaultInterface.getVisLampIntensity;
end;

procedure TCCoUV_VIS_LightSource.setUVLampIntensity(COM_param0: Smallint);
begin
  DefaultInterface.setUVLampIntensity(COM_param0);
end;

function TCCoUV_VIS_LightSource.getUVLampIntensity: Smallint;
begin
  Result := DefaultInterface.getUVLampIntensity;
end;

function TCCoUV_VIS_LightSource.getLampIntensityMinimum: Integer;
begin
  Result := DefaultInterface.getLampIntensityMinimum;
end;

function TCCoUV_VIS_LightSource.getLampIntensityMaximum: Integer;
begin
  Result := DefaultInterface.getLampIntensityMaximum;
end;

function TCCoUV_VIS_LightSource.getLampIntensityIncrement: Integer;
begin
  Result := DefaultInterface.getLampIntensityIncrement;
end;

function TCCoUV_VIS_LightSource.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUV_VIS_LightSourceProperties.Create(AServer: TCCoUV_VIS_LightSource);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUV_VIS_LightSourceProperties.GetDefaultInterface: ICoUV_VIS_LightSource;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUV_VIS_LightSourceGUIProvider.Create: ICoUV_VIS_LightSourceGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoUV_VIS_LightSourceGUIProvider) as ICoUV_VIS_LightSourceGUIProvider;
end;

class function CoCCoUV_VIS_LightSourceGUIProvider.CreateRemote(const MachineName: string): ICoUV_VIS_LightSourceGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUV_VIS_LightSourceGUIProvider) as ICoUV_VIS_LightSourceGUIProvider;
end;

procedure TCCoUV_VIS_LightSourceGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{79FA4EE9-75D4-561B-8011-002D1BF2EF59}';
    IntfIID:   '{453014F3-E447-54EB-80DF-C1D9DDC4AF0E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUV_VIS_LightSourceGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUV_VIS_LightSourceGUIProvider;
  end;
end;

procedure TCCoUV_VIS_LightSourceGUIProvider.ConnectTo(svrIntf: ICoUV_VIS_LightSourceGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUV_VIS_LightSourceGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUV_VIS_LightSourceGUIProvider.GetDefaultInterface: ICoUV_VIS_LightSourceGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUV_VIS_LightSourceGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUV_VIS_LightSourceGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUV_VIS_LightSourceGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUV_VIS_LightSourceGUIProvider.GetServerProperties: TCCoUV_VIS_LightSourceGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUV_VIS_LightSourceGUIProvider.CreateUV_VIS_LightSourceGUIProvider;
begin
  DefaultInterface.CreateUV_VIS_LightSourceGUIProvider;
end;

function TCCoUV_VIS_LightSourceGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUV_VIS_LightSourceGUIProviderProperties.Create(AServer: TCCoUV_VIS_LightSourceGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUV_VIS_LightSourceGUIProviderProperties.GetDefaultInterface: ICoUV_VIS_LightSourceGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUV_VIS_LightSourceImpl.Create: ICoUV_VIS_LightSourceImpl;
begin
  Result := CreateComObject(CLASS_CCoUV_VIS_LightSourceImpl) as ICoUV_VIS_LightSourceImpl;
end;

class function CoCCoUV_VIS_LightSourceImpl.CreateRemote(const MachineName: string): ICoUV_VIS_LightSourceImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUV_VIS_LightSourceImpl) as ICoUV_VIS_LightSourceImpl;
end;

procedure TCCoUV_VIS_LightSourceImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{01C3FFAF-7E34-5A6A-91BC-6DA6F760DB84}';
    IntfIID:   '{0C127E0E-64D8-5BD7-8042-F688D1A948B2}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUV_VIS_LightSourceImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUV_VIS_LightSourceImpl;
  end;
end;

procedure TCCoUV_VIS_LightSourceImpl.ConnectTo(svrIntf: ICoUV_VIS_LightSourceImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUV_VIS_LightSourceImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUV_VIS_LightSourceImpl.GetDefaultInterface: ICoUV_VIS_LightSourceImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUV_VIS_LightSourceImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUV_VIS_LightSourceImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUV_VIS_LightSourceImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUV_VIS_LightSourceImpl.GetServerProperties: TCCoUV_VIS_LightSourceImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUV_VIS_LightSourceImpl.CreateUV_VIS_LightSourceImplB(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateUV_VIS_LightSourceImplB(COM_usbInt);
end;

procedure TCCoUV_VIS_LightSourceImpl.setLampOn(COM_lampOn: WordBool);
begin
  DefaultInterface.setLampOn(COM_lampOn);
end;

function TCCoUV_VIS_LightSourceImpl.isLampOn: WordBool;
begin
  Result := DefaultInterface.isLampOn;
end;

function TCCoUV_VIS_LightSourceImpl.isVisLampOn: WordBool;
begin
  Result := DefaultInterface.isVisLampOn;
end;

procedure TCCoUV_VIS_LightSourceImpl.setVisLampOn(COM_lampOn: WordBool);
begin
  DefaultInterface.setVisLampOn(COM_lampOn);
end;

function TCCoUV_VIS_LightSourceImpl.getVisLampIntensity: Smallint;
begin
  Result := DefaultInterface.getVisLampIntensity;
end;

procedure TCCoUV_VIS_LightSourceImpl.setVisLampIntensity(COM_intens: Smallint);
begin
  DefaultInterface.setVisLampIntensity(COM_intens);
end;

procedure TCCoUV_VIS_LightSourceImpl.setUVLampIntensity(COM_intens: Smallint);
begin
  DefaultInterface.setUVLampIntensity(COM_intens);
end;

function TCCoUV_VIS_LightSourceImpl.getUVLampIntensity: Smallint;
begin
  Result := DefaultInterface.getUVLampIntensity;
end;

procedure TCCoUV_VIS_LightSourceImpl.setPowerUpPOTValues;
begin
  DefaultInterface.setPowerUpPOTValues;
end;

function TCCoUV_VIS_LightSourceImpl.getPOTValues: OleVariant;
begin
  Result := DefaultInterface.getPOTValues;
end;

procedure TCCoUV_VIS_LightSourceImpl.setPOTValue(COM_pot: Integer; COM_value: Integer);
begin
  DefaultInterface.setPOTValue(COM_pot, COM_value);
end;

function TCCoUV_VIS_LightSourceImpl.getLampIntensityMinimum: Integer;
begin
  Result := DefaultInterface.getLampIntensityMinimum;
end;

function TCCoUV_VIS_LightSourceImpl.getLampIntensityMaximum: Integer;
begin
  Result := DefaultInterface.getLampIntensityMaximum;
end;

function TCCoUV_VIS_LightSourceImpl.getLampIntensityIncrement: Integer;
begin
  Result := DefaultInterface.getLampIntensityIncrement;
end;

function TCCoUV_VIS_LightSourceImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUV_VIS_LightSourceImplProperties.Create(AServer: TCCoUV_VIS_LightSourceImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUV_VIS_LightSourceImplProperties.GetDefaultInterface: ICoUV_VIS_LightSourceImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUV_VIS_LightSourceImpl_2000.Create: ICoUV_VIS_LightSourceImpl_2000;
begin
  Result := CreateComObject(CLASS_CCoUV_VIS_LightSourceImpl_2000) as ICoUV_VIS_LightSourceImpl_2000;
end;

class function CoCCoUV_VIS_LightSourceImpl_2000.CreateRemote(const MachineName: string): ICoUV_VIS_LightSourceImpl_2000;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUV_VIS_LightSourceImpl_2000) as ICoUV_VIS_LightSourceImpl_2000;
end;

procedure TCCoUV_VIS_LightSourceImpl_2000.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{DE0E3849-ECAD-519E-9030-46DAD66C476F}';
    IntfIID:   '{87939515-C221-5F6E-90B2-0DAEA7712E12}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUV_VIS_LightSourceImpl_2000.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUV_VIS_LightSourceImpl_2000;
  end;
end;

procedure TCCoUV_VIS_LightSourceImpl_2000.ConnectTo(svrIntf: ICoUV_VIS_LightSourceImpl_2000);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUV_VIS_LightSourceImpl_2000.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUV_VIS_LightSourceImpl_2000.GetDefaultInterface: ICoUV_VIS_LightSourceImpl_2000;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUV_VIS_LightSourceImpl_2000.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUV_VIS_LightSourceImpl_2000Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoUV_VIS_LightSourceImpl_2000.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUV_VIS_LightSourceImpl_2000.GetServerProperties: TCCoUV_VIS_LightSourceImpl_2000Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUV_VIS_LightSourceImpl_2000.CreateUV_VIS_LightSourceImpl_2000B(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateUV_VIS_LightSourceImpl_2000B(COM_usbInt);
end;

function TCCoUV_VIS_LightSourceImpl_2000.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUV_VIS_LightSourceImpl_2000Properties.Create(AServer: TCCoUV_VIS_LightSourceImpl_2000);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUV_VIS_LightSourceImpl_2000Properties.GetDefaultInterface: ICoUV_VIS_LightSourceImpl_2000;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUV_VIS_LightSourceImpl_4000.Create: ICoUV_VIS_LightSourceImpl_4000;
begin
  Result := CreateComObject(CLASS_CCoUV_VIS_LightSourceImpl_4000) as ICoUV_VIS_LightSourceImpl_4000;
end;

class function CoCCoUV_VIS_LightSourceImpl_4000.CreateRemote(const MachineName: string): ICoUV_VIS_LightSourceImpl_4000;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUV_VIS_LightSourceImpl_4000) as ICoUV_VIS_LightSourceImpl_4000;
end;

procedure TCCoUV_VIS_LightSourceImpl_4000.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0EC0E578-84A1-520D-801D-E556C9840915}';
    IntfIID:   '{565CF604-978C-5BA1-807E-3A921A79EA1A}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUV_VIS_LightSourceImpl_4000.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUV_VIS_LightSourceImpl_4000;
  end;
end;

procedure TCCoUV_VIS_LightSourceImpl_4000.ConnectTo(svrIntf: ICoUV_VIS_LightSourceImpl_4000);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUV_VIS_LightSourceImpl_4000.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUV_VIS_LightSourceImpl_4000.GetDefaultInterface: ICoUV_VIS_LightSourceImpl_4000;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUV_VIS_LightSourceImpl_4000.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUV_VIS_LightSourceImpl_4000Properties.Create(Self);
{$ENDIF}
end;

destructor TCCoUV_VIS_LightSourceImpl_4000.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUV_VIS_LightSourceImpl_4000.GetServerProperties: TCCoUV_VIS_LightSourceImpl_4000Properties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUV_VIS_LightSourceImpl_4000.CreateUV_VIS_LightSourceImpl_4000B(const COM_usbInt: ICoUSBInterface);
begin
  DefaultInterface.CreateUV_VIS_LightSourceImpl_4000B(COM_usbInt);
end;

function TCCoUV_VIS_LightSourceImpl_4000.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUV_VIS_LightSourceImpl_4000Properties.Create(AServer: TCCoUV_VIS_LightSourceImpl_4000);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUV_VIS_LightSourceImpl_4000Properties.GetDefaultInterface: ICoUV_VIS_LightSourceImpl_4000;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUV_VIS_LightSourceJAZCompatible.Create: ICoUV_VIS_LightSourceJAZCompatible;
begin
  Result := CreateComObject(CLASS_CCoUV_VIS_LightSourceJAZCompatible) as ICoUV_VIS_LightSourceJAZCompatible;
end;

class function CoCCoUV_VIS_LightSourceJAZCompatible.CreateRemote(const MachineName: string): ICoUV_VIS_LightSourceJAZCompatible;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUV_VIS_LightSourceJAZCompatible) as ICoUV_VIS_LightSourceJAZCompatible;
end;

procedure TCCoUV_VIS_LightSourceJAZCompatible.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A2FD4978-81A1-56A4-9184-9ACE81BA74EA}';
    IntfIID:   '{DDE1DEFF-86E6-514E-904E-54F0E7CA3E03}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUV_VIS_LightSourceJAZCompatible.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUV_VIS_LightSourceJAZCompatible;
  end;
end;

procedure TCCoUV_VIS_LightSourceJAZCompatible.ConnectTo(svrIntf: ICoUV_VIS_LightSourceJAZCompatible);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUV_VIS_LightSourceJAZCompatible.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUV_VIS_LightSourceJAZCompatible.GetDefaultInterface: ICoUV_VIS_LightSourceJAZCompatible;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUV_VIS_LightSourceJAZCompatible.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUV_VIS_LightSourceJAZCompatibleProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUV_VIS_LightSourceJAZCompatible.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUV_VIS_LightSourceJAZCompatible.GetServerProperties: TCCoUV_VIS_LightSourceJAZCompatibleProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUV_VIS_LightSourceJAZCompatible.CreateUV_VIS_LightSourceJAZCompatible;
begin
  DefaultInterface.CreateUV_VIS_LightSourceJAZCompatible;
end;

procedure TCCoUV_VIS_LightSourceJAZCompatible.setPowerUpPOTValues;
begin
  DefaultInterface.setPowerUpPOTValues;
end;

function TCCoUV_VIS_LightSourceJAZCompatible.getPOTValues: OleVariant;
begin
  Result := DefaultInterface.getPOTValues;
end;

procedure TCCoUV_VIS_LightSourceJAZCompatible.setPOTValue(COM_param0: Integer; COM_param1: Integer);
begin
  DefaultInterface.setPOTValue(COM_param0, COM_param1);
end;

function TCCoUV_VIS_LightSourceJAZCompatible.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUV_VIS_LightSourceJAZCompatibleProperties.Create(AServer: TCCoUV_VIS_LightSourceJAZCompatible);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUV_VIS_LightSourceJAZCompatibleProperties.GetDefaultInterface: ICoUV_VIS_LightSourceJAZCompatible;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUV_VIS_LightSourceImpl_JAZ.Create: ICoUV_VIS_LightSourceImpl_JAZ;
begin
  Result := CreateComObject(CLASS_CCoUV_VIS_LightSourceImpl_JAZ) as ICoUV_VIS_LightSourceImpl_JAZ;
end;

class function CoCCoUV_VIS_LightSourceImpl_JAZ.CreateRemote(const MachineName: string): ICoUV_VIS_LightSourceImpl_JAZ;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUV_VIS_LightSourceImpl_JAZ) as ICoUV_VIS_LightSourceImpl_JAZ;
end;

procedure TCCoUV_VIS_LightSourceImpl_JAZ.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{B595F51E-6EB5-52D1-9035-C0D61F293C28}';
    IntfIID:   '{BDC4D21D-B555-59B0-910A-3644D411139B}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUV_VIS_LightSourceImpl_JAZ.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUV_VIS_LightSourceImpl_JAZ;
  end;
end;

procedure TCCoUV_VIS_LightSourceImpl_JAZ.ConnectTo(svrIntf: ICoUV_VIS_LightSourceImpl_JAZ);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUV_VIS_LightSourceImpl_JAZ.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUV_VIS_LightSourceImpl_JAZ.GetDefaultInterface: ICoUV_VIS_LightSourceImpl_JAZ;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUV_VIS_LightSourceImpl_JAZ.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUV_VIS_LightSourceImpl_JAZProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUV_VIS_LightSourceImpl_JAZ.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUV_VIS_LightSourceImpl_JAZ.GetServerProperties: TCCoUV_VIS_LightSourceImpl_JAZProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUV_VIS_LightSourceImpl_JAZ.CreateUV_VIS_LightSourceImpl_JAZB(const COM_usbInt: ICoUSBInterface; 
                                                                           const COM_spec: ICoUV_VIS_LightSourceJAZCompatible);
begin
  DefaultInterface.CreateUV_VIS_LightSourceImpl_JAZB(COM_usbInt, COM_spec);
end;

procedure TCCoUV_VIS_LightSourceImpl_JAZ.setPowerUpPOTValues;
begin
  DefaultInterface.setPowerUpPOTValues;
end;

function TCCoUV_VIS_LightSourceImpl_JAZ.getJAZPOTValues: OleVariant;
begin
  Result := DefaultInterface.getJAZPOTValues;
end;

procedure TCCoUV_VIS_LightSourceImpl_JAZ.setPOTValue(COM_pot: Integer; COM_value: Integer);
begin
  DefaultInterface.setPOTValue(COM_pot, COM_value);
end;

function TCCoUV_VIS_LightSourceImpl_JAZ.getLampIntensityMaximum: Integer;
begin
  Result := DefaultInterface.getLampIntensityMaximum;
end;

procedure TCCoUV_VIS_LightSourceImpl_JAZ.setVisLampIntensity(COM_intens: Smallint);
begin
  DefaultInterface.setVisLampIntensity(COM_intens);
end;

procedure TCCoUV_VIS_LightSourceImpl_JAZ.setUVLampIntensity(COM_intens: Smallint);
begin
  DefaultInterface.setUVLampIntensity(COM_intens);
end;

function TCCoUV_VIS_LightSourceImpl_JAZ.getUVLampIntensity: Smallint;
begin
  Result := DefaultInterface.getUVLampIntensity;
end;

function TCCoUV_VIS_LightSourceImpl_JAZ.getVisLampIntensity: Smallint;
begin
  Result := DefaultInterface.getVisLampIntensity;
end;

function TCCoUV_VIS_LightSourceImpl_JAZ.isLampOn: WordBool;
begin
  Result := DefaultInterface.isLampOn;
end;

function TCCoUV_VIS_LightSourceImpl_JAZ.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUV_VIS_LightSourceImpl_JAZProperties.Create(AServer: TCCoUV_VIS_LightSourceImpl_JAZ);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUV_VIS_LightSourceImpl_JAZProperties.GetDefaultInterface: ICoUV_VIS_LightSourceImpl_JAZ;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUniUSB.Create: ICoUniUSB;
begin
  Result := CreateComObject(CLASS_CCoUniUSB) as ICoUniUSB;
end;

class function CoCCoUniUSB.CreateRemote(const MachineName: string): ICoUniUSB;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUniUSB) as ICoUniUSB;
end;

procedure TCCoUniUSB.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{A1E91C7E-6335-57B2-919F-6795B73B1E35}';
    IntfIID:   '{9CA86CAE-68C8-52FD-916D-D8FB54E0668D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUniUSB.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUniUSB;
  end;
end;

procedure TCCoUniUSB.ConnectTo(svrIntf: ICoUniUSB);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUniUSB.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUniUSB.GetDefaultInterface: ICoUniUSB;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUniUSB.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUniUSBProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUniUSB.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUniUSB.GetServerProperties: TCCoUniUSBProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUniUSB.CreateUniUSB;
begin
  DefaultInterface.CreateUniUSB;
end;

function TCCoUniUSB.isUSB2Mode: WordBool;
begin
  Result := DefaultInterface.isUSB2Mode;
end;

function TCCoUniUSB.openDevice(COM_vendID: Integer; COM_prodID: Integer; COM_number: Integer): Integer;
begin
  Result := DefaultInterface.openDevice(COM_vendID, COM_prodID, COM_number);
end;

procedure TCCoUniUSB.closeDevice(COM_devID: Integer);
begin
  DefaultInterface.closeDevice(COM_devID);
end;

function TCCoUniUSB.bulkIn(COM_devID: Integer; 
                           const COM_endPointDescriptor: ICoUSBEndpointDescriptor; 
                           COM_data: OleVariant; COM_size: Integer): Integer;
begin
  Result := DefaultInterface.bulkIn(COM_devID, COM_endPointDescriptor, COM_data, COM_size);
end;

function TCCoUniUSB.bulkOut(COM_devID: Integer; 
                            const COM_endPointDescriptor: ICoUSBEndpointDescriptor; 
                            COM_data: OleVariant; COM_size: Integer): Integer;
begin
  Result := DefaultInterface.bulkOut(COM_devID, COM_endPointDescriptor, COM_data, COM_size);
end;

procedure TCCoUniUSB.resetPipe(COM_devID: Integer; 
                               const COM_endPointDescriptor: ICoUSBEndpointDescriptor);
begin
  DefaultInterface.resetPipe(COM_devID, COM_endPointDescriptor);
end;

procedure TCCoUniUSB.abortPipe(COM_devID: Integer; 
                               const COM_endPointDescriptor: ICoUSBEndpointDescriptor);
begin
  DefaultInterface.abortPipe(COM_devID, COM_endPointDescriptor);
end;

function TCCoUniUSB.getUSBConfigurationDescriptor(COM_devID: Integer; COM_configNum: Integer): ICoUSBConfigurationDescriptor;
begin
  Result := DefaultInterface.getUSBConfigurationDescriptor(COM_devID, COM_configNum);
end;

function TCCoUniUSB.getUSBDeviceDescriptor(COM_devID: Integer): ICoUSBDeviceDescriptor;
begin
  Result := DefaultInterface.getUSBDeviceDescriptor(COM_devID);
end;

function TCCoUniUSB.getUSBInterfaceDescriptor(COM_devID: Integer): ICoUSBInterfaceDescriptor;
begin
  Result := DefaultInterface.getUSBInterfaceDescriptor(COM_devID);
end;

function TCCoUniUSB.getUSBStringDescriptor(COM_devID: Integer; COM_index: Integer): WideString;
begin
  Result := DefaultInterface.getUSBStringDescriptor(COM_devID, COM_index);
end;

function TCCoUniUSB.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUniUSBProperties.Create(AServer: TCCoUniUSB);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUniUSBProperties.GetDefaultInterface: ICoUniUSB;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoUniUSBPipeManager.Create: ICoUniUSBPipeManager;
begin
  Result := CreateComObject(CLASS_CCoUniUSBPipeManager) as ICoUniUSBPipeManager;
end;

class function CoCCoUniUSBPipeManager.CreateRemote(const MachineName: string): ICoUniUSBPipeManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoUniUSBPipeManager) as ICoUniUSBPipeManager;
end;

procedure TCCoUniUSBPipeManager.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{066EA430-49A2-5318-809A-77C262DC6B64}';
    IntfIID:   '{905EF4DF-24DF-5E81-8075-ED5D816DCF74}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoUniUSBPipeManager.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoUniUSBPipeManager;
  end;
end;

procedure TCCoUniUSBPipeManager.ConnectTo(svrIntf: ICoUniUSBPipeManager);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoUniUSBPipeManager.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoUniUSBPipeManager.GetDefaultInterface: ICoUniUSBPipeManager;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoUniUSBPipeManager.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoUniUSBPipeManagerProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoUniUSBPipeManager.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoUniUSBPipeManager.GetServerProperties: TCCoUniUSBPipeManagerProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoUniUSBPipeManager.CreateUniUSBPipeManager;
begin
  DefaultInterface.CreateUniUSBPipeManager;
end;

procedure TCCoUniUSBPipeManager.addDeviceMapping(COM_devID: Integer; 
                                                 const COM_mapping: ICoEndpointToPipeMapping);
begin
  DefaultInterface.addDeviceMapping(COM_devID, COM_mapping);
end;

function TCCoUniUSBPipeManager.getPipe(COM_devID: Integer; COM_endPoint: Smallint): Integer;
begin
  Result := DefaultInterface.getPipe(COM_devID, COM_endPoint);
end;

procedure TCCoUniUSBPipeManager.removeDeviceMapping(COM_devID: Integer);
begin
  DefaultInterface.removeDeviceMapping(COM_devID);
end;

function TCCoUniUSBPipeManager.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoUniUSBPipeManagerProperties.Create(AServer: TCCoUniUSBPipeManager);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoUniUSBPipeManagerProperties.GetDefaultInterface: ICoUniUSBPipeManager;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoVersion.Create: ICoVersion;
begin
  Result := CreateComObject(CLASS_CCoVersion) as ICoVersion;
end;

class function CoCCoVersion.CreateRemote(const MachineName: string): ICoVersion;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoVersion) as ICoVersion;
end;

procedure TCCoVersion.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{64A9FB93-8F27-5EAE-9100-0B8040E57D6A}';
    IntfIID:   '{6D8D59DA-EB63-573D-9007-ED97488A9EBA}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoVersion.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoVersion;
  end;
end;

procedure TCCoVersion.ConnectTo(svrIntf: ICoVersion);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoVersion.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoVersion.GetDefaultInterface: ICoVersion;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoVersion.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoVersionProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoVersion.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoVersion.GetServerProperties: TCCoVersionProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoVersion.CreateVersion;
begin
  DefaultInterface.CreateVersion;
end;

function TCCoVersion.isAdvancedVersion: WordBool;
begin
  Result := DefaultInterface.isAdvancedVersion;
end;

function TCCoVersion.getFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFirmwareVersion;
end;

procedure TCCoVersion.addAcquisitionListener(const COM_param0: ICoAcquisitionListener);
begin
  DefaultInterface.addAcquisitionListener(COM_param0);
end;

procedure TCCoVersion.removeAcquisitionListener(const COM_param0: ICoAcquisitionListener);
begin
  DefaultInterface.removeAcquisitionListener(COM_param0);
end;

function TCCoVersion.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoVersionProperties.Create(AServer: TCCoVersion);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoVersionProperties.GetDefaultInterface: ICoVersion;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoVersionGUIProvider.Create: ICoVersionGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoVersionGUIProvider) as ICoVersionGUIProvider;
end;

class function CoCCoVersionGUIProvider.CreateRemote(const MachineName: string): ICoVersionGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoVersionGUIProvider) as ICoVersionGUIProvider;
end;

procedure TCCoVersionGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{1EF113D7-C19C-5D0D-906E-4187CF3EBCCA}';
    IntfIID:   '{25D13161-1B32-5078-81DF-705C879C3DD6}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoVersionGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoVersionGUIProvider;
  end;
end;

procedure TCCoVersionGUIProvider.ConnectTo(svrIntf: ICoVersionGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoVersionGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoVersionGUIProvider.GetDefaultInterface: ICoVersionGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoVersionGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoVersionGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoVersionGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoVersionGUIProvider.GetServerProperties: TCCoVersionGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoVersionGUIProvider.CreateVersionGUIProvider;
begin
  DefaultInterface.CreateVersionGUIProvider;
end;

function TCCoVersionGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoVersionGUIProviderProperties.Create(AServer: TCCoVersionGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoVersionGUIProviderProperties.GetDefaultInterface: ICoVersionGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoVersionImpl.Create: ICoVersionImpl;
begin
  Result := CreateComObject(CLASS_CCoVersionImpl) as ICoVersionImpl;
end;

class function CoCCoVersionImpl.CreateRemote(const MachineName: string): ICoVersionImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoVersionImpl) as ICoVersionImpl;
end;

procedure TCCoVersionImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C227E6F3-A5BA-5D1F-80DE-E1553FAB1535}';
    IntfIID:   '{01FEE2E1-4F1F-5A31-8131-8D2F12FB7292}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoVersionImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoVersionImpl;
  end;
end;

procedure TCCoVersionImpl.ConnectTo(svrIntf: ICoVersionImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoVersionImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoVersionImpl.GetDefaultInterface: ICoVersionImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoVersionImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoVersionImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoVersionImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoVersionImpl.GetServerProperties: TCCoVersionImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoVersionImpl.CreateVersionImplB(const COM_usbInt: ICoUSBInterface; 
                                             const COM_spectrometer: ICoSpectrometer);
begin
  DefaultInterface.CreateVersionImplB(COM_usbInt, COM_spectrometer);
end;

function TCCoVersionImpl.isAdvancedVersion: WordBool;
begin
  Result := DefaultInterface.isAdvancedVersion;
end;

function TCCoVersionImpl.getFirmwareVersion: WideString;
begin
  Result := DefaultInterface.getFirmwareVersion;
end;

procedure TCCoVersionImpl.addAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.addAcquisitionListener(COM_listener);
end;

procedure TCCoVersionImpl.removeAcquisitionListener(const COM_listener: ICoAcquisitionListener);
begin
  DefaultInterface.removeAcquisitionListener(COM_listener);
end;

function TCCoVersionImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoVersionImplProperties.Create(AServer: TCCoVersionImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoVersionImplProperties.GetDefaultInterface: ICoVersionImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoWavelengthCalibrationGUIProvider.Create: ICoWavelengthCalibrationGUIProvider;
begin
  Result := CreateComObject(CLASS_CCoWavelengthCalibrationGUIProvider) as ICoWavelengthCalibrationGUIProvider;
end;

class function CoCCoWavelengthCalibrationGUIProvider.CreateRemote(const MachineName: string): ICoWavelengthCalibrationGUIProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoWavelengthCalibrationGUIProvider) as ICoWavelengthCalibrationGUIProvider;
end;

procedure TCCoWavelengthCalibrationGUIProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{0D1700DD-C794-57E7-90C1-0B2C0E0136F4}';
    IntfIID:   '{A5E0FD64-31A6-585C-804B-46848479AC8D}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoWavelengthCalibrationGUIProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoWavelengthCalibrationGUIProvider;
  end;
end;

procedure TCCoWavelengthCalibrationGUIProvider.ConnectTo(svrIntf: ICoWavelengthCalibrationGUIProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoWavelengthCalibrationGUIProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoWavelengthCalibrationGUIProvider.GetDefaultInterface: ICoWavelengthCalibrationGUIProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoWavelengthCalibrationGUIProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoWavelengthCalibrationGUIProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoWavelengthCalibrationGUIProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoWavelengthCalibrationGUIProvider.GetServerProperties: TCCoWavelengthCalibrationGUIProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoWavelengthCalibrationGUIProvider.CreateWavelengthCalibrationGUIProvider;
begin
  DefaultInterface.CreateWavelengthCalibrationGUIProvider;
end;

function TCCoWavelengthCalibrationGUIProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoWavelengthCalibrationGUIProviderProperties.Create(AServer: TCCoWavelengthCalibrationGUIProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoWavelengthCalibrationGUIProviderProperties.GetDefaultInterface: ICoWavelengthCalibrationGUIProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoWavelengthCalibrationImpl.Create: ICoWavelengthCalibrationImpl;
begin
  Result := CreateComObject(CLASS_CCoWavelengthCalibrationImpl) as ICoWavelengthCalibrationImpl;
end;

class function CoCCoWavelengthCalibrationImpl.CreateRemote(const MachineName: string): ICoWavelengthCalibrationImpl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoWavelengthCalibrationImpl) as ICoWavelengthCalibrationImpl;
end;

procedure TCCoWavelengthCalibrationImpl.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{3ED27A05-03A5-522A-80C8-09B36BCCE2B7}';
    IntfIID:   '{13292F69-F32B-513B-915E-CB9F187BC432}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoWavelengthCalibrationImpl.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoWavelengthCalibrationImpl;
  end;
end;

procedure TCCoWavelengthCalibrationImpl.ConnectTo(svrIntf: ICoWavelengthCalibrationImpl);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoWavelengthCalibrationImpl.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoWavelengthCalibrationImpl.GetDefaultInterface: ICoWavelengthCalibrationImpl;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoWavelengthCalibrationImpl.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoWavelengthCalibrationImplProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoWavelengthCalibrationImpl.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoWavelengthCalibrationImpl.GetServerProperties: TCCoWavelengthCalibrationImplProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoWavelengthCalibrationImpl.CreateWavelengthCalibrationImplB(const COM_usbInt: ICoUSBInterface; 
                                                                         const COM_s: ICoSpectrometer);
begin
  DefaultInterface.CreateWavelengthCalibrationImplB(COM_usbInt, COM_s);
end;

function TCCoWavelengthCalibrationImpl.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoWavelengthCalibrationImpl.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoWavelengthCalibrationImpl.getWavelengths(COM_channel: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_channel);
end;

procedure TCCoWavelengthCalibrationImpl.setWavelengths(COM_wl: OleVariant; COM_channel: Integer);
begin
  DefaultInterface.setWavelengths(COM_wl, COM_channel);
end;

function TCCoWavelengthCalibrationImpl.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoWavelengthCalibrationImplProperties.Create(AServer: TCCoWavelengthCalibrationImpl);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoWavelengthCalibrationImplProperties.GetDefaultInterface: ICoWavelengthCalibrationImpl;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoWavelengthCalibrationImpl_MMSRaman.Create: ICoWavelengthCalibrationImpl_MMSRaman;
begin
  Result := CreateComObject(CLASS_CCoWavelengthCalibrationImpl_MMSRaman) as ICoWavelengthCalibrationImpl_MMSRaman;
end;

class function CoCCoWavelengthCalibrationImpl_MMSRaman.CreateRemote(const MachineName: string): ICoWavelengthCalibrationImpl_MMSRaman;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoWavelengthCalibrationImpl_MMSRaman) as ICoWavelengthCalibrationImpl_MMSRaman;
end;

procedure TCCoWavelengthCalibrationImpl_MMSRaman.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C3558BA9-64B5-51BA-906B-201646B1679D}';
    IntfIID:   '{B0CC345B-92F6-5045-804C-4A0BF5319A94}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoWavelengthCalibrationImpl_MMSRaman.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoWavelengthCalibrationImpl_MMSRaman;
  end;
end;

procedure TCCoWavelengthCalibrationImpl_MMSRaman.ConnectTo(svrIntf: ICoWavelengthCalibrationImpl_MMSRaman);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoWavelengthCalibrationImpl_MMSRaman.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoWavelengthCalibrationImpl_MMSRaman.GetDefaultInterface: ICoWavelengthCalibrationImpl_MMSRaman;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoWavelengthCalibrationImpl_MMSRaman.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoWavelengthCalibrationImpl_MMSRamanProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoWavelengthCalibrationImpl_MMSRaman.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoWavelengthCalibrationImpl_MMSRaman.GetServerProperties: TCCoWavelengthCalibrationImpl_MMSRamanProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoWavelengthCalibrationImpl_MMSRaman.CreateWavelengthCalibrationImpl_MMSRamanB(const COM_usb: ICoUSBInterface; 
                                                                                           const COM_s: ICoMMSRamanSpectrometer);
begin
  DefaultInterface.CreateWavelengthCalibrationImpl_MMSRamanB(COM_usb, COM_s);
end;

function TCCoWavelengthCalibrationImpl_MMSRaman.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoWavelengthCalibrationImpl_MMSRaman.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoWavelengthCalibrationImpl_MMSRaman.getWavelengths(COM_index: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_index);
end;

procedure TCCoWavelengthCalibrationImpl_MMSRaman.setWavelengths(COM_wavelengths: OleVariant; 
                                                                COM_index: Integer);
begin
  DefaultInterface.setWavelengths(COM_wavelengths, COM_index);
end;

function TCCoWavelengthCalibrationImpl_MMSRaman.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoWavelengthCalibrationImpl_MMSRamanProperties.Create(AServer: TCCoWavelengthCalibrationImpl_MMSRaman);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoWavelengthCalibrationImpl_MMSRamanProperties.GetDefaultInterface: ICoWavelengthCalibrationImpl_MMSRaman;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoWavelengthCalibrationProvider.Create: ICoWavelengthCalibrationProvider;
begin
  Result := CreateComObject(CLASS_CCoWavelengthCalibrationProvider) as ICoWavelengthCalibrationProvider;
end;

class function CoCCoWavelengthCalibrationProvider.CreateRemote(const MachineName: string): ICoWavelengthCalibrationProvider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoWavelengthCalibrationProvider) as ICoWavelengthCalibrationProvider;
end;

procedure TCCoWavelengthCalibrationProvider.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{94C22A06-5713-5A2C-8187-A577DED05DAE}';
    IntfIID:   '{7A4495F8-85AB-5A02-91D9-2282AFC3E0F9}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoWavelengthCalibrationProvider.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoWavelengthCalibrationProvider;
  end;
end;

procedure TCCoWavelengthCalibrationProvider.ConnectTo(svrIntf: ICoWavelengthCalibrationProvider);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoWavelengthCalibrationProvider.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoWavelengthCalibrationProvider.GetDefaultInterface: ICoWavelengthCalibrationProvider;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoWavelengthCalibrationProvider.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoWavelengthCalibrationProviderProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoWavelengthCalibrationProvider.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoWavelengthCalibrationProvider.GetServerProperties: TCCoWavelengthCalibrationProviderProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoWavelengthCalibrationProvider.CreateWavelengthCalibrationProvider;
begin
  DefaultInterface.CreateWavelengthCalibrationProvider;
end;

function TCCoWavelengthCalibrationProvider.readWavelengthCalibrationCoefficientsFromSpectrometer: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.readWavelengthCalibrationCoefficientsFromSpectrometer;
end;

function TCCoWavelengthCalibrationProvider.getWavelengthCalibrationCoefficients: ICoCoefficientsCollection;
begin
  Result := DefaultInterface.getWavelengthCalibrationCoefficients;
end;

function TCCoWavelengthCalibrationProvider.getWavelengths(COM_param0: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_param0);
end;

procedure TCCoWavelengthCalibrationProvider.setWavelengths(COM_param0: OleVariant; 
                                                           COM_param1: Integer);
begin
  DefaultInterface.setWavelengths(COM_param0, COM_param1);
end;

function TCCoWavelengthCalibrationProvider.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoWavelengthCalibrationProviderProperties.Create(AServer: TCCoWavelengthCalibrationProvider);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoWavelengthCalibrationProviderProperties.GetDefaultInterface: ICoWavelengthCalibrationProvider;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoWavelengthCalibrationTableModel.Create: ICoWavelengthCalibrationTableModel;
begin
  Result := CreateComObject(CLASS_CCoWavelengthCalibrationTableModel) as ICoWavelengthCalibrationTableModel;
end;

class function CoCCoWavelengthCalibrationTableModel.CreateRemote(const MachineName: string): ICoWavelengthCalibrationTableModel;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoWavelengthCalibrationTableModel) as ICoWavelengthCalibrationTableModel;
end;

procedure TCCoWavelengthCalibrationTableModel.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{38668496-C1AD-50CA-91E6-FE8020F11DCC}';
    IntfIID:   '{73B5369F-4044-585C-80F9-8E29E9FB7A98}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoWavelengthCalibrationTableModel.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoWavelengthCalibrationTableModel;
  end;
end;

procedure TCCoWavelengthCalibrationTableModel.ConnectTo(svrIntf: ICoWavelengthCalibrationTableModel);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoWavelengthCalibrationTableModel.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoWavelengthCalibrationTableModel.GetDefaultInterface: ICoWavelengthCalibrationTableModel;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoWavelengthCalibrationTableModel.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoWavelengthCalibrationTableModelProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoWavelengthCalibrationTableModel.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoWavelengthCalibrationTableModel.GetServerProperties: TCCoWavelengthCalibrationTableModelProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoWavelengthCalibrationTableModel.CreateWavelengthCalibrationTableModel;
begin
  DefaultInterface.CreateWavelengthCalibrationTableModel;
end;

procedure TCCoWavelengthCalibrationTableModel.setCoefficients(COM_coefficients: OleVariant);
begin
  DefaultInterface.setCoefficients(COM_coefficients);
end;

function TCCoWavelengthCalibrationTableModel.getCoefficient(COM_row: Integer): Double;
begin
  Result := DefaultInterface.getCoefficient(COM_row);
end;

function TCCoWavelengthCalibrationTableModel.isCellEditable(COM_rowIndex: Integer; 
                                                            COM_columnIndex: Integer): WordBool;
begin
  Result := DefaultInterface.isCellEditable(COM_rowIndex, COM_columnIndex);
end;

function TCCoWavelengthCalibrationTableModel.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoWavelengthCalibrationTableModelProperties.Create(AServer: TCCoWavelengthCalibrationTableModel);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoWavelengthCalibrationTableModelProperties.GetDefaultInterface: ICoWavelengthCalibrationTableModel;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

class function CoCCoWrapper.Create: ICoWrapper;
begin
  Result := CreateComObject(CLASS_CCoWrapper) as ICoWrapper;
end;

class function CoCCoWrapper.CreateRemote(const MachineName: string): ICoWrapper;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CCoWrapper) as ICoWrapper;
end;

procedure TCCoWrapper.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{2674047E-2B5D-5202-80ED-B9FB545155EF}';
    IntfIID:   '{EC41C2F1-AE7B-5388-81A9-6E1C82AFE801}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCCoWrapper.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICoWrapper;
  end;
end;

procedure TCCoWrapper.ConnectTo(svrIntf: ICoWrapper);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCCoWrapper.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCCoWrapper.GetDefaultInterface: ICoWrapper;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCCoWrapper.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TCCoWrapperProperties.Create(Self);
{$ENDIF}
end;

destructor TCCoWrapper.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TCCoWrapper.GetServerProperties: TCCoWrapperProperties;
begin
  Result := FProps;
end;
{$ENDIF}

procedure TCCoWrapper.CreateWrapper;
begin
  DefaultInterface.CreateWrapper;
end;

function TCCoWrapper.getApiVersion: WideString;
begin
  Result := DefaultInterface.getApiVersion;
end;

function TCCoWrapper.getBuildNumber: Integer;
begin
  Result := DefaultInterface.getBuildNumber;
end;

function TCCoWrapper.getLastException: WideString;
begin
  Result := DefaultInterface.getLastException;
end;

function TCCoWrapper.getLastExceptionStackTrace: WideString;
begin
  Result := DefaultInterface.getLastExceptionStackTrace;
end;

function TCCoWrapper.openAllSpectrometers: Integer;
begin
  Result := DefaultInterface.openAllSpectrometers;
end;

function TCCoWrapper.getName(COM_spectrometerIndex: Integer): WideString;
begin
  Result := DefaultInterface.getName(COM_spectrometerIndex);
end;

function TCCoWrapper.getMaximumIntegrationTime(COM_spectrometerIndex: Integer): Integer;
begin
  Result := DefaultInterface.getMaximumIntegrationTime(COM_spectrometerIndex);
end;

function TCCoWrapper.getMinimumIntegrationTime(COM_spectrometerIndex: Integer): Integer;
begin
  Result := DefaultInterface.getMinimumIntegrationTime(COM_spectrometerIndex);
end;

function TCCoWrapper.getMaximumIntensity(COM_spectrometerIndex: Integer): Integer;
begin
  Result := DefaultInterface.getMaximumIntensity(COM_spectrometerIndex);
end;

function TCCoWrapper.getNumberOfSpectrometersFound: Integer;
begin
  Result := DefaultInterface.getNumberOfSpectrometersFound;
end;

function TCCoWrapper.getFirmwareVersion(COM_spectrometerIndex: Integer): WideString;
begin
  Result := DefaultInterface.getFirmwareVersion(COM_spectrometerIndex);
end;

function TCCoWrapper.getSerialNumber(COM_spectrometerIndex: Integer): WideString;
begin
  Result := DefaultInterface.getSerialNumber(COM_spectrometerIndex);
end;

function TCCoWrapper.getNumberOfPixels(COM_spectrometerIndex: Integer): Integer;
begin
  Result := DefaultInterface.getNumberOfPixels(COM_spectrometerIndex);
end;

function TCCoWrapper.getNumberOfDarkPixels(COM_spectrometerIndex: Integer): Integer;
begin
  Result := DefaultInterface.getNumberOfDarkPixels(COM_spectrometerIndex);
end;

function TCCoWrapper.getNumberOfEnabledChannels(COM_spectrometerIndex: Integer): Integer;
begin
  Result := DefaultInterface.getNumberOfEnabledChannels(COM_spectrometerIndex);
end;

procedure TCCoWrapper.setIntegrationTime(COM_spectrometerIndex: Integer; COM_usec: Integer);
begin
  DefaultInterface.setIntegrationTime(COM_spectrometerIndex, COM_usec);
end;

procedure TCCoWrapper.setIntegrationTimeB(COM_spectrometerIndex: Integer; 
                                          COM_channelIndex: Integer; COM_usec: Integer);
begin
  DefaultInterface.setIntegrationTimeB(COM_spectrometerIndex, COM_channelIndex, COM_usec);
end;

function TCCoWrapper.getIntegrationTime(COM_spectrometerIndex: Integer): Integer;
begin
  Result := DefaultInterface.getIntegrationTime(COM_spectrometerIndex);
end;

function TCCoWrapper.getIntegrationTimeB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Integer;
begin
  Result := DefaultInterface.getIntegrationTimeB(COM_spectrometerIndex, COM_channelIndex);
end;

procedure TCCoWrapper.setScansToAverage(COM_spectrometerIndex: Integer; 
                                        COM_numberOfScansToAverage: Integer);
begin
  DefaultInterface.setScansToAverage(COM_spectrometerIndex, COM_numberOfScansToAverage);
end;

procedure TCCoWrapper.setScansToAverageB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer; 
                                         COM_numberOfScansToAverage: Integer);
begin
  DefaultInterface.setScansToAverageB(COM_spectrometerIndex, COM_channelIndex, 
                                      COM_numberOfScansToAverage);
end;

function TCCoWrapper.getScansToAverage(COM_spectrometerIndex: Integer): Integer;
begin
  Result := DefaultInterface.getScansToAverage(COM_spectrometerIndex);
end;

function TCCoWrapper.getScansToAverageB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Integer;
begin
  Result := DefaultInterface.getScansToAverageB(COM_spectrometerIndex, COM_channelIndex);
end;

function TCCoWrapper.getBench(COM_spectrometerIndex: Integer): ICoBench;
begin
  Result := DefaultInterface.getBench(COM_spectrometerIndex);
end;

procedure TCCoWrapper.setBoxcarWidth(COM_spectrometerIndex: Integer; 
                                     COM_numberOfPixelsOnEitherSideOfCenter: Integer);
begin
  DefaultInterface.setBoxcarWidth(COM_spectrometerIndex, COM_numberOfPixelsOnEitherSideOfCenter);
end;

procedure TCCoWrapper.setBoxcarWidthB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer; 
                                      COM_numberOfPixelsOnEitherSideOfCenter: Integer);
begin
  DefaultInterface.setBoxcarWidthB(COM_spectrometerIndex, COM_channelIndex, 
                                   COM_numberOfPixelsOnEitherSideOfCenter);
end;

function TCCoWrapper.getBoxcarWidth(COM_spectrometerIndex: Integer): Integer;
begin
  Result := DefaultInterface.getBoxcarWidth(COM_spectrometerIndex);
end;

function TCCoWrapper.getBoxcarWidthB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Integer;
begin
  Result := DefaultInterface.getBoxcarWidthB(COM_spectrometerIndex, COM_channelIndex);
end;

procedure TCCoWrapper.setExternalTriggerMode(COM_spectrometerIndex: Integer; COM_mode: Integer);
begin
  DefaultInterface.setExternalTriggerMode(COM_spectrometerIndex, COM_mode);
end;

procedure TCCoWrapper.setExternalTriggerModeB(COM_spectrometerIndex: Integer; 
                                              COM_channelIndex: Integer; COM_mode: Integer);
begin
  DefaultInterface.setExternalTriggerModeB(COM_spectrometerIndex, COM_channelIndex, COM_mode);
end;

function TCCoWrapper.getExternalTriggerMode(COM_spectrometerIndex: Integer): Integer;
begin
  Result := DefaultInterface.getExternalTriggerMode(COM_spectrometerIndex);
end;

function TCCoWrapper.getExternalTriggerModeB(COM_spectrometerIndex: Integer; 
                                             COM_channelIndex: Integer): Integer;
begin
  Result := DefaultInterface.getExternalTriggerModeB(COM_spectrometerIndex, COM_channelIndex);
end;

procedure TCCoWrapper.setCorrectForElectricalDark(COM_spectrometerIndex: Integer; 
                                                  COM_enable: Integer);
begin
  DefaultInterface.setCorrectForElectricalDark(COM_spectrometerIndex, COM_enable);
end;

procedure TCCoWrapper.setCorrectForElectricalDarkB(COM_spectrometerIndex: Integer; 
                                                   COM_channelIndex: Integer; COM_enable: Integer);
begin
  DefaultInterface.setCorrectForElectricalDarkB(COM_spectrometerIndex, COM_channelIndex, COM_enable);
end;

procedure TCCoWrapper.setCorrectForDetectorNonlinearity(COM_spectrometerIndex: Integer; 
                                                        COM_enable: Integer);
begin
  DefaultInterface.setCorrectForDetectorNonlinearity(COM_spectrometerIndex, COM_enable);
end;

procedure TCCoWrapper.setCorrectForDetectorNonlinearityB(COM_spectrometerIndex: Integer; 
                                                         COM_channelIndex: Integer; 
                                                         COM_enable: Integer);
begin
  DefaultInterface.setCorrectForDetectorNonlinearityB(COM_spectrometerIndex, COM_channelIndex, 
                                                      COM_enable);
end;

procedure TCCoWrapper.setStrobeEnable(COM_spectrometerIndex: Integer; COM_lampOn: Integer);
begin
  DefaultInterface.setStrobeEnable(COM_spectrometerIndex, COM_lampOn);
end;

procedure TCCoWrapper.setStrobeEnableB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer; 
                                       COM_lampOn: Integer);
begin
  DefaultInterface.setStrobeEnableB(COM_spectrometerIndex, COM_channelIndex, COM_lampOn);
end;

function TCCoWrapper.getStrobeEnable(COM_spectrometerIndex: Integer): Integer;
begin
  Result := DefaultInterface.getStrobeEnable(COM_spectrometerIndex);
end;

function TCCoWrapper.getStrobeEnableB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Integer;
begin
  Result := DefaultInterface.getStrobeEnableB(COM_spectrometerIndex, COM_channelIndex);
end;

function TCCoWrapper.getWavelengths(COM_spectrometerIndex: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengths(COM_spectrometerIndex);
end;

function TCCoWrapper.getWavelengthsB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): OleVariant;
begin
  Result := DefaultInterface.getWavelengthsB(COM_spectrometerIndex, COM_channelIndex);
end;

function TCCoWrapper.getWavelengthIntercept(COM_spectrometerIndex: Integer): Double;
begin
  Result := DefaultInterface.getWavelengthIntercept(COM_spectrometerIndex);
end;

function TCCoWrapper.getWavelengthInterceptB(COM_spectrometerIndex: Integer; 
                                             COM_channelIndex: Integer): Double;
begin
  Result := DefaultInterface.getWavelengthInterceptB(COM_spectrometerIndex, COM_channelIndex);
end;

function TCCoWrapper.getWavelengthFirst(COM_spectrometerIndex: Integer): Double;
begin
  Result := DefaultInterface.getWavelengthFirst(COM_spectrometerIndex);
end;

function TCCoWrapper.getWavelengthFirstB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Double;
begin
  Result := DefaultInterface.getWavelengthFirstB(COM_spectrometerIndex, COM_channelIndex);
end;

function TCCoWrapper.getWavelengthSecond(COM_spectrometerIndex: Integer): Double;
begin
  Result := DefaultInterface.getWavelengthSecond(COM_spectrometerIndex);
end;

function TCCoWrapper.getWavelengthSecondB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Double;
begin
  Result := DefaultInterface.getWavelengthSecondB(COM_spectrometerIndex, COM_channelIndex);
end;

function TCCoWrapper.getWavelengthThird(COM_spectrometerIndex: Integer): Double;
begin
  Result := DefaultInterface.getWavelengthThird(COM_spectrometerIndex);
end;

function TCCoWrapper.getWavelengthThirdB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): Double;
begin
  Result := DefaultInterface.getWavelengthThirdB(COM_spectrometerIndex, COM_channelIndex);
end;

function TCCoWrapper.getSpectrum(COM_spectrometerIndex: Integer): OleVariant;
begin
  Result := DefaultInterface.getSpectrum(COM_spectrometerIndex);
end;

function TCCoWrapper.getSpectrumB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): OleVariant;
begin
  Result := DefaultInterface.getSpectrumB(COM_spectrometerIndex, COM_channelIndex);
end;

function TCCoWrapper.isSaturated(COM_spectrometerIndex: Integer): WordBool;
begin
  Result := DefaultInterface.isSaturated(COM_spectrometerIndex);
end;

function TCCoWrapper.isSaturatedB(COM_spectrometerIndex: Integer; COM_channelIndex: Integer): WordBool;
begin
  Result := DefaultInterface.isSaturatedB(COM_spectrometerIndex, COM_channelIndex);
end;

procedure TCCoWrapper.closeAllSpectrometers;
begin
  DefaultInterface.closeAllSpectrometers;
end;

procedure TCCoWrapper.closeSpectrometer(COM_spectrometerIndex: Integer);
begin
  DefaultInterface.closeSpectrometer(COM_spectrometerIndex);
end;

function TCCoWrapper.getFeatureControllerGPIO(COM_spectrometerIndex: Integer): ICoGPIO;
begin
  Result := DefaultInterface.getFeatureControllerGPIO(COM_spectrometerIndex);
end;

function TCCoWrapper.isFeatureSupportedGPIO(COM_spectrometerIndex: Integer): WordBool;
begin
  Result := DefaultInterface.isFeatureSupportedGPIO(COM_spectrometerIndex);
end;

function TCCoWrapper.getFeatureControllerSPIBus(COM_spectrometerIndex: Integer): ICoSPIBus;
begin
  Result := DefaultInterface.getFeatureControllerSPIBus(COM_spectrometerIndex);
end;

function TCCoWrapper.isFeatureSupportedSPIBus(COM_spectrometerIndex: Integer): WordBool;
begin
  Result := DefaultInterface.isFeatureSupportedSPIBus(COM_spectrometerIndex);
end;

function TCCoWrapper.getFeatureControllerSingleStrobe(COM_spectrometerIndex: Integer): ICoSingleStrobe;
begin
  Result := DefaultInterface.getFeatureControllerSingleStrobe(COM_spectrometerIndex);
end;

function TCCoWrapper.isFeatureSupportedSingleStrobe(COM_spectrometerIndex: Integer): WordBool;
begin
  Result := DefaultInterface.isFeatureSupportedSingleStrobe(COM_spectrometerIndex);
end;

function TCCoWrapper.getFeatureControllerContinuousStrobe(COM_spectrometerIndex: Integer): ICoContinuousStrobe;
begin
  Result := DefaultInterface.getFeatureControllerContinuousStrobe(COM_spectrometerIndex);
end;

function TCCoWrapper.isFeatureSupportedContinuousStrobe(COM_spectrometerIndex: Integer): WordBool;
begin
  Result := DefaultInterface.isFeatureSupportedContinuousStrobe(COM_spectrometerIndex);
end;

function TCCoWrapper.getFeatureControllerBoardTemperature(COM_spectrometerIndex: Integer): ICoBoardTemperature;
begin
  Result := DefaultInterface.getFeatureControllerBoardTemperature(COM_spectrometerIndex);
end;

function TCCoWrapper.isFeatureSupportedBoardTemperature(COM_spectrometerIndex: Integer): WordBool;
begin
  Result := DefaultInterface.isFeatureSupportedBoardTemperature(COM_spectrometerIndex);
end;

function TCCoWrapper.getFeatureControllerAnalogIn(COM_spectrometerIndex: Integer): ICoAnalogIn;
begin
  Result := DefaultInterface.getFeatureControllerAnalogIn(COM_spectrometerIndex);
end;

function TCCoWrapper.isFeatureSupportedAnalogIn(COM_spectrometerIndex: Integer): WordBool;
begin
  Result := DefaultInterface.isFeatureSupportedAnalogIn(COM_spectrometerIndex);
end;

function TCCoWrapper.getFeatureControllerAnalogOut(COM_spectrometerIndex: Integer): ICoAnalogOut;
begin
  Result := DefaultInterface.getFeatureControllerAnalogOut(COM_spectrometerIndex);
end;

function TCCoWrapper.isFeatureSupportedAnalogOut(COM_spectrometerIndex: Integer): WordBool;
begin
  Result := DefaultInterface.isFeatureSupportedAnalogOut(COM_spectrometerIndex);
end;

function TCCoWrapper.getFeatureControllerExternalTriggerDelay(COM_spectrometerIndex: Integer): ICoExternalTriggerDelay;
begin
  Result := DefaultInterface.getFeatureControllerExternalTriggerDelay(COM_spectrometerIndex);
end;

function TCCoWrapper.isFeatureSupportedExternalTriggerDelay(COM_spectrometerIndex: Integer): WordBool;
begin
  Result := DefaultInterface.isFeatureSupportedExternalTriggerDelay(COM_spectrometerIndex);
end;

function TCCoWrapper.getFeatureControllerIrradianceCalibrationFactor(COM_spectrometerIndex: Integer): ICoIrradianceCalibrationFactor;
begin
  Result := DefaultInterface.getFeatureControllerIrradianceCalibrationFactor(COM_spectrometerIndex);
end;

function TCCoWrapper.isFeatureSupportedIrradianceCalibrationFactor(COM_spectrometerIndex: Integer): WordBool;
begin
  Result := DefaultInterface.isFeatureSupportedIrradianceCalibrationFactor(COM_spectrometerIndex);
end;

function TCCoWrapper.getFeatureControllerNonlinearityCorrectionProvider(COM_spectrometerIndex: Integer): ICoNonlinearityCorrectionProvider;
begin
  Result := DefaultInterface.getFeatureControllerNonlinearityCorrectionProvider(COM_spectrometerIndex);
end;

function TCCoWrapper.isFeatureSupportedNonlinearityCorrectionProvider(COM_spectrometerIndex: Integer): WordBool;
begin
  Result := DefaultInterface.isFeatureSupportedNonlinearityCorrectionProvider(COM_spectrometerIndex);
end;

function TCCoWrapper.getFeatureControllerStrayLightCorrection(COM_spectrometerIndex: Integer): ICoStrayLightCorrection;
begin
  Result := DefaultInterface.getFeatureControllerStrayLightCorrection(COM_spectrometerIndex);
end;

function TCCoWrapper.isFeatureSupportedStrayLightCorrection(COM_spectrometerIndex: Integer): WordBool;
begin
  Result := DefaultInterface.isFeatureSupportedStrayLightCorrection(COM_spectrometerIndex);
end;

function TCCoWrapper.getFeatureControllerVersion(COM_spectrometerIndex: Integer): ICoVersion;
begin
  Result := DefaultInterface.getFeatureControllerVersion(COM_spectrometerIndex);
end;

function TCCoWrapper.isFeatureSupportedVersion(COM_spectrometerIndex: Integer): WordBool;
begin
  Result := DefaultInterface.isFeatureSupportedVersion(COM_spectrometerIndex);
end;

function TCCoWrapper.getFeatureControllerWavelengthCalibrationProvider(COM_spectrometerIndex: Integer): ICoWavelengthCalibrationProvider;
begin
  Result := DefaultInterface.getFeatureControllerWavelengthCalibrationProvider(COM_spectrometerIndex);
end;

function TCCoWrapper.isFeatureSupportedWavelengthCalibrationProvider(COM_spectrometerIndex: Integer): WordBool;
begin
  Result := DefaultInterface.isFeatureSupportedWavelengthCalibrationProvider(COM_spectrometerIndex);
end;

function TCCoWrapper.getFeatureControllerThermoElectric(COM_spectrometerIndex: Integer): ICoThermoElectric;
begin
  Result := DefaultInterface.getFeatureControllerThermoElectric(COM_spectrometerIndex);
end;

function TCCoWrapper.isFeatureSupportedThermoElectric(COM_spectrometerIndex: Integer): WordBool;
begin
  Result := DefaultInterface.isFeatureSupportedThermoElectric(COM_spectrometerIndex);
end;

procedure TCCoWrapper.setAutoToggleStrobeLampEnable(COM_spectrometerIndex: Integer; 
                                                    COM_enable: WordBool);
begin
  DefaultInterface.setAutoToggleStrobeLampEnable(COM_spectrometerIndex, COM_enable);
end;

procedure TCCoWrapper.setAutoToggleStrobeLampEnableB(COM_spectrometerIndex: Integer; 
                                                     COM_channelIndex: Integer; COM_enable: WordBool);
begin
  DefaultInterface.setAutoToggleStrobeLampEnableB(COM_spectrometerIndex, COM_channelIndex, 
                                                  COM_enable);
end;

procedure TCCoWrapper.highSpdAcq_AllocateBuffer(COM_spectrometerIndex: Integer; 
                                                COM_numberOfSpectra: Integer);
begin
  DefaultInterface.highSpdAcq_AllocateBuffer(COM_spectrometerIndex, COM_numberOfSpectra);
end;

procedure TCCoWrapper.highSpdAcq_StartAcquisition(COM_spectrometerIndex: Integer);
begin
  DefaultInterface.highSpdAcq_StartAcquisition(COM_spectrometerIndex);
end;

procedure TCCoWrapper.highSpdAcq_StartAcquisitionB(COM_spectrometerIndex: Integer; 
                                                   COM_channelIndex: Integer);
begin
  DefaultInterface.highSpdAcq_StartAcquisitionB(COM_spectrometerIndex, COM_channelIndex);
end;

procedure TCCoWrapper.highSpdAcq_StopAcquisition;
begin
  DefaultInterface.highSpdAcq_StopAcquisition;
end;

function TCCoWrapper.highSpdAcq_GetNumberOfSpectraAcquired: Integer;
begin
  Result := DefaultInterface.highSpdAcq_GetNumberOfSpectraAcquired;
end;

function TCCoWrapper.highSpdAcq_GetSpectrum(COM_spectrumNumber: Integer): OleVariant;
begin
  Result := DefaultInterface.highSpdAcq_GetSpectrum(COM_spectrumNumber);
end;

function TCCoWrapper.highSpdAcq_IsSaturated(COM_spectrumNumber: Integer): WordBool;
begin
  Result := DefaultInterface.highSpdAcq_IsSaturated(COM_spectrumNumber);
end;

function TCCoWrapper.highSpdAcq_GetTimeStamp(COM_spectrumNumber: Integer): ICoHighResTimeStamp;
begin
  Result := DefaultInterface.highSpdAcq_GetTimeStamp(COM_spectrumNumber);
end;

function TCCoWrapper.GetOwnedClass: Largeuint;
begin
  Result := DefaultInterface.GetOwnedClass;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TCCoWrapperProperties.Create(AServer: TCCoWrapper);
begin
  inherited Create;
  FServer := AServer;
end;

function TCCoWrapperProperties.GetDefaultInterface: ICoWrapper;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

procedure Register;
begin
  RegisterComponents(dtlServerPage, [TCCoSpectrometerInfo, TCCoCoefficients, TCCoSpectrum, TCCoSpectrometerChannelInfo, 
    TCCoSpectrometerChannel, TCCoSpectrometerChannelCollection, TCCoBench, TCCoDetector, TCCoConfiguration, 
    TCCoSpectrometer, TCCoADC1000Channel, TCCoUSBEndpointDescriptor, TCCoGUIProvider, TCCoGUIProviderCollection, 
    TCCoErrorCode, TCCoOmniDriverDispatchListener, TCCoAcquisitionPropertiesListener, TCCoSpectrometerStatus, TCCoMultiChannelListener, 
    TCCoExternalTriggerMode, TCCoExternalTriggerModeCollection, TCCoCoefficientsCollection, TCCoAcquisitionListener, TCCoADC1000USB, 
    TCCoADC1000USBTest, TCCoAdvancedIntegrationClock, TCCoUSBInterface, TCCoAdvancedIntegrationClockImpl, TCCoAdvancedVersion, 
    TCCoAdvancedVersionImpl, TCCoAdvancedVersionImpl_NIR, TCCoAnalogIn, TCCoAnalogInGUIProvider, TCCoAnalogInImpl, 
    TCCoAnalogOut, TCCoAnalogOutGUIProvider, TCCoAnalogOutImpl, TCCoAnalogOutImpl_ADC1000, TCCoAnalogOutImpl_PSOC, 
    TCCoAutonullingConfiguration, TCCoAutonulling, TCCoAutonullingGUIProvider, TCCoAutonullingImpl, TCCoBadPixelRemoval, 
    TCCoBadPixelRemovalGUIProvider, TCCoBadPixelRemovalImpl, TCCoBaseSpecFunctionality, TCCoBitSet, TCCoBoardTemperature, 
    TCCoBoardTemperatureGUIProvider, TCCoBoardTemperatureImpl, TCCoBoardTemperatureImpl_QE65000, TCCoCCDShutter, TCCoCCDShutterGUIProvider, 
    TCCoLaser, TCCoMMSRamanSpectrometer, TCCoCCDShutterImpl, TCCoCCDTemperature, TCCoCCDTemperatureGUIProvider, 
    TCCoCCDTemperatureImpl, TCCoMMSRamanCalibration, TCCoCalibration, TCCoCalibrationGUIProvider, TCCoCalibrationImpl, 
    TCCoIterator, TCCoCollection, TCCoConfigureFromFile, TCCoContinuousStrobe, TCCoContinuousStrobeGUIProvider, 
    TCCoContinuousStrobeImpl, TCCoContinuousStrobeImpl_ADC1000, TCCoContinuousStrobeImpl_FPGA, TCCoCurrentOut, TCCoCurrentOutGUIProvider, 
    TCCoCurrentOutImpl_LS450, TCCoDeepWellErrorProvider, TCCoDeepWellErrorProviderImpl, TCCoEndpointToPipeMapping, TCCoEnumeration, 
    TCCoErrorProvider, TCCoUSBSpectrometerCollection, TCCoUSBSpectrometer, TCCoExposureImage, TCCoExposureImageGUIProvider, 
    TCCoExposureImageImpl, TCCoSpectrometerExposure, TCCoExposureListener, TCCoIntegrationTimeChangeListener, TCCoExposureImageable, 
    TCCoExternalTemperature, TCCoExternalTemperatureGUIProvider, TCCoLS450Coefficients, TCCoLS450_Functions, TCCoExternalTemperatureImpl_LS450, 
    TCCoExternalTemperatureImpl_LS450_2000, TCCoExternalTemperatureImpl_LS450_4000, TCCoExternalTriggerDelay, TCCoExternalTriggerDelayGUIProvider, TCCoExternalTriggerDelayImpl, 
    TCCoFPGA, TCCoFPGAImpl, TCCoFPGARegisters, TCCoFeatureEvent, TCCoFeatureListener, 
    TCCoFeature, TCCoFeatureProvider, TCCoSpectrometerReconstruction, TCCoLaserCollection, TCCoMMSRaman, 
    TCCoFirmware, TCCoFirmwareGUIProvider, TCCoFirmwareImpl, TCCoGateDelayListener, TCCoFlGated, 
    TCCoFlGatedGUIProvider, TCCoSpectrometerPlugIn, TCCoSpectrometerPlugInCollection, TCCoUSB2000, TCCoFlGatedImpl, 
    TCCoGPIO, TCCoGPIOGUIProvider, TCCoGPIOImpl, TCCoGatingErrorProvider, TCCoGatingErrorProviderImpl, 
    TCCoHR2000, TCCoHR2000Plus, TCCoHR2000PlusStatus, TCCoUSBFeature, TCCoSHACoefficients, 
    TCCoSHAChannel, TCCoHR4000, TCCoHR4000Status, TCCoHardwareTrigger, TCCoHardwareTriggerGUIProvider, 
    TCCoHighGainMode, TCCoHighGainModeGUIProvider, TCCoHighGainModeImpl, TCCoHighResTimeStamp, TCCoHighResTiming, 
    TCCoI2CBus, TCCoI2CBusGUIProvider, TCCoI2CBusImpl, TCCoI2CBusImplFPGA, TCCoI2CBusImplNonFPGA, 
    TCCoI2CBusImpl_SHA, TCCoIrradianceCalibrationFactor, TCCoIrradianceCalibrationFactorGUIProvider, TCCoIrradianceCalibrationFactorImpl, TCCoIrradianceCalibrationFactorImplFPGA, 
    TCCoIrradianceCalibrationFactorImplNonFPGA, TCCoJSocket, TCCoJazNetwork, TCCoJazStatus, TCCoJazUSB, 
    TCCoLS450_FunctionsGUIProvider, TCCoLS450_FunctionsImpl, TCCoLS450_FunctionsImpl_2000, TCCoLS450_FunctionsImpl_4000, TCCoLaserGUIProvider, 
    TCCoLaserProvider, TCCoLaserProviderImpl, TCCoListIterator, TCCoList, TCCoMMSRamanChannel, 
    TCCoMMSRamanConstants, TCCoMasterClockDivisor, TCCoMasterClockDivisorImpl, TCCoMasterClockDivisorListener, TCCoMasterClockRate, 
    TCCoMasterClockRateImpl, TCCoMasterClockRateImpl_2000, TCCoMasterClockRateImpl_ADC, TCCoMasterClockRateImpl_MMSRaman, TCCoMaya2000, 
    TCCoMayaPro2000, TCCoMethodDescriptorCollection, TCCoMultiChannelGUIProvider, TCCoMultiChannelImpl, TCCoMultiChannelImpl_JazNetwork, 
    TCCoMultiChannelImpl_JazUSB, TCCoMultiChannelProvider, TCCoNIR, TCCoNIR256, TCCoNIR512, 
    TCCoNIRStatus, TCCoNetworkSource, TCCoNetworkSourceGUIProvider, TCCoNetworkSpectrometer, TCCoNetworkSourceImpl, 
    TCCoNodeGraphCertificate, TCCoNonlinearityCorrectionGUIProvider, TCCoNonlinearityCorrectionImpl, TCCoNonlinearityCorrectionProvider, TCCoVector, 
    TCCoSpectrumCertificate, TCCoOmniSpectrum, TCCoOpCodes, TCCoPlugInProvider, TCCoPlugInProviderImpl, 
    TCCoPlugInProviderImplFPGA, TCCoPlugInProviderImplNonFPGA, TCCoPollingTest, TCCoQE65000, TCCoRamanExposure, 
    TCCoRamanReconstruction, TCCoRawData, TCCoSAS, TCCoSASChannel, TCCoSHA, 
    TCCoSHAConstants, TCCoSHAGUIProvider, TCCoSHAImpl, TCCoSPIBus, TCCoSPIBusGUIProvider, 
    TCCoSPIBusImpl, TCCoSPIBusImplFPGA, TCCoSPIBusImplNonFPGA, TCCoShutterClock, TCCoShutterClockImpl, 
    TCCoSimulation, TCCoSimulationChannel, TCCoSimulationGUIProvider, TCCoSimulationImpl, TCCoSimulationProvider, 
    TCCoSingleStrobe, TCCoSingleStrobeGUIProvider, TCCoSingleStrobeImpl, TCCoSpectrumListener, TCCoSpectrumProducer, 
    TCCoSpectrumHandler, TCCoSpectralProcessor, TCCoSpectrometerAssembly, TCCoSpectrometerCollection, TCCoSpectrometerFactory, 
    TCCoSpectrometerPlugInInfo, TCCoSpectrumConsumer, TCCoSpectrumProducerBase, TCCoStatus, TCCoStatusGUIProvider, 
    TCCoStatusImpl, TCCoStatusProvider, TCCoStopSpectrum, TCCoStopSpectrumGUIProvider, TCCoStopSpectrumImpl, 
    TCCoStrayLightCorrection, TCCoStrayLightCorrectionGUIProvider, TCCoStrayLightCorrectionImpl, TCCoStringCollection, TCCoSupportStatus, 
    TCCoThermoElectric, TCCoThermoElectricGUIProvider, TCCoThermoElectricImpl, TCCoThermoElectricImpl_NIR, TCCoThermoElectricImpl_QE65000, 
    TCCoThermoElectricShowFanControl, TCCoUSB2000Plus, TCCoUSB2000PlusStatus, TCCoUSB325, TCCoUSB4000, 
    TCCoUSB4000Status, TCCoUSB650, TCCoUSBCommonDescriptor, TCCoUSBConfigurationDescriptor, TCCoUSBConstants, 
    TCCoUSBDeviceDescriptor, TCCoUSBEndpointDevice, TCCoUSBImpl, TCCoUSBInterfaceDescriptor, TCCoUSBLogicalPortStatus, 
    TCCoUSBProductInfo, TCCoUSBStringDescriptor, TCCoUSB_ISS, TCCoUSB_ISS_UV, TCCoUSB_LS450, 
    TCCoUV_VIS_LightSource, TCCoUV_VIS_LightSourceGUIProvider, TCCoUV_VIS_LightSourceImpl, TCCoUV_VIS_LightSourceImpl_2000, TCCoUV_VIS_LightSourceImpl_4000, 
    TCCoUV_VIS_LightSourceJAZCompatible, TCCoUV_VIS_LightSourceImpl_JAZ, TCCoUniUSB, TCCoUniUSBPipeManager, TCCoVersion, 
    TCCoVersionGUIProvider, TCCoVersionImpl, TCCoWavelengthCalibrationGUIProvider, TCCoWavelengthCalibrationImpl, TCCoWavelengthCalibrationImpl_MMSRaman, 
    TCCoWavelengthCalibrationProvider, TCCoWavelengthCalibrationTableModel, TCCoWrapper]);
end;

end.
